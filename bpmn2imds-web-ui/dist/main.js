/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/bpmn-js/dist/bpmn-modeler.development.js":
/*!***************************************************************!*\
  !*** ./node_modules/bpmn-js/dist/bpmn-modeler.development.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * bpmn-js - bpmn-modeler v7.2.1\n *\n * Copyright (c) 2014-present, camunda Services GmbH\n *\n * Released under the bpmn.io license\n * http://bpmn.io/license\n *\n * Source Code: https://github.com/bpmn-io/bpmn-js\n *\n * Date: 2020-08-03\n */\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, function () { 'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar inherits_browser = createCommonjsModule(function (module) {\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor;\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor;\n\t    var TempCtor = function () {};\n\t    TempCtor.prototype = superCtor.prototype;\n\t    ctor.prototype = new TempCtor();\n\t    ctor.prototype.constructor = ctor;\n\t  };\n\t}\n\t});\n\n\tfunction createCommonjsModule$1(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar hat_1 = createCommonjsModule$1(function (module) {\n\tvar hat = module.exports = function (bits, base) {\n\t    if (!base) base = 16;\n\t    if (bits === undefined) bits = 128;\n\t    if (bits <= 0) return '0';\n\t    \n\t    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);\n\t    for (var i = 2; digits === Infinity; i *= 2) {\n\t        digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;\n\t    }\n\t    \n\t    var rem = digits - Math.floor(digits);\n\t    \n\t    var res = '';\n\t    \n\t    for (var i = 0; i < Math.floor(digits); i++) {\n\t        var x = Math.floor(Math.random() * base).toString(base);\n\t        res = x + res;\n\t    }\n\t    \n\t    if (rem) {\n\t        var b = Math.pow(base, rem);\n\t        var x = Math.floor(Math.random() * b).toString(base);\n\t        res = x + res;\n\t    }\n\t    \n\t    var parsed = parseInt(res, base);\n\t    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {\n\t        return hat(bits, base)\n\t    }\n\t    else return res;\n\t};\n\n\that.rack = function (bits, base, expandBy) {\n\t    var fn = function (data) {\n\t        var iters = 0;\n\t        do {\n\t            if (iters ++ > 10) {\n\t                if (expandBy) bits += expandBy;\n\t                else throw new Error('too many ID collisions, use more bits')\n\t            }\n\t            \n\t            var id = hat(bits, base);\n\t        } while (Object.hasOwnProperty.call(hats, id));\n\t        \n\t        hats[id] = data;\n\t        return id;\n\t    };\n\t    var hats = fn.hats = {};\n\t    \n\t    fn.get = function (id) {\n\t        return fn.hats[id];\n\t    };\n\t    \n\t    fn.set = function (id, value) {\n\t        fn.hats[id] = value;\n\t        return fn;\n\t    };\n\t    \n\t    fn.bits = bits || 128;\n\t    fn.base = base || 16;\n\t    return fn;\n\t};\n\t});\n\n\t/**\n\t * Create a new id generator / cache instance.\n\t *\n\t * You may optionally provide a seed that is used internally.\n\t *\n\t * @param {Seed} seed\n\t */\n\n\tfunction Ids(seed) {\n\t  if (!(this instanceof Ids)) {\n\t    return new Ids(seed);\n\t  }\n\n\t  seed = seed || [128, 36, 1];\n\t  this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;\n\t}\n\t/**\n\t * Generate a next id.\n\t *\n\t * @param {Object} [element] element to bind the id to\n\t *\n\t * @return {String} id\n\t */\n\n\tIds.prototype.next = function (element) {\n\t  return this._seed(element || true);\n\t};\n\t/**\n\t * Generate a next id with a given prefix.\n\t *\n\t * @param {Object} [element] element to bind the id to\n\t *\n\t * @return {String} id\n\t */\n\n\n\tIds.prototype.nextPrefixed = function (prefix, element) {\n\t  var id;\n\n\t  do {\n\t    id = prefix + this.next(true);\n\t  } while (this.assigned(id)); // claim {prefix}{random}\n\n\n\t  this.claim(id, element); // return\n\n\t  return id;\n\t};\n\t/**\n\t * Manually claim an existing id.\n\t *\n\t * @param {String} id\n\t * @param {String} [element] element the id is claimed by\n\t */\n\n\n\tIds.prototype.claim = function (id, element) {\n\t  this._seed.set(id, element || true);\n\t};\n\t/**\n\t * Returns true if the given id has already been assigned.\n\t *\n\t * @param  {String} id\n\t * @return {Boolean}\n\t */\n\n\n\tIds.prototype.assigned = function (id) {\n\t  return this._seed.get(id) || false;\n\t};\n\t/**\n\t * Unclaim an id.\n\t *\n\t * @param  {String} id the id to unclaim\n\t */\n\n\n\tIds.prototype.unclaim = function (id) {\n\t  delete this._seed.hats[id];\n\t};\n\t/**\n\t * Clear all claimed ids.\n\t */\n\n\n\tIds.prototype.clear = function () {\n\t  var hats = this._seed.hats,\n\t      id;\n\n\t  for (id in hats) {\n\t    this.unclaim(id);\n\t  }\n\t};\n\n\t/**\n\t * Flatten array, one level deep.\n\t *\n\t * @param {Array<?>} arr\n\t *\n\t * @return {Array<?>}\n\t */\n\tfunction flatten(arr) {\n\t  return Array.prototype.concat.apply([], arr);\n\t}\n\n\tvar nativeToString = Object.prototype.toString;\n\tvar nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\tfunction isUndefined(obj) {\n\t  return obj === undefined;\n\t}\n\tfunction isDefined(obj) {\n\t  return obj !== undefined;\n\t}\n\tfunction isNil(obj) {\n\t  return obj == null;\n\t}\n\tfunction isArray(obj) {\n\t  return nativeToString.call(obj) === '[object Array]';\n\t}\n\tfunction isObject(obj) {\n\t  return nativeToString.call(obj) === '[object Object]';\n\t}\n\tfunction isNumber(obj) {\n\t  return nativeToString.call(obj) === '[object Number]';\n\t}\n\tfunction isFunction(obj) {\n\t  var tag = nativeToString.call(obj);\n\t  return tag === '[object Function]' || tag === '[object AsyncFunction]' || tag === '[object GeneratorFunction]' || tag === '[object AsyncGeneratorFunction]' || tag === '[object Proxy]';\n\t}\n\tfunction isString(obj) {\n\t  return nativeToString.call(obj) === '[object String]';\n\t}\n\t/**\n\t * Ensure collection is an array.\n\t *\n\t * @param {Object} obj\n\t */\n\n\tfunction ensureArray(obj) {\n\t  if (isArray(obj)) {\n\t    return;\n\t  }\n\n\t  throw new Error('must supply array');\n\t}\n\t/**\n\t * Return true, if target owns a property with the given key.\n\t *\n\t * @param {Object} target\n\t * @param {String} key\n\t *\n\t * @return {Boolean}\n\t */\n\n\tfunction has(target, key) {\n\t  return nativeHasOwnProperty.call(target, key);\n\t}\n\n\t/**\n\t * Find element in collection.\n\t *\n\t * @param  {Array|Object} collection\n\t * @param  {Function|Object} matcher\n\t *\n\t * @return {Object}\n\t */\n\n\tfunction find(collection, matcher) {\n\t  matcher = toMatcher(matcher);\n\t  var match;\n\t  forEach(collection, function (val, key) {\n\t    if (matcher(val, key)) {\n\t      match = val;\n\t      return false;\n\t    }\n\t  });\n\t  return match;\n\t}\n\t/**\n\t * Find element index in collection.\n\t *\n\t * @param  {Array|Object} collection\n\t * @param  {Function} matcher\n\t *\n\t * @return {Object}\n\t */\n\n\tfunction findIndex(collection, matcher) {\n\t  matcher = toMatcher(matcher);\n\t  var idx = isArray(collection) ? -1 : undefined;\n\t  forEach(collection, function (val, key) {\n\t    if (matcher(val, key)) {\n\t      idx = key;\n\t      return false;\n\t    }\n\t  });\n\t  return idx;\n\t}\n\t/**\n\t * Find element in collection.\n\t *\n\t * @param  {Array|Object} collection\n\t * @param  {Function} matcher\n\t *\n\t * @return {Array} result\n\t */\n\n\tfunction filter(collection, matcher) {\n\t  var result = [];\n\t  forEach(collection, function (val, key) {\n\t    if (matcher(val, key)) {\n\t      result.push(val);\n\t    }\n\t  });\n\t  return result;\n\t}\n\t/**\n\t * Iterate over collection; returning something\n\t * (non-undefined) will stop iteration.\n\t *\n\t * @param  {Array|Object} collection\n\t * @param  {Function} iterator\n\t *\n\t * @return {Object} return result that stopped the iteration\n\t */\n\n\tfunction forEach(collection, iterator) {\n\t  var val, result;\n\n\t  if (isUndefined(collection)) {\n\t    return;\n\t  }\n\n\t  var convertKey = isArray(collection) ? toNum : identity;\n\n\t  for (var key in collection) {\n\t    if (has(collection, key)) {\n\t      val = collection[key];\n\t      result = iterator(val, convertKey(key));\n\n\t      if (result === false) {\n\t        return val;\n\t      }\n\t    }\n\t  }\n\t}\n\t/**\n\t * Return collection without element.\n\t *\n\t * @param  {Array} arr\n\t * @param  {Function} matcher\n\t *\n\t * @return {Array}\n\t */\n\n\tfunction without(arr, matcher) {\n\t  if (isUndefined(arr)) {\n\t    return [];\n\t  }\n\n\t  ensureArray(arr);\n\t  matcher = toMatcher(matcher);\n\t  return arr.filter(function (el, idx) {\n\t    return !matcher(el, idx);\n\t  });\n\t}\n\t/**\n\t * Reduce collection, returning a single result.\n\t *\n\t * @param  {Object|Array} collection\n\t * @param  {Function} iterator\n\t * @param  {Any} result\n\t *\n\t * @return {Any} result returned from last iterator\n\t */\n\n\tfunction reduce(collection, iterator, result) {\n\t  forEach(collection, function (value, idx) {\n\t    result = iterator(result, value, idx);\n\t  });\n\t  return result;\n\t}\n\t/**\n\t * Return true if every element in the collection\n\t * matches the criteria.\n\t *\n\t * @param  {Object|Array} collection\n\t * @param  {Function} matcher\n\t *\n\t * @return {Boolean}\n\t */\n\n\tfunction every(collection, matcher) {\n\t  return !!reduce(collection, function (matches, val, key) {\n\t    return matches && matcher(val, key);\n\t  }, true);\n\t}\n\t/**\n\t * Return true if some elements in the collection\n\t * match the criteria.\n\t *\n\t * @param  {Object|Array} collection\n\t * @param  {Function} matcher\n\t *\n\t * @return {Boolean}\n\t */\n\n\tfunction some(collection, matcher) {\n\t  return !!find(collection, matcher);\n\t}\n\t/**\n\t * Transform a collection into another collection\n\t * by piping each member through the given fn.\n\t *\n\t * @param  {Object|Array}   collection\n\t * @param  {Function} fn\n\t *\n\t * @return {Array} transformed collection\n\t */\n\n\tfunction map(collection, fn) {\n\t  var result = [];\n\t  forEach(collection, function (val, key) {\n\t    result.push(fn(val, key));\n\t  });\n\t  return result;\n\t}\n\t/**\n\t * Get the collections keys.\n\t *\n\t * @param  {Object|Array} collection\n\t *\n\t * @return {Array}\n\t */\n\n\tfunction keys(collection) {\n\t  return collection && Object.keys(collection) || [];\n\t}\n\t/**\n\t * Shorthand for `keys(o).length`.\n\t *\n\t * @param  {Object|Array} collection\n\t *\n\t * @return {Number}\n\t */\n\n\tfunction size(collection) {\n\t  return keys(collection).length;\n\t}\n\t/**\n\t * Get the values in the collection.\n\t *\n\t * @param  {Object|Array} collection\n\t *\n\t * @return {Array}\n\t */\n\n\tfunction values(collection) {\n\t  return map(collection, function (val) {\n\t    return val;\n\t  });\n\t}\n\t/**\n\t * Group collection members by attribute.\n\t *\n\t * @param  {Object|Array} collection\n\t * @param  {Function} extractor\n\t *\n\t * @return {Object} map with { attrValue => [ a, b, c ] }\n\t */\n\n\tfunction groupBy(collection, extractor) {\n\t  var grouped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t  extractor = toExtractor(extractor);\n\t  forEach(collection, function (val) {\n\t    var discriminator = extractor(val) || '_';\n\t    var group = grouped[discriminator];\n\n\t    if (!group) {\n\t      group = grouped[discriminator] = [];\n\t    }\n\n\t    group.push(val);\n\t  });\n\t  return grouped;\n\t}\n\tfunction uniqueBy(extractor) {\n\t  extractor = toExtractor(extractor);\n\t  var grouped = {};\n\n\t  for (var _len = arguments.length, collections = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    collections[_key - 1] = arguments[_key];\n\t  }\n\n\t  forEach(collections, function (c) {\n\t    return groupBy(c, extractor, grouped);\n\t  });\n\t  var result = map(grouped, function (val, key) {\n\t    return val[0];\n\t  });\n\t  return result;\n\t}\n\tvar unionBy = uniqueBy;\n\t/**\n\t * Sort collection by criteria.\n\t *\n\t * @param  {Object|Array} collection\n\t * @param  {String|Function} extractor\n\t *\n\t * @return {Array}\n\t */\n\n\tfunction sortBy(collection, extractor) {\n\t  extractor = toExtractor(extractor);\n\t  var sorted = [];\n\t  forEach(collection, function (value, key) {\n\t    var disc = extractor(value, key);\n\t    var entry = {\n\t      d: disc,\n\t      v: value\n\t    };\n\n\t    for (var idx = 0; idx < sorted.length; idx++) {\n\t      var d = sorted[idx].d;\n\n\t      if (disc < d) {\n\t        sorted.splice(idx, 0, entry);\n\t        return;\n\t      }\n\t    } // not inserted, append (!)\n\n\n\t    sorted.push(entry);\n\t  });\n\t  return map(sorted, function (e) {\n\t    return e.v;\n\t  });\n\t}\n\t/**\n\t * Create an object pattern matcher.\n\t *\n\t * @example\n\t *\n\t * const matcher = matchPattern({ id: 1 });\n\t *\n\t * var element = find(elements, matcher);\n\t *\n\t * @param  {Object} pattern\n\t *\n\t * @return {Function} matcherFn\n\t */\n\n\tfunction matchPattern(pattern) {\n\t  return function (el) {\n\t    return every(pattern, function (val, key) {\n\t      return el[key] === val;\n\t    });\n\t  };\n\t}\n\n\tfunction toExtractor(extractor) {\n\t  return isFunction(extractor) ? extractor : function (e) {\n\t    return e[extractor];\n\t  };\n\t}\n\n\tfunction toMatcher(matcher) {\n\t  return isFunction(matcher) ? matcher : function (e) {\n\t    return e === matcher;\n\t  };\n\t}\n\n\tfunction identity(arg) {\n\t  return arg;\n\t}\n\n\tfunction toNum(arg) {\n\t  return Number(arg);\n\t}\n\n\t/**\n\t * Debounce fn, calling it only once if\n\t * the given time elapsed between calls.\n\t *\n\t * @param  {Function} fn\n\t * @param  {Number} timeout\n\t *\n\t * @return {Function} debounced function\n\t */\n\tfunction debounce(fn, timeout) {\n\t  var timer;\n\t  var lastArgs;\n\t  var lastThis;\n\t  var lastNow;\n\n\t  function fire() {\n\t    var now = Date.now();\n\t    var scheduledDiff = lastNow + timeout - now;\n\n\t    if (scheduledDiff > 0) {\n\t      return schedule(scheduledDiff);\n\t    }\n\n\t    fn.apply(lastThis, lastArgs);\n\t    timer = lastNow = lastArgs = lastThis = undefined;\n\t  }\n\n\t  function schedule(timeout) {\n\t    timer = setTimeout(fire, timeout);\n\t  }\n\n\t  return function () {\n\t    lastNow = Date.now();\n\n\t    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    lastArgs = args;\n\t    lastThis = this; // ensure an execution is scheduled\n\n\t    if (!timer) {\n\t      schedule(timeout);\n\t    }\n\t  };\n\t}\n\t/**\n\t * Bind function against target <this>.\n\t *\n\t * @param  {Function} fn\n\t * @param  {Object}   target\n\t *\n\t * @return {Function} bound function\n\t */\n\n\tfunction bind(fn, target) {\n\t  return fn.bind(target);\n\t}\n\n\tfunction _extends() {\n\t  _extends = Object.assign || function (target) {\n\t    for (var i = 1; i < arguments.length; i++) {\n\t      var source = arguments[i];\n\n\t      for (var key in source) {\n\t        if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t          target[key] = source[key];\n\t        }\n\t      }\n\t    }\n\n\t    return target;\n\t  };\n\n\t  return _extends.apply(this, arguments);\n\t}\n\n\t/**\n\t * Convenience wrapper for `Object.assign`.\n\t *\n\t * @param {Object} target\n\t * @param {...Object} others\n\t *\n\t * @return {Object} the target\n\t */\n\n\tfunction assign(target) {\n\t  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    others[_key - 1] = arguments[_key];\n\t  }\n\n\t  return _extends.apply(void 0, [target].concat(others));\n\t}\n\t/**\n\t * Pick given properties from the target object.\n\t *\n\t * @param {Object} target\n\t * @param {Array} properties\n\t *\n\t * @return {Object} target\n\t */\n\n\tfunction pick(target, properties) {\n\t  var result = {};\n\t  var obj = Object(target);\n\t  forEach(properties, function (prop) {\n\t    if (prop in obj) {\n\t      result[prop] = target[prop];\n\t    }\n\t  });\n\t  return result;\n\t}\n\t/**\n\t * Pick all target properties, excluding the given ones.\n\t *\n\t * @param {Object} target\n\t * @param {Array} properties\n\t *\n\t * @return {Object} target\n\t */\n\n\tfunction omit(target, properties) {\n\t  var result = {};\n\t  var obj = Object(target);\n\t  forEach(obj, function (prop, key) {\n\t    if (properties.indexOf(key) === -1) {\n\t      result[key] = prop;\n\t    }\n\t  });\n\t  return result;\n\t}\n\n\t/**\n\t * Set attribute `name` to `val`, or get attr `name`.\n\t *\n\t * @param {Element} el\n\t * @param {String} name\n\t * @param {String} [val]\n\t * @api public\n\t */\n\tfunction attr(el, name, val) {\n\t  // get\n\t  if (arguments.length == 2) {\n\t    return el.getAttribute(name);\n\t  }\n\n\t  // remove\n\t  if (val === null) {\n\t    return el.removeAttribute(name);\n\t  }\n\n\t  // set\n\t  el.setAttribute(name, val);\n\n\t  return el;\n\t}\n\n\tvar indexOf = [].indexOf;\n\n\tvar indexof = function(arr, obj){\n\t  if (indexOf) return arr.indexOf(obj);\n\t  for (var i = 0; i < arr.length; ++i) {\n\t    if (arr[i] === obj) return i;\n\t  }\n\t  return -1;\n\t};\n\n\t/**\n\t * Taken from https://github.com/component/classes\n\t *\n\t * Without the component bits.\n\t */\n\n\t/**\n\t * Whitespace regexp.\n\t */\n\n\tvar re = /\\s+/;\n\n\t/**\n\t * toString reference.\n\t */\n\n\tvar toString = Object.prototype.toString;\n\n\t/**\n\t * Wrap `el` in a `ClassList`.\n\t *\n\t * @param {Element} el\n\t * @return {ClassList}\n\t * @api public\n\t */\n\n\tfunction classes(el) {\n\t  return new ClassList(el);\n\t}\n\n\t/**\n\t * Initialize a new ClassList for `el`.\n\t *\n\t * @param {Element} el\n\t * @api private\n\t */\n\n\tfunction ClassList(el) {\n\t  if (!el || !el.nodeType) {\n\t    throw new Error('A DOM element reference is required');\n\t  }\n\t  this.el = el;\n\t  this.list = el.classList;\n\t}\n\n\t/**\n\t * Add class `name` if not already present.\n\t *\n\t * @param {String} name\n\t * @return {ClassList}\n\t * @api public\n\t */\n\n\tClassList.prototype.add = function (name) {\n\t  // classList\n\t  if (this.list) {\n\t    this.list.add(name);\n\t    return this;\n\t  }\n\n\t  // fallback\n\t  var arr = this.array();\n\t  var i = indexof(arr, name);\n\t  if (!~i) arr.push(name);\n\t  this.el.className = arr.join(' ');\n\t  return this;\n\t};\n\n\t/**\n\t * Remove class `name` when present, or\n\t * pass a regular expression to remove\n\t * any which match.\n\t *\n\t * @param {String|RegExp} name\n\t * @return {ClassList}\n\t * @api public\n\t */\n\n\tClassList.prototype.remove = function (name) {\n\t  if ('[object RegExp]' == toString.call(name)) {\n\t    return this.removeMatching(name);\n\t  }\n\n\t  // classList\n\t  if (this.list) {\n\t    this.list.remove(name);\n\t    return this;\n\t  }\n\n\t  // fallback\n\t  var arr = this.array();\n\t  var i = indexof(arr, name);\n\t  if (~i) arr.splice(i, 1);\n\t  this.el.className = arr.join(' ');\n\t  return this;\n\t};\n\n\t/**\n\t * Remove all classes matching `re`.\n\t *\n\t * @param {RegExp} re\n\t * @return {ClassList}\n\t * @api private\n\t */\n\n\tClassList.prototype.removeMatching = function (re) {\n\t  var arr = this.array();\n\t  for (var i = 0; i < arr.length; i++) {\n\t    if (re.test(arr[i])) {\n\t      this.remove(arr[i]);\n\t    }\n\t  }\n\t  return this;\n\t};\n\n\t/**\n\t * Toggle class `name`, can force state via `force`.\n\t *\n\t * For browsers that support classList, but do not support `force` yet,\n\t * the mistake will be detected and corrected.\n\t *\n\t * @param {String} name\n\t * @param {Boolean} force\n\t * @return {ClassList}\n\t * @api public\n\t */\n\n\tClassList.prototype.toggle = function (name, force) {\n\t  // classList\n\t  if (this.list) {\n\t    if ('undefined' !== typeof force) {\n\t      if (force !== this.list.toggle(name, force)) {\n\t        this.list.toggle(name); // toggle again to correct\n\t      }\n\t    } else {\n\t      this.list.toggle(name);\n\t    }\n\t    return this;\n\t  }\n\n\t  // fallback\n\t  if ('undefined' !== typeof force) {\n\t    if (!force) {\n\t      this.remove(name);\n\t    } else {\n\t      this.add(name);\n\t    }\n\t  } else {\n\t    if (this.has(name)) {\n\t      this.remove(name);\n\t    } else {\n\t      this.add(name);\n\t    }\n\t  }\n\n\t  return this;\n\t};\n\n\t/**\n\t * Return an array of classes.\n\t *\n\t * @return {Array}\n\t * @api public\n\t */\n\n\tClassList.prototype.array = function () {\n\t  var className = this.el.getAttribute('class') || '';\n\t  var str = className.replace(/^\\s+|\\s+$/g, '');\n\t  var arr = str.split(re);\n\t  if ('' === arr[0]) arr.shift();\n\t  return arr;\n\t};\n\n\t/**\n\t * Check if class `name` is present.\n\t *\n\t * @param {String} name\n\t * @return {ClassList}\n\t * @api public\n\t */\n\n\tClassList.prototype.has = ClassList.prototype.contains = function (name) {\n\t  return this.list ? this.list.contains(name) : !!~indexof(this.array(), name);\n\t};\n\n\t/**\n\t * Remove all children from the given element.\n\t */\n\tfunction clear(el) {\n\n\t  var c;\n\n\t  while (el.childNodes.length) {\n\t    c = el.childNodes[0];\n\t    el.removeChild(c);\n\t  }\n\n\t  return el;\n\t}\n\n\tvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\n\tvar vendor = proto.matches\n\t  || proto.matchesSelector\n\t  || proto.webkitMatchesSelector\n\t  || proto.mozMatchesSelector\n\t  || proto.msMatchesSelector\n\t  || proto.oMatchesSelector;\n\n\tvar matchesSelector = match;\n\n\t/**\n\t * Match `el` to `selector`.\n\t *\n\t * @param {Element} el\n\t * @param {String} selector\n\t * @return {Boolean}\n\t * @api public\n\t */\n\n\tfunction match(el, selector) {\n\t  if (!el || el.nodeType !== 1) return false;\n\t  if (vendor) return vendor.call(el, selector);\n\t  var nodes = el.parentNode.querySelectorAll(selector);\n\t  for (var i = 0; i < nodes.length; i++) {\n\t    if (nodes[i] == el) return true;\n\t  }\n\t  return false;\n\t}\n\n\t/**\n\t * Closest\n\t *\n\t * @param {Element} el\n\t * @param {String} selector\n\t * @param {Boolean} checkYourSelf (optional)\n\t */\n\tfunction closest (element, selector, checkYourSelf) {\n\t  var currentElem = checkYourSelf ? element : element.parentNode;\n\n\t  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {\n\n\t    if (matchesSelector(currentElem, selector)) {\n\t      return currentElem;\n\t    }\n\n\t    currentElem = currentElem.parentNode;\n\t  }\n\n\t  return matchesSelector(currentElem, selector) ? currentElem : null;\n\t}\n\n\t/**\r\n\t * Element prototype.\r\n\t */\r\n\r\n\tvar proto$1 = Element.prototype;\r\n\r\n\t/**\r\n\t * Vendor function.\r\n\t */\r\n\r\n\tvar vendor$1 = proto$1.matchesSelector\r\n\t  || proto$1.webkitMatchesSelector\r\n\t  || proto$1.mozMatchesSelector\r\n\t  || proto$1.msMatchesSelector\r\n\t  || proto$1.oMatchesSelector;\r\n\r\n\t/**\r\n\t * Expose `match()`.\r\n\t */\r\n\r\n\tvar matchesSelector$1 = match$1;\r\n\r\n\t/**\r\n\t * Match `el` to `selector`.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} selector\r\n\t * @return {Boolean}\r\n\t * @api public\r\n\t */\r\n\r\n\tfunction match$1(el, selector) {\r\n\t  if (vendor$1) return vendor$1.call(el, selector);\r\n\t  var nodes = el.parentNode.querySelectorAll(selector);\r\n\t  for (var i = 0; i < nodes.length; ++i) {\r\n\t    if (nodes[i] == el) return true;\r\n\t  }\r\n\t  return false;\r\n\t}\n\n\tvar closest$1 = function (element, selector, checkYoSelf) {\r\n\t  var parent = checkYoSelf ? element : element.parentNode;\r\n\r\n\t  while (parent && parent !== document) {\r\n\t    if (matchesSelector$1(parent, selector)) return parent;\r\n\t    parent = parent.parentNode;\r\n\t  }\r\n\t};\n\n\tvar bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent',\n\t    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n\t    prefix = bind$1 !== 'addEventListener' ? 'on' : '';\n\n\t/**\n\t * Bind `el` event `type` to `fn`.\n\t *\n\t * @param {Element} el\n\t * @param {String} type\n\t * @param {Function} fn\n\t * @param {Boolean} capture\n\t * @return {Function}\n\t * @api public\n\t */\n\n\tvar bind_1 = function(el, type, fn, capture){\n\t  el[bind$1](prefix + type, fn, capture || false);\n\t  return fn;\n\t};\n\n\t/**\n\t * Unbind `el` event `type`'s callback `fn`.\n\t *\n\t * @param {Element} el\n\t * @param {String} type\n\t * @param {Function} fn\n\t * @param {Boolean} capture\n\t * @return {Function}\n\t * @api public\n\t */\n\n\tvar unbind_1 = function(el, type, fn, capture){\n\t  el[unbind](prefix + type, fn, capture || false);\n\t  return fn;\n\t};\n\n\tvar componentEvent = {\n\t\tbind: bind_1,\n\t\tunbind: unbind_1\n\t};\n\n\t/**\n\t * Module dependencies.\n\t */\n\n\n\n\t/**\n\t * Delegate event `type` to `selector`\n\t * and invoke `fn(e)`. A callback function\n\t * is returned which may be passed to `.unbind()`.\n\t *\n\t * @param {Element} el\n\t * @param {String} selector\n\t * @param {String} type\n\t * @param {Function} fn\n\t * @param {Boolean} capture\n\t * @return {Function}\n\t * @api public\n\t */\n\n\t// Some events don't bubble, so we want to bind to the capture phase instead\n\t// when delegating.\n\tvar forceCaptureEvents = ['focus', 'blur'];\n\n\tvar bind$1$1 = function(el, selector, type, fn, capture){\n\t  if (forceCaptureEvents.indexOf(type) !== -1) capture = true;\n\n\t  return componentEvent.bind(el, type, function(e){\n\t    var target = e.target || e.srcElement;\n\t    e.delegateTarget = closest$1(target, selector, true);\n\t    if (e.delegateTarget) fn.call(el, e);\n\t  }, capture);\n\t};\n\n\t/**\n\t * Unbind event `type`'s callback `fn`.\n\t *\n\t * @param {Element} el\n\t * @param {String} type\n\t * @param {Function} fn\n\t * @param {Boolean} capture\n\t * @api public\n\t */\n\n\tvar unbind$1 = function(el, type, fn, capture){\n\t  if (forceCaptureEvents.indexOf(type) !== -1) capture = true;\n\n\t  componentEvent.unbind(el, type, fn, capture);\n\t};\n\n\tvar delegateEvents = {\n\t\tbind: bind$1$1,\n\t\tunbind: unbind$1\n\t};\n\n\t/**\n\t * Expose `parse`.\n\t */\n\n\tvar domify = parse;\n\n\t/**\n\t * Tests for browser support.\n\t */\n\n\tvar innerHTMLBug = false;\n\tvar bugTestDiv;\n\tif (typeof document !== 'undefined') {\n\t  bugTestDiv = document.createElement('div');\n\t  // Setup\n\t  bugTestDiv.innerHTML = '  <link/><table></table><a href=\"/a\">a</a><input type=\"checkbox\"/>';\n\t  // Make sure that link elements get serialized correctly by innerHTML\n\t  // This requires a wrapper element in IE\n\t  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;\n\t  bugTestDiv = undefined;\n\t}\n\n\t/**\n\t * Wrap map from jquery.\n\t */\n\n\tvar map$1 = {\n\t  legend: [1, '<fieldset>', '</fieldset>'],\n\t  tr: [2, '<table><tbody>', '</tbody></table>'],\n\t  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n\t  // for script/link/style tags to work in IE6-8, you have to wrap\n\t  // in a div with a non-whitespace character in front, ha!\n\t  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']\n\t};\n\n\tmap$1.td =\n\tmap$1.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\n\tmap$1.option =\n\tmap$1.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\n\tmap$1.thead =\n\tmap$1.tbody =\n\tmap$1.colgroup =\n\tmap$1.caption =\n\tmap$1.tfoot = [1, '<table>', '</table>'];\n\n\tmap$1.polyline =\n\tmap$1.ellipse =\n\tmap$1.polygon =\n\tmap$1.circle =\n\tmap$1.text =\n\tmap$1.line =\n\tmap$1.path =\n\tmap$1.rect =\n\tmap$1.g = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">','</svg>'];\n\n\t/**\n\t * Parse `html` and return a DOM Node instance, which could be a TextNode,\n\t * HTML DOM Node of some kind (<div> for example), or a DocumentFragment\n\t * instance, depending on the contents of the `html` string.\n\t *\n\t * @param {String} html - HTML string to \"domify\"\n\t * @param {Document} doc - The `document` instance to create the Node for\n\t * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance\n\t * @api private\n\t */\n\n\tfunction parse(html, doc) {\n\t  if ('string' != typeof html) throw new TypeError('String expected');\n\n\t  // default to the global `document` object\n\t  if (!doc) doc = document;\n\n\t  // tag name\n\t  var m = /<([\\w:]+)/.exec(html);\n\t  if (!m) return doc.createTextNode(html);\n\n\t  html = html.replace(/^\\s+|\\s+$/g, ''); // Remove leading/trailing whitespace\n\n\t  var tag = m[1];\n\n\t  // body support\n\t  if (tag == 'body') {\n\t    var el = doc.createElement('html');\n\t    el.innerHTML = html;\n\t    return el.removeChild(el.lastChild);\n\t  }\n\n\t  // wrap map\n\t  var wrap = map$1[tag] || map$1._default;\n\t  var depth = wrap[0];\n\t  var prefix = wrap[1];\n\t  var suffix = wrap[2];\n\t  var el = doc.createElement('div');\n\t  el.innerHTML = prefix + html + suffix;\n\t  while (depth--) el = el.lastChild;\n\n\t  // one element\n\t  if (el.firstChild == el.lastChild) {\n\t    return el.removeChild(el.firstChild);\n\t  }\n\n\t  // several elements\n\t  var fragment = doc.createDocumentFragment();\n\t  while (el.firstChild) {\n\t    fragment.appendChild(el.removeChild(el.firstChild));\n\t  }\n\n\t  return fragment;\n\t}\n\n\tfunction query(selector, el) {\n\t  el = el || document;\n\n\t  return el.querySelector(selector);\n\t}\n\n\tfunction all(selector, el) {\n\t  el = el || document;\n\n\t  return el.querySelectorAll(selector);\n\t}\n\n\tfunction remove(el) {\n\t  el.parentNode && el.parentNode.removeChild(el);\n\t}\n\n\tfunction ensureImported(element, target) {\n\n\t  if (element.ownerDocument !== target.ownerDocument) {\n\t    try {\n\t      // may fail on webkit\n\t      return target.ownerDocument.importNode(element, true);\n\t    } catch (e) {\n\t      // ignore\n\t    }\n\t  }\n\n\t  return element;\n\t}\n\n\t/**\n\t * appendTo utility\n\t */\n\n\t/**\n\t * Append a node to a target element and return the appended node.\n\t *\n\t * @param  {SVGElement} element\n\t * @param  {SVGElement} target\n\t *\n\t * @return {SVGElement} the appended node\n\t */\n\tfunction appendTo(element, target) {\n\t  return target.appendChild(ensureImported(element, target));\n\t}\n\n\t/**\n\t * append utility\n\t */\n\n\t/**\n\t * Append a node to an element\n\t *\n\t * @param  {SVGElement} element\n\t * @param  {SVGElement} node\n\t *\n\t * @return {SVGElement} the element\n\t */\n\tfunction append(target, node) {\n\t  appendTo(node, target);\n\t  return target;\n\t}\n\n\t/**\n\t * attribute accessor utility\n\t */\n\n\tvar LENGTH_ATTR = 2;\n\n\tvar CSS_PROPERTIES = {\n\t  'alignment-baseline': 1,\n\t  'baseline-shift': 1,\n\t  'clip': 1,\n\t  'clip-path': 1,\n\t  'clip-rule': 1,\n\t  'color': 1,\n\t  'color-interpolation': 1,\n\t  'color-interpolation-filters': 1,\n\t  'color-profile': 1,\n\t  'color-rendering': 1,\n\t  'cursor': 1,\n\t  'direction': 1,\n\t  'display': 1,\n\t  'dominant-baseline': 1,\n\t  'enable-background': 1,\n\t  'fill': 1,\n\t  'fill-opacity': 1,\n\t  'fill-rule': 1,\n\t  'filter': 1,\n\t  'flood-color': 1,\n\t  'flood-opacity': 1,\n\t  'font': 1,\n\t  'font-family': 1,\n\t  'font-size': LENGTH_ATTR,\n\t  'font-size-adjust': 1,\n\t  'font-stretch': 1,\n\t  'font-style': 1,\n\t  'font-variant': 1,\n\t  'font-weight': 1,\n\t  'glyph-orientation-horizontal': 1,\n\t  'glyph-orientation-vertical': 1,\n\t  'image-rendering': 1,\n\t  'kerning': 1,\n\t  'letter-spacing': 1,\n\t  'lighting-color': 1,\n\t  'marker': 1,\n\t  'marker-end': 1,\n\t  'marker-mid': 1,\n\t  'marker-start': 1,\n\t  'mask': 1,\n\t  'opacity': 1,\n\t  'overflow': 1,\n\t  'pointer-events': 1,\n\t  'shape-rendering': 1,\n\t  'stop-color': 1,\n\t  'stop-opacity': 1,\n\t  'stroke': 1,\n\t  'stroke-dasharray': 1,\n\t  'stroke-dashoffset': 1,\n\t  'stroke-linecap': 1,\n\t  'stroke-linejoin': 1,\n\t  'stroke-miterlimit': 1,\n\t  'stroke-opacity': 1,\n\t  'stroke-width': LENGTH_ATTR,\n\t  'text-anchor': 1,\n\t  'text-decoration': 1,\n\t  'text-rendering': 1,\n\t  'unicode-bidi': 1,\n\t  'visibility': 1,\n\t  'word-spacing': 1,\n\t  'writing-mode': 1\n\t};\n\n\n\tfunction getAttribute(node, name) {\n\t  if (CSS_PROPERTIES[name]) {\n\t    return node.style[name];\n\t  } else {\n\t    return node.getAttributeNS(null, name);\n\t  }\n\t}\n\n\tfunction setAttribute(node, name, value) {\n\t  var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n\t  var type = CSS_PROPERTIES[hyphenated];\n\n\t  if (type) {\n\t    // append pixel unit, unless present\n\t    if (type === LENGTH_ATTR && typeof value === 'number') {\n\t      value = String(value) + 'px';\n\t    }\n\n\t    node.style[hyphenated] = value;\n\t  } else {\n\t    node.setAttributeNS(null, name, value);\n\t  }\n\t}\n\n\tfunction setAttributes(node, attrs) {\n\n\t  var names = Object.keys(attrs), i, name;\n\n\t  for (i = 0, name; (name = names[i]); i++) {\n\t    setAttribute(node, name, attrs[name]);\n\t  }\n\t}\n\n\t/**\n\t * Gets or sets raw attributes on a node.\n\t *\n\t * @param  {SVGElement} node\n\t * @param  {Object} [attrs]\n\t * @param  {String} [name]\n\t * @param  {String} [value]\n\t *\n\t * @return {String}\n\t */\n\tfunction attr$1(node, name, value) {\n\t  if (typeof name === 'string') {\n\t    if (value !== undefined) {\n\t      setAttribute(node, name, value);\n\t    } else {\n\t      return getAttribute(node, name);\n\t    }\n\t  } else {\n\t    setAttributes(node, name);\n\t  }\n\n\t  return node;\n\t}\n\n\t/**\r\n\t * Clear utility\r\n\t */\r\n\tfunction index(arr, obj) {\r\n\t  if (arr.indexOf) {\r\n\t    return arr.indexOf(obj);\r\n\t  }\r\n\r\n\r\n\t  for (var i = 0; i < arr.length; ++i) {\r\n\t    if (arr[i] === obj) {\r\n\t      return i;\r\n\t    }\r\n\t  }\r\n\r\n\t  return -1;\r\n\t}\r\n\r\n\tvar re$1 = /\\s+/;\r\n\r\n\tvar toString$1 = Object.prototype.toString;\r\n\r\n\tfunction defined(o) {\r\n\t  return typeof o !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Wrap `el` in a `ClassList`.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @return {ClassList}\r\n\t * @api public\r\n\t */\r\n\r\n\tfunction classes$1(el) {\r\n\t  return new ClassList$1(el);\r\n\t}\r\n\r\n\tfunction ClassList$1(el) {\r\n\t  if (!el || !el.nodeType) {\r\n\t    throw new Error('A DOM element reference is required');\r\n\t  }\r\n\t  this.el = el;\r\n\t  this.list = el.classList;\r\n\t}\r\n\r\n\t/**\r\n\t * Add class `name` if not already present.\r\n\t *\r\n\t * @param {String} name\r\n\t * @return {ClassList}\r\n\t * @api public\r\n\t */\r\n\r\n\tClassList$1.prototype.add = function(name) {\r\n\r\n\t  // classList\r\n\t  if (this.list) {\r\n\t    this.list.add(name);\r\n\t    return this;\r\n\t  }\r\n\r\n\t  // fallback\r\n\t  var arr = this.array();\r\n\t  var i = index(arr, name);\r\n\t  if (!~i) {\r\n\t    arr.push(name);\r\n\t  }\r\n\r\n\t  if (defined(this.el.className.baseVal)) {\r\n\t    this.el.className.baseVal = arr.join(' ');\r\n\t  } else {\r\n\t    this.el.className = arr.join(' ');\r\n\t  }\r\n\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove class `name` when present, or\r\n\t * pass a regular expression to remove\r\n\t * any which match.\r\n\t *\r\n\t * @param {String|RegExp} name\r\n\t * @return {ClassList}\r\n\t * @api public\r\n\t */\r\n\r\n\tClassList$1.prototype.remove = function(name) {\r\n\t  if ('[object RegExp]' === toString$1.call(name)) {\r\n\t    return this.removeMatching(name);\r\n\t  }\r\n\r\n\t  // classList\r\n\t  if (this.list) {\r\n\t    this.list.remove(name);\r\n\t    return this;\r\n\t  }\r\n\r\n\t  // fallback\r\n\t  var arr = this.array();\r\n\t  var i = index(arr, name);\r\n\t  if (~i) {\r\n\t    arr.splice(i, 1);\r\n\t  }\r\n\t  this.el.className.baseVal = arr.join(' ');\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove all classes matching `re`.\r\n\t *\r\n\t * @param {RegExp} re\r\n\t * @return {ClassList}\r\n\t * @api private\r\n\t */\r\n\r\n\tClassList$1.prototype.removeMatching = function(re) {\r\n\t  var arr = this.array();\r\n\t  for (var i = 0; i < arr.length; i++) {\r\n\t    if (re.test(arr[i])) {\r\n\t      this.remove(arr[i]);\r\n\t    }\r\n\t  }\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Toggle class `name`, can force state via `force`.\r\n\t *\r\n\t * For browsers that support classList, but do not support `force` yet,\r\n\t * the mistake will be detected and corrected.\r\n\t *\r\n\t * @param {String} name\r\n\t * @param {Boolean} force\r\n\t * @return {ClassList}\r\n\t * @api public\r\n\t */\r\n\r\n\tClassList$1.prototype.toggle = function(name, force) {\r\n\t  // classList\r\n\t  if (this.list) {\r\n\t    if (defined(force)) {\r\n\t      if (force !== this.list.toggle(name, force)) {\r\n\t        this.list.toggle(name); // toggle again to correct\r\n\t      }\r\n\t    } else {\r\n\t      this.list.toggle(name);\r\n\t    }\r\n\t    return this;\r\n\t  }\r\n\r\n\t  // fallback\r\n\t  if (defined(force)) {\r\n\t    if (!force) {\r\n\t      this.remove(name);\r\n\t    } else {\r\n\t      this.add(name);\r\n\t    }\r\n\t  } else {\r\n\t    if (this.has(name)) {\r\n\t      this.remove(name);\r\n\t    } else {\r\n\t      this.add(name);\r\n\t    }\r\n\t  }\r\n\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Return an array of classes.\r\n\t *\r\n\t * @return {Array}\r\n\t * @api public\r\n\t */\r\n\r\n\tClassList$1.prototype.array = function() {\r\n\t  var className = this.el.getAttribute('class') || '';\r\n\t  var str = className.replace(/^\\s+|\\s+$/g, '');\r\n\t  var arr = str.split(re$1);\r\n\t  if ('' === arr[0]) {\r\n\t    arr.shift();\r\n\t  }\r\n\t  return arr;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if class `name` is present.\r\n\t *\r\n\t * @param {String} name\r\n\t * @return {ClassList}\r\n\t * @api public\r\n\t */\r\n\r\n\tClassList$1.prototype.has =\r\n\tClassList$1.prototype.contains = function(name) {\r\n\t  return (\r\n\t    this.list ?\r\n\t      this.list.contains(name) :\r\n\t      !! ~index(this.array(), name)\r\n\t  );\r\n\t};\n\n\tfunction remove$1(element) {\n\t  var parent = element.parentNode;\n\n\t  if (parent) {\n\t    parent.removeChild(element);\n\t  }\n\n\t  return element;\n\t}\n\n\t/**\n\t * Clear utility\n\t */\n\n\t/**\n\t * Removes all children from the given element\n\t *\n\t * @param  {DOMElement} element\n\t * @return {DOMElement} the element (for chaining)\n\t */\n\tfunction clear$1(element) {\n\t  var child;\n\n\t  while ((child = element.firstChild)) {\n\t    remove$1(child);\n\t  }\n\n\t  return element;\n\t}\n\n\tfunction clone(element) {\n\t  return element.cloneNode(true);\n\t}\n\n\tvar ns = {\n\t  svg: 'http://www.w3.org/2000/svg'\n\t};\n\n\t/**\n\t * DOM parsing utility\n\t */\n\n\tvar SVG_START = '<svg xmlns=\"' + ns.svg + '\"';\n\n\tfunction parse$1(svg) {\n\n\t  var unwrap = false;\n\n\t  // ensure we import a valid svg document\n\t  if (svg.substring(0, 4) === '<svg') {\n\t    if (svg.indexOf(ns.svg) === -1) {\n\t      svg = SVG_START + svg.substring(4);\n\t    }\n\t  } else {\n\t    // namespace svg\n\t    svg = SVG_START + '>' + svg + '</svg>';\n\t    unwrap = true;\n\t  }\n\n\t  var parsed = parseDocument(svg);\n\n\t  if (!unwrap) {\n\t    return parsed;\n\t  }\n\n\t  var fragment = document.createDocumentFragment();\n\n\t  var parent = parsed.firstChild;\n\n\t  while (parent.firstChild) {\n\t    fragment.appendChild(parent.firstChild);\n\t  }\n\n\t  return fragment;\n\t}\n\n\tfunction parseDocument(svg) {\n\n\t  var parser;\n\n\t  // parse\n\t  parser = new DOMParser();\n\t  parser.async = false;\n\n\t  return parser.parseFromString(svg, 'text/xml');\n\t}\n\n\t/**\n\t * Create utility for SVG elements\n\t */\n\n\n\t/**\n\t * Create a specific type from name or SVG markup.\n\t *\n\t * @param {String} name the name or markup of the element\n\t * @param {Object} [attrs] attributes to set on the element\n\t *\n\t * @returns {SVGElement}\n\t */\n\tfunction create(name, attrs) {\n\t  var element;\n\n\t  if (name.charAt(0) === '<') {\n\t    element = parse$1(name).firstChild;\n\t    element = document.importNode(element, true);\n\t  } else {\n\t    element = document.createElementNS(ns.svg, name);\n\t  }\n\n\t  if (attrs) {\n\t    attr$1(element, attrs);\n\t  }\n\n\t  return element;\n\t}\n\n\t/**\n\t * Geometry helpers\n\t */\n\n\t// fake node used to instantiate svg geometry elements\n\tvar node = create('svg');\n\n\tfunction extend(object, props) {\n\t  var i, k, keys = Object.keys(props);\n\n\t  for (i = 0; (k = keys[i]); i++) {\n\t    object[k] = props[k];\n\t  }\n\n\t  return object;\n\t}\n\n\t/**\n\t * Create matrix via args.\n\t *\n\t * @example\n\t *\n\t * createMatrix({ a: 1, b: 1 });\n\t * createMatrix();\n\t * createMatrix(1, 2, 0, 0, 30, 20);\n\t *\n\t * @return {SVGMatrix}\n\t */\n\tfunction createMatrix(a, b, c, d, e, f) {\n\t  var matrix = node.createSVGMatrix();\n\n\t  switch (arguments.length) {\n\t  case 0:\n\t    return matrix;\n\t  case 1:\n\t    return extend(matrix, a);\n\t  case 6:\n\t    return extend(matrix, {\n\t      a: a,\n\t      b: b,\n\t      c: c,\n\t      d: d,\n\t      e: e,\n\t      f: f\n\t    });\n\t  }\n\t}\n\n\tfunction createTransform(matrix) {\n\t  if (matrix) {\n\t    return node.createSVGTransformFromMatrix(matrix);\n\t  } else {\n\t    return node.createSVGTransform();\n\t  }\n\t}\n\n\t/**\n\t * Serialization util\n\t */\n\n\tvar TEXT_ENTITIES = /([&<>]{1})/g;\n\tvar ATTR_ENTITIES = /([\\n\\r\"]{1})/g;\n\n\tvar ENTITY_REPLACEMENT = {\n\t  '&': '&amp;',\n\t  '<': '&lt;',\n\t  '>': '&gt;',\n\t  '\"': '\\''\n\t};\n\n\tfunction escape(str, pattern) {\n\n\t  function replaceFn(match, entity) {\n\t    return ENTITY_REPLACEMENT[entity] || entity;\n\t  }\n\n\t  return str.replace(pattern, replaceFn);\n\t}\n\n\tfunction serialize(node, output) {\n\n\t  var i, len, attrMap, attrNode, childNodes;\n\n\t  switch (node.nodeType) {\n\t  // TEXT\n\t  case 3:\n\t    // replace special XML characters\n\t    output.push(escape(node.textContent, TEXT_ENTITIES));\n\t    break;\n\n\t  // ELEMENT\n\t  case 1:\n\t    output.push('<', node.tagName);\n\n\t    if (node.hasAttributes()) {\n\t      attrMap = node.attributes;\n\t      for (i = 0, len = attrMap.length; i < len; ++i) {\n\t        attrNode = attrMap.item(i);\n\t        output.push(' ', attrNode.name, '=\"', escape(attrNode.value, ATTR_ENTITIES), '\"');\n\t      }\n\t    }\n\n\t    if (node.hasChildNodes()) {\n\t      output.push('>');\n\t      childNodes = node.childNodes;\n\t      for (i = 0, len = childNodes.length; i < len; ++i) {\n\t        serialize(childNodes.item(i), output);\n\t      }\n\t      output.push('</', node.tagName, '>');\n\t    } else {\n\t      output.push('/>');\n\t    }\n\t    break;\n\n\t  // COMMENT\n\t  case 8:\n\t    output.push('<!--', escape(node.nodeValue, TEXT_ENTITIES), '-->');\n\t    break;\n\n\t  // CDATA\n\t  case 4:\n\t    output.push('<![CDATA[', node.nodeValue, ']]>');\n\t    break;\n\n\t  default:\n\t    throw new Error('unable to handle node ' + node.nodeType);\n\t  }\n\n\t  return output;\n\t}\n\n\t/**\n\t * innerHTML like functionality for SVG elements.\n\t * based on innerSVG (https://code.google.com/p/innersvg)\n\t */\n\n\n\tfunction set(element, svg) {\n\n\t  var parsed = parse$1(svg);\n\n\t  // clear element contents\n\t  clear$1(element);\n\n\t  if (!svg) {\n\t    return;\n\t  }\n\n\t  if (!isFragment(parsed)) {\n\t    // extract <svg> from parsed document\n\t    parsed = parsed.documentElement;\n\t  }\n\n\t  var nodes = slice(parsed.childNodes);\n\n\t  // import + append each node\n\t  for (var i = 0; i < nodes.length; i++) {\n\t    appendTo(nodes[i], element);\n\t  }\n\n\t}\n\n\tfunction get(element) {\n\t  var child = element.firstChild,\n\t      output = [];\n\n\t  while (child) {\n\t    serialize(child, output);\n\t    child = child.nextSibling;\n\t  }\n\n\t  return output.join('');\n\t}\n\n\tfunction isFragment(node) {\n\t  return node.nodeName === '#document-fragment';\n\t}\n\n\tfunction innerSVG(element, svg) {\n\n\t  if (svg !== undefined) {\n\n\t    try {\n\t      set(element, svg);\n\t    } catch (e) {\n\t      throw new Error('error parsing SVG: ' + e.message);\n\t    }\n\n\t    return element;\n\t  } else {\n\t    return get(element);\n\t  }\n\t}\n\n\n\tfunction slice(arr) {\n\t  return Array.prototype.slice.call(arr);\n\t}\n\n\t/**\n\t * transform accessor utility\n\t */\n\n\tfunction wrapMatrix(transformList, transform) {\n\t  if (transform instanceof SVGMatrix) {\n\t    return transformList.createSVGTransformFromMatrix(transform);\n\t  }\n\n\t  return transform;\n\t}\n\n\n\tfunction setTransforms(transformList, transforms) {\n\t  var i, t;\n\n\t  transformList.clear();\n\n\t  for (i = 0; (t = transforms[i]); i++) {\n\t    transformList.appendItem(wrapMatrix(transformList, t));\n\t  }\n\t}\n\n\t/**\n\t * Get or set the transforms on the given node.\n\t *\n\t * @param {SVGElement} node\n\t * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]\n\t *\n\t * @return {SVGTransform} the consolidated transform\n\t */\n\tfunction transform(node, transforms) {\n\t  var transformList = node.transform.baseVal;\n\n\t  if (transforms) {\n\n\t    if (!Array.isArray(transforms)) {\n\t      transforms = [ transforms ];\n\t    }\n\n\t    setTransforms(transformList, transforms);\n\t  }\n\n\t  return transformList.consolidate();\n\t}\n\n\tvar CLASS_PATTERN = /^class /;\n\n\tfunction isClass(fn) {\n\t  return CLASS_PATTERN.test(fn.toString());\n\t}\n\n\tfunction isArray$1(obj) {\n\t  return Object.prototype.toString.call(obj) === '[object Array]';\n\t}\n\n\tfunction annotate() {\n\t  var args = Array.prototype.slice.call(arguments);\n\n\t  if (args.length === 1 && isArray$1(args[0])) {\n\t    args = args[0];\n\t  }\n\n\t  var fn = args.pop();\n\n\t  fn.$inject = args;\n\n\t  return fn;\n\t}\n\n\t// Current limitations:\n\t// - can't put into \"function arg\" comments\n\t// function /* (no parenthesis like this) */ (){}\n\t// function abc( /* xx (no parenthesis like this) */ a, b) {}\n\t//\n\t// Just put the comment before function or inside:\n\t// /* (((this is fine))) */ function(a, b) {}\n\t// function abc(a) { /* (((this is fine))) */}\n\t//\n\t// - can't reliably auto-annotate constructor; we'll match the\n\t// first constructor(...) pattern found which may be the one\n\t// of a nested class, too.\n\n\tvar CONSTRUCTOR_ARGS = /constructor\\s*[^(]*\\(\\s*([^)]*)\\)/m;\n\tvar FN_ARGS = /^function\\s*[^(]*\\(\\s*([^)]*)\\)/m;\n\tvar FN_ARG = /\\/\\*([^*]*)\\*\\//m;\n\n\tfunction parse$2(fn) {\n\n\t  if (typeof fn !== 'function') {\n\t    throw new Error('Cannot annotate \"' + fn + '\". Expected a function!');\n\t  }\n\n\t  var match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);\n\n\t  // may parse class without constructor\n\t  if (!match) {\n\t    return [];\n\t  }\n\n\t  return match[1] && match[1].split(',').map(function (arg) {\n\t    match = arg.match(FN_ARG);\n\t    return match ? match[1].trim() : arg.trim();\n\t  }) || [];\n\t}\n\n\tfunction Module() {\n\t  var providers = [];\n\n\t  this.factory = function (name, factory) {\n\t    providers.push([name, 'factory', factory]);\n\t    return this;\n\t  };\n\n\t  this.value = function (name, value) {\n\t    providers.push([name, 'value', value]);\n\t    return this;\n\t  };\n\n\t  this.type = function (name, type) {\n\t    providers.push([name, 'type', type]);\n\t    return this;\n\t  };\n\n\t  this.forEach = function (iterator) {\n\t    providers.forEach(iterator);\n\t  };\n\t}\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\tfunction Injector(modules, parent) {\n\t  parent = parent || {\n\t    get: function get(name, strict) {\n\t      currentlyResolving.push(name);\n\n\t      if (strict === false) {\n\t        return null;\n\t      } else {\n\t        throw error('No provider for \"' + name + '\"!');\n\t      }\n\t    }\n\t  };\n\n\t  var currentlyResolving = [];\n\t  var providers = this._providers = Object.create(parent._providers || null);\n\t  var instances = this._instances = Object.create(null);\n\n\t  var self = instances.injector = this;\n\n\t  var error = function error(msg) {\n\t    var stack = currentlyResolving.join(' -> ');\n\t    currentlyResolving.length = 0;\n\t    return new Error(stack ? msg + ' (Resolving: ' + stack + ')' : msg);\n\t  };\n\n\t  /**\n\t   * Return a named service.\n\t   *\n\t   * @param {String} name\n\t   * @param {Boolean} [strict=true] if false, resolve missing services to null\n\t   *\n\t   * @return {Object}\n\t   */\n\t  var get = function get(name, strict) {\n\t    if (!providers[name] && name.indexOf('.') !== -1) {\n\t      var parts = name.split('.');\n\t      var pivot = get(parts.shift());\n\n\t      while (parts.length) {\n\t        pivot = pivot[parts.shift()];\n\t      }\n\n\t      return pivot;\n\t    }\n\n\t    if (hasProp(instances, name)) {\n\t      return instances[name];\n\t    }\n\n\t    if (hasProp(providers, name)) {\n\t      if (currentlyResolving.indexOf(name) !== -1) {\n\t        currentlyResolving.push(name);\n\t        throw error('Cannot resolve circular dependency!');\n\t      }\n\n\t      currentlyResolving.push(name);\n\t      instances[name] = providers[name][0](providers[name][1]);\n\t      currentlyResolving.pop();\n\n\t      return instances[name];\n\t    }\n\n\t    return parent.get(name, strict);\n\t  };\n\n\t  var fnDef = function fnDef(fn) {\n\t    var locals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t    if (typeof fn !== 'function') {\n\t      if (isArray$1(fn)) {\n\t        fn = annotate(fn.slice());\n\t      } else {\n\t        throw new Error('Cannot invoke \"' + fn + '\". Expected a function!');\n\t      }\n\t    }\n\n\t    var inject = fn.$inject || parse$2(fn);\n\t    var dependencies = inject.map(function (dep) {\n\t      if (hasProp(locals, dep)) {\n\t        return locals[dep];\n\t      } else {\n\t        return get(dep);\n\t      }\n\t    });\n\n\t    return {\n\t      fn: fn,\n\t      dependencies: dependencies\n\t    };\n\t  };\n\n\t  var instantiate = function instantiate(Type) {\n\t    var _fnDef = fnDef(Type),\n\t        dependencies = _fnDef.dependencies,\n\t        fn = _fnDef.fn;\n\n\t    return new (Function.prototype.bind.apply(fn, [null].concat(_toConsumableArray(dependencies))))();\n\t  };\n\n\t  var invoke = function invoke(func, context, locals) {\n\t    var _fnDef2 = fnDef(func, locals),\n\t        dependencies = _fnDef2.dependencies,\n\t        fn = _fnDef2.fn;\n\n\t    return fn.call.apply(fn, [context].concat(_toConsumableArray(dependencies)));\n\t  };\n\n\t  var createPrivateInjectorFactory = function createPrivateInjectorFactory(privateChildInjector) {\n\t    return annotate(function (key) {\n\t      return privateChildInjector.get(key);\n\t    });\n\t  };\n\n\t  var createChild = function createChild(modules, forceNewInstances) {\n\t    if (forceNewInstances && forceNewInstances.length) {\n\t      var fromParentModule = Object.create(null);\n\t      var matchedScopes = Object.create(null);\n\n\t      var privateInjectorsCache = [];\n\t      var privateChildInjectors = [];\n\t      var privateChildFactories = [];\n\n\t      var provider;\n\t      var cacheIdx;\n\t      var privateChildInjector;\n\t      var privateChildInjectorFactory;\n\t      for (var name in providers) {\n\t        provider = providers[name];\n\n\t        if (forceNewInstances.indexOf(name) !== -1) {\n\t          if (provider[2] === 'private') {\n\t            cacheIdx = privateInjectorsCache.indexOf(provider[3]);\n\t            if (cacheIdx === -1) {\n\t              privateChildInjector = provider[3].createChild([], forceNewInstances);\n\t              privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);\n\t              privateInjectorsCache.push(provider[3]);\n\t              privateChildInjectors.push(privateChildInjector);\n\t              privateChildFactories.push(privateChildInjectorFactory);\n\t              fromParentModule[name] = [privateChildInjectorFactory, name, 'private', privateChildInjector];\n\t            } else {\n\t              fromParentModule[name] = [privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx]];\n\t            }\n\t          } else {\n\t            fromParentModule[name] = [provider[2], provider[1]];\n\t          }\n\t          matchedScopes[name] = true;\n\t        }\n\n\t        if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {\n\t          /* jshint -W083 */\n\t          forceNewInstances.forEach(function (scope) {\n\t            if (provider[1].$scope.indexOf(scope) !== -1) {\n\t              fromParentModule[name] = [provider[2], provider[1]];\n\t              matchedScopes[scope] = true;\n\t            }\n\t          });\n\t        }\n\t      }\n\n\t      forceNewInstances.forEach(function (scope) {\n\t        if (!matchedScopes[scope]) {\n\t          throw new Error('No provider for \"' + scope + '\". Cannot use provider from the parent!');\n\t        }\n\t      });\n\n\t      modules.unshift(fromParentModule);\n\t    }\n\n\t    return new Injector(modules, self);\n\t  };\n\n\t  var factoryMap = {\n\t    factory: invoke,\n\t    type: instantiate,\n\t    value: function value(_value) {\n\t      return _value;\n\t    }\n\t  };\n\n\t  modules.forEach(function (module) {\n\n\t    function arrayUnwrap(type, value) {\n\t      if (type !== 'value' && isArray$1(value)) {\n\t        value = annotate(value.slice());\n\t      }\n\n\t      return value;\n\t    }\n\n\t    // TODO(vojta): handle wrong inputs (modules)\n\t    if (module instanceof Module) {\n\t      module.forEach(function (provider) {\n\t        var name = provider[0];\n\t        var type = provider[1];\n\t        var value = provider[2];\n\n\t        providers[name] = [factoryMap[type], arrayUnwrap(type, value), type];\n\t      });\n\t    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {\n\t      if (module.__exports__) {\n\t        var clonedModule = Object.keys(module).reduce(function (m, key) {\n\t          if (key.substring(0, 2) !== '__') {\n\t            m[key] = module[key];\n\t          }\n\t          return m;\n\t        }, Object.create(null));\n\n\t        var privateInjector = new Injector((module.__modules__ || []).concat([clonedModule]), self);\n\t        var getFromPrivateInjector = annotate(function (key) {\n\t          return privateInjector.get(key);\n\t        });\n\t        module.__exports__.forEach(function (key) {\n\t          providers[key] = [getFromPrivateInjector, key, 'private', privateInjector];\n\t        });\n\t      } else {\n\t        Object.keys(module).forEach(function (name) {\n\t          if (module[name][2] === 'private') {\n\t            providers[name] = module[name];\n\t            return;\n\t          }\n\n\t          var type = module[name][0];\n\t          var value = module[name][1];\n\n\t          providers[name] = [factoryMap[type], arrayUnwrap(type, value), type];\n\t        });\n\t      }\n\t    }\n\t  });\n\n\t  // public API\n\t  this.get = get;\n\t  this.invoke = invoke;\n\t  this.instantiate = instantiate;\n\t  this.createChild = createChild;\n\t}\n\n\t// helpers /////////////////\n\n\tfunction hasProp(obj, prop) {\n\t  return Object.hasOwnProperty.call(obj, prop);\n\t}\n\n\tvar DEFAULT_RENDER_PRIORITY = 1000;\n\n\t/**\n\t * The base implementation of shape and connection renderers.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {number} [renderPriority=1000]\n\t */\n\tfunction BaseRenderer(eventBus, renderPriority) {\n\t  var self = this;\n\n\t  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n\n\t  eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {\n\t    var type = evt.type,\n\t        element = context.element,\n\t        visuals = context.gfx;\n\n\t    if (self.canRender(element)) {\n\t      if (type === 'render.shape') {\n\t        return self.drawShape(visuals, element);\n\t      } else {\n\t        return self.drawConnection(visuals, element);\n\t      }\n\t    }\n\t  });\n\n\t  eventBus.on([ 'render.getShapePath', 'render.getConnectionPath'], renderPriority, function(evt, element) {\n\t    if (self.canRender(element)) {\n\t      if (evt.type === 'render.getShapePath') {\n\t        return self.getShapePath(element);\n\t      } else {\n\t        return self.getConnectionPath(element);\n\t      }\n\t    }\n\t  });\n\t}\n\n\t/**\n\t * Should check whether *this* renderer can render\n\t * the element/connection.\n\t *\n\t * @param {element} element\n\t *\n\t * @returns {boolean}\n\t */\n\tBaseRenderer.prototype.canRender = function() {};\n\n\t/**\n\t * Provides the shape's snap svg element to be drawn on the `canvas`.\n\t *\n\t * @param {djs.Graphics} visuals\n\t * @param {Shape} shape\n\t *\n\t * @returns {Snap.svg} [returns a Snap.svg paper element ]\n\t */\n\tBaseRenderer.prototype.drawShape = function() {};\n\n\t/**\n\t * Provides the shape's snap svg element to be drawn on the `canvas`.\n\t *\n\t * @param {djs.Graphics} visuals\n\t * @param {Connection} connection\n\t *\n\t * @returns {Snap.svg} [returns a Snap.svg paper element ]\n\t */\n\tBaseRenderer.prototype.drawConnection = function() {};\n\n\t/**\n\t * Gets the SVG path of a shape that represents it's visual bounds.\n\t *\n\t * @param {Shape} shape\n\t *\n\t * @return {string} svg path\n\t */\n\tBaseRenderer.prototype.getShapePath = function() {};\n\n\t/**\n\t * Gets the SVG path of a connection that represents it's visual bounds.\n\t *\n\t * @param {Connection} connection\n\t *\n\t * @return {string} svg path\n\t */\n\tBaseRenderer.prototype.getConnectionPath = function() {};\n\n\tfunction componentsToPath(elements) {\n\t  return elements.join(',').replace(/,?([A-z]),?/g, '$1');\n\t}\n\n\tfunction toSVGPoints(points) {\n\t  var result = '';\n\n\t  for (var i = 0, p; (p = points[i]); i++) {\n\t    result += p.x + ',' + p.y + ' ';\n\t  }\n\n\t  return result;\n\t}\n\n\tfunction createLine(points, attrs) {\n\n\t  var line = create('polyline');\n\t  attr$1(line, { points: toSVGPoints(points) });\n\n\t  if (attrs) {\n\t    attr$1(line, attrs);\n\t  }\n\n\t  return line;\n\t}\n\n\tfunction updateLine(gfx, points) {\n\t  attr$1(gfx, { points: toSVGPoints(points) });\n\n\t  return gfx;\n\t}\n\n\t/**\n\t * Get parent elements.\n\t *\n\t * @param {Array<djs.model.base>} elements\n\t *\n\t * @returns {Array<djs.model.Base>}\n\t */\n\tfunction getParents(elements) {\n\n\t  // find elements that are not children of any other elements\n\t  return filter(elements, function(element) {\n\t    return !find(elements, function(e) {\n\t      return e !== element && getParent(element, e);\n\t    });\n\t  });\n\t}\n\n\n\tfunction getParent(element, parent) {\n\t  if (!parent) {\n\t    return;\n\t  }\n\n\t  if (element === parent) {\n\t    return parent;\n\t  }\n\n\t  if (!element.parent) {\n\t    return;\n\t  }\n\n\t  return getParent(element.parent, parent);\n\t}\n\n\n\t/**\n\t * Adds an element to a collection and returns true if the\n\t * element was added.\n\t *\n\t * @param {Array<Object>} elements\n\t * @param {Object} e\n\t * @param {boolean} unique\n\t */\n\tfunction add(elements, e, unique) {\n\t  var canAdd = !unique || elements.indexOf(e) === -1;\n\n\t  if (canAdd) {\n\t    elements.push(e);\n\t  }\n\n\t  return canAdd;\n\t}\n\n\n\t/**\n\t * Iterate over each element in a collection, calling the iterator function `fn`\n\t * with (element, index, recursionDepth).\n\t *\n\t * Recurse into all elements that are returned by `fn`.\n\t *\n\t * @param  {Object|Array<Object>} elements\n\t * @param  {Function} fn iterator function called with (element, index, recursionDepth)\n\t * @param  {number} [depth] maximum recursion depth\n\t */\n\tfunction eachElement(elements, fn, depth) {\n\n\t  depth = depth || 0;\n\n\t  if (!isArray(elements)) {\n\t    elements = [ elements ];\n\t  }\n\n\t  forEach(elements, function(s, i) {\n\t    var filter = fn(s, i, depth);\n\n\t    if (isArray(filter) && filter.length) {\n\t      eachElement(filter, fn, depth + 1);\n\t    }\n\t  });\n\t}\n\n\n\t/**\n\t * Collects self + child elements up to a given depth from a list of elements.\n\t *\n\t * @param  {djs.model.Base|Array<djs.model.Base>} elements the elements to select the children from\n\t * @param  {boolean} unique whether to return a unique result set (no duplicates)\n\t * @param  {number} maxDepth the depth to search through or -1 for infinite\n\t *\n\t * @return {Array<djs.model.Base>} found elements\n\t */\n\tfunction selfAndChildren(elements, unique, maxDepth) {\n\t  var result = [],\n\t      processedChildren = [];\n\n\t  eachElement(elements, function(element, i, depth) {\n\t    add(result, element, unique);\n\n\t    var children = element.children;\n\n\t    // max traversal depth not reached yet\n\t    if (maxDepth === -1 || depth < maxDepth) {\n\n\t      // children exist && children not yet processed\n\t      if (children && add(processedChildren, children, unique)) {\n\t        return children;\n\t      }\n\t    }\n\t  });\n\n\t  return result;\n\t}\n\n\n\t/**\n\t * Return self + ALL children for a number of elements\n\t *\n\t * @param  {Array<djs.model.Base>} elements to query\n\t * @param  {boolean} allowDuplicates to allow duplicates in the result set\n\t *\n\t * @return {Array<djs.model.Base>} the collected elements\n\t */\n\tfunction selfAndAllChildren(elements, allowDuplicates) {\n\t  return selfAndChildren(elements, !allowDuplicates, -1);\n\t}\n\n\n\t/**\n\t * Gets the the closure for all selected elements,\n\t * their enclosed children and connections.\n\t *\n\t * @param {Array<djs.model.Base>} elements\n\t * @param {boolean} [isTopLevel=true]\n\t * @param {Object} [existingClosure]\n\t *\n\t * @return {Object} newClosure\n\t */\n\tfunction getClosure(elements, isTopLevel, closure) {\n\n\t  if (isUndefined(isTopLevel)) {\n\t    isTopLevel = true;\n\t  }\n\n\t  if (isObject(isTopLevel)) {\n\t    closure = isTopLevel;\n\t    isTopLevel = true;\n\t  }\n\n\n\t  closure = closure || {};\n\n\t  var allShapes = copyObject(closure.allShapes),\n\t      allConnections = copyObject(closure.allConnections),\n\t      enclosedElements = copyObject(closure.enclosedElements),\n\t      enclosedConnections = copyObject(closure.enclosedConnections);\n\n\t  var topLevel = copyObject(\n\t    closure.topLevel,\n\t    isTopLevel && groupBy(elements, function(e) { return e.id; })\n\t  );\n\n\n\t  function handleConnection(c) {\n\t    if (topLevel[c.source.id] && topLevel[c.target.id]) {\n\t      topLevel[c.id] = [ c ];\n\t    }\n\n\t    // not enclosed as a child, but maybe logically\n\t    // (connecting two moved elements?)\n\t    if (allShapes[c.source.id] && allShapes[c.target.id]) {\n\t      enclosedConnections[c.id] = enclosedElements[c.id] = c;\n\t    }\n\n\t    allConnections[c.id] = c;\n\t  }\n\n\t  function handleElement(element) {\n\n\t    enclosedElements[element.id] = element;\n\n\t    if (element.waypoints) {\n\n\t      // remember connection\n\t      enclosedConnections[element.id] = allConnections[element.id] = element;\n\t    } else {\n\n\t      // remember shape\n\t      allShapes[element.id] = element;\n\n\t      // remember all connections\n\t      forEach(element.incoming, handleConnection);\n\n\t      forEach(element.outgoing, handleConnection);\n\n\t      // recurse into children\n\t      return element.children;\n\t    }\n\t  }\n\n\t  eachElement(elements, handleElement);\n\n\t  return {\n\t    allShapes: allShapes,\n\t    allConnections: allConnections,\n\t    topLevel: topLevel,\n\t    enclosedConnections: enclosedConnections,\n\t    enclosedElements: enclosedElements\n\t  };\n\t}\n\n\t/**\n\t * Returns the surrounding bbox for all elements in\n\t * the array or the element primitive.\n\t *\n\t * @param {Array<djs.model.Shape>|djs.model.Shape} elements\n\t * @param {boolean} stopRecursion\n\t */\n\tfunction getBBox(elements, stopRecursion) {\n\n\t  stopRecursion = !!stopRecursion;\n\t  if (!isArray(elements)) {\n\t    elements = [elements];\n\t  }\n\n\t  var minX,\n\t      minY,\n\t      maxX,\n\t      maxY;\n\n\t  forEach(elements, function(element) {\n\n\t    // If element is a connection the bbox must be computed first\n\t    var bbox = element;\n\t    if (element.waypoints && !stopRecursion) {\n\t      bbox = getBBox(element.waypoints, true);\n\t    }\n\n\t    var x = bbox.x,\n\t        y = bbox.y,\n\t        height = bbox.height || 0,\n\t        width = bbox.width || 0;\n\n\t    if (x < minX || minX === undefined) {\n\t      minX = x;\n\t    }\n\t    if (y < minY || minY === undefined) {\n\t      minY = y;\n\t    }\n\n\t    if ((x + width) > maxX || maxX === undefined) {\n\t      maxX = x + width;\n\t    }\n\t    if ((y + height) > maxY || maxY === undefined) {\n\t      maxY = y + height;\n\t    }\n\t  });\n\n\t  return {\n\t    x: minX,\n\t    y: minY,\n\t    height: maxY - minY,\n\t    width: maxX - minX\n\t  };\n\t}\n\n\n\t/**\n\t * Returns all elements that are enclosed from the bounding box.\n\t *\n\t *   * If bbox.(width|height) is not specified the method returns\n\t *     all elements with element.x/y > bbox.x/y\n\t *   * If only bbox.x or bbox.y is specified, method return all elements with\n\t *     e.x > bbox.x or e.y > bbox.y\n\t *\n\t * @param {Array<djs.model.Shape>} elements List of Elements to search through\n\t * @param {djs.model.Shape} bbox the enclosing bbox.\n\t *\n\t * @return {Array<djs.model.Shape>} enclosed elements\n\t */\n\tfunction getEnclosedElements(elements, bbox) {\n\n\t  var filteredElements = {};\n\n\t  forEach(elements, function(element) {\n\n\t    var e = element;\n\n\t    if (e.waypoints) {\n\t      e = getBBox(e);\n\t    }\n\n\t    if (!isNumber(bbox.y) && (e.x > bbox.x)) {\n\t      filteredElements[element.id] = element;\n\t    }\n\t    if (!isNumber(bbox.x) && (e.y > bbox.y)) {\n\t      filteredElements[element.id] = element;\n\t    }\n\t    if (e.x > bbox.x && e.y > bbox.y) {\n\t      if (isNumber(bbox.width) && isNumber(bbox.height) &&\n\t          e.width + e.x < bbox.width + bbox.x &&\n\t          e.height + e.y < bbox.height + bbox.y) {\n\n\t        filteredElements[element.id] = element;\n\t      } else if (!isNumber(bbox.width) || !isNumber(bbox.height)) {\n\t        filteredElements[element.id] = element;\n\t      }\n\t    }\n\t  });\n\n\t  return filteredElements;\n\t}\n\n\n\tfunction getType(element) {\n\n\t  if ('waypoints' in element) {\n\t    return 'connection';\n\t  }\n\n\t  if ('x' in element) {\n\t    return 'shape';\n\t  }\n\n\t  return 'root';\n\t}\n\n\tfunction isFrameElement(element) {\n\n\t  return !!(element && element.isFrame);\n\t}\n\n\t// helpers ///////////////////////////////\n\n\tfunction copyObject(src1, src2) {\n\t  return assign({}, src1 || {}, src2 || {});\n\t}\n\n\t// apply default renderer with lowest possible priority\n\t// so that it only kicks in if noone else could render\n\tvar DEFAULT_RENDER_PRIORITY$1 = 1;\n\n\t/**\n\t * The default renderer used for shapes and connections.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Styles} styles\n\t */\n\tfunction DefaultRenderer(eventBus, styles) {\n\n\t  //\n\t  BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY$1);\n\n\t  this.CONNECTION_STYLE = styles.style([ 'no-fill' ], { strokeWidth: 5, stroke: 'fuchsia' });\n\t  this.SHAPE_STYLE = styles.style({ fill: 'white', stroke: 'fuchsia', strokeWidth: 2 });\n\t  this.FRAME_STYLE = styles.style([ 'no-fill' ], { stroke: 'fuchsia', strokeDasharray: 4, strokeWidth: 2 });\n\t}\n\n\tinherits_browser(DefaultRenderer, BaseRenderer);\n\n\n\tDefaultRenderer.prototype.canRender = function() {\n\t  return true;\n\t};\n\n\tDefaultRenderer.prototype.drawShape = function drawShape(visuals, element) {\n\t  var rect = create('rect');\n\n\t  attr$1(rect, {\n\t    x: 0,\n\t    y: 0,\n\t    width: element.width || 0,\n\t    height: element.height || 0\n\t  });\n\n\t  if (isFrameElement(element)) {\n\t    attr$1(rect, this.FRAME_STYLE);\n\t  } else {\n\t    attr$1(rect, this.SHAPE_STYLE);\n\t  }\n\n\t  append(visuals, rect);\n\n\t  return rect;\n\t};\n\n\tDefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection) {\n\n\t  var line = createLine(connection.waypoints, this.CONNECTION_STYLE);\n\t  append(visuals, line);\n\n\t  return line;\n\t};\n\n\tDefaultRenderer.prototype.getShapePath = function getShapePath(shape) {\n\n\t  var x = shape.x,\n\t      y = shape.y,\n\t      width = shape.width,\n\t      height = shape.height;\n\n\t  var shapePath = [\n\t    ['M', x, y],\n\t    ['l', width, 0],\n\t    ['l', 0, height],\n\t    ['l', -width, 0],\n\t    ['z']\n\t  ];\n\n\t  return componentsToPath(shapePath);\n\t};\n\n\tDefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {\n\t  var waypoints = connection.waypoints;\n\n\t  var idx, point, connectionPath = [];\n\n\t  for (idx = 0; (point = waypoints[idx]); idx++) {\n\n\t    // take invisible docking into account\n\t    // when creating the path\n\t    point = point.original || point;\n\n\t    connectionPath.push([ idx === 0 ? 'M' : 'L', point.x, point.y ]);\n\t  }\n\n\t  return componentsToPath(connectionPath);\n\t};\n\n\n\tDefaultRenderer.$inject = [ 'eventBus', 'styles' ];\n\n\t/**\n\t * A component that manages shape styles\n\t */\n\tfunction Styles() {\n\n\t  var defaultTraits = {\n\n\t    'no-fill': {\n\t      fill: 'none'\n\t    },\n\t    'no-border': {\n\t      strokeOpacity: 0.0\n\t    },\n\t    'no-events': {\n\t      pointerEvents: 'none'\n\t    }\n\t  };\n\n\t  var self = this;\n\n\t  /**\n\t   * Builds a style definition from a className, a list of traits and an object of additional attributes.\n\t   *\n\t   * @param  {string} className\n\t   * @param  {Array<string>} traits\n\t   * @param  {Object} additionalAttrs\n\t   *\n\t   * @return {Object} the style defintion\n\t   */\n\t  this.cls = function(className, traits, additionalAttrs) {\n\t    var attrs = this.style(traits, additionalAttrs);\n\n\t    return assign(attrs, { 'class': className });\n\t  };\n\n\t  /**\n\t   * Builds a style definition from a list of traits and an object of additional attributes.\n\t   *\n\t   * @param  {Array<string>} traits\n\t   * @param  {Object} additionalAttrs\n\t   *\n\t   * @return {Object} the style defintion\n\t   */\n\t  this.style = function(traits, additionalAttrs) {\n\n\t    if (!isArray(traits) && !additionalAttrs) {\n\t      additionalAttrs = traits;\n\t      traits = [];\n\t    }\n\n\t    var attrs = reduce(traits, function(attrs, t) {\n\t      return assign(attrs, defaultTraits[t] || {});\n\t    }, {});\n\n\t    return additionalAttrs ? assign(attrs, additionalAttrs) : attrs;\n\t  };\n\n\t  this.computeStyle = function(custom, traits, defaultStyles) {\n\t    if (!isArray(traits)) {\n\t      defaultStyles = traits;\n\t      traits = [];\n\t    }\n\n\t    return self.style(traits || [], assign({}, defaultStyles, custom || {}));\n\t  };\n\t}\n\n\tvar DrawModule = {\n\t  __init__: [ 'defaultRenderer' ],\n\t  defaultRenderer: [ 'type', DefaultRenderer ],\n\t  styles: [ 'type', Styles ]\n\t};\n\n\t/**\n\t * Failsafe remove an element from a collection\n\t *\n\t * @param  {Array<Object>} [collection]\n\t * @param  {Object} [element]\n\t *\n\t * @return {number} the previous index of the element\n\t */\n\tfunction remove$2(collection, element) {\n\n\t  if (!collection || !element) {\n\t    return -1;\n\t  }\n\n\t  var idx = collection.indexOf(element);\n\n\t  if (idx !== -1) {\n\t    collection.splice(idx, 1);\n\t  }\n\n\t  return idx;\n\t}\n\n\t/**\n\t * Fail save add an element to the given connection, ensuring\n\t * it does not yet exist.\n\t *\n\t * @param {Array<Object>} collection\n\t * @param {Object} element\n\t * @param {number} idx\n\t */\n\tfunction add$1(collection, element, idx) {\n\n\t  if (!collection || !element) {\n\t    return;\n\t  }\n\n\t  if (typeof idx !== 'number') {\n\t    idx = -1;\n\t  }\n\n\t  var currentIdx = collection.indexOf(element);\n\n\t  if (currentIdx !== -1) {\n\n\t    if (currentIdx === idx) {\n\n\t      // nothing to do, position has not changed\n\t      return;\n\t    } else {\n\n\t      if (idx !== -1) {\n\n\t        // remove from current position\n\t        collection.splice(currentIdx, 1);\n\t      } else {\n\n\t        // already exists in collection\n\t        return;\n\t      }\n\t    }\n\t  }\n\n\t  if (idx !== -1) {\n\n\t    // insert at specified position\n\t    collection.splice(idx, 0, element);\n\t  } else {\n\n\t    // push to end\n\t    collection.push(element);\n\t  }\n\t}\n\n\n\t/**\n\t * Fail save get the index of an element in a collection.\n\t *\n\t * @param {Array<Object>} collection\n\t * @param {Object} element\n\t *\n\t * @return {number} the index or -1 if collection or element do\n\t *                  not exist or the element is not contained.\n\t */\n\tfunction indexOf$1(collection, element) {\n\n\t  if (!collection || !element) {\n\t    return -1;\n\t  }\n\n\t  return collection.indexOf(element);\n\t}\n\n\tfunction round(number, resolution) {\n\t  return Math.round(number * resolution) / resolution;\n\t}\n\n\tfunction ensurePx(number) {\n\t  return isNumber(number) ? number + 'px' : number;\n\t}\n\n\t/**\n\t * Creates a HTML container element for a SVG element with\n\t * the given configuration\n\t *\n\t * @param  {Object} options\n\t * @return {HTMLElement} the container element\n\t */\n\tfunction createContainer(options) {\n\n\t  options = assign({}, { width: '100%', height: '100%' }, options);\n\n\t  var container = options.container || document.body;\n\n\t  // create a <div> around the svg element with the respective size\n\t  // this way we can always get the correct container size\n\t  // (this is impossible for <svg> elements at the moment)\n\t  var parent = document.createElement('div');\n\t  parent.setAttribute('class', 'djs-container');\n\n\t  assign(parent.style, {\n\t    position: 'relative',\n\t    overflow: 'hidden',\n\t    width: ensurePx(options.width),\n\t    height: ensurePx(options.height)\n\t  });\n\n\t  container.appendChild(parent);\n\n\t  return parent;\n\t}\n\n\tfunction createGroup(parent, cls, childIndex) {\n\t  var group = create('g');\n\t  classes$1(group).add(cls);\n\n\t  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n\t  // must ensure second argument is node or _null_\n\t  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n\t  parent.insertBefore(group, parent.childNodes[index] || null);\n\n\t  return group;\n\t}\n\n\tvar BASE_LAYER = 'base';\n\n\n\tvar REQUIRED_MODEL_ATTRS = {\n\t  shape: [ 'x', 'y', 'width', 'height' ],\n\t  connection: [ 'waypoints' ]\n\t};\n\n\t/**\n\t * The main drawing canvas.\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @emits Canvas#canvas.init\n\t *\n\t * @param {Object} config\n\t * @param {EventBus} eventBus\n\t * @param {GraphicsFactory} graphicsFactory\n\t * @param {ElementRegistry} elementRegistry\n\t */\n\tfunction Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n\n\t  this._eventBus = eventBus;\n\t  this._elementRegistry = elementRegistry;\n\t  this._graphicsFactory = graphicsFactory;\n\n\t  this._init(config || {});\n\t}\n\n\tCanvas.$inject = [\n\t  'config.canvas',\n\t  'eventBus',\n\t  'graphicsFactory',\n\t  'elementRegistry'\n\t];\n\n\n\tCanvas.prototype._init = function(config) {\n\n\t  var eventBus = this._eventBus;\n\n\t  // Creates a <svg> element that is wrapped into a <div>.\n\t  // This way we are always able to correctly figure out the size of the svg element\n\t  // by querying the parent node.\n\t  //\n\t  // (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\t  //\n\t  // <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n\t  //   <svg width=\"100%\" height=\"100%\">\n\t  //    ...\n\t  //   </svg>\n\t  // </div>\n\n\t  // html container\n\t  var container = this._container = createContainer(config);\n\n\t  var svg = this._svg = create('svg');\n\t  attr$1(svg, { width: '100%', height: '100%' });\n\n\t  append(container, svg);\n\n\t  var viewport = this._viewport = createGroup(svg, 'viewport');\n\n\t  this._layers = {};\n\n\t  // debounce canvas.viewbox.changed events\n\t  // for smoother diagram interaction\n\t  if (config.deferUpdate !== false) {\n\t    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n\t  }\n\n\t  eventBus.on('diagram.init', function() {\n\n\t    /**\n\t     * An event indicating that the canvas is ready to be drawn on.\n\t     *\n\t     * @memberOf Canvas\n\t     *\n\t     * @event canvas.init\n\t     *\n\t     * @type {Object}\n\t     * @property {SVGElement} svg the created svg element\n\t     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n\t     */\n\t    eventBus.fire('canvas.init', {\n\t      svg: svg,\n\t      viewport: viewport\n\t    });\n\n\t  }, this);\n\n\t  // reset viewbox on shape changes to\n\t  // recompute the viewbox\n\t  eventBus.on([\n\t    'shape.added',\n\t    'connection.added',\n\t    'shape.removed',\n\t    'connection.removed',\n\t    'elements.changed'\n\t  ], function() {\n\t    delete this._cachedViewbox;\n\t  }, this);\n\n\t  eventBus.on('diagram.destroy', 500, this._destroy, this);\n\t  eventBus.on('diagram.clear', 500, this._clear, this);\n\t};\n\n\tCanvas.prototype._destroy = function(emit) {\n\t  this._eventBus.fire('canvas.destroy', {\n\t    svg: this._svg,\n\t    viewport: this._viewport\n\t  });\n\n\t  var parent = this._container.parentNode;\n\n\t  if (parent) {\n\t    parent.removeChild(this._container);\n\t  }\n\n\t  delete this._svg;\n\t  delete this._container;\n\t  delete this._layers;\n\t  delete this._rootElement;\n\t  delete this._viewport;\n\t};\n\n\tCanvas.prototype._clear = function() {\n\n\t  var self = this;\n\n\t  var allElements = this._elementRegistry.getAll();\n\n\t  // remove all elements\n\t  allElements.forEach(function(element) {\n\t    var type = getType(element);\n\n\t    if (type === 'root') {\n\t      self.setRootElement(null, true);\n\t    } else {\n\t      self._removeElement(element, type);\n\t    }\n\t  });\n\n\t  // force recomputation of view box\n\t  delete this._cachedViewbox;\n\t};\n\n\t/**\n\t * Returns the default layer on which\n\t * all elements are drawn.\n\t *\n\t * @returns {SVGElement}\n\t */\n\tCanvas.prototype.getDefaultLayer = function() {\n\t  return this.getLayer(BASE_LAYER, 0);\n\t};\n\n\t/**\n\t * Returns a layer that is used to draw elements\n\t * or annotations on it.\n\t *\n\t * Non-existing layers retrieved through this method\n\t * will be created. During creation, the optional index\n\t * may be used to create layers below or above existing layers.\n\t * A layer with a certain index is always created above all\n\t * existing layers with the same index.\n\t *\n\t * @param {string} name\n\t * @param {number} index\n\t *\n\t * @returns {SVGElement}\n\t */\n\tCanvas.prototype.getLayer = function(name, index) {\n\n\t  if (!name) {\n\t    throw new Error('must specify a name');\n\t  }\n\n\t  var layer = this._layers[name];\n\n\t  if (!layer) {\n\t    layer = this._layers[name] = this._createLayer(name, index);\n\t  }\n\n\t  // throw an error if layer creation / retrival is\n\t  // requested on different index\n\t  if (typeof index !== 'undefined' && layer.index !== index) {\n\t    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n\t  }\n\n\t  return layer.group;\n\t};\n\n\t/**\n\t * Creates a given layer and returns it.\n\t *\n\t * @param {string} name\n\t * @param {number} [index=0]\n\t *\n\t * @return {Object} layer descriptor with { index, group: SVGGroup }\n\t */\n\tCanvas.prototype._createLayer = function(name, index) {\n\n\t  if (!index) {\n\t    index = 0;\n\t  }\n\n\t  var childIndex = reduce(this._layers, function(childIndex, layer) {\n\t    if (index >= layer.index) {\n\t      childIndex++;\n\t    }\n\n\t    return childIndex;\n\t  }, 0);\n\n\t  return {\n\t    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n\t    index: index\n\t  };\n\n\t};\n\n\t/**\n\t * Returns the html element that encloses the\n\t * drawing canvas.\n\t *\n\t * @return {DOMNode}\n\t */\n\tCanvas.prototype.getContainer = function() {\n\t  return this._container;\n\t};\n\n\n\t// markers //////////////////////\n\n\tCanvas.prototype._updateMarker = function(element, marker, add) {\n\t  var container;\n\n\t  if (!element.id) {\n\t    element = this._elementRegistry.get(element);\n\t  }\n\n\t  // we need to access all\n\t  container = this._elementRegistry._elements[element.id];\n\n\t  if (!container) {\n\t    return;\n\t  }\n\n\t  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n\t    if (gfx) {\n\n\t      // invoke either addClass or removeClass based on mode\n\t      if (add) {\n\t        classes$1(gfx).add(marker);\n\t      } else {\n\t        classes$1(gfx).remove(marker);\n\t      }\n\t    }\n\t  });\n\n\t  /**\n\t   * An event indicating that a marker has been updated for an element\n\t   *\n\t   * @event element.marker.update\n\t   * @type {Object}\n\t   * @property {djs.model.Element} element the shape\n\t   * @property {Object} gfx the graphical representation of the shape\n\t   * @property {string} marker\n\t   * @property {boolean} add true if the marker was added, false if it got removed\n\t   */\n\t  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n\t};\n\n\n\t/**\n\t * Adds a marker to an element (basically a css class).\n\t *\n\t * Fires the element.marker.update event, making it possible to\n\t * integrate extension into the marker life-cycle, too.\n\t *\n\t * @example\n\t * canvas.addMarker('foo', 'some-marker');\n\t *\n\t * var fooGfx = canvas.getGraphics('foo');\n\t *\n\t * fooGfx; // <g class=\"... some-marker\"> ... </g>\n\t *\n\t * @param {string|djs.model.Base} element\n\t * @param {string} marker\n\t */\n\tCanvas.prototype.addMarker = function(element, marker) {\n\t  this._updateMarker(element, marker, true);\n\t};\n\n\n\t/**\n\t * Remove a marker from an element.\n\t *\n\t * Fires the element.marker.update event, making it possible to\n\t * integrate extension into the marker life-cycle, too.\n\t *\n\t * @param  {string|djs.model.Base} element\n\t * @param  {string} marker\n\t */\n\tCanvas.prototype.removeMarker = function(element, marker) {\n\t  this._updateMarker(element, marker, false);\n\t};\n\n\t/**\n\t * Check the existence of a marker on element.\n\t *\n\t * @param  {string|djs.model.Base} element\n\t * @param  {string} marker\n\t */\n\tCanvas.prototype.hasMarker = function(element, marker) {\n\t  if (!element.id) {\n\t    element = this._elementRegistry.get(element);\n\t  }\n\n\t  var gfx = this.getGraphics(element);\n\n\t  return classes$1(gfx).has(marker);\n\t};\n\n\t/**\n\t * Toggles a marker on an element.\n\t *\n\t * Fires the element.marker.update event, making it possible to\n\t * integrate extension into the marker life-cycle, too.\n\t *\n\t * @param  {string|djs.model.Base} element\n\t * @param  {string} marker\n\t */\n\tCanvas.prototype.toggleMarker = function(element, marker) {\n\t  if (this.hasMarker(element, marker)) {\n\t    this.removeMarker(element, marker);\n\t  } else {\n\t    this.addMarker(element, marker);\n\t  }\n\t};\n\n\tCanvas.prototype.getRootElement = function() {\n\t  if (!this._rootElement) {\n\t    this.setRootElement({ id: '__implicitroot', children: [] });\n\t  }\n\n\t  return this._rootElement;\n\t};\n\n\n\n\t// root element handling //////////////////////\n\n\t/**\n\t * Sets a given element as the new root element for the canvas\n\t * and returns the new root element.\n\t *\n\t * @param {Object|djs.model.Root} element\n\t * @param {boolean} [override] whether to override the current root element, if any\n\t *\n\t * @return {Object|djs.model.Root} new root element\n\t */\n\tCanvas.prototype.setRootElement = function(element, override) {\n\n\t  if (element) {\n\t    this._ensureValid('root', element);\n\t  }\n\n\t  var currentRoot = this._rootElement,\n\t      elementRegistry = this._elementRegistry,\n\t      eventBus = this._eventBus;\n\n\t  if (currentRoot) {\n\t    if (!override) {\n\t      throw new Error('rootElement already set, need to specify override');\n\t    }\n\n\t    // simulate element remove event sequence\n\t    eventBus.fire('root.remove', { element: currentRoot });\n\t    eventBus.fire('root.removed', { element: currentRoot });\n\n\t    elementRegistry.remove(currentRoot);\n\t  }\n\n\t  if (element) {\n\t    var gfx = this.getDefaultLayer();\n\n\t    // resemble element add event sequence\n\t    eventBus.fire('root.add', { element: element });\n\n\t    elementRegistry.add(element, gfx, this._svg);\n\n\t    eventBus.fire('root.added', { element: element, gfx: gfx });\n\t  }\n\n\t  this._rootElement = element;\n\n\t  return element;\n\t};\n\n\n\n\t// add functionality //////////////////////\n\n\tCanvas.prototype._ensureValid = function(type, element) {\n\t  if (!element.id) {\n\t    throw new Error('element must have an id');\n\t  }\n\n\t  if (this._elementRegistry.get(element.id)) {\n\t    throw new Error('element with id ' + element.id + ' already exists');\n\t  }\n\n\t  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n\t  var valid = every(requiredAttrs, function(attr) {\n\t    return typeof element[attr] !== 'undefined';\n\t  });\n\n\t  if (!valid) {\n\t    throw new Error(\n\t      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n\t  }\n\t};\n\n\tCanvas.prototype._setParent = function(element, parent, parentIndex) {\n\t  add$1(parent.children, element, parentIndex);\n\t  element.parent = parent;\n\t};\n\n\t/**\n\t * Adds an element to the canvas.\n\t *\n\t * This wires the parent <-> child relationship between the element and\n\t * a explicitly specified parent or an implicit root element.\n\t *\n\t * During add it emits the events\n\t *\n\t *  * <{type}.add> (element, parent)\n\t *  * <{type}.added> (element, gfx)\n\t *\n\t * Extensions may hook into these events to perform their magic.\n\t *\n\t * @param {string} type\n\t * @param {Object|djs.model.Base} element\n\t * @param {Object|djs.model.Base} [parent]\n\t * @param {number} [parentIndex]\n\t *\n\t * @return {Object|djs.model.Base} the added element\n\t */\n\tCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n\t  parent = parent || this.getRootElement();\n\n\t  var eventBus = this._eventBus,\n\t      graphicsFactory = this._graphicsFactory;\n\n\t  this._ensureValid(type, element);\n\n\t  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n\t  this._setParent(element, parent, parentIndex);\n\n\t  // create graphics\n\t  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n\t  this._elementRegistry.add(element, gfx);\n\n\t  // update its visual\n\t  graphicsFactory.update(type, element, gfx);\n\n\t  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n\t  return element;\n\t};\n\n\t/**\n\t * Adds a shape to the canvas\n\t *\n\t * @param {Object|djs.model.Shape} shape to add to the diagram\n\t * @param {djs.model.Base} [parent]\n\t * @param {number} [parentIndex]\n\t *\n\t * @return {djs.model.Shape} the added shape\n\t */\n\tCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n\t  return this._addElement('shape', shape, parent, parentIndex);\n\t};\n\n\t/**\n\t * Adds a connection to the canvas\n\t *\n\t * @param {Object|djs.model.Connection} connection to add to the diagram\n\t * @param {djs.model.Base} [parent]\n\t * @param {number} [parentIndex]\n\t *\n\t * @return {djs.model.Connection} the added connection\n\t */\n\tCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n\t  return this._addElement('connection', connection, parent, parentIndex);\n\t};\n\n\n\t/**\n\t * Internal remove element\n\t */\n\tCanvas.prototype._removeElement = function(element, type) {\n\n\t  var elementRegistry = this._elementRegistry,\n\t      graphicsFactory = this._graphicsFactory,\n\t      eventBus = this._eventBus;\n\n\t  element = elementRegistry.get(element.id || element);\n\n\t  if (!element) {\n\n\t    // element was removed already\n\t    return;\n\t  }\n\n\t  eventBus.fire(type + '.remove', { element: element });\n\n\t  graphicsFactory.remove(element);\n\n\t  // unset parent <-> child relationship\n\t  remove$2(element.parent && element.parent.children, element);\n\t  element.parent = null;\n\n\t  eventBus.fire(type + '.removed', { element: element });\n\n\t  elementRegistry.remove(element);\n\n\t  return element;\n\t};\n\n\n\t/**\n\t * Removes a shape from the canvas\n\t *\n\t * @param {string|djs.model.Shape} shape or shape id to be removed\n\t *\n\t * @return {djs.model.Shape} the removed shape\n\t */\n\tCanvas.prototype.removeShape = function(shape) {\n\n\t  /**\n\t   * An event indicating that a shape is about to be removed from the canvas.\n\t   *\n\t   * @memberOf Canvas\n\t   *\n\t   * @event shape.remove\n\t   * @type {Object}\n\t   * @property {djs.model.Shape} element the shape descriptor\n\t   * @property {Object} gfx the graphical representation of the shape\n\t   */\n\n\t  /**\n\t   * An event indicating that a shape has been removed from the canvas.\n\t   *\n\t   * @memberOf Canvas\n\t   *\n\t   * @event shape.removed\n\t   * @type {Object}\n\t   * @property {djs.model.Shape} element the shape descriptor\n\t   * @property {Object} gfx the graphical representation of the shape\n\t   */\n\t  return this._removeElement(shape, 'shape');\n\t};\n\n\n\t/**\n\t * Removes a connection from the canvas\n\t *\n\t * @param {string|djs.model.Connection} connection or connection id to be removed\n\t *\n\t * @return {djs.model.Connection} the removed connection\n\t */\n\tCanvas.prototype.removeConnection = function(connection) {\n\n\t  /**\n\t   * An event indicating that a connection is about to be removed from the canvas.\n\t   *\n\t   * @memberOf Canvas\n\t   *\n\t   * @event connection.remove\n\t   * @type {Object}\n\t   * @property {djs.model.Connection} element the connection descriptor\n\t   * @property {Object} gfx the graphical representation of the connection\n\t   */\n\n\t  /**\n\t   * An event indicating that a connection has been removed from the canvas.\n\t   *\n\t   * @memberOf Canvas\n\t   *\n\t   * @event connection.removed\n\t   * @type {Object}\n\t   * @property {djs.model.Connection} element the connection descriptor\n\t   * @property {Object} gfx the graphical representation of the connection\n\t   */\n\t  return this._removeElement(connection, 'connection');\n\t};\n\n\n\t/**\n\t * Return the graphical object underlaying a certain diagram element\n\t *\n\t * @param {string|djs.model.Base} element descriptor of the element\n\t * @param {boolean} [secondary=false] whether to return the secondary connected element\n\t *\n\t * @return {SVGElement}\n\t */\n\tCanvas.prototype.getGraphics = function(element, secondary) {\n\t  return this._elementRegistry.getGraphics(element, secondary);\n\t};\n\n\n\t/**\n\t * Perform a viewbox update via a given change function.\n\t *\n\t * @param {Function} changeFn\n\t */\n\tCanvas.prototype._changeViewbox = function(changeFn) {\n\n\t  // notify others of the upcoming viewbox change\n\t  this._eventBus.fire('canvas.viewbox.changing');\n\n\t  // perform actual change\n\t  changeFn.apply(this);\n\n\t  // reset the cached viewbox so that\n\t  // a new get operation on viewbox or zoom\n\t  // triggers a viewbox re-computation\n\t  this._cachedViewbox = null;\n\n\t  // notify others of the change; this step\n\t  // may or may not be debounced\n\t  this._viewboxChanged();\n\t};\n\n\tCanvas.prototype._viewboxChanged = function() {\n\t  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n\t};\n\n\n\t/**\n\t * Gets or sets the view box of the canvas, i.e. the\n\t * area that is currently displayed.\n\t *\n\t * The getter may return a cached viewbox (if it is currently\n\t * changing). To force a recomputation, pass `false` as the first argument.\n\t *\n\t * @example\n\t *\n\t * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n\t *\n\t * // sets the visible area of the diagram to (100|100) -> (600|100)\n\t * // and and scales it according to the diagram width\n\t *\n\t * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n\t *\n\t * console.log(viewbox);\n\t * // {\n\t * //   inner: Dimensions,\n\t * //   outer: Dimensions,\n\t * //   scale,\n\t * //   x, y,\n\t * //   width, height\n\t * // }\n\t *\n\t * // if the current diagram is zoomed and scrolled, you may reset it to the\n\t * // default zoom via this method, too:\n\t *\n\t * var zoomedAndScrolledViewbox = canvas.viewbox();\n\t *\n\t * canvas.viewbox({\n\t *   x: 0,\n\t *   y: 0,\n\t *   width: zoomedAndScrolledViewbox.outer.width,\n\t *   height: zoomedAndScrolledViewbox.outer.height\n\t * });\n\t *\n\t * @param  {Object} [box] the new view box to set\n\t * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n\t * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n\t * @param  {number} box.width the visible width\n\t * @param  {number} box.height\n\t *\n\t * @return {Object} the current view box\n\t */\n\tCanvas.prototype.viewbox = function(box) {\n\n\t  if (box === undefined && this._cachedViewbox) {\n\t    return this._cachedViewbox;\n\t  }\n\n\t  var viewport = this._viewport,\n\t      innerBox,\n\t      outerBox = this.getSize(),\n\t      matrix,\n\t      transform$1,\n\t      scale,\n\t      x, y;\n\n\t  if (!box) {\n\n\t    // compute the inner box based on the\n\t    // diagrams default layer. This allows us to exclude\n\t    // external components, such as overlays\n\t    innerBox = this.getDefaultLayer().getBBox();\n\n\t    transform$1 = transform(viewport);\n\t    matrix = transform$1 ? transform$1.matrix : createMatrix();\n\t    scale = round(matrix.a, 1000);\n\n\t    x = round(-matrix.e || 0, 1000);\n\t    y = round(-matrix.f || 0, 1000);\n\n\t    box = this._cachedViewbox = {\n\t      x: x ? x / scale : 0,\n\t      y: y ? y / scale : 0,\n\t      width: outerBox.width / scale,\n\t      height: outerBox.height / scale,\n\t      scale: scale,\n\t      inner: {\n\t        width: innerBox.width,\n\t        height: innerBox.height,\n\t        x: innerBox.x,\n\t        y: innerBox.y\n\t      },\n\t      outer: outerBox\n\t    };\n\n\t    return box;\n\t  } else {\n\n\t    this._changeViewbox(function() {\n\t      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n\t      var matrix = this._svg.createSVGMatrix()\n\t        .scale(scale)\n\t        .translate(-box.x, -box.y);\n\n\t      transform(viewport, matrix);\n\t    });\n\t  }\n\n\t  return box;\n\t};\n\n\n\t/**\n\t * Gets or sets the scroll of the canvas.\n\t *\n\t * @param {Object} [delta] the new scroll to apply.\n\t *\n\t * @param {number} [delta.dx]\n\t * @param {number} [delta.dy]\n\t */\n\tCanvas.prototype.scroll = function(delta) {\n\n\t  var node = this._viewport;\n\t  var matrix = node.getCTM();\n\n\t  if (delta) {\n\t    this._changeViewbox(function() {\n\t      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n\t      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n\t      setCTM(node, matrix);\n\t    });\n\t  }\n\n\t  return { x: matrix.e, y: matrix.f };\n\t};\n\n\n\t/**\n\t * Gets or sets the current zoom of the canvas, optionally zooming\n\t * to the specified position.\n\t *\n\t * The getter may return a cached zoom level. Call it with `false` as\n\t * the first argument to force recomputation of the current level.\n\t *\n\t * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n\t *                                   or `fit-viewport` to adjust the size to fit the current viewport\n\t * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n\t *\n\t * @return {number} the current scale\n\t */\n\tCanvas.prototype.zoom = function(newScale, center) {\n\n\t  if (!newScale) {\n\t    return this.viewbox(newScale).scale;\n\t  }\n\n\t  if (newScale === 'fit-viewport') {\n\t    return this._fitViewport(center);\n\t  }\n\n\t  var outer,\n\t      matrix;\n\n\t  this._changeViewbox(function() {\n\n\t    if (typeof center !== 'object') {\n\t      outer = this.viewbox().outer;\n\n\t      center = {\n\t        x: outer.width / 2,\n\t        y: outer.height / 2\n\t      };\n\t    }\n\n\t    matrix = this._setZoom(newScale, center);\n\t  });\n\n\t  return round(matrix.a, 1000);\n\t};\n\n\tfunction setCTM(node, m) {\n\t  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n\t  node.setAttribute('transform', mstr);\n\t}\n\n\tCanvas.prototype._fitViewport = function(center) {\n\n\t  var vbox = this.viewbox(),\n\t      outer = vbox.outer,\n\t      inner = vbox.inner,\n\t      newScale,\n\t      newViewbox;\n\n\t  // display the complete diagram without zooming in.\n\t  // instead of relying on internal zoom, we perform a\n\t  // hard reset on the canvas viewbox to realize this\n\t  //\n\t  // if diagram does not need to be zoomed in, we focus it around\n\t  // the diagram origin instead\n\n\t  if (inner.x >= 0 &&\n\t      inner.y >= 0 &&\n\t      inner.x + inner.width <= outer.width &&\n\t      inner.y + inner.height <= outer.height &&\n\t      !center) {\n\n\t    newViewbox = {\n\t      x: 0,\n\t      y: 0,\n\t      width: Math.max(inner.width + inner.x, outer.width),\n\t      height: Math.max(inner.height + inner.y, outer.height)\n\t    };\n\t  } else {\n\n\t    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n\t    newViewbox = {\n\t      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n\t      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n\t      width: outer.width / newScale,\n\t      height: outer.height / newScale\n\t    };\n\t  }\n\n\t  this.viewbox(newViewbox);\n\n\t  return this.viewbox(false).scale;\n\t};\n\n\n\tCanvas.prototype._setZoom = function(scale, center) {\n\n\t  var svg = this._svg,\n\t      viewport = this._viewport;\n\n\t  var matrix = svg.createSVGMatrix();\n\t  var point = svg.createSVGPoint();\n\n\t  var centerPoint,\n\t      originalPoint,\n\t      currentMatrix,\n\t      scaleMatrix,\n\t      newMatrix;\n\n\t  currentMatrix = viewport.getCTM();\n\n\t  var currentScale = currentMatrix.a;\n\n\t  if (center) {\n\t    centerPoint = assign(point, center);\n\n\t    // revert applied viewport transformations\n\t    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n\t    // create scale matrix\n\t    scaleMatrix = matrix\n\t      .translate(originalPoint.x, originalPoint.y)\n\t      .scale(1 / currentScale * scale)\n\t      .translate(-originalPoint.x, -originalPoint.y);\n\n\t    newMatrix = currentMatrix.multiply(scaleMatrix);\n\t  } else {\n\t    newMatrix = matrix.scale(scale);\n\t  }\n\n\t  setCTM(this._viewport, newMatrix);\n\n\t  return newMatrix;\n\t};\n\n\n\t/**\n\t * Returns the size of the canvas\n\t *\n\t * @return {Dimensions}\n\t */\n\tCanvas.prototype.getSize = function() {\n\t  return {\n\t    width: this._container.clientWidth,\n\t    height: this._container.clientHeight\n\t  };\n\t};\n\n\n\t/**\n\t * Return the absolute bounding box for the given element\n\t *\n\t * The absolute bounding box may be used to display overlays in the\n\t * callers (browser) coordinate system rather than the zoomed in/out\n\t * canvas coordinates.\n\t *\n\t * @param  {ElementDescriptor} element\n\t * @return {Bounds} the absolute bounding box\n\t */\n\tCanvas.prototype.getAbsoluteBBox = function(element) {\n\t  var vbox = this.viewbox();\n\t  var bbox;\n\n\t  // connection\n\t  // use svg bbox\n\t  if (element.waypoints) {\n\t    var gfx = this.getGraphics(element);\n\n\t    bbox = gfx.getBBox();\n\t  }\n\n\t  // shapes\n\t  // use data\n\t  else {\n\t    bbox = element;\n\t  }\n\n\t  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n\t  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n\t  var width = bbox.width * vbox.scale;\n\t  var height = bbox.height * vbox.scale;\n\n\t  return {\n\t    x: x,\n\t    y: y,\n\t    width: width,\n\t    height: height\n\t  };\n\t};\n\n\t/**\n\t * Fires an event in order other modules can react to the\n\t * canvas resizing\n\t */\n\tCanvas.prototype.resized = function() {\n\n\t  // force recomputation of view box\n\t  delete this._cachedViewbox;\n\n\t  this._eventBus.fire('canvas.resized');\n\t};\n\n\tvar ELEMENT_ID = 'data-element-id';\n\n\n\t/**\n\t * @class\n\t *\n\t * A registry that keeps track of all shapes in the diagram.\n\t */\n\tfunction ElementRegistry(eventBus) {\n\t  this._elements = {};\n\n\t  this._eventBus = eventBus;\n\t}\n\n\tElementRegistry.$inject = [ 'eventBus' ];\n\n\t/**\n\t * Register a pair of (element, gfx, (secondaryGfx)).\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {SVGElement} gfx\n\t * @param {SVGElement} [secondaryGfx] optional other element to register, too\n\t */\n\tElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {\n\n\t  var id = element.id;\n\n\t  this._validateId(id);\n\n\t  // associate dom node with element\n\t  attr$1(gfx, ELEMENT_ID, id);\n\n\t  if (secondaryGfx) {\n\t    attr$1(secondaryGfx, ELEMENT_ID, id);\n\t  }\n\n\t  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };\n\t};\n\n\t/**\n\t * Removes an element from the registry.\n\t *\n\t * @param {djs.model.Base} element\n\t */\n\tElementRegistry.prototype.remove = function(element) {\n\t  var elements = this._elements,\n\t      id = element.id || element,\n\t      container = id && elements[id];\n\n\t  if (container) {\n\n\t    // unset element id on gfx\n\t    attr$1(container.gfx, ELEMENT_ID, '');\n\n\t    if (container.secondaryGfx) {\n\t      attr$1(container.secondaryGfx, ELEMENT_ID, '');\n\t    }\n\n\t    delete elements[id];\n\t  }\n\t};\n\n\t/**\n\t * Update the id of an element\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {string} newId\n\t */\n\tElementRegistry.prototype.updateId = function(element, newId) {\n\n\t  this._validateId(newId);\n\n\t  if (typeof element === 'string') {\n\t    element = this.get(element);\n\t  }\n\n\t  this._eventBus.fire('element.updateId', {\n\t    element: element,\n\t    newId: newId\n\t  });\n\n\t  var gfx = this.getGraphics(element),\n\t      secondaryGfx = this.getGraphics(element, true);\n\n\t  this.remove(element);\n\n\t  element.id = newId;\n\n\t  this.add(element, gfx, secondaryGfx);\n\t};\n\n\t/**\n\t * Return the model element for a given id or graphics.\n\t *\n\t * @example\n\t *\n\t * elementRegistry.get('SomeElementId_1');\n\t * elementRegistry.get(gfx);\n\t *\n\t *\n\t * @param {string|SVGElement} filter for selecting the element\n\t *\n\t * @return {djs.model.Base}\n\t */\n\tElementRegistry.prototype.get = function(filter) {\n\t  var id;\n\n\t  if (typeof filter === 'string') {\n\t    id = filter;\n\t  } else {\n\t    id = filter && attr$1(filter, ELEMENT_ID);\n\t  }\n\n\t  var container = this._elements[id];\n\t  return container && container.element;\n\t};\n\n\t/**\n\t * Return all elements that match a given filter function.\n\t *\n\t * @param {Function} fn\n\t *\n\t * @return {Array<djs.model.Base>}\n\t */\n\tElementRegistry.prototype.filter = function(fn) {\n\n\t  var filtered = [];\n\n\t  this.forEach(function(element, gfx) {\n\t    if (fn(element, gfx)) {\n\t      filtered.push(element);\n\t    }\n\t  });\n\n\t  return filtered;\n\t};\n\n\t/**\n\t * Return all rendered model elements.\n\t *\n\t * @return {Array<djs.model.Base>}\n\t */\n\tElementRegistry.prototype.getAll = function() {\n\t  return this.filter(function(e) { return e; });\n\t};\n\n\t/**\n\t * Iterate over all diagram elements.\n\t *\n\t * @param {Function} fn\n\t */\n\tElementRegistry.prototype.forEach = function(fn) {\n\n\t  var map = this._elements;\n\n\t  Object.keys(map).forEach(function(id) {\n\t    var container = map[id],\n\t        element = container.element,\n\t        gfx = container.gfx;\n\n\t    return fn(element, gfx);\n\t  });\n\t};\n\n\t/**\n\t * Return the graphical representation of an element or its id.\n\t *\n\t * @example\n\t * elementRegistry.getGraphics('SomeElementId_1');\n\t * elementRegistry.getGraphics(rootElement); // <g ...>\n\t *\n\t * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n\t *\n\t *\n\t * @param {string|djs.model.Base} filter\n\t * @param {boolean} [secondary=false] whether to return the secondary connected element\n\t *\n\t * @return {SVGElement}\n\t */\n\tElementRegistry.prototype.getGraphics = function(filter, secondary) {\n\t  var id = filter.id || filter;\n\n\t  var container = this._elements[id];\n\t  return container && (secondary ? container.secondaryGfx : container.gfx);\n\t};\n\n\t/**\n\t * Validate the suitability of the given id and signals a problem\n\t * with an exception.\n\t *\n\t * @param {string} id\n\t *\n\t * @throws {Error} if id is empty or already assigned\n\t */\n\tElementRegistry.prototype._validateId = function(id) {\n\t  if (!id) {\n\t    throw new Error('element must have an id');\n\t  }\n\n\t  if (this._elements[id]) {\n\t    throw new Error('element with id ' + id + ' already added');\n\t  }\n\t};\n\n\t/**\n\t * An empty collection stub. Use {@link RefsCollection.extend} to extend a\n\t * collection with ref semantics.\n\t *\n\t * @class RefsCollection\n\t */\n\n\t/**\n\t * Extends a collection with {@link Refs} aware methods\n\t *\n\t * @memberof RefsCollection\n\t * @static\n\t *\n\t * @param  {Array<Object>} collection\n\t * @param  {Refs} refs instance\n\t * @param  {Object} property represented by the collection\n\t * @param  {Object} target object the collection is attached to\n\t *\n\t * @return {RefsCollection<Object>} the extended array\n\t */\n\tfunction extend$1(collection, refs, property, target) {\n\n\t  var inverseProperty = property.inverse;\n\n\t  /**\n\t   * Removes the given element from the array and returns it.\n\t   *\n\t   * @method RefsCollection#remove\n\t   *\n\t   * @param {Object} element the element to remove\n\t   */\n\t  Object.defineProperty(collection, 'remove', {\n\t    value: function(element) {\n\t      var idx = this.indexOf(element);\n\t      if (idx !== -1) {\n\t        this.splice(idx, 1);\n\n\t        // unset inverse\n\t        refs.unset(element, inverseProperty, target);\n\t      }\n\n\t      return element;\n\t    }\n\t  });\n\n\t  /**\n\t   * Returns true if the collection contains the given element\n\t   *\n\t   * @method RefsCollection#contains\n\t   *\n\t   * @param {Object} element the element to check for\n\t   */\n\t  Object.defineProperty(collection, 'contains', {\n\t    value: function(element) {\n\t      return this.indexOf(element) !== -1;\n\t    }\n\t  });\n\n\t  /**\n\t   * Adds an element to the array, unless it exists already (set semantics).\n\t   *\n\t   * @method RefsCollection#add\n\t   *\n\t   * @param {Object} element the element to add\n\t   * @param {Number} optional index to add element to\n\t   *                 (possibly moving other elements around)\n\t   */\n\t  Object.defineProperty(collection, 'add', {\n\t    value: function(element, idx) {\n\n\t      var currentIdx = this.indexOf(element);\n\n\t      if (typeof idx === 'undefined') {\n\n\t        if (currentIdx !== -1) {\n\t          // element already in collection (!)\n\t          return;\n\t        }\n\n\t        // add to end of array, as no idx is specified\n\t        idx = this.length;\n\t      }\n\n\t      // handle already in collection\n\t      if (currentIdx !== -1) {\n\n\t        // remove element from currentIdx\n\t        this.splice(currentIdx, 1);\n\t      }\n\n\t      // add element at idx\n\t      this.splice(idx, 0, element);\n\n\t      if (currentIdx === -1) {\n\t        // set inverse, unless element was\n\t        // in collection already\n\t        refs.set(element, inverseProperty, target);\n\t      }\n\t    }\n\t  });\n\n\t  // a simple marker, identifying this element\n\t  // as being a refs collection\n\t  Object.defineProperty(collection, '__refs_collection', {\n\t    value: true\n\t  });\n\n\t  return collection;\n\t}\n\n\n\tfunction isExtended(collection) {\n\t  return collection.__refs_collection === true;\n\t}\n\n\tvar extend_1 = extend$1;\n\n\tvar isExtended_1 = isExtended;\n\n\tvar collection = {\n\t\textend: extend_1,\n\t\tisExtended: isExtended_1\n\t};\n\n\tfunction hasOwnProperty(e, property) {\n\t  return Object.prototype.hasOwnProperty.call(e, property.name || property);\n\t}\n\n\tfunction defineCollectionProperty(ref, property, target) {\n\n\t  var collection$1 = collection.extend(target[property.name] || [], ref, property, target);\n\n\t  Object.defineProperty(target, property.name, {\n\t    enumerable: property.enumerable,\n\t    value: collection$1\n\t  });\n\n\t  if (collection$1.length) {\n\n\t    collection$1.forEach(function(o) {\n\t      ref.set(o, property.inverse, target);\n\t    });\n\t  }\n\t}\n\n\n\tfunction defineProperty(ref, property, target) {\n\n\t  var inverseProperty = property.inverse;\n\n\t  var _value = target[property.name];\n\n\t  Object.defineProperty(target, property.name, {\n\t    configurable: property.configurable,\n\t    enumerable: property.enumerable,\n\n\t    get: function() {\n\t      return _value;\n\t    },\n\n\t    set: function(value) {\n\n\t      // return if we already performed all changes\n\t      if (value === _value) {\n\t        return;\n\t      }\n\n\t      var old = _value;\n\n\t      // temporary set null\n\t      _value = null;\n\n\t      if (old) {\n\t        ref.unset(old, inverseProperty, target);\n\t      }\n\n\t      // set new value\n\t      _value = value;\n\n\t      // set inverse value\n\t      ref.set(_value, inverseProperty, target);\n\t    }\n\t  });\n\n\t}\n\n\t/**\n\t * Creates a new references object defining two inversly related\n\t * attribute descriptors a and b.\n\t *\n\t * <p>\n\t *   When bound to an object using {@link Refs#bind} the references\n\t *   get activated and ensure that add and remove operations are applied\n\t *   reversely, too.\n\t * </p>\n\t *\n\t * <p>\n\t *   For attributes represented as collections {@link Refs} provides the\n\t *   {@link RefsCollection#add}, {@link RefsCollection#remove} and {@link RefsCollection#contains} extensions\n\t *   that must be used to properly hook into the inverse change mechanism.\n\t * </p>\n\t *\n\t * @class Refs\n\t *\n\t * @classdesc A bi-directional reference between two attributes.\n\t *\n\t * @param {Refs.AttributeDescriptor} a property descriptor\n\t * @param {Refs.AttributeDescriptor} b property descriptor\n\t *\n\t * @example\n\t *\n\t * var refs = Refs({ name: 'wheels', collection: true, enumerable: true }, { name: 'car' });\n\t *\n\t * var car = { name: 'toyota' };\n\t * var wheels = [{ pos: 'front-left' }, { pos: 'front-right' }];\n\t *\n\t * refs.bind(car, 'wheels');\n\t *\n\t * car.wheels // []\n\t * car.wheels.add(wheels[0]);\n\t * car.wheels.add(wheels[1]);\n\t *\n\t * car.wheels // [{ pos: 'front-left' }, { pos: 'front-right' }]\n\t *\n\t * wheels[0].car // { name: 'toyota' };\n\t * car.wheels.remove(wheels[0]);\n\t *\n\t * wheels[0].car // undefined\n\t */\n\tfunction Refs(a, b) {\n\n\t  if (!(this instanceof Refs)) {\n\t    return new Refs(a, b);\n\t  }\n\n\t  // link\n\t  a.inverse = b;\n\t  b.inverse = a;\n\n\t  this.props = {};\n\t  this.props[a.name] = a;\n\t  this.props[b.name] = b;\n\t}\n\n\t/**\n\t * Binds one side of a bi-directional reference to a\n\t * target object.\n\t *\n\t * @memberOf Refs\n\t *\n\t * @param  {Object} target\n\t * @param  {String} property\n\t */\n\tRefs.prototype.bind = function(target, property) {\n\t  if (typeof property === 'string') {\n\t    if (!this.props[property]) {\n\t      throw new Error('no property <' + property + '> in ref');\n\t    }\n\t    property = this.props[property];\n\t  }\n\n\t  if (property.collection) {\n\t    defineCollectionProperty(this, property, target);\n\t  } else {\n\t    defineProperty(this, property, target);\n\t  }\n\t};\n\n\tRefs.prototype.ensureRefsCollection = function(target, property) {\n\n\t  var collection$1 = target[property.name];\n\n\t  if (!collection.isExtended(collection$1)) {\n\t    defineCollectionProperty(this, property, target);\n\t  }\n\n\t  return collection$1;\n\t};\n\n\tRefs.prototype.ensureBound = function(target, property) {\n\t  if (!hasOwnProperty(target, property)) {\n\t    this.bind(target, property);\n\t  }\n\t};\n\n\tRefs.prototype.unset = function(target, property, value) {\n\n\t  if (target) {\n\t    this.ensureBound(target, property);\n\n\t    if (property.collection) {\n\t      this.ensureRefsCollection(target, property).remove(value);\n\t    } else {\n\t      target[property.name] = undefined;\n\t    }\n\t  }\n\t};\n\n\tRefs.prototype.set = function(target, property, value) {\n\n\t  if (target) {\n\t    this.ensureBound(target, property);\n\n\t    if (property.collection) {\n\t      this.ensureRefsCollection(target, property).add(value);\n\t    } else {\n\t      target[property.name] = value;\n\t    }\n\t  }\n\t};\n\n\tvar refs = Refs;\n\n\tvar objectRefs = refs;\n\n\tvar Collection = collection;\n\tobjectRefs.Collection = Collection;\n\n\tvar parentRefs = new objectRefs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),\n\t    labelRefs = new objectRefs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),\n\t    attacherRefs = new objectRefs({ name: 'attachers', collection: true }, { name: 'host' }),\n\t    outgoingRefs = new objectRefs({ name: 'outgoing', collection: true }, { name: 'source' }),\n\t    incomingRefs = new objectRefs({ name: 'incoming', collection: true }, { name: 'target' });\n\n\t/**\n\t * @namespace djs.model\n\t */\n\n\t/**\n\t * @memberOf djs.model\n\t */\n\n\t/**\n\t * The basic graphical representation\n\t *\n\t * @class\n\t *\n\t * @abstract\n\t */\n\tfunction Base() {\n\n\t  /**\n\t   * The object that backs up the shape\n\t   *\n\t   * @name Base#businessObject\n\t   * @type Object\n\t   */\n\t  Object.defineProperty(this, 'businessObject', {\n\t    writable: true\n\t  });\n\n\n\t  /**\n\t   * Single label support, will mapped to multi label array\n\t   *\n\t   * @name Base#label\n\t   * @type Object\n\t   */\n\t  Object.defineProperty(this, 'label', {\n\t    get: function() {\n\t      return this.labels[0];\n\t    },\n\t    set: function(newLabel) {\n\n\t      var label = this.label,\n\t          labels = this.labels;\n\n\t      if (!newLabel && label) {\n\t        labels.remove(label);\n\t      } else {\n\t        labels.add(newLabel, 0);\n\t      }\n\t    }\n\t  });\n\n\t  /**\n\t   * The parent shape\n\t   *\n\t   * @name Base#parent\n\t   * @type Shape\n\t   */\n\t  parentRefs.bind(this, 'parent');\n\n\t  /**\n\t   * The list of labels\n\t   *\n\t   * @name Base#labels\n\t   * @type Label\n\t   */\n\t  labelRefs.bind(this, 'labels');\n\n\t  /**\n\t   * The list of outgoing connections\n\t   *\n\t   * @name Base#outgoing\n\t   * @type Array<Connection>\n\t   */\n\t  outgoingRefs.bind(this, 'outgoing');\n\n\t  /**\n\t   * The list of incoming connections\n\t   *\n\t   * @name Base#incoming\n\t   * @type Array<Connection>\n\t   */\n\t  incomingRefs.bind(this, 'incoming');\n\t}\n\n\n\t/**\n\t * A graphical object\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @extends Base\n\t */\n\tfunction Shape() {\n\t  Base.call(this);\n\n\t  /**\n\t   * Indicates frame shapes\n\t   *\n\t   * @name Shape#isFrame\n\t   * @type boolean\n\t   */\n\n\t  /**\n\t   * The list of children\n\t   *\n\t   * @name Shape#children\n\t   * @type Array<Base>\n\t   */\n\t  parentRefs.bind(this, 'children');\n\n\t  /**\n\t   * @name Shape#host\n\t   * @type Shape\n\t   */\n\t  attacherRefs.bind(this, 'host');\n\n\t  /**\n\t   * @name Shape#attachers\n\t   * @type Shape\n\t   */\n\t  attacherRefs.bind(this, 'attachers');\n\t}\n\n\tinherits_browser(Shape, Base);\n\n\n\t/**\n\t * A root graphical object\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @extends Shape\n\t */\n\tfunction Root() {\n\t  Shape.call(this);\n\t}\n\n\tinherits_browser(Root, Shape);\n\n\n\t/**\n\t * A label for an element\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @extends Shape\n\t */\n\tfunction Label() {\n\t  Shape.call(this);\n\n\t  /**\n\t   * The labeled element\n\t   *\n\t   * @name Label#labelTarget\n\t   * @type Base\n\t   */\n\t  labelRefs.bind(this, 'labelTarget');\n\t}\n\n\tinherits_browser(Label, Shape);\n\n\n\t/**\n\t * A connection between two elements\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @extends Base\n\t */\n\tfunction Connection() {\n\t  Base.call(this);\n\n\t  /**\n\t   * The element this connection originates from\n\t   *\n\t   * @name Connection#source\n\t   * @type Base\n\t   */\n\t  outgoingRefs.bind(this, 'source');\n\n\t  /**\n\t   * The element this connection points to\n\t   *\n\t   * @name Connection#target\n\t   * @type Base\n\t   */\n\t  incomingRefs.bind(this, 'target');\n\t}\n\n\tinherits_browser(Connection, Base);\n\n\n\tvar types = {\n\t  connection: Connection,\n\t  shape: Shape,\n\t  label: Label,\n\t  root: Root\n\t};\n\n\t/**\n\t * Creates a new model element of the specified type\n\t *\n\t * @method create\n\t *\n\t * @example\n\t *\n\t * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });\n\t * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });\n\t *\n\t * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });\n\t *\n\t * @param  {string} type lower-cased model name\n\t * @param  {Object} attrs attributes to initialize the new model instance with\n\t *\n\t * @return {Base} the new model instance\n\t */\n\tfunction create$1(type, attrs) {\n\t  var Type = types[type];\n\t  if (!Type) {\n\t    throw new Error('unknown type: <' + type + '>');\n\t  }\n\t  return assign(new Type(), attrs);\n\t}\n\n\t/**\n\t * A factory for diagram-js shapes\n\t */\n\tfunction ElementFactory() {\n\t  this._uid = 12;\n\t}\n\n\n\tElementFactory.prototype.createRoot = function(attrs) {\n\t  return this.create('root', attrs);\n\t};\n\n\tElementFactory.prototype.createLabel = function(attrs) {\n\t  return this.create('label', attrs);\n\t};\n\n\tElementFactory.prototype.createShape = function(attrs) {\n\t  return this.create('shape', attrs);\n\t};\n\n\tElementFactory.prototype.createConnection = function(attrs) {\n\t  return this.create('connection', attrs);\n\t};\n\n\t/**\n\t * Create a model element with the given type and\n\t * a number of pre-set attributes.\n\t *\n\t * @param  {string} type\n\t * @param  {Object} attrs\n\t * @return {djs.model.Base} the newly created model instance\n\t */\n\tElementFactory.prototype.create = function(type, attrs) {\n\n\t  attrs = assign({}, attrs || {});\n\n\t  if (!attrs.id) {\n\t    attrs.id = type + '_' + (this._uid++);\n\t  }\n\n\t  return create$1(type, attrs);\n\t};\n\n\tvar FN_REF = '__fn';\n\n\tvar DEFAULT_PRIORITY = 1000;\n\n\tvar slice$1 = Array.prototype.slice;\n\n\t/**\n\t * A general purpose event bus.\n\t *\n\t * This component is used to communicate across a diagram instance.\n\t * Other parts of a diagram can use it to listen to and broadcast events.\n\t *\n\t *\n\t * ## Registering for Events\n\t *\n\t * The event bus provides the {@link EventBus#on} and {@link EventBus#once}\n\t * methods to register for events. {@link EventBus#off} can be used to\n\t * remove event registrations. Listeners receive an instance of {@link Event}\n\t * as the first argument. It allows them to hook into the event execution.\n\t *\n\t * ```javascript\n\t *\n\t * // listen for event\n\t * eventBus.on('foo', function(event) {\n\t *\n\t *   // access event type\n\t *   event.type; // 'foo'\n\t *\n\t *   // stop propagation to other listeners\n\t *   event.stopPropagation();\n\t *\n\t *   // prevent event default\n\t *   event.preventDefault();\n\t * });\n\t *\n\t * // listen for event with custom payload\n\t * eventBus.on('bar', function(event, payload) {\n\t *   console.log(payload);\n\t * });\n\t *\n\t * // listen for event returning value\n\t * eventBus.on('foobar', function(event) {\n\t *\n\t *   // stop event propagation + prevent default\n\t *   return false;\n\t *\n\t *   // stop event propagation + return custom result\n\t *   return {\n\t *     complex: 'listening result'\n\t *   };\n\t * });\n\t *\n\t *\n\t * // listen with custom priority (default=1000, higher is better)\n\t * eventBus.on('priorityfoo', 1500, function(event) {\n\t *   console.log('invoked first!');\n\t * });\n\t *\n\t *\n\t * // listen for event and pass the context (`this`)\n\t * eventBus.on('foobar', function(event) {\n\t *   this.foo();\n\t * }, this);\n\t * ```\n\t *\n\t *\n\t * ## Emitting Events\n\t *\n\t * Events can be emitted via the event bus using {@link EventBus#fire}.\n\t *\n\t * ```javascript\n\t *\n\t * // false indicates that the default action\n\t * // was prevented by listeners\n\t * if (eventBus.fire('foo') === false) {\n\t *   console.log('default has been prevented!');\n\t * };\n\t *\n\t *\n\t * // custom args + return value listener\n\t * eventBus.on('sum', function(event, a, b) {\n\t *   return a + b;\n\t * });\n\t *\n\t * // you can pass custom arguments + retrieve result values.\n\t * var sum = eventBus.fire('sum', 1, 2);\n\t * console.log(sum); // 3\n\t * ```\n\t */\n\tfunction EventBus() {\n\t  this._listeners = {};\n\n\t  // cleanup on destroy on lowest priority to allow\n\t  // message passing until the bitter end\n\t  this.on('diagram.destroy', 1, this._destroy, this);\n\t}\n\n\n\t/**\n\t * Register an event listener for events with the given name.\n\t *\n\t * The callback will be invoked with `event, ...additionalArguments`\n\t * that have been passed to {@link EventBus#fire}.\n\t *\n\t * Returning false from a listener will prevent the events default action\n\t * (if any is specified). To stop an event from being processed further in\n\t * other listeners execute {@link Event#stopPropagation}.\n\t *\n\t * Returning anything but `undefined` from a listener will stop the listener propagation.\n\t *\n\t * @param {string|Array<string>} events\n\t * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n\t * @param {Function} callback\n\t * @param {Object} [that] Pass context (`this`) to the callback\n\t */\n\tEventBus.prototype.on = function(events, priority, callback, that) {\n\n\t  events = isArray(events) ? events : [ events ];\n\n\t  if (isFunction(priority)) {\n\t    that = callback;\n\t    callback = priority;\n\t    priority = DEFAULT_PRIORITY;\n\t  }\n\n\t  if (!isNumber(priority)) {\n\t    throw new Error('priority must be a number');\n\t  }\n\n\t  var actualCallback = callback;\n\n\t  if (that) {\n\t    actualCallback = bind(callback, that);\n\n\t    // make sure we remember and are able to remove\n\t    // bound callbacks via {@link #off} using the original\n\t    // callback\n\t    actualCallback[FN_REF] = callback[FN_REF] || callback;\n\t  }\n\n\t  var self = this;\n\n\t  events.forEach(function(e) {\n\t    self._addListener(e, {\n\t      priority: priority,\n\t      callback: actualCallback,\n\t      next: null\n\t    });\n\t  });\n\t};\n\n\n\t/**\n\t * Register an event listener that is executed only once.\n\t *\n\t * @param {string} event the event name to register for\n\t * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n\t * @param {Function} callback the callback to execute\n\t * @param {Object} [that] Pass context (`this`) to the callback\n\t */\n\tEventBus.prototype.once = function(event, priority, callback, that) {\n\t  var self = this;\n\n\t  if (isFunction(priority)) {\n\t    that = callback;\n\t    callback = priority;\n\t    priority = DEFAULT_PRIORITY;\n\t  }\n\n\t  if (!isNumber(priority)) {\n\t    throw new Error('priority must be a number');\n\t  }\n\n\t  function wrappedCallback() {\n\t    var result = callback.apply(that, arguments);\n\n\t    self.off(event, wrappedCallback);\n\n\t    return result;\n\t  }\n\n\t  // make sure we remember and are able to remove\n\t  // bound callbacks via {@link #off} using the original\n\t  // callback\n\t  wrappedCallback[FN_REF] = callback;\n\n\t  this.on(event, priority, wrappedCallback);\n\t};\n\n\n\t/**\n\t * Removes event listeners by event and callback.\n\t *\n\t * If no callback is given, all listeners for a given event name are being removed.\n\t *\n\t * @param {string|Array<string>} events\n\t * @param {Function} [callback]\n\t */\n\tEventBus.prototype.off = function(events, callback) {\n\n\t  events = isArray(events) ? events : [ events ];\n\n\t  var self = this;\n\n\t  events.forEach(function(event) {\n\t    self._removeListener(event, callback);\n\t  });\n\n\t};\n\n\n\t/**\n\t * Create an EventBus event.\n\t *\n\t * @param {Object} data\n\t *\n\t * @return {Object} event, recognized by the eventBus\n\t */\n\tEventBus.prototype.createEvent = function(data) {\n\t  var event = new InternalEvent();\n\n\t  event.init(data);\n\n\t  return event;\n\t};\n\n\n\t/**\n\t * Fires a named event.\n\t *\n\t * @example\n\t *\n\t * // fire event by name\n\t * events.fire('foo');\n\t *\n\t * // fire event object with nested type\n\t * var event = { type: 'foo' };\n\t * events.fire(event);\n\t *\n\t * // fire event with explicit type\n\t * var event = { x: 10, y: 20 };\n\t * events.fire('element.moved', event);\n\t *\n\t * // pass additional arguments to the event\n\t * events.on('foo', function(event, bar) {\n\t *   alert(bar);\n\t * });\n\t *\n\t * events.fire({ type: 'foo' }, 'I am bar!');\n\t *\n\t * @param {string} [name] the optional event name\n\t * @param {Object} [event] the event object\n\t * @param {...Object} additional arguments to be passed to the callback functions\n\t *\n\t * @return {boolean} the events return value, if specified or false if the\n\t *                   default action was prevented by listeners\n\t */\n\tEventBus.prototype.fire = function(type, data) {\n\t  var event,\n\t      firstListener,\n\t      returnValue,\n\t      args;\n\n\t  args = slice$1.call(arguments);\n\n\t  if (typeof type === 'object') {\n\t    data = type;\n\t    type = data.type;\n\t  }\n\n\t  if (!type) {\n\t    throw new Error('no event type specified');\n\t  }\n\n\t  firstListener = this._listeners[type];\n\n\t  if (!firstListener) {\n\t    return;\n\t  }\n\n\t  // we make sure we fire instances of our home made\n\t  // events here. We wrap them only once, though\n\t  if (data instanceof InternalEvent) {\n\n\t    // we are fine, we alread have an event\n\t    event = data;\n\t  } else {\n\t    event = this.createEvent(data);\n\t  }\n\n\t  // ensure we pass the event as the first parameter\n\t  args[0] = event;\n\n\t  // original event type (in case we delegate)\n\t  var originalType = event.type;\n\n\t  // update event type before delegation\n\t  if (type !== originalType) {\n\t    event.type = type;\n\t  }\n\n\t  try {\n\t    returnValue = this._invokeListeners(event, args, firstListener);\n\t  } finally {\n\n\t    // reset event type after delegation\n\t    if (type !== originalType) {\n\t      event.type = originalType;\n\t    }\n\t  }\n\n\t  // set the return value to false if the event default\n\t  // got prevented and no other return value exists\n\t  if (returnValue === undefined && event.defaultPrevented) {\n\t    returnValue = false;\n\t  }\n\n\t  return returnValue;\n\t};\n\n\n\tEventBus.prototype.handleError = function(error) {\n\t  return this.fire('error', { error: error }) === false;\n\t};\n\n\n\tEventBus.prototype._destroy = function() {\n\t  this._listeners = {};\n\t};\n\n\tEventBus.prototype._invokeListeners = function(event, args, listener) {\n\n\t  var returnValue;\n\n\t  while (listener) {\n\n\t    // handle stopped propagation\n\t    if (event.cancelBubble) {\n\t      break;\n\t    }\n\n\t    returnValue = this._invokeListener(event, args, listener);\n\n\t    listener = listener.next;\n\t  }\n\n\t  return returnValue;\n\t};\n\n\tEventBus.prototype._invokeListener = function(event, args, listener) {\n\n\t  var returnValue;\n\n\t  try {\n\n\t    // returning false prevents the default action\n\t    returnValue = invokeFunction(listener.callback, args);\n\n\t    // stop propagation on return value\n\t    if (returnValue !== undefined) {\n\t      event.returnValue = returnValue;\n\t      event.stopPropagation();\n\t    }\n\n\t    // prevent default on return false\n\t    if (returnValue === false) {\n\t      event.preventDefault();\n\t    }\n\t  } catch (e) {\n\t    if (!this.handleError(e)) {\n\t      console.error('unhandled error in event listener');\n\t      console.error(e.stack);\n\n\t      throw e;\n\t    }\n\t  }\n\n\t  return returnValue;\n\t};\n\n\t/*\n\t * Add new listener with a certain priority to the list\n\t * of listeners (for the given event).\n\t *\n\t * The semantics of listener registration / listener execution are\n\t * first register, first serve: New listeners will always be inserted\n\t * after existing listeners with the same priority.\n\t *\n\t * Example: Inserting two listeners with priority 1000 and 1300\n\t *\n\t *    * before: [ 1500, 1500, 1000, 1000 ]\n\t *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]\n\t *\n\t * @param {string} event\n\t * @param {Object} listener { priority, callback }\n\t */\n\tEventBus.prototype._addListener = function(event, newListener) {\n\n\t  var listener = this._getListeners(event),\n\t      previousListener;\n\n\t  // no prior listeners\n\t  if (!listener) {\n\t    this._setListeners(event, newListener);\n\n\t    return;\n\t  }\n\n\t  // ensure we order listeners by priority from\n\t  // 0 (high) to n > 0 (low)\n\t  while (listener) {\n\n\t    if (listener.priority < newListener.priority) {\n\n\t      newListener.next = listener;\n\n\t      if (previousListener) {\n\t        previousListener.next = newListener;\n\t      } else {\n\t        this._setListeners(event, newListener);\n\t      }\n\n\t      return;\n\t    }\n\n\t    previousListener = listener;\n\t    listener = listener.next;\n\t  }\n\n\t  // add new listener to back\n\t  previousListener.next = newListener;\n\t};\n\n\n\tEventBus.prototype._getListeners = function(name) {\n\t  return this._listeners[name];\n\t};\n\n\tEventBus.prototype._setListeners = function(name, listener) {\n\t  this._listeners[name] = listener;\n\t};\n\n\tEventBus.prototype._removeListener = function(event, callback) {\n\n\t  var listener = this._getListeners(event),\n\t      nextListener,\n\t      previousListener,\n\t      listenerCallback;\n\n\t  if (!callback) {\n\n\t    // clear listeners\n\t    this._setListeners(event, null);\n\n\t    return;\n\t  }\n\n\t  while (listener) {\n\n\t    nextListener = listener.next;\n\n\t    listenerCallback = listener.callback;\n\n\t    if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {\n\t      if (previousListener) {\n\t        previousListener.next = nextListener;\n\t      } else {\n\n\t        // new first listener\n\t        this._setListeners(event, nextListener);\n\t      }\n\t    }\n\n\t    previousListener = listener;\n\t    listener = nextListener;\n\t  }\n\t};\n\n\t/**\n\t * A event that is emitted via the event bus.\n\t */\n\tfunction InternalEvent() { }\n\n\tInternalEvent.prototype.stopPropagation = function() {\n\t  this.cancelBubble = true;\n\t};\n\n\tInternalEvent.prototype.preventDefault = function() {\n\t  this.defaultPrevented = true;\n\t};\n\n\tInternalEvent.prototype.init = function(data) {\n\t  assign(this, data || {});\n\t};\n\n\n\t/**\n\t * Invoke function. Be fast...\n\t *\n\t * @param {Function} fn\n\t * @param {Array<Object>} args\n\t *\n\t * @return {Any}\n\t */\n\tfunction invokeFunction(fn, args) {\n\t  return fn.apply(null, args);\n\t}\n\n\t/**\n\t * SVGs for elements are generated by the {@link GraphicsFactory}.\n\t *\n\t * This utility gives quick access to the important semantic\n\t * parts of an element.\n\t */\n\n\t/**\n\t * Returns the visual part of a diagram element\n\t *\n\t * @param {Snap<SVGElement>} gfx\n\t *\n\t * @return {Snap<SVGElement>}\n\t */\n\tfunction getVisual(gfx) {\n\t  return gfx.childNodes[0];\n\t}\n\n\t/**\n\t * Returns the children for a given diagram element.\n\t *\n\t * @param {Snap<SVGElement>} gfx\n\t * @return {Snap<SVGElement>}\n\t */\n\tfunction getChildren(gfx) {\n\t  return gfx.parentNode.childNodes[1];\n\t}\n\n\t/**\r\n\t * @param {<SVGElement>} element\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} angle\r\n\t * @param {number} amount\r\n\t */\r\n\tfunction transform$1(gfx, x, y, angle, amount) {\r\n\t  var translate = createTransform();\r\n\t  translate.setTranslate(x, y);\r\n\r\n\t  var rotate = createTransform();\r\n\t  rotate.setRotate(angle || 0, 0, 0);\r\n\r\n\t  var scale = createTransform();\r\n\t  scale.setScale(amount || 1, amount || 1);\r\n\r\n\t  transform(gfx, [ translate, rotate, scale ]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {SVGElement} element\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tfunction translate(gfx, x, y) {\r\n\t  var translate = createTransform();\r\n\t  translate.setTranslate(x, y);\r\n\r\n\t  transform(gfx, translate);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {SVGElement} element\r\n\t * @param {number} angle\r\n\t */\r\n\tfunction rotate(gfx, angle) {\r\n\t  var rotate = createTransform();\r\n\t  rotate.setRotate(angle, 0, 0);\r\n\r\n\t  transform(gfx, rotate);\r\n\t}\n\n\t/**\n\t * A factory that creates graphical elements\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementRegistry} elementRegistry\n\t */\n\tfunction GraphicsFactory(eventBus, elementRegistry) {\n\t  this._eventBus = eventBus;\n\t  this._elementRegistry = elementRegistry;\n\t}\n\n\tGraphicsFactory.$inject = [ 'eventBus' , 'elementRegistry' ];\n\n\n\tGraphicsFactory.prototype._getChildrenContainer = function(element) {\n\n\t  var gfx = this._elementRegistry.getGraphics(element);\n\n\t  var childrenGfx;\n\n\t  // root element\n\t  if (!element.parent) {\n\t    childrenGfx = gfx;\n\t  } else {\n\t    childrenGfx = getChildren(gfx);\n\t    if (!childrenGfx) {\n\t      childrenGfx = create('g');\n\t      classes$1(childrenGfx).add('djs-children');\n\n\t      append(gfx.parentNode, childrenGfx);\n\t    }\n\t  }\n\n\t  return childrenGfx;\n\t};\n\n\t/**\n\t * Clears the graphical representation of the element and returns the\n\t * cleared visual (the <g class=\"djs-visual\" /> element).\n\t */\n\tGraphicsFactory.prototype._clear = function(gfx) {\n\t  var visual = getVisual(gfx);\n\n\t  clear(visual);\n\n\t  return visual;\n\t};\n\n\t/**\n\t * Creates a gfx container for shapes and connections\n\t *\n\t * The layout is as follows:\n\t *\n\t * <g class=\"djs-group\">\n\t *\n\t *   <!-- the gfx -->\n\t *   <g class=\"djs-element djs-(shape|connection|frame)\">\n\t *     <g class=\"djs-visual\">\n\t *       <!-- the renderer draws in here -->\n\t *     </g>\n\t *\n\t *     <!-- extensions (overlays, click box, ...) goes here\n\t *   </g>\n\t *\n\t *   <!-- the gfx child nodes -->\n\t *   <g class=\"djs-children\"></g>\n\t * </g>\n\t *\n\t * @param {string} type the type of the element, i.e. shape | connection\n\t * @param {SVGElement} [childrenGfx]\n\t * @param {number} [parentIndex] position to create container in parent\n\t * @param {boolean} [isFrame] is frame element\n\t *\n\t * @return {SVGElement}\n\t */\n\tGraphicsFactory.prototype._createContainer = function(\n\t    type, childrenGfx, parentIndex, isFrame\n\t) {\n\t  var outerGfx = create('g');\n\t  classes$1(outerGfx).add('djs-group');\n\n\t  // insert node at position\n\t  if (typeof parentIndex !== 'undefined') {\n\t    prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);\n\t  } else {\n\t    append(childrenGfx, outerGfx);\n\t  }\n\n\t  var gfx = create('g');\n\t  classes$1(gfx).add('djs-element');\n\t  classes$1(gfx).add('djs-' + type);\n\n\t  if (isFrame) {\n\t    classes$1(gfx).add('djs-frame');\n\t  }\n\n\t  append(outerGfx, gfx);\n\n\t  // create visual\n\t  var visual = create('g');\n\t  classes$1(visual).add('djs-visual');\n\n\t  append(gfx, visual);\n\n\t  return gfx;\n\t};\n\n\tGraphicsFactory.prototype.create = function(type, element, parentIndex) {\n\t  var childrenGfx = this._getChildrenContainer(element.parent);\n\t  return this._createContainer(type, childrenGfx, parentIndex, isFrameElement(element));\n\t};\n\n\tGraphicsFactory.prototype.updateContainments = function(elements) {\n\n\t  var self = this,\n\t      elementRegistry = this._elementRegistry,\n\t      parents;\n\n\t  parents = reduce(elements, function(map, e) {\n\n\t    if (e.parent) {\n\t      map[e.parent.id] = e.parent;\n\t    }\n\n\t    return map;\n\t  }, {});\n\n\t  // update all parents of changed and reorganized their children\n\t  // in the correct order (as indicated in our model)\n\t  forEach(parents, function(parent) {\n\n\t    var children = parent.children;\n\n\t    if (!children) {\n\t      return;\n\t    }\n\n\t    var childrenGfx = self._getChildrenContainer(parent);\n\n\t    forEach(children.slice().reverse(), function(child) {\n\t      var childGfx = elementRegistry.getGraphics(child);\n\n\t      prependTo(childGfx.parentNode, childrenGfx);\n\t    });\n\t  });\n\t};\n\n\tGraphicsFactory.prototype.drawShape = function(visual, element) {\n\t  var eventBus = this._eventBus;\n\n\t  return eventBus.fire('render.shape', { gfx: visual, element: element });\n\t};\n\n\tGraphicsFactory.prototype.getShapePath = function(element) {\n\t  var eventBus = this._eventBus;\n\n\t  return eventBus.fire('render.getShapePath', element);\n\t};\n\n\tGraphicsFactory.prototype.drawConnection = function(visual, element) {\n\t  var eventBus = this._eventBus;\n\n\t  return eventBus.fire('render.connection', { gfx: visual, element: element });\n\t};\n\n\tGraphicsFactory.prototype.getConnectionPath = function(waypoints) {\n\t  var eventBus = this._eventBus;\n\n\t  return eventBus.fire('render.getConnectionPath', waypoints);\n\t};\n\n\tGraphicsFactory.prototype.update = function(type, element, gfx) {\n\n\t  // do NOT update root element\n\t  if (!element.parent) {\n\t    return;\n\t  }\n\n\t  var visual = this._clear(gfx);\n\n\t  // redraw\n\t  if (type === 'shape') {\n\t    this.drawShape(visual, element);\n\n\t    // update positioning\n\t    translate(gfx, element.x, element.y);\n\t  } else\n\t  if (type === 'connection') {\n\t    this.drawConnection(visual, element);\n\t  } else {\n\t    throw new Error('unknown type: ' + type);\n\t  }\n\n\t  if (element.hidden) {\n\t    attr$1(gfx, 'display', 'none');\n\t  } else {\n\t    attr$1(gfx, 'display', 'block');\n\t  }\n\t};\n\n\tGraphicsFactory.prototype.remove = function(element) {\n\t  var gfx = this._elementRegistry.getGraphics(element);\n\n\t  // remove\n\t  remove$1(gfx.parentNode);\n\t};\n\n\n\t// helpers //////////\n\n\tfunction prependTo(newNode, parentNode, siblingNode) {\n\t  var node = siblingNode || parentNode.firstChild;\n\n\t  // do not prepend node to itself to prevent IE from crashing\n\t  // https://github.com/bpmn-io/bpmn-js/issues/746\n\t  if (newNode === node) {\n\t    return;\n\t  }\n\n\t  parentNode.insertBefore(newNode, node);\n\t}\n\n\tvar CoreModule = {\n\t  __depends__: [ DrawModule ],\n\t  __init__: [ 'canvas' ],\n\t  canvas: [ 'type', Canvas ],\n\t  elementRegistry: [ 'type', ElementRegistry ],\n\t  elementFactory: [ 'type', ElementFactory ],\n\t  eventBus: [ 'type', EventBus ],\n\t  graphicsFactory: [ 'type', GraphicsFactory ]\n\t};\n\n\t/**\n\t * Bootstrap an injector from a list of modules, instantiating a number of default components\n\t *\n\t * @ignore\n\t * @param {Array<didi.Module>} bootstrapModules\n\t *\n\t * @return {didi.Injector} a injector to use to access the components\n\t */\n\tfunction bootstrap(bootstrapModules) {\n\n\t  var modules = [],\n\t      components = [];\n\n\t  function hasModule(m) {\n\t    return modules.indexOf(m) >= 0;\n\t  }\n\n\t  function addModule(m) {\n\t    modules.push(m);\n\t  }\n\n\t  function visit(m) {\n\t    if (hasModule(m)) {\n\t      return;\n\t    }\n\n\t    (m.__depends__ || []).forEach(visit);\n\n\t    if (hasModule(m)) {\n\t      return;\n\t    }\n\n\t    addModule(m);\n\n\t    (m.__init__ || []).forEach(function(c) {\n\t      components.push(c);\n\t    });\n\t  }\n\n\t  bootstrapModules.forEach(visit);\n\n\t  var injector = new Injector(modules);\n\n\t  components.forEach(function(c) {\n\n\t    try {\n\n\t      // eagerly resolve component (fn or string)\n\t      injector[typeof c === 'string' ? 'get' : 'invoke'](c);\n\t    } catch (e) {\n\t      console.error('Failed to instantiate component');\n\t      console.error(e.stack);\n\n\t      throw e;\n\t    }\n\t  });\n\n\t  return injector;\n\t}\n\n\t/**\n\t * Creates an injector from passed options.\n\t *\n\t * @ignore\n\t * @param  {Object} options\n\t * @return {didi.Injector}\n\t */\n\tfunction createInjector(options) {\n\n\t  options = options || {};\n\n\t  var configModule = {\n\t    'config': ['value', options]\n\t  };\n\n\t  var modules = [ configModule, CoreModule ].concat(options.modules || []);\n\n\t  return bootstrap(modules);\n\t}\n\n\n\t/**\n\t * The main diagram-js entry point that bootstraps the diagram with the given\n\t * configuration.\n\t *\n\t * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.\n\t *\n\t * @class djs.Diagram\n\t * @memberOf djs\n\t * @constructor\n\t *\n\t * @example\n\t *\n\t * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>\n\t *\n\t * // plug-in implemenentation\n\t * function MyLoggingPlugin(eventBus) {\n\t *   eventBus.on('shape.added', function(event) {\n\t *     console.log('shape ', event.shape, ' was added to the diagram');\n\t *   });\n\t * }\n\t *\n\t * // export as module\n\t * export default {\n\t *   __init__: [ 'myLoggingPlugin' ],\n\t *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]\n\t * };\n\t *\n\t *\n\t * // instantiate the diagram with the new plug-in\n\t *\n\t * import MyLoggingModule from 'path-to-my-logging-plugin';\n\t *\n\t * var diagram = new Diagram({\n\t *   modules: [\n\t *     MyLoggingModule\n\t *   ]\n\t * });\n\t *\n\t * diagram.invoke([ 'canvas', function(canvas) {\n\t *   // add shape to drawing canvas\n\t *   canvas.addShape({ x: 10, y: 10 });\n\t * });\n\t *\n\t * // 'shape ... was added to the diagram' logged to console\n\t *\n\t * @param {Object} options\n\t * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram\n\t * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with\n\t */\n\tfunction Diagram(options, injector) {\n\n\t  // create injector unless explicitly specified\n\t  this.injector = injector = injector || createInjector(options);\n\n\t  // API\n\n\t  /**\n\t   * Resolves a diagram service\n\t   *\n\t   * @method Diagram#get\n\t   *\n\t   * @param {string} name the name of the diagram service to be retrieved\n\t   * @param {boolean} [strict=true] if false, resolve missing services to null\n\t   */\n\t  this.get = injector.get;\n\n\t  /**\n\t   * Executes a function into which diagram services are injected\n\t   *\n\t   * @method Diagram#invoke\n\t   *\n\t   * @param {Function|Object[]} fn the function to resolve\n\t   * @param {Object} locals a number of locals to use to resolve certain dependencies\n\t   */\n\t  this.invoke = injector.invoke;\n\n\t  // init\n\n\t  // indicate via event\n\n\n\t  /**\n\t   * An event indicating that all plug-ins are loaded.\n\t   *\n\t   * Use this event to fire other events to interested plug-ins\n\t   *\n\t   * @memberOf Diagram\n\t   *\n\t   * @event diagram.init\n\t   *\n\t   * @example\n\t   *\n\t   * eventBus.on('diagram.init', function() {\n\t   *   eventBus.fire('my-custom-event', { foo: 'BAR' });\n\t   * });\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this.get('eventBus').fire('diagram.init');\n\t}\n\n\n\t/**\n\t * Destroys the diagram\n\t *\n\t * @method  Diagram#destroy\n\t */\n\tDiagram.prototype.destroy = function() {\n\t  this.get('eventBus').fire('diagram.destroy');\n\t};\n\n\t/**\n\t * Clear the diagram, removing all contents.\n\t */\n\tDiagram.prototype.clear = function() {\n\t  this.get('eventBus').fire('diagram.clear');\n\t};\n\n\t/**\n\t * Moddle base element.\n\t */\n\tfunction Base$1() { }\n\n\tBase$1.prototype.get = function(name) {\n\t  return this.$model.properties.get(this, name);\n\t};\n\n\tBase$1.prototype.set = function(name, value) {\n\t  this.$model.properties.set(this, name, value);\n\t};\n\n\t/**\n\t * A model element factory.\n\t *\n\t * @param {Moddle} model\n\t * @param {Properties} properties\n\t */\n\tfunction Factory(model, properties) {\n\t  this.model = model;\n\t  this.properties = properties;\n\t}\n\n\n\tFactory.prototype.createType = function(descriptor) {\n\n\t  var model = this.model;\n\n\t  var props = this.properties,\n\t      prototype = Object.create(Base$1.prototype);\n\n\t  // initialize default values\n\t  forEach(descriptor.properties, function(p) {\n\t    if (!p.isMany && p.default !== undefined) {\n\t      prototype[p.name] = p.default;\n\t    }\n\t  });\n\n\t  props.defineModel(prototype, model);\n\t  props.defineDescriptor(prototype, descriptor);\n\n\t  var name = descriptor.ns.name;\n\n\t  /**\n\t   * The new type constructor\n\t   */\n\t  function ModdleElement(attrs) {\n\t    props.define(this, '$type', { value: name, enumerable: true });\n\t    props.define(this, '$attrs', { value: {} });\n\t    props.define(this, '$parent', { writable: true });\n\n\t    forEach(attrs, bind(function(val, key) {\n\t      this.set(key, val);\n\t    }, this));\n\t  }\n\n\t  ModdleElement.prototype = prototype;\n\n\t  ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;\n\n\t  // static links\n\t  props.defineModel(ModdleElement, model);\n\t  props.defineDescriptor(ModdleElement, descriptor);\n\n\t  return ModdleElement;\n\t};\n\n\t/**\n\t * Built-in moddle types\n\t */\n\tvar BUILTINS = {\n\t  String: true,\n\t  Boolean: true,\n\t  Integer: true,\n\t  Real: true,\n\t  Element: true\n\t};\n\n\t/**\n\t * Converters for built in types from string representations\n\t */\n\tvar TYPE_CONVERTERS = {\n\t  String: function(s) { return s; },\n\t  Boolean: function(s) { return s === 'true'; },\n\t  Integer: function(s) { return parseInt(s, 10); },\n\t  Real: function(s) { return parseFloat(s, 10); }\n\t};\n\n\t/**\n\t * Convert a type to its real representation\n\t */\n\tfunction coerceType(type, value) {\n\n\t  var converter = TYPE_CONVERTERS[type];\n\n\t  if (converter) {\n\t    return converter(value);\n\t  } else {\n\t    return value;\n\t  }\n\t}\n\n\t/**\n\t * Return whether the given type is built-in\n\t */\n\tfunction isBuiltIn(type) {\n\t  return !!BUILTINS[type];\n\t}\n\n\t/**\n\t * Return whether the given type is simple\n\t */\n\tfunction isSimple(type) {\n\t  return !!TYPE_CONVERTERS[type];\n\t}\n\n\t/**\n\t * Parses a namespaced attribute name of the form (ns:)localName to an object,\n\t * given a default prefix to assume in case no explicit namespace is given.\n\t *\n\t * @param {String} name\n\t * @param {String} [defaultPrefix] the default prefix to take, if none is present.\n\t *\n\t * @return {Object} the parsed name\n\t */\n\tfunction parseName(name, defaultPrefix) {\n\t  var parts = name.split(/:/),\n\t      localName, prefix;\n\n\t  // no prefix (i.e. only local name)\n\t  if (parts.length === 1) {\n\t    localName = name;\n\t    prefix = defaultPrefix;\n\t  } else\n\t  // prefix + local name\n\t  if (parts.length === 2) {\n\t    localName = parts[1];\n\t    prefix = parts[0];\n\t  } else {\n\t    throw new Error('expected <prefix:localName> or <localName>, got ' + name);\n\t  }\n\n\t  name = (prefix ? prefix + ':' : '') + localName;\n\n\t  return {\n\t    name: name,\n\t    prefix: prefix,\n\t    localName: localName\n\t  };\n\t}\n\n\t/**\n\t * A utility to build element descriptors.\n\t */\n\tfunction DescriptorBuilder(nameNs) {\n\t  this.ns = nameNs;\n\t  this.name = nameNs.name;\n\t  this.allTypes = [];\n\t  this.allTypesByName = {};\n\t  this.properties = [];\n\t  this.propertiesByName = {};\n\t}\n\n\n\tDescriptorBuilder.prototype.build = function() {\n\t  return pick(this, [\n\t    'ns',\n\t    'name',\n\t    'allTypes',\n\t    'allTypesByName',\n\t    'properties',\n\t    'propertiesByName',\n\t    'bodyProperty',\n\t    'idProperty'\n\t  ]);\n\t};\n\n\t/**\n\t * Add property at given index.\n\t *\n\t * @param {Object} p\n\t * @param {Number} [idx]\n\t * @param {Boolean} [validate=true]\n\t */\n\tDescriptorBuilder.prototype.addProperty = function(p, idx, validate) {\n\n\t  if (typeof idx === 'boolean') {\n\t    validate = idx;\n\t    idx = undefined;\n\t  }\n\n\t  this.addNamedProperty(p, validate !== false);\n\n\t  var properties = this.properties;\n\n\t  if (idx !== undefined) {\n\t    properties.splice(idx, 0, p);\n\t  } else {\n\t    properties.push(p);\n\t  }\n\t};\n\n\n\tDescriptorBuilder.prototype.replaceProperty = function(oldProperty, newProperty, replace) {\n\t  var oldNameNs = oldProperty.ns;\n\n\t  var props = this.properties,\n\t      propertiesByName = this.propertiesByName,\n\t      rename = oldProperty.name !== newProperty.name;\n\n\t  if (oldProperty.isId) {\n\t    if (!newProperty.isId) {\n\t      throw new Error(\n\t        'property <' + newProperty.ns.name + '> must be id property ' +\n\t        'to refine <' + oldProperty.ns.name + '>');\n\t    }\n\n\t    this.setIdProperty(newProperty, false);\n\t  }\n\n\t  if (oldProperty.isBody) {\n\n\t    if (!newProperty.isBody) {\n\t      throw new Error(\n\t        'property <' + newProperty.ns.name + '> must be body property ' +\n\t        'to refine <' + oldProperty.ns.name + '>');\n\t    }\n\n\t    // TODO: Check compatibility\n\t    this.setBodyProperty(newProperty, false);\n\t  }\n\n\t  // validate existence and get location of old property\n\t  var idx = props.indexOf(oldProperty);\n\t  if (idx === -1) {\n\t    throw new Error('property <' + oldNameNs.name + '> not found in property list');\n\t  }\n\n\t  // remove old property\n\t  props.splice(idx, 1);\n\n\t  // replacing the named property is intentional\n\t  //\n\t  //  * validate only if this is a \"rename\" operation\n\t  //  * add at specific index unless we \"replace\"\n\t  //\n\t  this.addProperty(newProperty, replace ? undefined : idx, rename);\n\n\t  // make new property available under old name\n\t  propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;\n\t};\n\n\n\tDescriptorBuilder.prototype.redefineProperty = function(p, targetPropertyName, replace) {\n\n\t  var nsPrefix = p.ns.prefix;\n\t  var parts = targetPropertyName.split('#');\n\n\t  var name = parseName(parts[0], nsPrefix);\n\t  var attrName = parseName(parts[1], name.prefix).name;\n\n\t  var redefinedProperty = this.propertiesByName[attrName];\n\t  if (!redefinedProperty) {\n\t    throw new Error('refined property <' + attrName + '> not found');\n\t  } else {\n\t    this.replaceProperty(redefinedProperty, p, replace);\n\t  }\n\n\t  delete p.redefines;\n\t};\n\n\tDescriptorBuilder.prototype.addNamedProperty = function(p, validate) {\n\t  var ns = p.ns,\n\t      propsByName = this.propertiesByName;\n\n\t  if (validate) {\n\t    this.assertNotDefined(p, ns.name);\n\t    this.assertNotDefined(p, ns.localName);\n\t  }\n\n\t  propsByName[ns.name] = propsByName[ns.localName] = p;\n\t};\n\n\tDescriptorBuilder.prototype.removeNamedProperty = function(p) {\n\t  var ns = p.ns,\n\t      propsByName = this.propertiesByName;\n\n\t  delete propsByName[ns.name];\n\t  delete propsByName[ns.localName];\n\t};\n\n\tDescriptorBuilder.prototype.setBodyProperty = function(p, validate) {\n\n\t  if (validate && this.bodyProperty) {\n\t    throw new Error(\n\t      'body property defined multiple times ' +\n\t      '(<' + this.bodyProperty.ns.name + '>, <' + p.ns.name + '>)');\n\t  }\n\n\t  this.bodyProperty = p;\n\t};\n\n\tDescriptorBuilder.prototype.setIdProperty = function(p, validate) {\n\n\t  if (validate && this.idProperty) {\n\t    throw new Error(\n\t      'id property defined multiple times ' +\n\t      '(<' + this.idProperty.ns.name + '>, <' + p.ns.name + '>)');\n\t  }\n\n\t  this.idProperty = p;\n\t};\n\n\tDescriptorBuilder.prototype.assertNotDefined = function(p, name) {\n\t  var propertyName = p.name,\n\t      definedProperty = this.propertiesByName[propertyName];\n\n\t  if (definedProperty) {\n\t    throw new Error(\n\t      'property <' + propertyName + '> already defined; ' +\n\t      'override of <' + definedProperty.definedBy.ns.name + '#' + definedProperty.ns.name + '> by ' +\n\t      '<' + p.definedBy.ns.name + '#' + p.ns.name + '> not allowed without redefines');\n\t  }\n\t};\n\n\tDescriptorBuilder.prototype.hasProperty = function(name) {\n\t  return this.propertiesByName[name];\n\t};\n\n\tDescriptorBuilder.prototype.addTrait = function(t, inherited) {\n\n\t  var typesByName = this.allTypesByName,\n\t      types = this.allTypes;\n\n\t  var typeName = t.name;\n\n\t  if (typeName in typesByName) {\n\t    return;\n\t  }\n\n\t  forEach(t.properties, bind(function(p) {\n\n\t    // clone property to allow extensions\n\t    p = assign({}, p, {\n\t      name: p.ns.localName,\n\t      inherited: inherited\n\t    });\n\n\t    Object.defineProperty(p, 'definedBy', {\n\t      value: t\n\t    });\n\n\t    var replaces = p.replaces,\n\t        redefines = p.redefines;\n\n\t    // add replace/redefine support\n\t    if (replaces || redefines) {\n\t      this.redefineProperty(p, replaces || redefines, replaces);\n\t    } else {\n\t      if (p.isBody) {\n\t        this.setBodyProperty(p);\n\t      }\n\t      if (p.isId) {\n\t        this.setIdProperty(p);\n\t      }\n\t      this.addProperty(p);\n\t    }\n\t  }, this));\n\n\t  types.push(t);\n\t  typesByName[typeName] = t;\n\t};\n\n\t/**\n\t * A registry of Moddle packages.\n\t *\n\t * @param {Array<Package>} packages\n\t * @param {Properties} properties\n\t */\n\tfunction Registry(packages, properties) {\n\t  this.packageMap = {};\n\t  this.typeMap = {};\n\n\t  this.packages = [];\n\n\t  this.properties = properties;\n\n\t  forEach(packages, bind(this.registerPackage, this));\n\t}\n\n\n\tRegistry.prototype.getPackage = function(uriOrPrefix) {\n\t  return this.packageMap[uriOrPrefix];\n\t};\n\n\tRegistry.prototype.getPackages = function() {\n\t  return this.packages;\n\t};\n\n\n\tRegistry.prototype.registerPackage = function(pkg) {\n\n\t  // copy package\n\t  pkg = assign({}, pkg);\n\n\t  var pkgMap = this.packageMap;\n\n\t  ensureAvailable(pkgMap, pkg, 'prefix');\n\t  ensureAvailable(pkgMap, pkg, 'uri');\n\n\t  // register types\n\t  forEach(pkg.types, bind(function(descriptor) {\n\t    this.registerType(descriptor, pkg);\n\t  }, this));\n\n\t  pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;\n\t  this.packages.push(pkg);\n\t};\n\n\n\t/**\n\t * Register a type from a specific package with us\n\t */\n\tRegistry.prototype.registerType = function(type, pkg) {\n\n\t  type = assign({}, type, {\n\t    superClass: (type.superClass || []).slice(),\n\t    extends: (type.extends || []).slice(),\n\t    properties: (type.properties || []).slice(),\n\t    meta: assign((type.meta || {}))\n\t  });\n\n\t  var ns = parseName(type.name, pkg.prefix),\n\t      name = ns.name,\n\t      propertiesByName = {};\n\n\t  // parse properties\n\t  forEach(type.properties, bind(function(p) {\n\n\t    // namespace property names\n\t    var propertyNs = parseName(p.name, ns.prefix),\n\t        propertyName = propertyNs.name;\n\n\t    // namespace property types\n\t    if (!isBuiltIn(p.type)) {\n\t      p.type = parseName(p.type, propertyNs.prefix).name;\n\t    }\n\n\t    assign(p, {\n\t      ns: propertyNs,\n\t      name: propertyName\n\t    });\n\n\t    propertiesByName[propertyName] = p;\n\t  }, this));\n\n\t  // update ns + name\n\t  assign(type, {\n\t    ns: ns,\n\t    name: name,\n\t    propertiesByName: propertiesByName\n\t  });\n\n\t  forEach(type.extends, bind(function(extendsName) {\n\t    var extended = this.typeMap[extendsName];\n\n\t    extended.traits = extended.traits || [];\n\t    extended.traits.push(name);\n\t  }, this));\n\n\t  // link to package\n\t  this.definePackage(type, pkg);\n\n\t  // register\n\t  this.typeMap[name] = type;\n\t};\n\n\n\t/**\n\t * Traverse the type hierarchy from bottom to top,\n\t * calling iterator with (type, inherited) for all elements in\n\t * the inheritance chain.\n\t *\n\t * @param {Object} nsName\n\t * @param {Function} iterator\n\t * @param {Boolean} [trait=false]\n\t */\n\tRegistry.prototype.mapTypes = function(nsName, iterator, trait) {\n\n\t  var type = isBuiltIn(nsName.name) ? { name: nsName.name } : this.typeMap[nsName.name];\n\n\t  var self = this;\n\n\t  /**\n\t   * Traverse the selected trait.\n\t   *\n\t   * @param {String} cls\n\t   */\n\t  function traverseTrait(cls) {\n\t    return traverseSuper(cls, true);\n\t  }\n\n\t  /**\n\t   * Traverse the selected super type or trait\n\t   *\n\t   * @param {String} cls\n\t   * @param {Boolean} [trait=false]\n\t   */\n\t  function traverseSuper(cls, trait) {\n\t    var parentNs = parseName(cls, isBuiltIn(cls) ? '' : nsName.prefix);\n\t    self.mapTypes(parentNs, iterator, trait);\n\t  }\n\n\t  if (!type) {\n\t    throw new Error('unknown type <' + nsName.name + '>');\n\t  }\n\n\t  forEach(type.superClass, trait ? traverseTrait : traverseSuper);\n\n\t  // call iterator with (type, inherited=!trait)\n\t  iterator(type, !trait);\n\n\t  forEach(type.traits, traverseTrait);\n\t};\n\n\n\t/**\n\t * Returns the effective descriptor for a type.\n\t *\n\t * @param  {String} type the namespaced name (ns:localName) of the type\n\t *\n\t * @return {Descriptor} the resulting effective descriptor\n\t */\n\tRegistry.prototype.getEffectiveDescriptor = function(name) {\n\n\t  var nsName = parseName(name);\n\n\t  var builder = new DescriptorBuilder(nsName);\n\n\t  this.mapTypes(nsName, function(type, inherited) {\n\t    builder.addTrait(type, inherited);\n\t  });\n\n\t  var descriptor = builder.build();\n\n\t  // define package link\n\t  this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);\n\n\t  return descriptor;\n\t};\n\n\n\tRegistry.prototype.definePackage = function(target, pkg) {\n\t  this.properties.define(target, '$pkg', { value: pkg });\n\t};\n\n\n\n\t///////// helpers ////////////////////////////\n\n\tfunction ensureAvailable(packageMap, pkg, identifierKey) {\n\n\t  var value = pkg[identifierKey];\n\n\t  if (value in packageMap) {\n\t    throw new Error('package with ' + identifierKey + ' <' + value + '> already defined');\n\t  }\n\t}\n\n\t/**\n\t * A utility that gets and sets properties of model elements.\n\t *\n\t * @param {Model} model\n\t */\n\tfunction Properties(model) {\n\t  this.model = model;\n\t}\n\n\n\t/**\n\t * Sets a named property on the target element.\n\t * If the value is undefined, the property gets deleted.\n\t *\n\t * @param {Object} target\n\t * @param {String} name\n\t * @param {Object} value\n\t */\n\tProperties.prototype.set = function(target, name, value) {\n\n\t  var property = this.model.getPropertyDescriptor(target, name);\n\n\t  var propertyName = property && property.name;\n\n\t  if (isUndefined$1(value)) {\n\t    // unset the property, if the specified value is undefined;\n\t    // delete from $attrs (for extensions) or the target itself\n\t    if (property) {\n\t      delete target[propertyName];\n\t    } else {\n\t      delete target.$attrs[name];\n\t    }\n\t  } else {\n\t    // set the property, defining well defined properties on the fly\n\t    // or simply updating them in target.$attrs (for extensions)\n\t    if (property) {\n\t      if (propertyName in target) {\n\t        target[propertyName] = value;\n\t      } else {\n\t        defineProperty$1(target, property, value);\n\t      }\n\t    } else {\n\t      target.$attrs[name] = value;\n\t    }\n\t  }\n\t};\n\n\t/**\n\t * Returns the named property of the given element\n\t *\n\t * @param  {Object} target\n\t * @param  {String} name\n\t *\n\t * @return {Object}\n\t */\n\tProperties.prototype.get = function(target, name) {\n\n\t  var property = this.model.getPropertyDescriptor(target, name);\n\n\t  if (!property) {\n\t    return target.$attrs[name];\n\t  }\n\n\t  var propertyName = property.name;\n\n\t  // check if access to collection property and lazily initialize it\n\t  if (!target[propertyName] && property.isMany) {\n\t    defineProperty$1(target, property, []);\n\t  }\n\n\t  return target[propertyName];\n\t};\n\n\n\t/**\n\t * Define a property on the target element\n\t *\n\t * @param  {Object} target\n\t * @param  {String} name\n\t * @param  {Object} options\n\t */\n\tProperties.prototype.define = function(target, name, options) {\n\t  Object.defineProperty(target, name, options);\n\t};\n\n\n\t/**\n\t * Define the descriptor for an element\n\t */\n\tProperties.prototype.defineDescriptor = function(target, descriptor) {\n\t  this.define(target, '$descriptor', { value: descriptor });\n\t};\n\n\t/**\n\t * Define the model for an element\n\t */\n\tProperties.prototype.defineModel = function(target, model) {\n\t  this.define(target, '$model', { value: model });\n\t};\n\n\n\tfunction isUndefined$1(val) {\n\t  return typeof val === 'undefined';\n\t}\n\n\tfunction defineProperty$1(target, property, value) {\n\t  Object.defineProperty(target, property.name, {\n\t    enumerable: !property.isReference,\n\t    writable: true,\n\t    value: value,\n\t    configurable: true\n\t  });\n\t}\n\n\t//// Moddle implementation /////////////////////////////////////////////////\n\n\t/**\n\t * @class Moddle\n\t *\n\t * A model that can be used to create elements of a specific type.\n\t *\n\t * @example\n\t *\n\t * var Moddle = require('moddle');\n\t *\n\t * var pkg = {\n\t *   name: 'mypackage',\n\t *   prefix: 'my',\n\t *   types: [\n\t *     { name: 'Root' }\n\t *   ]\n\t * };\n\t *\n\t * var moddle = new Moddle([pkg]);\n\t *\n\t * @param {Array<Package>} packages the packages to contain\n\t */\n\tfunction Moddle(packages) {\n\n\t  this.properties = new Properties(this);\n\n\t  this.factory = new Factory(this, this.properties);\n\t  this.registry = new Registry(packages, this.properties);\n\n\t  this.typeCache = {};\n\t}\n\n\n\t/**\n\t * Create an instance of the specified type.\n\t *\n\t * @method Moddle#create\n\t *\n\t * @example\n\t *\n\t * var foo = moddle.create('my:Foo');\n\t * var bar = moddle.create('my:Bar', { id: 'BAR_1' });\n\t *\n\t * @param  {String|Object} descriptor the type descriptor or name know to the model\n\t * @param  {Object} attrs   a number of attributes to initialize the model instance with\n\t * @return {Object}         model instance\n\t */\n\tModdle.prototype.create = function(descriptor, attrs) {\n\t  var Type = this.getType(descriptor);\n\n\t  if (!Type) {\n\t    throw new Error('unknown type <' + descriptor + '>');\n\t  }\n\n\t  return new Type(attrs);\n\t};\n\n\n\t/**\n\t * Returns the type representing a given descriptor\n\t *\n\t * @method Moddle#getType\n\t *\n\t * @example\n\t *\n\t * var Foo = moddle.getType('my:Foo');\n\t * var foo = new Foo({ 'id' : 'FOO_1' });\n\t *\n\t * @param  {String|Object} descriptor the type descriptor or name know to the model\n\t * @return {Object}         the type representing the descriptor\n\t */\n\tModdle.prototype.getType = function(descriptor) {\n\n\t  var cache = this.typeCache;\n\n\t  var name = isString(descriptor) ? descriptor : descriptor.ns.name;\n\n\t  var type = cache[name];\n\n\t  if (!type) {\n\t    descriptor = this.registry.getEffectiveDescriptor(name);\n\t    type = cache[name] = this.factory.createType(descriptor);\n\t  }\n\n\t  return type;\n\t};\n\n\n\t/**\n\t * Creates an any-element type to be used within model instances.\n\t *\n\t * This can be used to create custom elements that lie outside the meta-model.\n\t * The created element contains all the meta-data required to serialize it\n\t * as part of meta-model elements.\n\t *\n\t * @method Moddle#createAny\n\t *\n\t * @example\n\t *\n\t * var foo = moddle.createAny('vendor:Foo', 'http://vendor', {\n\t *   value: 'bar'\n\t * });\n\t *\n\t * var container = moddle.create('my:Container', 'http://my', {\n\t *   any: [ foo ]\n\t * });\n\t *\n\t * // go ahead and serialize the stuff\n\t *\n\t *\n\t * @param  {String} name  the name of the element\n\t * @param  {String} nsUri the namespace uri of the element\n\t * @param  {Object} [properties] a map of properties to initialize the instance with\n\t * @return {Object} the any type instance\n\t */\n\tModdle.prototype.createAny = function(name, nsUri, properties) {\n\n\t  var nameNs = parseName(name);\n\n\t  var element = {\n\t    $type: name,\n\t    $instanceOf: function(type) {\n\t      return type === this.$type;\n\t    }\n\t  };\n\n\t  var descriptor = {\n\t    name: name,\n\t    isGeneric: true,\n\t    ns: {\n\t      prefix: nameNs.prefix,\n\t      localName: nameNs.localName,\n\t      uri: nsUri\n\t    }\n\t  };\n\n\t  this.properties.defineDescriptor(element, descriptor);\n\t  this.properties.defineModel(element, this);\n\t  this.properties.define(element, '$parent', { enumerable: false, writable: true });\n\n\t  forEach(properties, function(a, key) {\n\t    if (isObject(a) && a.value !== undefined) {\n\t      element[a.name] = a.value;\n\t    } else {\n\t      element[key] = a;\n\t    }\n\t  });\n\n\t  return element;\n\t};\n\n\t/**\n\t * Returns a registered package by uri or prefix\n\t *\n\t * @return {Object} the package\n\t */\n\tModdle.prototype.getPackage = function(uriOrPrefix) {\n\t  return this.registry.getPackage(uriOrPrefix);\n\t};\n\n\t/**\n\t * Returns a snapshot of all known packages\n\t *\n\t * @return {Object} the package\n\t */\n\tModdle.prototype.getPackages = function() {\n\t  return this.registry.getPackages();\n\t};\n\n\t/**\n\t * Returns the descriptor for an element\n\t */\n\tModdle.prototype.getElementDescriptor = function(element) {\n\t  return element.$descriptor;\n\t};\n\n\t/**\n\t * Returns true if the given descriptor or instance\n\t * represents the given type.\n\t *\n\t * May be applied to this, if element is omitted.\n\t */\n\tModdle.prototype.hasType = function(element, type) {\n\t  if (type === undefined) {\n\t    type = element;\n\t    element = this;\n\t  }\n\n\t  var descriptor = element.$model.getElementDescriptor(element);\n\n\t  return (type in descriptor.allTypesByName);\n\t};\n\n\t/**\n\t * Returns the descriptor of an elements named property\n\t */\n\tModdle.prototype.getPropertyDescriptor = function(element, property) {\n\t  return this.getElementDescriptor(element).propertiesByName[property];\n\t};\n\n\t/**\n\t * Returns a mapped type's descriptor\n\t */\n\tModdle.prototype.getTypeDescriptor = function(type) {\n\t  return this.registry.typeMap[type];\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\n\tvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\n\tvar ENTITY_PATTERN = /&#(\\d+);|&#x([0-9a-f]+);|&(\\w+);/ig;\n\n\tvar ENTITY_MAPPING = {\n\t  'amp': '&',\n\t  'apos': '\\'',\n\t  'gt': '>',\n\t  'lt': '<',\n\t  'quot': '\"'\n\t};\n\n\t// map UPPERCASE variants of supported special chars\n\tObject.keys(ENTITY_MAPPING).forEach(function(k) {\n\t  ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];\n\t});\n\n\n\tfunction replaceEntities(_, d, x, z) {\n\n\t  // reserved names, i.e. &nbsp;\n\t  if (z) {\n\t    if (hasOwnProperty$1.call(ENTITY_MAPPING, z)) {\n\t      return ENTITY_MAPPING[z];\n\t    } else {\n\n\t      // fall back to original value\n\t      return '&' + z + ';';\n\t    }\n\t  }\n\n\t  // decimal encoded char\n\t  if (d) {\n\t    return fromCharCode(d);\n\t  }\n\n\t  // hex encoded char\n\t  return fromCharCode(parseInt(x, 16));\n\t}\n\n\n\t/**\n\t * A basic entity decoder that can decode a minimal\n\t * sub-set of reserved names (&amp;) as well as\n\t * hex (&#xaaf;) and decimal (&#1231;) encoded characters.\n\t *\n\t * @param {string} str\n\t *\n\t * @return {string} decoded string\n\t */\n\tfunction decodeEntities(s) {\n\t  if (s.length > 3 && s.indexOf('&') !== -1) {\n\t    return s.replace(ENTITY_PATTERN, replaceEntities);\n\t  }\n\n\t  return s;\n\t}\n\n\tvar XSI_URI = 'http://www.w3.org/2001/XMLSchema-instance';\n\tvar XSI_PREFIX = 'xsi';\n\tvar XSI_TYPE = 'xsi:type';\n\n\tvar NON_WHITESPACE_OUTSIDE_ROOT_NODE = 'non-whitespace outside of root node';\n\n\tfunction error(msg) {\n\t  return new Error(msg);\n\t}\n\n\tfunction missingNamespaceForPrefix(prefix) {\n\t  return 'missing namespace for prefix <' + prefix + '>';\n\t}\n\n\tfunction getter(getFn) {\n\t  return {\n\t    'get': getFn,\n\t    'enumerable': true\n\t  };\n\t}\n\n\tfunction cloneNsMatrix(nsMatrix) {\n\t  var clone = {}, key;\n\t  for (key in nsMatrix) {\n\t    clone[key] = nsMatrix[key];\n\t  }\n\t  return clone;\n\t}\n\n\tfunction uriPrefix(prefix) {\n\t  return prefix + '$uri';\n\t}\n\n\tfunction buildNsMatrix(nsUriToPrefix) {\n\t  var nsMatrix = {},\n\t      uri,\n\t      prefix;\n\n\t  for (uri in nsUriToPrefix) {\n\t    prefix = nsUriToPrefix[uri];\n\t    nsMatrix[prefix] = prefix;\n\t    nsMatrix[uriPrefix(prefix)] = uri;\n\t  }\n\n\t  return nsMatrix;\n\t}\n\n\tfunction noopGetContext() {\n\t  return { 'line': 0, 'column': 0 };\n\t}\n\n\tfunction throwFunc(err) {\n\t  throw err;\n\t}\n\n\t/**\n\t * Creates a new parser with the given options.\n\t *\n\t * @constructor\n\t *\n\t * @param  {!Object<string, ?>=} options\n\t */\n\tfunction Parser(options) {\n\n\t  if (!this) {\n\t    return new Parser(options);\n\t  }\n\n\t  var proxy = options && options['proxy'];\n\n\t  var onText,\n\t      onOpenTag,\n\t      onCloseTag,\n\t      onCDATA,\n\t      onError = throwFunc,\n\t      onWarning,\n\t      onComment,\n\t      onQuestion,\n\t      onAttention;\n\n\t  var getContext = noopGetContext;\n\n\t  /**\n\t   * Do we need to parse the current elements attributes for namespaces?\n\t   *\n\t   * @type {boolean}\n\t   */\n\t  var maybeNS = false;\n\n\t  /**\n\t   * Do we process namespaces at all?\n\t   *\n\t   * @type {boolean}\n\t   */\n\t  var isNamespace = false;\n\n\t  /**\n\t   * The caught error returned on parse end\n\t   *\n\t   * @type {Error}\n\t   */\n\t  var returnError = null;\n\n\t  /**\n\t   * Should we stop parsing?\n\t   *\n\t   * @type {boolean}\n\t   */\n\t  var parseStop = false;\n\n\t  /**\n\t   * A map of { uri: prefix } used by the parser.\n\t   *\n\t   * This map will ensure we can normalize prefixes during processing;\n\t   * for each uri, only one prefix will be exposed to the handlers.\n\t   *\n\t   * @type {!Object<string, string>}}\n\t   */\n\t  var nsUriToPrefix;\n\n\t  /**\n\t   * Handle parse error.\n\t   *\n\t   * @param  {string|Error} err\n\t   */\n\t  function handleError(err) {\n\t    if (!(err instanceof Error)) {\n\t      err = error(err);\n\t    }\n\n\t    returnError = err;\n\n\t    onError(err, getContext);\n\t  }\n\n\t  /**\n\t   * Handle parse error.\n\t   *\n\t   * @param  {string|Error} err\n\t   */\n\t  function handleWarning(err) {\n\n\t    if (!onWarning) {\n\t      return;\n\t    }\n\n\t    if (!(err instanceof Error)) {\n\t      err = error(err);\n\t    }\n\n\t    onWarning(err, getContext);\n\t  }\n\n\t  /**\n\t   * Register parse listener.\n\t   *\n\t   * @param  {string}   name\n\t   * @param  {Function} cb\n\t   *\n\t   * @return {Parser}\n\t   */\n\t  this['on'] = function(name, cb) {\n\n\t    if (typeof cb !== 'function') {\n\t      throw error('required args <name, cb>');\n\t    }\n\n\t    switch (name) {\n\t    case 'openTag': onOpenTag = cb; break;\n\t    case 'text': onText = cb; break;\n\t    case 'closeTag': onCloseTag = cb; break;\n\t    case 'error': onError = cb; break;\n\t    case 'warn': onWarning = cb; break;\n\t    case 'cdata': onCDATA = cb; break;\n\t    case 'attention': onAttention = cb; break; // <!XXXXX zzzz=\"eeee\">\n\t    case 'question': onQuestion = cb; break; // <? ....  ?>\n\t    case 'comment': onComment = cb; break;\n\t    default:\n\t      throw error('unsupported event: ' + name);\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Set the namespace to prefix mapping.\n\t   *\n\t   * @example\n\t   *\n\t   * parser.ns({\n\t   *   'http://foo': 'foo',\n\t   *   'http://bar': 'bar'\n\t   * });\n\t   *\n\t   * @param  {!Object<string, string>} nsMap\n\t   *\n\t   * @return {Parser}\n\t   */\n\t  this['ns'] = function(nsMap) {\n\n\t    if (typeof nsMap === 'undefined') {\n\t      nsMap = {};\n\t    }\n\n\t    if (typeof nsMap !== 'object') {\n\t      throw error('required args <nsMap={}>');\n\t    }\n\n\t    var _nsUriToPrefix = {}, k;\n\n\t    for (k in nsMap) {\n\t      _nsUriToPrefix[k] = nsMap[k];\n\t    }\n\n\t    // FORCE default mapping for schema instance\n\t    _nsUriToPrefix[XSI_URI] = XSI_PREFIX;\n\n\t    isNamespace = true;\n\t    nsUriToPrefix = _nsUriToPrefix;\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Parse xml string.\n\t   *\n\t   * @param  {string} xml\n\t   *\n\t   * @return {Error} returnError, if not thrown\n\t   */\n\t  this['parse'] = function(xml) {\n\t    if (typeof xml !== 'string') {\n\t      throw error('required args <xml=string>');\n\t    }\n\n\t    returnError = null;\n\n\t    parse(xml);\n\n\t    getContext = noopGetContext;\n\t    parseStop = false;\n\n\t    return returnError;\n\t  };\n\n\t  /**\n\t   * Stop parsing.\n\t   */\n\t  this['stop'] = function() {\n\t    parseStop = true;\n\t  };\n\n\t  /**\n\t   * Parse string, invoking configured listeners on element.\n\t   *\n\t   * @param  {string} xml\n\t   */\n\t  function parse(xml) {\n\t    var nsMatrixStack = isNamespace ? [] : null,\n\t        nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null,\n\t        _nsMatrix,\n\t        nodeStack = [],\n\t        anonymousNsCount = 0,\n\t        tagStart = false,\n\t        tagEnd = false,\n\t        i = 0, j = 0,\n\t        x, y, q, w, v,\n\t        xmlns,\n\t        elementName,\n\t        _elementName,\n\t        elementProxy\n\t        ;\n\n\t    var attrsString = '',\n\t        attrsStart = 0,\n\t        cachedAttrs // false = parsed with errors, null = needs parsing\n\t        ;\n\n\t    /**\n\t     * Parse attributes on demand and returns the parsed attributes.\n\t     *\n\t     * Return semantics: (1) `false` on attribute parse error,\n\t     * (2) object hash on extracted attrs.\n\t     *\n\t     * @return {boolean|Object}\n\t     */\n\t    function getAttrs() {\n\t      if (cachedAttrs !== null) {\n\t        return cachedAttrs;\n\t      }\n\n\t      var nsUri,\n\t          nsUriPrefix,\n\t          nsName,\n\t          defaultAlias = isNamespace && nsMatrix['xmlns'],\n\t          attrList = isNamespace && maybeNS ? [] : null,\n\t          i = attrsStart,\n\t          s = attrsString,\n\t          l = s.length,\n\t          hasNewMatrix,\n\t          newalias,\n\t          value,\n\t          alias,\n\t          name,\n\t          attrs = {},\n\t          seenAttrs = {},\n\t          skipAttr,\n\t          w,\n\t          j;\n\n\t      parseAttr:\n\t      for (; i < l; i++) {\n\t        skipAttr = false;\n\t        w = s.charCodeAt(i);\n\n\t        if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE={ \\f\\n\\r\\t\\v}\n\t          continue;\n\t        }\n\n\t        // wait for non whitespace character\n\t        if (w < 65 || w > 122 || (w > 90 && w < 97)) {\n\t          if (w !== 95 && w !== 58) { // char 95\"_\" 58\":\"\n\t            handleWarning('illegal first char attribute name');\n\t            skipAttr = true;\n\t          }\n\t        }\n\n\t        // parse attribute name\n\t        for (j = i + 1; j < l; j++) {\n\t          w = s.charCodeAt(j);\n\n\t          if (\n\t            w > 96 && w < 123 ||\n\t            w > 64 && w < 91 ||\n\t            w > 47 && w < 59 ||\n\t            w === 46 || // '.'\n\t            w === 45 || // '-'\n\t            w === 95 // '_'\n\t          ) {\n\t            continue;\n\t          }\n\n\t          // unexpected whitespace\n\t          if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE\n\t            handleWarning('missing attribute value');\n\t            i = j;\n\n\t            continue parseAttr;\n\t          }\n\n\t          // expected \"=\"\n\t          if (w === 61) { // \"=\" == 61\n\t            break;\n\t          }\n\n\t          handleWarning('illegal attribute name char');\n\t          skipAttr = true;\n\t        }\n\n\t        name = s.substring(i, j);\n\n\t        if (name === 'xmlns:xmlns') {\n\t          handleWarning('illegal declaration of xmlns');\n\t          skipAttr = true;\n\t        }\n\n\t        w = s.charCodeAt(j + 1);\n\n\t        if (w === 34) { // '\"'\n\t          j = s.indexOf('\"', i = j + 2);\n\n\t          if (j === -1) {\n\t            j = s.indexOf('\\'', i);\n\n\t            if (j !== -1) {\n\t              handleWarning('attribute value quote missmatch');\n\t              skipAttr = true;\n\t            }\n\t          }\n\n\t        } else if (w === 39) { // \"'\"\n\t          j = s.indexOf('\\'', i = j + 2);\n\n\t          if (j === -1) {\n\t            j = s.indexOf('\"', i);\n\n\t            if (j !== -1) {\n\t              handleWarning('attribute value quote missmatch');\n\t              skipAttr = true;\n\t            }\n\t          }\n\n\t        } else {\n\t          handleWarning('missing attribute value quotes');\n\t          skipAttr = true;\n\n\t          // skip to next space\n\t          for (j = j + 1; j < l; j++) {\n\t            w = s.charCodeAt(j + 1);\n\n\t            if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE\n\t              break;\n\t            }\n\t          }\n\n\t        }\n\n\t        if (j === -1) {\n\t          handleWarning('missing closing quotes');\n\n\t          j = l;\n\t          skipAttr = true;\n\t        }\n\n\t        if (!skipAttr) {\n\t          value = s.substring(i, j);\n\t        }\n\n\t        i = j;\n\n\t        // ensure SPACE follows attribute\n\t        // skip illegal content otherwise\n\t        // example a=\"b\"c\n\t        for (; j + 1 < l; j++) {\n\t          w = s.charCodeAt(j + 1);\n\n\t          if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE\n\t            break;\n\t          }\n\n\t          // FIRST ILLEGAL CHAR\n\t          if (i === j) {\n\t            handleWarning('illegal character after attribute end');\n\t            skipAttr = true;\n\t          }\n\t        }\n\n\t        // advance cursor to next attribute\n\t        i = j + 1;\n\n\t        if (skipAttr) {\n\t          continue parseAttr;\n\t        }\n\n\t        // check attribute re-declaration\n\t        if (name in seenAttrs) {\n\t          handleWarning('attribute <' + name + '> already defined');\n\t          continue;\n\t        }\n\n\t        seenAttrs[name] = true;\n\n\t        if (!isNamespace) {\n\t          attrs[name] = value;\n\t          continue;\n\t        }\n\n\t        // try to extract namespace information\n\t        if (maybeNS) {\n\t          newalias = (\n\t            name === 'xmlns'\n\t              ? 'xmlns'\n\t              : (name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:')\n\t                ? name.substr(6)\n\t                : null\n\t          );\n\n\t          // handle xmlns(:alias) assignment\n\t          if (newalias !== null) {\n\t            nsUri = decodeEntities(value);\n\t            nsUriPrefix = uriPrefix(newalias);\n\n\t            alias = nsUriToPrefix[nsUri];\n\n\t            if (!alias) {\n\n\t              // no prefix defined or prefix collision\n\t              if (\n\t                (newalias === 'xmlns') ||\n\t                (nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri)\n\t              ) {\n\n\t                // alocate free ns prefix\n\t                do {\n\t                  alias = 'ns' + (anonymousNsCount++);\n\t                } while (typeof nsMatrix[alias] !== 'undefined');\n\t              } else {\n\t                alias = newalias;\n\t              }\n\n\t              nsUriToPrefix[nsUri] = alias;\n\t            }\n\n\t            if (nsMatrix[newalias] !== alias) {\n\t              if (!hasNewMatrix) {\n\t                nsMatrix = cloneNsMatrix(nsMatrix);\n\t                hasNewMatrix = true;\n\t              }\n\n\t              nsMatrix[newalias] = alias;\n\t              if (newalias === 'xmlns') {\n\t                nsMatrix[uriPrefix(alias)] = nsUri;\n\t                defaultAlias = alias;\n\t              }\n\n\t              nsMatrix[nsUriPrefix] = nsUri;\n\t            }\n\n\t            // expose xmlns(:asd)=\"...\" in attributes\n\t            attrs[name] = value;\n\t            continue;\n\t          }\n\n\t          // collect attributes until all namespace\n\t          // declarations are processed\n\t          attrList.push(name, value);\n\t          continue;\n\n\t        } /** end if (maybeNs) */\n\n\t        // handle attributes on element without\n\t        // namespace declarations\n\t        w = name.indexOf(':');\n\t        if (w === -1) {\n\t          attrs[name] = value;\n\t          continue;\n\t        }\n\n\t        // normalize ns attribute name\n\t        if (!(nsName = nsMatrix[name.substring(0, w)])) {\n\t          handleWarning(missingNamespaceForPrefix(name.substring(0, w)));\n\t          continue;\n\t        }\n\n\t        name = defaultAlias === nsName\n\t          ? name.substr(w + 1)\n\t          : nsName + name.substr(w);\n\n\t        // end: normalize ns attribute name\n\n\t        // normalize xsi:type ns attribute value\n\t        if (name === XSI_TYPE) {\n\t          w = value.indexOf(':');\n\n\t          if (w !== -1) {\n\t            nsName = value.substring(0, w);\n\n\t            // handle default prefixes, i.e. xs:String gracefully\n\t            nsName = nsMatrix[nsName] || nsName;\n\t            value = nsName + value.substring(w);\n\t          } else {\n\t            value = defaultAlias + ':' + value;\n\t          }\n\t        }\n\n\t        // end: normalize xsi:type ns attribute value\n\n\t        attrs[name] = value;\n\t      }\n\n\n\t      // handle deferred, possibly namespaced attributes\n\t      if (maybeNS) {\n\n\t        // normalize captured attributes\n\t        for (i = 0, l = attrList.length; i < l; i++) {\n\n\t          name = attrList[i++];\n\t          value = attrList[i];\n\n\t          w = name.indexOf(':');\n\n\t          if (w !== -1) {\n\n\t            // normalize ns attribute name\n\t            if (!(nsName = nsMatrix[name.substring(0, w)])) {\n\t              handleWarning(missingNamespaceForPrefix(name.substring(0, w)));\n\t              continue;\n\t            }\n\n\t            name = defaultAlias === nsName\n\t              ? name.substr(w + 1)\n\t              : nsName + name.substr(w);\n\n\t            // end: normalize ns attribute name\n\n\t            // normalize xsi:type ns attribute value\n\t            if (name === XSI_TYPE) {\n\t              w = value.indexOf(':');\n\n\t              if (w !== -1) {\n\t                nsName = value.substring(0, w);\n\n\t                // handle default prefixes, i.e. xs:String gracefully\n\t                nsName = nsMatrix[nsName] || nsName;\n\t                value = nsName + value.substring(w);\n\t              } else {\n\t                value = defaultAlias + ':' + value;\n\t              }\n\t            }\n\n\t            // end: normalize xsi:type ns attribute value\n\t          }\n\n\t          attrs[name] = value;\n\t        }\n\n\t        // end: normalize captured attributes\n\t      }\n\n\t      return cachedAttrs = attrs;\n\t    }\n\n\t    /**\n\t     * Extract the parse context { line, column, part }\n\t     * from the current parser position.\n\t     *\n\t     * @return {Object} parse context\n\t     */\n\t    function getParseContext() {\n\t      var splitsRe = /(\\r\\n|\\r|\\n)/g;\n\n\t      var line = 0;\n\t      var column = 0;\n\t      var startOfLine = 0;\n\t      var endOfLine = j;\n\t      var match;\n\t      var data;\n\n\t      while (i >= startOfLine) {\n\n\t        match = splitsRe.exec(xml);\n\n\t        if (!match) {\n\t          break;\n\t        }\n\n\t        // end of line = (break idx + break chars)\n\t        endOfLine = match[0].length + match.index;\n\n\t        if (endOfLine > i) {\n\t          break;\n\t        }\n\n\t        // advance to next line\n\t        line += 1;\n\n\t        startOfLine = endOfLine;\n\t      }\n\n\t      // EOF errors\n\t      if (i == -1) {\n\t        column = endOfLine;\n\t        data = xml.substring(j);\n\t      } else\n\n\t      // start errors\n\t      if (j === 0) {\n\t        data = xml.substring(j, i);\n\t      }\n\n\t      // other errors\n\t      else {\n\t        column = i - startOfLine;\n\t        data = (j == -1 ? xml.substring(i) : xml.substring(i, j + 1));\n\t      }\n\n\t      return {\n\t        'data': data,\n\t        'line': line,\n\t        'column': column\n\t      };\n\t    }\n\n\t    getContext = getParseContext;\n\n\n\t    if (proxy) {\n\t      elementProxy = Object.create({}, {\n\t        'name': getter(function() {\n\t          return elementName;\n\t        }),\n\t        'originalName': getter(function() {\n\t          return _elementName;\n\t        }),\n\t        'attrs': getter(getAttrs),\n\t        'ns': getter(function() {\n\t          return nsMatrix;\n\t        })\n\t      });\n\t    }\n\n\t    // actual parse logic\n\t    while (j !== -1) {\n\n\t      if (xml.charCodeAt(j) === 60) { // \"<\"\n\t        i = j;\n\t      } else {\n\t        i = xml.indexOf('<', j);\n\t      }\n\n\t      // parse end\n\t      if (i === -1) {\n\t        if (nodeStack.length) {\n\t          return handleError('unexpected end of file');\n\t        }\n\n\t        if (j === 0) {\n\t          return handleError('missing start tag');\n\t        }\n\n\t        if (j < xml.length) {\n\t          if (xml.substring(j).trim()) {\n\t            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t      // parse text\n\t      if (j !== i) {\n\n\t        if (nodeStack.length) {\n\t          if (onText) {\n\t            onText(xml.substring(j, i), decodeEntities, getContext);\n\n\t            if (parseStop) {\n\t              return;\n\t            }\n\t          }\n\t        } else {\n\t          if (xml.substring(j, i).trim()) {\n\t            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);\n\n\t            if (parseStop) {\n\t              return;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      w = xml.charCodeAt(i+1);\n\n\t      // parse comments + CDATA\n\t      if (w === 33) { // \"!\"\n\t        q = xml.charCodeAt(i+2);\n\n\t        // CDATA section\n\t        if (q === 91 && xml.substr(i + 3, 6) === 'CDATA[') { // 91 == \"[\"\n\t          j = xml.indexOf(']]>', i);\n\t          if (j === -1) {\n\t            return handleError('unclosed cdata');\n\t          }\n\n\t          if (onCDATA) {\n\t            onCDATA(xml.substring(i + 9, j), getContext);\n\t            if (parseStop) {\n\t              return;\n\t            }\n\t          }\n\n\t          j += 3;\n\t          continue;\n\t        }\n\n\t        // comment\n\t        if (q === 45 && xml.charCodeAt(i + 3) === 45) { // 45 == \"-\"\n\t          j = xml.indexOf('-->', i);\n\t          if (j === -1) {\n\t            return handleError('unclosed comment');\n\t          }\n\n\n\t          if (onComment) {\n\t            onComment(xml.substring(i + 4, j), decodeEntities, getContext);\n\t            if (parseStop) {\n\t              return;\n\t            }\n\t          }\n\n\t          j += 3;\n\t          continue;\n\t        }\n\t      }\n\n\t      // parse question <? ... ?>\n\t      if (w === 63) { // \"?\"\n\t        j = xml.indexOf('?>', i);\n\t        if (j === -1) {\n\t          return handleError('unclosed question');\n\t        }\n\n\t        if (onQuestion) {\n\t          onQuestion(xml.substring(i, j + 2), getContext);\n\t          if (parseStop) {\n\t            return;\n\t          }\n\t        }\n\n\t        j += 2;\n\t        continue;\n\t      }\n\n\t      // find matching closing tag for attention or standard tags\n\t      // for that we must skip through attribute values\n\t      // (enclosed in single or double quotes)\n\t      for (x = i + 1; ; x++) {\n\t        v = xml.charCodeAt(x);\n\t        if (isNaN(v)) {\n\t          j = -1;\n\t          return handleError('unclosed tag');\n\t        }\n\n\t        // [10] AttValue ::= '\"' ([^<&\"] | Reference)* '\"' | \"'\" ([^<&'] | Reference)* \"'\"\n\t        // skips the quoted string\n\t        // (double quotes) does not appear in a literal enclosed by (double quotes)\n\t        // (single quote) does not appear in a literal enclosed by (single quote)\n\t        if (v === 34) { //  '\"'\n\t          q = xml.indexOf('\"', x + 1);\n\t          x = q !== -1 ? q : x;\n\t        } else if (v === 39) { // \"'\"\n\t          q = xml.indexOf(\"'\", x + 1);\n\t          x = q !== -1 ? q : x;\n\t        } else if (v === 62) { // '>'\n\t          j = x;\n\t          break;\n\t        }\n\t      }\n\n\n\t      // parse attention <! ...>\n\t      // previously comment and CDATA have already been parsed\n\t      if (w === 33) { // \"!\"\n\n\t        if (onAttention) {\n\t          onAttention(xml.substring(i, j + 1), decodeEntities, getContext);\n\t          if (parseStop) {\n\t            return;\n\t          }\n\t        }\n\n\t        j += 1;\n\t        continue;\n\t      }\n\n\t      // don't process attributes;\n\t      // there are none\n\t      cachedAttrs = {};\n\n\t      // if (xml.charCodeAt(i+1) === 47) { // </...\n\t      if (w === 47) { // </...\n\t        tagStart = false;\n\t        tagEnd = true;\n\n\t        if (!nodeStack.length) {\n\t          return handleError('missing open tag');\n\t        }\n\n\t        // verify open <-> close tag match\n\t        x = elementName = nodeStack.pop();\n\t        q = i + 2 + x.length;\n\n\t        if (xml.substring(i + 2, q) !== x) {\n\t          return handleError('closing tag mismatch');\n\t        }\n\n\t        // verify chars in close tag\n\t        for (; q < j; q++) {\n\t          w = xml.charCodeAt(q);\n\n\t          if (w === 32 || (w > 8 && w < 14)) { // \\f\\n\\r\\t\\v space\n\t            continue;\n\t          }\n\n\t          return handleError('close tag');\n\t        }\n\n\t      } else {\n\t        if (xml.charCodeAt(j - 1) === 47) { // .../>\n\t          x = elementName = xml.substring(i + 1, j - 1);\n\n\t          tagStart = true;\n\t          tagEnd = true;\n\n\t        } else {\n\t          x = elementName = xml.substring(i + 1, j);\n\n\t          tagStart = true;\n\t          tagEnd = false;\n\t        }\n\n\t        if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) { // char 95\"_\" 58\":\"\n\t          return handleError('illegal first char nodeName');\n\t        }\n\n\t        for (q = 1, y = x.length; q < y; q++) {\n\t          w = x.charCodeAt(q);\n\n\t          if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {\n\t            continue;\n\t          }\n\n\t          if (w === 32 || (w < 14 && w > 8)) { // \\f\\n\\r\\t\\v space\n\t            elementName = x.substring(0, q);\n\n\t            // maybe there are attributes\n\t            cachedAttrs = null;\n\t            break;\n\t          }\n\n\t          return handleError('invalid nodeName');\n\t        }\n\n\t        if (!tagEnd) {\n\t          nodeStack.push(elementName);\n\t        }\n\t      }\n\n\t      if (isNamespace) {\n\n\t        _nsMatrix = nsMatrix;\n\n\t        if (tagStart) {\n\n\t          // remember old namespace\n\t          // unless we're self-closing\n\t          if (!tagEnd) {\n\t            nsMatrixStack.push(_nsMatrix);\n\t          }\n\n\t          if (cachedAttrs === null) {\n\n\t            // quick check, whether there may be namespace\n\t            // declarations on the node; if that is the case\n\t            // we need to eagerly parse the node attributes\n\t            if ((maybeNS = x.indexOf('xmlns', q) !== -1)) {\n\t              attrsStart = q;\n\t              attrsString = x;\n\n\t              getAttrs();\n\n\t              maybeNS = false;\n\t            }\n\t          }\n\t        }\n\n\t        _elementName = elementName;\n\n\t        w = elementName.indexOf(':');\n\t        if (w !== -1) {\n\t          xmlns = nsMatrix[elementName.substring(0, w)];\n\n\t          // prefix given; namespace must exist\n\t          if (!xmlns) {\n\t            return handleError('missing namespace on <' + _elementName + '>');\n\t          }\n\n\t          elementName = elementName.substr(w + 1);\n\t        } else {\n\t          xmlns = nsMatrix['xmlns'];\n\n\t          // if no default namespace is defined,\n\t          // we'll import the element as anonymous.\n\t          //\n\t          // it is up to users to correct that to the document defined\n\t          // targetNamespace, or whatever their undersanding of the\n\t          // XML spec mandates.\n\t        }\n\n\t        // adjust namespace prefixs as configured\n\t        if (xmlns) {\n\t          elementName = xmlns + ':' + elementName;\n\t        }\n\n\t      }\n\n\t      if (tagStart) {\n\t        attrsStart = q;\n\t        attrsString = x;\n\n\t        if (onOpenTag) {\n\t          if (proxy) {\n\t            onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);\n\t          } else {\n\t            onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);\n\t          }\n\n\t          if (parseStop) {\n\t            return;\n\t          }\n\t        }\n\n\t      }\n\n\t      if (tagEnd) {\n\n\t        if (onCloseTag) {\n\t          onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);\n\n\t          if (parseStop) {\n\t            return;\n\t          }\n\t        }\n\n\t        // restore old namespace\n\t        if (isNamespace) {\n\t          if (!tagStart) {\n\t            nsMatrix = nsMatrixStack.pop();\n\t          } else {\n\t            nsMatrix = _nsMatrix;\n\t          }\n\t        }\n\t      }\n\n\t      j += 1;\n\t    }\n\t  } /** end parse */\n\n\t}\n\n\tfunction hasLowerCaseAlias(pkg) {\n\t  return pkg.xml && pkg.xml.tagAlias === 'lowerCase';\n\t}\n\n\tvar DEFAULT_NS_MAP = {\n\t  'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n\t  'xml': 'http://www.w3.org/XML/1998/namespace'\n\t};\n\n\tvar XSI_TYPE$1 = 'xsi:type';\n\n\tfunction serializeFormat(element) {\n\t  return element.xml && element.xml.serialize;\n\t}\n\n\tfunction serializeAsType(element) {\n\t  return serializeFormat(element) === XSI_TYPE$1;\n\t}\n\n\tfunction serializeAsProperty(element) {\n\t  return serializeFormat(element) === 'property';\n\t}\n\n\tfunction capitalize(str) {\n\t  return str.charAt(0).toUpperCase() + str.slice(1);\n\t}\n\n\tfunction aliasToName(aliasNs, pkg) {\n\n\t  if (!hasLowerCaseAlias(pkg)) {\n\t    return aliasNs.name;\n\t  }\n\n\t  return aliasNs.prefix + ':' + capitalize(aliasNs.localName);\n\t}\n\n\tfunction prefixedToName(nameNs, pkg) {\n\n\t  var name = nameNs.name,\n\t      localName = nameNs.localName;\n\n\t  var typePrefix = pkg.xml && pkg.xml.typePrefix;\n\n\t  if (typePrefix && localName.indexOf(typePrefix) === 0) {\n\t    return nameNs.prefix + ':' + localName.slice(typePrefix.length);\n\t  } else {\n\t    return name;\n\t  }\n\t}\n\n\tfunction normalizeXsiTypeName(name, model) {\n\n\t  var nameNs = parseName(name);\n\t  var pkg = model.getPackage(nameNs.prefix);\n\n\t  return prefixedToName(nameNs, pkg);\n\t}\n\n\tfunction error$1(message) {\n\t  return new Error(message);\n\t}\n\n\t/**\n\t * Get the moddle descriptor for a given instance or type.\n\t *\n\t * @param  {ModdleElement|Function} element\n\t *\n\t * @return {Object} the moddle descriptor\n\t */\n\tfunction getModdleDescriptor(element) {\n\t  return element.$descriptor;\n\t}\n\n\n\t/**\n\t * A parse context.\n\t *\n\t * @class\n\t *\n\t * @param {Object} options\n\t * @param {ElementHandler} options.rootHandler the root handler for parsing a document\n\t * @param {boolean} [options.lax=false] whether or not to ignore invalid elements\n\t */\n\tfunction Context(options) {\n\n\t  /**\n\t   * @property {ElementHandler} rootHandler\n\t   */\n\n\t  /**\n\t   * @property {Boolean} lax\n\t   */\n\n\t  assign(this, options);\n\n\t  this.elementsById = {};\n\t  this.references = [];\n\t  this.warnings = [];\n\n\t  /**\n\t   * Add an unresolved reference.\n\t   *\n\t   * @param {Object} reference\n\t   */\n\t  this.addReference = function(reference) {\n\t    this.references.push(reference);\n\t  };\n\n\t  /**\n\t   * Add a processed element.\n\t   *\n\t   * @param {ModdleElement} element\n\t   */\n\t  this.addElement = function(element) {\n\n\t    if (!element) {\n\t      throw error$1('expected element');\n\t    }\n\n\t    var elementsById = this.elementsById;\n\n\t    var descriptor = getModdleDescriptor(element);\n\n\t    var idProperty = descriptor.idProperty,\n\t        id;\n\n\t    if (idProperty) {\n\t      id = element.get(idProperty.name);\n\n\t      if (id) {\n\t        // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar\n\t        if (!/^([a-z][\\w-.]*:)?[a-z_][\\w-.]*$/i.test(id)) {\n\t          throw new Error('illegal ID <' + id + '>');\n\t        }\n\n\t        if (elementsById[id]) {\n\t          throw error$1('duplicate ID <' + id + '>');\n\t        }\n\n\t        elementsById[id] = element;\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Add an import warning.\n\t   *\n\t   * @param {Object} warning\n\t   * @param {String} warning.message\n\t   * @param {Error} [warning.error]\n\t   */\n\t  this.addWarning = function(warning) {\n\t    this.warnings.push(warning);\n\t  };\n\t}\n\n\tfunction BaseHandler() {}\n\n\tBaseHandler.prototype.handleEnd = function() {};\n\tBaseHandler.prototype.handleText = function() {};\n\tBaseHandler.prototype.handleNode = function() {};\n\n\n\t/**\n\t * A simple pass through handler that does nothing except for\n\t * ignoring all input it receives.\n\t *\n\t * This is used to ignore unknown elements and\n\t * attributes.\n\t */\n\tfunction NoopHandler() { }\n\n\tNoopHandler.prototype = Object.create(BaseHandler.prototype);\n\n\tNoopHandler.prototype.handleNode = function() {\n\t  return this;\n\t};\n\n\tfunction BodyHandler() {}\n\n\tBodyHandler.prototype = Object.create(BaseHandler.prototype);\n\n\tBodyHandler.prototype.handleText = function(text) {\n\t  this.body = (this.body || '') + text;\n\t};\n\n\tfunction ReferenceHandler(property, context) {\n\t  this.property = property;\n\t  this.context = context;\n\t}\n\n\tReferenceHandler.prototype = Object.create(BodyHandler.prototype);\n\n\tReferenceHandler.prototype.handleNode = function(node) {\n\n\t  if (this.element) {\n\t    throw error$1('expected no sub nodes');\n\t  } else {\n\t    this.element = this.createReference(node);\n\t  }\n\n\t  return this;\n\t};\n\n\tReferenceHandler.prototype.handleEnd = function() {\n\t  this.element.id = this.body;\n\t};\n\n\tReferenceHandler.prototype.createReference = function(node) {\n\t  return {\n\t    property: this.property.ns.name,\n\t    id: ''\n\t  };\n\t};\n\n\tfunction ValueHandler(propertyDesc, element) {\n\t  this.element = element;\n\t  this.propertyDesc = propertyDesc;\n\t}\n\n\tValueHandler.prototype = Object.create(BodyHandler.prototype);\n\n\tValueHandler.prototype.handleEnd = function() {\n\n\t  var value = this.body || '',\n\t      element = this.element,\n\t      propertyDesc = this.propertyDesc;\n\n\t  value = coerceType(propertyDesc.type, value);\n\n\t  if (propertyDesc.isMany) {\n\t    element.get(propertyDesc.name).push(value);\n\t  } else {\n\t    element.set(propertyDesc.name, value);\n\t  }\n\t};\n\n\n\tfunction BaseElementHandler() {}\n\n\tBaseElementHandler.prototype = Object.create(BodyHandler.prototype);\n\n\tBaseElementHandler.prototype.handleNode = function(node) {\n\t  var parser = this,\n\t      element = this.element;\n\n\t  if (!element) {\n\t    element = this.element = this.createElement(node);\n\n\t    this.context.addElement(element);\n\t  } else {\n\t    parser = this.handleChild(node);\n\t  }\n\n\t  return parser;\n\t};\n\n\t/**\n\t * @class Reader.ElementHandler\n\t *\n\t */\n\tfunction ElementHandler(model, typeName, context) {\n\t  this.model = model;\n\t  this.type = model.getType(typeName);\n\t  this.context = context;\n\t}\n\n\tElementHandler.prototype = Object.create(BaseElementHandler.prototype);\n\n\tElementHandler.prototype.addReference = function(reference) {\n\t  this.context.addReference(reference);\n\t};\n\n\tElementHandler.prototype.handleText = function(text) {\n\n\t  var element = this.element,\n\t      descriptor = getModdleDescriptor(element),\n\t      bodyProperty = descriptor.bodyProperty;\n\n\t  if (!bodyProperty) {\n\t    throw error$1('unexpected body text <' + text + '>');\n\t  }\n\n\t  BodyHandler.prototype.handleText.call(this, text);\n\t};\n\n\tElementHandler.prototype.handleEnd = function() {\n\n\t  var value = this.body,\n\t      element = this.element,\n\t      descriptor = getModdleDescriptor(element),\n\t      bodyProperty = descriptor.bodyProperty;\n\n\t  if (bodyProperty && value !== undefined) {\n\t    value = coerceType(bodyProperty.type, value);\n\t    element.set(bodyProperty.name, value);\n\t  }\n\t};\n\n\t/**\n\t * Create an instance of the model from the given node.\n\t *\n\t * @param  {Element} node the xml node\n\t */\n\tElementHandler.prototype.createElement = function(node) {\n\t  var attributes = node.attributes,\n\t      Type = this.type,\n\t      descriptor = getModdleDescriptor(Type),\n\t      context = this.context,\n\t      instance = new Type({}),\n\t      model = this.model,\n\t      propNameNs;\n\n\t  forEach(attributes, function(value, name) {\n\n\t    var prop = descriptor.propertiesByName[name],\n\t        values;\n\n\t    if (prop && prop.isReference) {\n\n\t      if (!prop.isMany) {\n\t        context.addReference({\n\t          element: instance,\n\t          property: prop.ns.name,\n\t          id: value\n\t        });\n\t      } else {\n\t        // IDREFS: parse references as whitespace-separated list\n\t        values = value.split(' ');\n\n\t        forEach(values, function(v) {\n\t          context.addReference({\n\t            element: instance,\n\t            property: prop.ns.name,\n\t            id: v\n\t          });\n\t        });\n\t      }\n\n\t    } else {\n\t      if (prop) {\n\t        value = coerceType(prop.type, value);\n\t      } else\n\t      if (name !== 'xmlns') {\n\t        propNameNs = parseName(name, descriptor.ns.prefix);\n\n\t        // check whether attribute is defined in a well-known namespace\n\t        // if that is the case we emit a warning to indicate potential misuse\n\t        if (model.getPackage(propNameNs.prefix)) {\n\n\t          context.addWarning({\n\t            message: 'unknown attribute <' + name + '>',\n\t            element: instance,\n\t            property: name,\n\t            value: value\n\t          });\n\t        }\n\t      }\n\n\t      instance.set(name, value);\n\t    }\n\t  });\n\n\t  return instance;\n\t};\n\n\tElementHandler.prototype.getPropertyForNode = function(node) {\n\n\t  var name = node.name;\n\t  var nameNs = parseName(name);\n\n\t  var type = this.type,\n\t      model = this.model,\n\t      descriptor = getModdleDescriptor(type);\n\n\t  var propertyName = nameNs.name,\n\t      property = descriptor.propertiesByName[propertyName],\n\t      elementTypeName,\n\t      elementType;\n\n\t  // search for properties by name first\n\n\t  if (property && !property.isAttr) {\n\n\t    if (serializeAsType(property)) {\n\t      elementTypeName = node.attributes[XSI_TYPE$1];\n\n\t      // xsi type is optional, if it does not exists the\n\t      // default type is assumed\n\t      if (elementTypeName) {\n\n\t        // take possible type prefixes from XML\n\t        // into account, i.e.: xsi:type=\"t{ActualType}\"\n\t        elementTypeName = normalizeXsiTypeName(elementTypeName, model);\n\n\t        elementType = model.getType(elementTypeName);\n\n\t        return assign({}, property, {\n\t          effectiveType: getModdleDescriptor(elementType).name\n\t        });\n\t      }\n\t    }\n\n\t    // search for properties by name first\n\t    return property;\n\t  }\n\n\t  var pkg = model.getPackage(nameNs.prefix);\n\n\t  if (pkg) {\n\t    elementTypeName = aliasToName(nameNs, pkg);\n\t    elementType = model.getType(elementTypeName);\n\n\t    // search for collection members later\n\t    property = find(descriptor.properties, function(p) {\n\t      return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);\n\t    });\n\n\t    if (property) {\n\t      return assign({}, property, {\n\t        effectiveType: getModdleDescriptor(elementType).name\n\t      });\n\t    }\n\t  } else {\n\t    // parse unknown element (maybe extension)\n\t    property = find(descriptor.properties, function(p) {\n\t      return !p.isReference && !p.isAttribute && p.type === 'Element';\n\t    });\n\n\t    if (property) {\n\t      return property;\n\t    }\n\t  }\n\n\t  throw error$1('unrecognized element <' + nameNs.name + '>');\n\t};\n\n\tElementHandler.prototype.toString = function() {\n\t  return 'ElementDescriptor[' + getModdleDescriptor(this.type).name + ']';\n\t};\n\n\tElementHandler.prototype.valueHandler = function(propertyDesc, element) {\n\t  return new ValueHandler(propertyDesc, element);\n\t};\n\n\tElementHandler.prototype.referenceHandler = function(propertyDesc) {\n\t  return new ReferenceHandler(propertyDesc, this.context);\n\t};\n\n\tElementHandler.prototype.handler = function(type) {\n\t  if (type === 'Element') {\n\t    return new GenericElementHandler(this.model, type, this.context);\n\t  } else {\n\t    return new ElementHandler(this.model, type, this.context);\n\t  }\n\t};\n\n\t/**\n\t * Handle the child element parsing\n\t *\n\t * @param  {Element} node the xml node\n\t */\n\tElementHandler.prototype.handleChild = function(node) {\n\t  var propertyDesc, type, element, childHandler;\n\n\t  propertyDesc = this.getPropertyForNode(node);\n\t  element = this.element;\n\n\t  type = propertyDesc.effectiveType || propertyDesc.type;\n\n\t  if (isSimple(type)) {\n\t    return this.valueHandler(propertyDesc, element);\n\t  }\n\n\t  if (propertyDesc.isReference) {\n\t    childHandler = this.referenceHandler(propertyDesc).handleNode(node);\n\t  } else {\n\t    childHandler = this.handler(type).handleNode(node);\n\t  }\n\n\t  var newElement = childHandler.element;\n\n\t  // child handles may decide to skip elements\n\t  // by not returning anything\n\t  if (newElement !== undefined) {\n\n\t    if (propertyDesc.isMany) {\n\t      element.get(propertyDesc.name).push(newElement);\n\t    } else {\n\t      element.set(propertyDesc.name, newElement);\n\t    }\n\n\t    if (propertyDesc.isReference) {\n\t      assign(newElement, {\n\t        element: element\n\t      });\n\n\t      this.context.addReference(newElement);\n\t    } else {\n\t      // establish child -> parent relationship\n\t      newElement.$parent = element;\n\t    }\n\t  }\n\n\t  return childHandler;\n\t};\n\n\t/**\n\t * An element handler that performs special validation\n\t * to ensure the node it gets initialized with matches\n\t * the handlers type (namespace wise).\n\t *\n\t * @param {Moddle} model\n\t * @param {String} typeName\n\t * @param {Context} context\n\t */\n\tfunction RootElementHandler(model, typeName, context) {\n\t  ElementHandler.call(this, model, typeName, context);\n\t}\n\n\tRootElementHandler.prototype = Object.create(ElementHandler.prototype);\n\n\tRootElementHandler.prototype.createElement = function(node) {\n\n\t  var name = node.name,\n\t      nameNs = parseName(name),\n\t      model = this.model,\n\t      type = this.type,\n\t      pkg = model.getPackage(nameNs.prefix),\n\t      typeName = pkg && aliasToName(nameNs, pkg) || name;\n\n\t  // verify the correct namespace if we parse\n\t  // the first element in the handler tree\n\t  //\n\t  // this ensures we don't mistakenly import wrong namespace elements\n\t  if (!type.hasType(typeName)) {\n\t    throw error$1('unexpected element <' + node.originalName + '>');\n\t  }\n\n\t  return ElementHandler.prototype.createElement.call(this, node);\n\t};\n\n\n\tfunction GenericElementHandler(model, typeName, context) {\n\t  this.model = model;\n\t  this.context = context;\n\t}\n\n\tGenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);\n\n\tGenericElementHandler.prototype.createElement = function(node) {\n\n\t  var name = node.name,\n\t      ns = parseName(name),\n\t      prefix = ns.prefix,\n\t      uri = node.ns[prefix + '$uri'],\n\t      attributes = node.attributes;\n\n\t  return this.model.createAny(name, uri, attributes);\n\t};\n\n\tGenericElementHandler.prototype.handleChild = function(node) {\n\n\t  var handler = new GenericElementHandler(this.model, 'Element', this.context).handleNode(node),\n\t      element = this.element;\n\n\t  var newElement = handler.element,\n\t      children;\n\n\t  if (newElement !== undefined) {\n\t    children = element.$children = element.$children || [];\n\t    children.push(newElement);\n\n\t    // establish child -> parent relationship\n\t    newElement.$parent = element;\n\t  }\n\n\t  return handler;\n\t};\n\n\tGenericElementHandler.prototype.handleEnd = function() {\n\t  if (this.body) {\n\t    this.element.$body = this.body;\n\t  }\n\t};\n\n\t/**\n\t * A reader for a meta-model\n\t *\n\t * @param {Object} options\n\t * @param {Model} options.model used to read xml files\n\t * @param {Boolean} options.lax whether to make parse errors warnings\n\t */\n\tfunction Reader(options) {\n\n\t  if (options instanceof Moddle) {\n\t    options = {\n\t      model: options\n\t    };\n\t  }\n\n\t  assign(this, { lax: false }, options);\n\t}\n\n\t/**\n\t * The fromXML result.\n\t *\n\t * @typedef {Object} ParseResult\n\t *\n\t * @property {ModdleElement} rootElement\n\t * @property {Array<Object>} references\n\t * @property {Array<Error>} warnings\n\t * @property {Object} elementsById - a mapping containing each ID -> ModdleElement\n\t */\n\n\t/**\n\t * The fromXML result.\n\t *\n\t * @typedef {Error} ParseError\n\t *\n\t * @property {Array<Error>} warnings\n\t */\n\n\t/**\n\t * Parse the given XML into a moddle document tree.\n\t *\n\t * @param {String} xml\n\t * @param {ElementHandler|Object} options or rootHandler\n\t *\n\t * @returns {Promise<ParseResult, ParseError>}\n\t */\n\tReader.prototype.fromXML = function(xml, options, done) {\n\n\t  var rootHandler = options.rootHandler;\n\n\t  if (options instanceof ElementHandler) {\n\t    // root handler passed via (xml, { rootHandler: ElementHandler }, ...)\n\t    rootHandler = options;\n\t    options = {};\n\t  } else {\n\t    if (typeof options === 'string') {\n\t      // rootHandler passed via (xml, 'someString', ...)\n\t      rootHandler = this.handler(options);\n\t      options = {};\n\t    } else if (typeof rootHandler === 'string') {\n\t      // rootHandler passed via (xml, { rootHandler: 'someString' }, ...)\n\t      rootHandler = this.handler(rootHandler);\n\t    }\n\t  }\n\n\t  var model = this.model,\n\t      lax = this.lax;\n\n\t  var context = new Context(assign({}, options, { rootHandler: rootHandler })),\n\t      parser = new Parser({ proxy: true }),\n\t      stack = createStack();\n\n\t  rootHandler.context = context;\n\n\t  // push root handler\n\t  stack.push(rootHandler);\n\n\n\t  /**\n\t   * Handle error.\n\t   *\n\t   * @param  {Error} err\n\t   * @param  {Function} getContext\n\t   * @param  {boolean} lax\n\t   *\n\t   * @return {boolean} true if handled\n\t   */\n\t  function handleError(err, getContext, lax) {\n\n\t    var ctx = getContext();\n\n\t    var line = ctx.line,\n\t        column = ctx.column,\n\t        data = ctx.data;\n\n\t    // we receive the full context data here,\n\t    // for elements trim down the information\n\t    // to the tag name, only\n\t    if (data.charAt(0) === '<' && data.indexOf(' ') !== -1) {\n\t      data = data.slice(0, data.indexOf(' ')) + '>';\n\t    }\n\n\t    var message =\n\t      'unparsable content ' + (data ? data + ' ' : '') + 'detected\\n\\t' +\n\t        'line: ' + line + '\\n\\t' +\n\t        'column: ' + column + '\\n\\t' +\n\t        'nested error: ' + err.message;\n\n\t    if (lax) {\n\t      context.addWarning({\n\t        message: message,\n\t        error: err\n\t      });\n\n\t      return true;\n\t    } else {\n\t      throw error$1(message);\n\t    }\n\t  }\n\n\t  function handleWarning(err, getContext) {\n\t    // just like handling errors in <lax=true> mode\n\t    return handleError(err, getContext, true);\n\t  }\n\n\t  /**\n\t   * Resolve collected references on parse end.\n\t   */\n\t  function resolveReferences() {\n\n\t    var elementsById = context.elementsById;\n\t    var references = context.references;\n\n\t    var i, r;\n\n\t    for (i = 0; (r = references[i]); i++) {\n\t      var element = r.element;\n\t      var reference = elementsById[r.id];\n\t      var property = getModdleDescriptor(element).propertiesByName[r.property];\n\n\t      if (!reference) {\n\t        context.addWarning({\n\t          message: 'unresolved reference <' + r.id + '>',\n\t          element: r.element,\n\t          property: r.property,\n\t          value: r.id\n\t        });\n\t      }\n\n\t      if (property.isMany) {\n\t        var collection = element.get(property.name),\n\t            idx = collection.indexOf(r);\n\n\t        // we replace an existing place holder (idx != -1) or\n\t        // append to the collection instead\n\t        if (idx === -1) {\n\t          idx = collection.length;\n\t        }\n\n\t        if (!reference) {\n\t          // remove unresolvable reference\n\t          collection.splice(idx, 1);\n\t        } else {\n\t          // add or update reference in collection\n\t          collection[idx] = reference;\n\t        }\n\t      } else {\n\t        element.set(property.name, reference);\n\t      }\n\t    }\n\t  }\n\n\t  function handleClose() {\n\t    stack.pop().handleEnd();\n\t  }\n\n\t  var PREAMBLE_START_PATTERN = /^<\\?xml /i;\n\n\t  var ENCODING_PATTERN = / encoding=\"([^\"]+)\"/i;\n\n\t  var UTF_8_PATTERN = /^utf-8$/i;\n\n\t  function handleQuestion(question) {\n\n\t    if (!PREAMBLE_START_PATTERN.test(question)) {\n\t      return;\n\t    }\n\n\t    var match = ENCODING_PATTERN.exec(question);\n\t    var encoding = match && match[1];\n\n\t    if (!encoding || UTF_8_PATTERN.test(encoding)) {\n\t      return;\n\t    }\n\n\t    context.addWarning({\n\t      message:\n\t        'unsupported document encoding <' + encoding + '>, ' +\n\t        'falling back to UTF-8'\n\t    });\n\t  }\n\n\t  function handleOpen(node, getContext) {\n\t    var handler = stack.peek();\n\n\t    try {\n\t      stack.push(handler.handleNode(node));\n\t    } catch (err) {\n\n\t      if (handleError(err, getContext, lax)) {\n\t        stack.push(new NoopHandler());\n\t      }\n\t    }\n\t  }\n\n\t  function handleCData(text, getContext) {\n\n\t    try {\n\t      stack.peek().handleText(text);\n\t    } catch (err) {\n\t      handleWarning(err, getContext);\n\t    }\n\t  }\n\n\t  function handleText(text, getContext) {\n\t    // strip whitespace only nodes, i.e. before\n\t    // <!CDATA[ ... ]> sections and in between tags\n\t    text = text.trim();\n\n\t    if (!text) {\n\t      return;\n\t    }\n\n\t    handleCData(text, getContext);\n\t  }\n\n\t  var uriMap = model.getPackages().reduce(function(uriMap, p) {\n\t    uriMap[p.uri] = p.prefix;\n\n\t    return uriMap;\n\t  }, {\n\t    'http://www.w3.org/XML/1998/namespace': 'xml' // add default xml ns\n\t  });\n\t  parser\n\t    .ns(uriMap)\n\t    .on('openTag', function(obj, decodeStr, selfClosing, getContext) {\n\n\t      // gracefully handle unparsable attributes (attrs=false)\n\t      var attrs = obj.attrs || {};\n\n\t      var decodedAttrs = Object.keys(attrs).reduce(function(d, key) {\n\t        var value = decodeStr(attrs[key]);\n\n\t        d[key] = value;\n\n\t        return d;\n\t      }, {});\n\n\t      var node = {\n\t        name: obj.name,\n\t        originalName: obj.originalName,\n\t        attributes: decodedAttrs,\n\t        ns: obj.ns\n\t      };\n\n\t      handleOpen(node, getContext);\n\t    })\n\t    .on('question', handleQuestion)\n\t    .on('closeTag', handleClose)\n\t    .on('cdata', handleCData)\n\t    .on('text', function(text, decodeEntities, getContext) {\n\t      handleText(decodeEntities(text), getContext);\n\t    })\n\t    .on('error', handleError)\n\t    .on('warn', handleWarning);\n\n\t  // async XML parsing to make sure the execution environment\n\t  // (node or brower) is kept responsive and that certain optimization\n\t  // strategies can kick in.\n\t  return new Promise(function(resolve, reject) {\n\n\t    var err;\n\n\t    try {\n\t      parser.parse(xml);\n\n\t      resolveReferences();\n\t    } catch (e) {\n\t      err = e;\n\t    }\n\n\t    var rootElement = rootHandler.element;\n\n\t    if (!err && !rootElement) {\n\t      err = error$1('failed to parse document as <' + rootHandler.type.$descriptor.name + '>');\n\t    }\n\n\t    var warnings = context.warnings;\n\t    var references = context.references;\n\t    var elementsById = context.elementsById;\n\n\t    if (err) {\n\t      err.warnings = warnings;\n\n\t      return reject(err);\n\t    } else {\n\t      return resolve({\n\t        rootElement: rootElement,\n\t        elementsById: elementsById,\n\t        references: references,\n\t        warnings: warnings\n\t      });\n\t    }\n\t  });\n\t};\n\n\tReader.prototype.handler = function(name) {\n\t  return new RootElementHandler(this.model, name);\n\t};\n\n\n\t// helpers //////////////////////////\n\n\tfunction createStack() {\n\t  var stack = [];\n\n\t  Object.defineProperty(stack, 'peek', {\n\t    value: function() {\n\t      return this[this.length - 1];\n\t    }\n\t  });\n\n\t  return stack;\n\t}\n\n\tvar XML_PREAMBLE = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n\n\tvar ESCAPE_ATTR_CHARS = /<|>|'|\"|&|\\n\\r|\\n/g;\n\tvar ESCAPE_CHARS = /<|>|&/g;\n\n\n\tfunction Namespaces(parent) {\n\n\t  var prefixMap = {};\n\t  var uriMap = {};\n\t  var used = {};\n\n\t  var wellknown = [];\n\t  var custom = [];\n\n\t  // API\n\n\t  this.byUri = function(uri) {\n\t    return uriMap[uri] || (\n\t      parent && parent.byUri(uri)\n\t    );\n\t  };\n\n\t  this.add = function(ns, isWellknown) {\n\n\t    uriMap[ns.uri] = ns;\n\n\t    if (isWellknown) {\n\t      wellknown.push(ns);\n\t    } else {\n\t      custom.push(ns);\n\t    }\n\n\t    this.mapPrefix(ns.prefix, ns.uri);\n\t  };\n\n\t  this.uriByPrefix = function(prefix) {\n\t    return prefixMap[prefix || 'xmlns'];\n\t  };\n\n\t  this.mapPrefix = function(prefix, uri) {\n\t    prefixMap[prefix || 'xmlns'] = uri;\n\t  };\n\n\t  this.getNSKey = function(ns) {\n\t    return (ns.prefix !== undefined) ? (ns.uri + '|' + ns.prefix) : ns.uri;\n\t  };\n\n\t  this.logUsed = function(ns) {\n\n\t    var uri = ns.uri;\n\t    var nsKey = this.getNSKey(ns);\n\n\t    used[nsKey] = this.byUri(uri);\n\n\t    // Inform parent recursively about the usage of this NS\n\t    if (parent) {\n\t      parent.logUsed(ns);\n\t    }\n\t  };\n\n\t  this.getUsed = function(ns) {\n\n\t    function isUsed(ns) {\n\t      var nsKey = self.getNSKey(ns);\n\n\t      return used[nsKey];\n\t    }\n\n\t    var self = this;\n\n\t    var allNs = [].concat(wellknown, custom);\n\n\t    return allNs.filter(isUsed);\n\t  };\n\n\t}\n\n\tfunction lower(string) {\n\t  return string.charAt(0).toLowerCase() + string.slice(1);\n\t}\n\n\tfunction nameToAlias(name, pkg) {\n\t  if (hasLowerCaseAlias(pkg)) {\n\t    return lower(name);\n\t  } else {\n\t    return name;\n\t  }\n\t}\n\n\tfunction inherits(ctor, superCtor) {\n\t  ctor.super_ = superCtor;\n\t  ctor.prototype = Object.create(superCtor.prototype, {\n\t    constructor: {\n\t      value: ctor,\n\t      enumerable: false,\n\t      writable: true,\n\t      configurable: true\n\t    }\n\t  });\n\t}\n\n\tfunction nsName(ns) {\n\t  if (isString(ns)) {\n\t    return ns;\n\t  } else {\n\t    return (ns.prefix ? ns.prefix + ':' : '') + ns.localName;\n\t  }\n\t}\n\n\tfunction getNsAttrs(namespaces) {\n\n\t  return map(namespaces.getUsed(), function(ns) {\n\t    var name = 'xmlns' + (ns.prefix ? ':' + ns.prefix : '');\n\t    return { name: name, value: ns.uri };\n\t  });\n\n\t}\n\n\tfunction getElementNs(ns, descriptor) {\n\t  if (descriptor.isGeneric) {\n\t    return assign({ localName: descriptor.ns.localName }, ns);\n\t  } else {\n\t    return assign({ localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg) }, ns);\n\t  }\n\t}\n\n\tfunction getPropertyNs(ns, descriptor) {\n\t  return assign({ localName: descriptor.ns.localName }, ns);\n\t}\n\n\tfunction getSerializableProperties(element) {\n\t  var descriptor = element.$descriptor;\n\n\t  return filter(descriptor.properties, function(p) {\n\t    var name = p.name;\n\n\t    if (p.isVirtual) {\n\t      return false;\n\t    }\n\n\t    // do not serialize defaults\n\t    if (!element.hasOwnProperty(name)) {\n\t      return false;\n\t    }\n\n\t    var value = element[name];\n\n\t    // do not serialize default equals\n\t    if (value === p.default) {\n\t      return false;\n\t    }\n\n\t    // do not serialize null properties\n\t    if (value === null) {\n\t      return false;\n\t    }\n\n\t    return p.isMany ? value.length : true;\n\t  });\n\t}\n\n\tvar ESCAPE_ATTR_MAP = {\n\t  '\\n': '#10',\n\t  '\\n\\r': '#10',\n\t  '\"': '#34',\n\t  '\\'': '#39',\n\t  '<': '#60',\n\t  '>': '#62',\n\t  '&': '#38'\n\t};\n\n\tvar ESCAPE_MAP = {\n\t  '<': 'lt',\n\t  '>': 'gt',\n\t  '&': 'amp'\n\t};\n\n\tfunction escape$1(str, charPattern, replaceMap) {\n\n\t  // ensure we are handling strings here\n\t  str = isString(str) ? str : '' + str;\n\n\t  return str.replace(charPattern, function(s) {\n\t    return '&' + replaceMap[s] + ';';\n\t  });\n\t}\n\n\t/**\n\t * Escape a string attribute to not contain any bad values (line breaks, '\"', ...)\n\t *\n\t * @param {String} str the string to escape\n\t * @return {String} the escaped string\n\t */\n\tfunction escapeAttr(str) {\n\t  return escape$1(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);\n\t}\n\n\tfunction escapeBody(str) {\n\t  return escape$1(str, ESCAPE_CHARS, ESCAPE_MAP);\n\t}\n\n\tfunction filterAttributes(props) {\n\t  return filter(props, function(p) { return p.isAttr; });\n\t}\n\n\tfunction filterContained(props) {\n\t  return filter(props, function(p) { return !p.isAttr; });\n\t}\n\n\n\tfunction ReferenceSerializer(tagName) {\n\t  this.tagName = tagName;\n\t}\n\n\tReferenceSerializer.prototype.build = function(element) {\n\t  this.element = element;\n\t  return this;\n\t};\n\n\tReferenceSerializer.prototype.serializeTo = function(writer) {\n\t  writer\n\t    .appendIndent()\n\t    .append('<' + this.tagName + '>' + this.element.id + '</' + this.tagName + '>')\n\t    .appendNewLine();\n\t};\n\n\tfunction BodySerializer() {}\n\n\tBodySerializer.prototype.serializeValue =\n\tBodySerializer.prototype.serializeTo = function(writer) {\n\t  writer.append(\n\t    this.escape\n\t      ? escapeBody(this.value)\n\t      : this.value\n\t  );\n\t};\n\n\tBodySerializer.prototype.build = function(prop, value) {\n\t  this.value = value;\n\n\t  if (prop.type === 'String' && value.search(ESCAPE_CHARS) !== -1) {\n\t    this.escape = true;\n\t  }\n\n\t  return this;\n\t};\n\n\tfunction ValueSerializer(tagName) {\n\t  this.tagName = tagName;\n\t}\n\n\tinherits(ValueSerializer, BodySerializer);\n\n\tValueSerializer.prototype.serializeTo = function(writer) {\n\n\t  writer\n\t    .appendIndent()\n\t    .append('<' + this.tagName + '>');\n\n\t  this.serializeValue(writer);\n\n\t  writer\n\t    .append('</' + this.tagName + '>')\n\t    .appendNewLine();\n\t};\n\n\tfunction ElementSerializer(parent, propertyDescriptor) {\n\t  this.body = [];\n\t  this.attrs = [];\n\n\t  this.parent = parent;\n\t  this.propertyDescriptor = propertyDescriptor;\n\t}\n\n\tElementSerializer.prototype.build = function(element) {\n\t  this.element = element;\n\n\t  var elementDescriptor = element.$descriptor,\n\t      propertyDescriptor = this.propertyDescriptor;\n\n\t  var otherAttrs,\n\t      properties;\n\n\t  var isGeneric = elementDescriptor.isGeneric;\n\n\t  if (isGeneric) {\n\t    otherAttrs = this.parseGeneric(element);\n\t  } else {\n\t    otherAttrs = this.parseNsAttributes(element);\n\t  }\n\n\t  if (propertyDescriptor) {\n\t    this.ns = this.nsPropertyTagName(propertyDescriptor);\n\t  } else {\n\t    this.ns = this.nsTagName(elementDescriptor);\n\t  }\n\n\t  // compute tag name\n\t  this.tagName = this.addTagName(this.ns);\n\n\t  if (!isGeneric) {\n\t    properties = getSerializableProperties(element);\n\n\t    this.parseAttributes(filterAttributes(properties));\n\t    this.parseContainments(filterContained(properties));\n\t  }\n\n\t  this.parseGenericAttributes(element, otherAttrs);\n\n\t  return this;\n\t};\n\n\tElementSerializer.prototype.nsTagName = function(descriptor) {\n\t  var effectiveNs = this.logNamespaceUsed(descriptor.ns);\n\t  return getElementNs(effectiveNs, descriptor);\n\t};\n\n\tElementSerializer.prototype.nsPropertyTagName = function(descriptor) {\n\t  var effectiveNs = this.logNamespaceUsed(descriptor.ns);\n\t  return getPropertyNs(effectiveNs, descriptor);\n\t};\n\n\tElementSerializer.prototype.isLocalNs = function(ns) {\n\t  return ns.uri === this.ns.uri;\n\t};\n\n\t/**\n\t * Get the actual ns attribute name for the given element.\n\t *\n\t * @param {Object} element\n\t * @param {Boolean} [element.inherited=false]\n\t *\n\t * @return {Object} nsName\n\t */\n\tElementSerializer.prototype.nsAttributeName = function(element) {\n\n\t  var ns;\n\n\t  if (isString(element)) {\n\t    ns = parseName(element);\n\t  } else {\n\t    ns = element.ns;\n\t  }\n\n\t  // return just local name for inherited attributes\n\t  if (element.inherited) {\n\t    return { localName: ns.localName };\n\t  }\n\n\t  // parse + log effective ns\n\t  var effectiveNs = this.logNamespaceUsed(ns);\n\n\t  // LOG ACTUAL namespace use\n\t  this.getNamespaces().logUsed(effectiveNs);\n\n\t  // strip prefix if same namespace like parent\n\t  if (this.isLocalNs(effectiveNs)) {\n\t    return { localName: ns.localName };\n\t  } else {\n\t    return assign({ localName: ns.localName }, effectiveNs);\n\t  }\n\t};\n\n\tElementSerializer.prototype.parseGeneric = function(element) {\n\n\t  var self = this,\n\t      body = this.body;\n\n\t  var attributes = [];\n\n\t  forEach(element, function(val, key) {\n\n\t    var nonNsAttr;\n\n\t    if (key === '$body') {\n\t      body.push(new BodySerializer().build({ type: 'String' }, val));\n\t    } else\n\t    if (key === '$children') {\n\t      forEach(val, function(child) {\n\t        body.push(new ElementSerializer(self).build(child));\n\t      });\n\t    } else\n\t    if (key.indexOf('$') !== 0) {\n\t      nonNsAttr = self.parseNsAttribute(element, key, val);\n\n\t      if (nonNsAttr) {\n\t        attributes.push({ name: key, value: val });\n\t      }\n\t    }\n\t  });\n\n\t  return attributes;\n\t};\n\n\tElementSerializer.prototype.parseNsAttribute = function(element, name, value) {\n\t  var model = element.$model;\n\n\t  var nameNs = parseName(name);\n\n\t  var ns;\n\n\t  // parse xmlns:foo=\"http://foo.bar\"\n\t  if (nameNs.prefix === 'xmlns') {\n\t    ns = { prefix: nameNs.localName, uri: value };\n\t  }\n\n\t  // parse xmlns=\"http://foo.bar\"\n\t  if (!nameNs.prefix && nameNs.localName === 'xmlns') {\n\t    ns = { uri: value };\n\t  }\n\n\t  if (!ns) {\n\t    return {\n\t      name: name,\n\t      value: value\n\t    };\n\t  }\n\n\t  if (model && model.getPackage(value)) {\n\t    // register well known namespace\n\t    this.logNamespace(ns, true, true);\n\t  } else {\n\t    // log custom namespace directly as used\n\t    var actualNs = this.logNamespaceUsed(ns, true);\n\n\t    this.getNamespaces().logUsed(actualNs);\n\t  }\n\t};\n\n\n\t/**\n\t * Parse namespaces and return a list of left over generic attributes\n\t *\n\t * @param  {Object} element\n\t * @return {Array<Object>}\n\t */\n\tElementSerializer.prototype.parseNsAttributes = function(element, attrs) {\n\t  var self = this;\n\n\t  var genericAttrs = element.$attrs;\n\n\t  var attributes = [];\n\n\t  // parse namespace attributes first\n\t  // and log them. push non namespace attributes to a list\n\t  // and process them later\n\t  forEach(genericAttrs, function(value, name) {\n\n\t    var nonNsAttr = self.parseNsAttribute(element, name, value);\n\n\t    if (nonNsAttr) {\n\t      attributes.push(nonNsAttr);\n\t    }\n\t  });\n\n\t  return attributes;\n\t};\n\n\tElementSerializer.prototype.parseGenericAttributes = function(element, attributes) {\n\n\t  var self = this;\n\n\t  forEach(attributes, function(attr) {\n\n\t    // do not serialize xsi:type attribute\n\t    // it is set manually based on the actual implementation type\n\t    if (attr.name === XSI_TYPE$1) {\n\t      return;\n\t    }\n\n\t    try {\n\t      self.addAttribute(self.nsAttributeName(attr.name), attr.value);\n\t    } catch (e) {\n\t      console.warn(\n\t        'missing namespace information for ',\n\t        attr.name, '=', attr.value, 'on', element,\n\t        e);\n\t    }\n\t  });\n\t};\n\n\tElementSerializer.prototype.parseContainments = function(properties) {\n\n\t  var self = this,\n\t      body = this.body,\n\t      element = this.element;\n\n\t  forEach(properties, function(p) {\n\t    var value = element.get(p.name),\n\t        isReference = p.isReference,\n\t        isMany = p.isMany;\n\n\t    if (!isMany) {\n\t      value = [ value ];\n\t    }\n\n\t    if (p.isBody) {\n\t      body.push(new BodySerializer().build(p, value[0]));\n\t    } else\n\t    if (isSimple(p.type)) {\n\t      forEach(value, function(v) {\n\t        body.push(new ValueSerializer(self.addTagName(self.nsPropertyTagName(p))).build(p, v));\n\t      });\n\t    } else\n\t    if (isReference) {\n\t      forEach(value, function(v) {\n\t        body.push(new ReferenceSerializer(self.addTagName(self.nsPropertyTagName(p))).build(v));\n\t      });\n\t    } else {\n\t      // allow serialization via type\n\t      // rather than element name\n\t      var asType = serializeAsType(p),\n\t          asProperty = serializeAsProperty(p);\n\n\t      forEach(value, function(v) {\n\t        var serializer;\n\n\t        if (asType) {\n\t          serializer = new TypeSerializer(self, p);\n\t        } else\n\t        if (asProperty) {\n\t          serializer = new ElementSerializer(self, p);\n\t        } else {\n\t          serializer = new ElementSerializer(self);\n\t        }\n\n\t        body.push(serializer.build(v));\n\t      });\n\t    }\n\t  });\n\t};\n\n\tElementSerializer.prototype.getNamespaces = function(local) {\n\n\t  var namespaces = this.namespaces,\n\t      parent = this.parent,\n\t      parentNamespaces;\n\n\t  if (!namespaces) {\n\t    parentNamespaces = parent && parent.getNamespaces();\n\n\t    if (local || !parentNamespaces) {\n\t      this.namespaces = namespaces = new Namespaces(parentNamespaces);\n\t    } else {\n\t      namespaces = parentNamespaces;\n\t    }\n\t  }\n\n\t  return namespaces;\n\t};\n\n\tElementSerializer.prototype.logNamespace = function(ns, wellknown, local) {\n\t  var namespaces = this.getNamespaces(local);\n\n\t  var nsUri = ns.uri,\n\t      nsPrefix = ns.prefix;\n\n\t  var existing = namespaces.byUri(nsUri);\n\n\t  if (nsPrefix !== 'xml' && (!existing || local)) {\n\t    namespaces.add(ns, wellknown);\n\t  }\n\n\t  namespaces.mapPrefix(nsPrefix, nsUri);\n\n\t  return ns;\n\t};\n\n\tElementSerializer.prototype.logNamespaceUsed = function(ns, local) {\n\t  var element = this.element,\n\t      model = element.$model,\n\t      namespaces = this.getNamespaces(local);\n\n\t  // ns may be\n\t  //\n\t  //   * prefix only\n\t  //   * prefix:uri\n\t  //   * localName only\n\n\t  var prefix = ns.prefix,\n\t      uri = ns.uri,\n\t      newPrefix, idx,\n\t      wellknownUri;\n\n\t  // handle anonymous namespaces (elementForm=unqualified), cf. #23\n\t  if (!prefix && !uri) {\n\t    return { localName: ns.localName };\n\t  }\n\n\t  wellknownUri = DEFAULT_NS_MAP[prefix] || model && (model.getPackage(prefix) || {}).uri;\n\n\t  uri = uri || wellknownUri || namespaces.uriByPrefix(prefix);\n\n\t  if (!uri) {\n\t    throw new Error('no namespace uri given for prefix <' + prefix + '>');\n\t  }\n\n\t  ns = namespaces.byUri(uri);\n\n\t  if (!ns) {\n\t    newPrefix = prefix;\n\t    idx = 1;\n\n\t    // find a prefix that is not mapped yet\n\t    while (namespaces.uriByPrefix(newPrefix)) {\n\t      newPrefix = prefix + '_' + idx++;\n\t    }\n\n\t    ns = this.logNamespace({ prefix: newPrefix, uri: uri }, wellknownUri === uri);\n\t  }\n\n\t  if (prefix) {\n\t    namespaces.mapPrefix(prefix, uri);\n\t  }\n\n\t  return ns;\n\t};\n\n\tElementSerializer.prototype.parseAttributes = function(properties) {\n\t  var self = this,\n\t      element = this.element;\n\n\t  forEach(properties, function(p) {\n\n\t    var value = element.get(p.name);\n\n\t    if (p.isReference) {\n\n\t      if (!p.isMany) {\n\t        value = value.id;\n\t      }\n\t      else {\n\t        var values = [];\n\t        forEach(value, function(v) {\n\t          values.push(v.id);\n\t        });\n\t        // IDREFS is a whitespace-separated list of references.\n\t        value = values.join(' ');\n\t      }\n\n\t    }\n\n\t    self.addAttribute(self.nsAttributeName(p), value);\n\t  });\n\t};\n\n\tElementSerializer.prototype.addTagName = function(nsTagName) {\n\t  var actualNs = this.logNamespaceUsed(nsTagName);\n\n\t  this.getNamespaces().logUsed(actualNs);\n\n\t  return nsName(nsTagName);\n\t};\n\n\tElementSerializer.prototype.addAttribute = function(name, value) {\n\t  var attrs = this.attrs;\n\n\t  if (isString(value)) {\n\t    value = escapeAttr(value);\n\t  }\n\n\t  attrs.push({ name: name, value: value });\n\t};\n\n\tElementSerializer.prototype.serializeAttributes = function(writer) {\n\t  var attrs = this.attrs,\n\t      namespaces = this.namespaces;\n\n\t  if (namespaces) {\n\t    attrs = getNsAttrs(namespaces).concat(attrs);\n\t  }\n\n\t  forEach(attrs, function(a) {\n\t    writer\n\t      .append(' ')\n\t      .append(nsName(a.name)).append('=\"').append(a.value).append('\"');\n\t  });\n\t};\n\n\tElementSerializer.prototype.serializeTo = function(writer) {\n\t  var firstBody = this.body[0],\n\t      indent = firstBody && firstBody.constructor !== BodySerializer;\n\n\t  writer\n\t    .appendIndent()\n\t    .append('<' + this.tagName);\n\n\t  this.serializeAttributes(writer);\n\n\t  writer.append(firstBody ? '>' : ' />');\n\n\t  if (firstBody) {\n\n\t    if (indent) {\n\t      writer\n\t        .appendNewLine()\n\t        .indent();\n\t    }\n\n\t    forEach(this.body, function(b) {\n\t      b.serializeTo(writer);\n\t    });\n\n\t    if (indent) {\n\t      writer\n\t        .unindent()\n\t        .appendIndent();\n\t    }\n\n\t    writer.append('</' + this.tagName + '>');\n\t  }\n\n\t  writer.appendNewLine();\n\t};\n\n\t/**\n\t * A serializer for types that handles serialization of data types\n\t */\n\tfunction TypeSerializer(parent, propertyDescriptor) {\n\t  ElementSerializer.call(this, parent, propertyDescriptor);\n\t}\n\n\tinherits(TypeSerializer, ElementSerializer);\n\n\tTypeSerializer.prototype.parseNsAttributes = function(element) {\n\n\t  // extracted attributes\n\t  var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element);\n\n\t  var descriptor = element.$descriptor;\n\n\t  // only serialize xsi:type if necessary\n\t  if (descriptor.name === this.propertyDescriptor.type) {\n\t    return attributes;\n\t  }\n\n\t  var typeNs = this.typeNs = this.nsTagName(descriptor);\n\t  this.getNamespaces().logUsed(this.typeNs);\n\n\t  // add xsi:type attribute to represent the elements\n\t  // actual type\n\n\t  var pkg = element.$model.getPackage(typeNs.uri),\n\t      typePrefix = (pkg.xml && pkg.xml.typePrefix) || '';\n\n\t  this.addAttribute(\n\t    this.nsAttributeName(XSI_TYPE$1),\n\t    (typeNs.prefix ? typeNs.prefix + ':' : '') + typePrefix + descriptor.ns.localName\n\t  );\n\n\t  return attributes;\n\t};\n\n\tTypeSerializer.prototype.isLocalNs = function(ns) {\n\t  return ns.uri === (this.typeNs || this.ns).uri;\n\t};\n\n\tfunction SavingWriter() {\n\t  this.value = '';\n\n\t  this.write = function(str) {\n\t    this.value += str;\n\t  };\n\t}\n\n\tfunction FormatingWriter(out, format) {\n\n\t  var indent = [''];\n\n\t  this.append = function(str) {\n\t    out.write(str);\n\n\t    return this;\n\t  };\n\n\t  this.appendNewLine = function() {\n\t    if (format) {\n\t      out.write('\\n');\n\t    }\n\n\t    return this;\n\t  };\n\n\t  this.appendIndent = function() {\n\t    if (format) {\n\t      out.write(indent.join('  '));\n\t    }\n\n\t    return this;\n\t  };\n\n\t  this.indent = function() {\n\t    indent.push('');\n\t    return this;\n\t  };\n\n\t  this.unindent = function() {\n\t    indent.pop();\n\t    return this;\n\t  };\n\t}\n\n\t/**\n\t * A writer for meta-model backed document trees\n\t *\n\t * @param {Object} options output options to pass into the writer\n\t */\n\tfunction Writer(options) {\n\n\t  options = assign({ format: false, preamble: true }, options || {});\n\n\t  function toXML(tree, writer) {\n\t    var internalWriter = writer || new SavingWriter();\n\t    var formatingWriter = new FormatingWriter(internalWriter, options.format);\n\n\t    if (options.preamble) {\n\t      formatingWriter.append(XML_PREAMBLE);\n\t    }\n\n\t    new ElementSerializer().build(tree).serializeTo(formatingWriter);\n\n\t    if (!writer) {\n\t      return internalWriter.value;\n\t    }\n\t  }\n\n\t  return {\n\t    toXML: toXML\n\t  };\n\t}\n\n\t/**\n\t * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.\n\t *\n\t * @class BpmnModdle\n\t * @extends Moddle\n\t *\n\t * @param {Object|Array} packages to use for instantiating the model\n\t * @param {Object} [options] additional options to pass over\n\t */\n\tfunction BpmnModdle(packages, options) {\n\t  Moddle.call(this, packages, options);\n\t}\n\n\tBpmnModdle.prototype = Object.create(Moddle.prototype);\n\n\t/**\n\t * The fromXML result.\n\t *\n\t * @typedef {Object} ParseResult\n\t *\n\t * @property {ModdleElement} rootElement\n\t * @property {Array<Object>} references\n\t * @property {Array<Error>} warnings\n\t * @property {Object} elementsById - a mapping containing each ID -> ModdleElement\n\t */\n\n\t/**\n\t * The fromXML error.\n\t *\n\t * @typedef {Error} ParseError\n\t *\n\t * @property {Array<Error>} warnings\n\t */\n\n\t/**\n\t * Instantiates a BPMN model tree from a given xml string.\n\t *\n\t * @param {String}   xmlStr\n\t * @param {String}   [typeName='bpmn:Definitions'] name of the root element\n\t * @param {Object}   [options]  options to pass to the underlying reader\n\t *\n\t * @returns {Promise<ParseResult, ParseError>}\n\t */\n\tBpmnModdle.prototype.fromXML = function(xmlStr, typeName, options) {\n\n\t  if (!isString(typeName)) {\n\t    options = typeName;\n\t    typeName = 'bpmn:Definitions';\n\t  }\n\n\t  var reader = new Reader(assign({ model: this, lax: true }, options));\n\t  var rootHandler = reader.handler(typeName);\n\n\t  return reader.fromXML(xmlStr, rootHandler);\n\t};\n\n\n\t/**\n\t * The toXML result.\n\t *\n\t * @typedef {Object} SerializationResult\n\t *\n\t * @property {String} xml\n\t */\n\n\t/**\n\t * Serializes a BPMN 2.0 object tree to XML.\n\t *\n\t * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`\n\t * @param {Object}   [options]  to pass to the underlying writer\n\t *\n\t * @returns {Promise<SerializationResult, Error>}\n\t */\n\tBpmnModdle.prototype.toXML = function(element, options) {\n\n\t  var writer = new Writer(options);\n\n\t  return new Promise(function(resolve, reject) {\n\t    try {\n\t      var result = writer.toXML(element);\n\n\t      return resolve({\n\t        xml: result\n\t      });\n\t    } catch (err) {\n\t      return reject(err);\n\t    }\n\t  });\n\t};\n\n\tvar name = \"BPMN20\";\n\tvar uri = \"http://www.omg.org/spec/BPMN/20100524/MODEL\";\n\tvar prefix$1 = \"bpmn\";\n\tvar associations = [\n\t];\n\tvar types$1 = [\n\t\t{\n\t\t\tname: \"Interface\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operations\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"implementationRef\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Operation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inMessageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outMessageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"errorRef\",\n\t\t\t\t\ttype: \"Error\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"implementationRef\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EndPoint\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Auditing\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"CallableElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"resources\",\n\t\t\t\t\ttype: \"ResourceRole\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Monitoring\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Performer\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ResourceRole\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Process\",\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowElementsContainer\",\n\t\t\t\t\"CallableElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"processType\",\n\t\t\t\t\ttype: \"ProcessType\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isClosed\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"auditing\",\n\t\t\t\t\ttype: \"Auditing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"monitoring\",\n\t\t\t\t\ttype: \"Monitoring\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"properties\",\n\t\t\t\t\ttype: \"Property\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"laneSets\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\treplaces: \"FlowElementsContainer#laneSets\",\n\t\t\t\t\ttype: \"LaneSet\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"flowElements\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\treplaces: \"FlowElementsContainer#flowElements\",\n\t\t\t\t\ttype: \"FlowElement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"artifacts\",\n\t\t\t\t\ttype: \"Artifact\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resources\",\n\t\t\t\t\ttype: \"ResourceRole\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationSubscriptions\",\n\t\t\t\t\ttype: \"CorrelationSubscription\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"supports\",\n\t\t\t\t\ttype: \"Process\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"definitionalCollaborationRef\",\n\t\t\t\t\ttype: \"Collaboration\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isExecutable\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"LaneSet\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"lanes\",\n\t\t\t\t\ttype: \"Lane\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Lane\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"partitionElementRef\",\n\t\t\t\t\ttype: \"BaseElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"partitionElement\",\n\t\t\t\t\ttype: \"BaseElement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"flowNodeRef\",\n\t\t\t\t\ttype: \"FlowNode\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"childLaneSet\",\n\t\t\t\t\ttype: \"LaneSet\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalManualTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"GlobalTask\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ManualTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"UserTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"renderings\",\n\t\t\t\t\ttype: \"Rendering\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Rendering\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"HumanPerformer\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Performer\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"PotentialOwner\",\n\t\t\tsuperClass: [\n\t\t\t\t\"HumanPerformer\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalUserTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"GlobalTask\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"renderings\",\n\t\t\t\t\ttype: \"Rendering\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Gateway\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"gatewayDirection\",\n\t\t\t\t\ttype: \"GatewayDirection\",\n\t\t\t\t\t\"default\": \"Unspecified\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EventBasedGateway\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Gateway\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"instantiate\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"eventGatewayType\",\n\t\t\t\t\ttype: \"EventBasedGatewayType\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\t\"default\": \"Exclusive\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ComplexGateway\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Gateway\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"activationCondition\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"default\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ExclusiveGateway\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Gateway\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"default\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"InclusiveGateway\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Gateway\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"default\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ParallelGateway\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Gateway\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"RootElement\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Relationship\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"type\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"direction\",\n\t\t\t\t\ttype: \"RelationshipDirection\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"source\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"Element\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"target\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"Element\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BaseElement\",\n\t\t\tisAbstract: true,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"id\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tisId: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"documentation\",\n\t\t\t\t\ttype: \"Documentation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensionDefinitions\",\n\t\t\t\t\ttype: \"ExtensionDefinition\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensionElements\",\n\t\t\t\t\ttype: \"ExtensionElements\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Extension\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"mustUnderstand\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"definition\",\n\t\t\t\t\ttype: \"ExtensionDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ExtensionDefinition\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensionAttributeDefinitions\",\n\t\t\t\t\ttype: \"ExtensionAttributeDefinition\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ExtensionAttributeDefinition\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"type\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isReference\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensionDefinition\",\n\t\t\t\t\ttype: \"ExtensionDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ExtensionElements\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"valueRef\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"Element\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"values\",\n\t\t\t\t\ttype: \"Element\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensionAttributeDefinition\",\n\t\t\t\t\ttype: \"ExtensionAttributeDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Documentation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"text\",\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tisBody: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"textFormat\",\n\t\t\t\t\t\"default\": \"text/plain\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Event\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowNode\",\n\t\t\t\t\"InteractionNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"properties\",\n\t\t\t\t\ttype: \"Property\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"IntermediateCatchEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"CatchEvent\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"IntermediateThrowEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ThrowEvent\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EndEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ThrowEvent\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"StartEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"CatchEvent\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"isInterrupting\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ThrowEvent\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Event\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataInputs\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataInputAssociations\",\n\t\t\t\t\ttype: \"DataInputAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSet\",\n\t\t\t\t\ttype: \"InputSet\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"eventDefinitions\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"eventDefinitionRef\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CatchEvent\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Event\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"parallelMultiple\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\t\"default\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataOutputs\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataOutputAssociations\",\n\t\t\t\t\ttype: \"DataOutputAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSet\",\n\t\t\t\t\ttype: \"OutputSet\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"eventDefinitions\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"eventDefinitionRef\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BoundaryEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"CatchEvent\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"cancelActivity\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"attachedToRef\",\n\t\t\t\t\ttype: \"Activity\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EventDefinition\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CancelEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ErrorEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"errorRef\",\n\t\t\t\t\ttype: \"Error\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"TerminateEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EscalationEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"escalationRef\",\n\t\t\t\t\ttype: \"Escalation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Escalation\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"structureRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"escalationCode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CompensateEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"waitForCompletion\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\t\"default\": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"activityRef\",\n\t\t\t\t\ttype: \"Activity\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"TimerEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"timeDate\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"timeCycle\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"timeDuration\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"LinkEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"target\",\n\t\t\t\t\ttype: \"LinkEventDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"source\",\n\t\t\t\t\ttype: \"LinkEventDefinition\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MessageEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"messageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operationRef\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ConditionalEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"condition\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SignalEventDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"EventDefinition\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"signalRef\",\n\t\t\t\t\ttype: \"Signal\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Signal\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"structureRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ImplicitThrowEvent\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ThrowEvent\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataState\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ItemAwareElement\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"itemSubjectRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataState\",\n\t\t\t\t\ttype: \"DataState\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceRef\",\n\t\t\t\t\ttype: \"ItemAwareElement\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetRef\",\n\t\t\t\t\ttype: \"ItemAwareElement\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"transformation\",\n\t\t\t\t\ttype: \"FormalExpression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"assignment\",\n\t\t\t\t\ttype: \"Assignment\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataInput\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ItemAwareElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isCollection\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSetRef\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSetWithOptional\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSetWithWhileExecuting\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataOutput\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ItemAwareElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isCollection\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSetRef\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSetWithOptional\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSetWithWhileExecuting\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"InputSet\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataInputRefs\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"optionalInputRefs\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"whileExecutingInputRefs\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSetRefs\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"OutputSet\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataOutputRefs\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSetRefs\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"optionalOutputRefs\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"whileExecutingOutputRefs\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Property\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ItemAwareElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataInputAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"DataAssociation\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataOutputAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"DataAssociation\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"InputOutputSpecification\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataInputs\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataOutputs\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputSets\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputSets\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataObject\",\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowElement\",\n\t\t\t\t\"ItemAwareElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"isCollection\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"InputOutputBinding\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"inputDataRef\",\n\t\t\t\t\ttype: \"InputSet\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputDataRef\",\n\t\t\t\t\ttype: \"OutputSet\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operationRef\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Assignment\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"from\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"to\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataStore\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\",\n\t\t\t\t\"ItemAwareElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"capacity\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Integer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isUnlimited\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataStoreReference\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ItemAwareElement\",\n\t\t\t\t\"FlowElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataStoreRef\",\n\t\t\t\t\ttype: \"DataStore\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"DataObjectReference\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ItemAwareElement\",\n\t\t\t\t\"FlowElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataObjectRef\",\n\t\t\t\t\ttype: \"DataObject\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ConversationLink\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceRef\",\n\t\t\t\t\ttype: \"InteractionNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetRef\",\n\t\t\t\t\ttype: \"InteractionNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ConversationAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"innerConversationNodeRef\",\n\t\t\t\t\ttype: \"ConversationNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outerConversationNodeRef\",\n\t\t\t\t\ttype: \"ConversationNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CallConversation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ConversationNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"calledCollaborationRef\",\n\t\t\t\t\ttype: \"Collaboration\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantAssociations\",\n\t\t\t\t\ttype: \"ParticipantAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Conversation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ConversationNode\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SubConversation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ConversationNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"conversationNodes\",\n\t\t\t\t\ttype: \"ConversationNode\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ConversationNode\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"InteractionNode\",\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageFlowRefs\",\n\t\t\t\t\ttype: \"MessageFlow\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationKeys\",\n\t\t\t\t\ttype: \"CorrelationKey\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalConversation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Collaboration\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"PartnerEntity\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"PartnerRole\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CorrelationProperty\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationPropertyRetrievalExpression\",\n\t\t\t\t\ttype: \"CorrelationPropertyRetrievalExpression\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"type\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Error\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"structureRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"errorCode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CorrelationKey\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationPropertyRef\",\n\t\t\t\t\ttype: \"CorrelationProperty\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Expression\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tisAbstract: false,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"body\",\n\t\t\t\t\tisBody: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"FormalExpression\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Expression\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"language\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"evaluatesToTypeRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Message\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"itemRef\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ItemDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"itemKind\",\n\t\t\t\t\ttype: \"ItemKind\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"structureRef\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isCollection\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"import\",\n\t\t\t\t\ttype: \"Import\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"FlowElement\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"auditing\",\n\t\t\t\t\ttype: \"Auditing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"monitoring\",\n\t\t\t\t\ttype: \"Monitoring\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"categoryValueRef\",\n\t\t\t\t\ttype: \"CategoryValue\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SequenceFlow\",\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"isImmediate\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"conditionExpression\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceRef\",\n\t\t\t\t\ttype: \"FlowNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetRef\",\n\t\t\t\t\ttype: \"FlowNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"FlowElementsContainer\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"laneSets\",\n\t\t\t\t\ttype: \"LaneSet\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"flowElements\",\n\t\t\t\t\ttype: \"FlowElement\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CallableElement\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ioSpecification\",\n\t\t\t\t\ttype: \"InputOutputSpecification\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"supportedInterfaceRef\",\n\t\t\t\t\ttype: \"Interface\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ioBinding\",\n\t\t\t\t\ttype: \"InputOutputBinding\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"FlowNode\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"incoming\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outgoing\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"lanes\",\n\t\t\t\t\ttype: \"Lane\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CorrelationPropertyRetrievalExpression\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"messagePath\",\n\t\t\t\t\ttype: \"FormalExpression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CorrelationPropertyBinding\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"dataPath\",\n\t\t\t\t\ttype: \"FormalExpression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationPropertyRef\",\n\t\t\t\t\ttype: \"CorrelationProperty\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Resource\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resourceParameters\",\n\t\t\t\t\ttype: \"ResourceParameter\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ResourceParameter\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isRequired\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"type\",\n\t\t\t\t\ttype: \"ItemDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CorrelationSubscription\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationKeyRef\",\n\t\t\t\t\ttype: \"CorrelationKey\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationPropertyBinding\",\n\t\t\t\t\ttype: \"CorrelationPropertyBinding\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MessageFlow\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceRef\",\n\t\t\t\t\ttype: \"InteractionNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetRef\",\n\t\t\t\t\ttype: \"InteractionNode\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MessageFlowAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"innerMessageFlowRef\",\n\t\t\t\t\ttype: \"MessageFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outerMessageFlowRef\",\n\t\t\t\t\ttype: \"MessageFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"InteractionNode\",\n\t\t\tisAbstract: true,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"incomingConversationLinks\",\n\t\t\t\t\ttype: \"ConversationLink\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outgoingConversationLinks\",\n\t\t\t\t\ttype: \"ConversationLink\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Participant\",\n\t\t\tsuperClass: [\n\t\t\t\t\"InteractionNode\",\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"interfaceRef\",\n\t\t\t\t\ttype: \"Interface\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantMultiplicity\",\n\t\t\t\t\ttype: \"ParticipantMultiplicity\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"endPointRefs\",\n\t\t\t\t\ttype: \"EndPoint\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"processRef\",\n\t\t\t\t\ttype: \"Process\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ParticipantAssociation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"innerParticipantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outerParticipantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ParticipantMultiplicity\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"minimum\",\n\t\t\t\t\t\"default\": 0,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Integer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"maximum\",\n\t\t\t\t\t\"default\": 1,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Integer\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Collaboration\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isClosed\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participants\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageFlows\",\n\t\t\t\t\ttype: \"MessageFlow\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"artifacts\",\n\t\t\t\t\ttype: \"Artifact\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"conversations\",\n\t\t\t\t\ttype: \"ConversationNode\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"conversationAssociations\",\n\t\t\t\t\ttype: \"ConversationAssociation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantAssociations\",\n\t\t\t\t\ttype: \"ParticipantAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageFlowAssociations\",\n\t\t\t\t\ttype: \"MessageFlowAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationKeys\",\n\t\t\t\t\ttype: \"CorrelationKey\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"choreographyRef\",\n\t\t\t\t\ttype: \"Choreography\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"conversationLinks\",\n\t\t\t\t\ttype: \"ConversationLink\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ChoreographyActivity\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"participantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"initiatingParticipantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"correlationKeys\",\n\t\t\t\t\ttype: \"CorrelationKey\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopType\",\n\t\t\t\t\ttype: \"ChoreographyLoopType\",\n\t\t\t\t\t\"default\": \"None\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CallChoreography\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ChoreographyActivity\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"calledChoreographyRef\",\n\t\t\t\t\ttype: \"Choreography\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantAssociations\",\n\t\t\t\t\ttype: \"ParticipantAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SubChoreography\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ChoreographyActivity\",\n\t\t\t\t\"FlowElementsContainer\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"artifacts\",\n\t\t\t\t\ttype: \"Artifact\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ChoreographyTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"ChoreographyActivity\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"messageFlowRef\",\n\t\t\t\t\ttype: \"MessageFlow\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Choreography\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Collaboration\",\n\t\t\t\t\"FlowElementsContainer\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalChoreographyTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Choreography\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"initiatingParticipantRef\",\n\t\t\t\t\ttype: \"Participant\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"TextAnnotation\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Artifact\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"text\",\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"textFormat\",\n\t\t\t\t\t\"default\": \"text/plain\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Group\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Artifact\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"categoryValueRef\",\n\t\t\t\t\ttype: \"CategoryValue\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Association\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Artifact\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"associationDirection\",\n\t\t\t\t\ttype: \"AssociationDirection\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceRef\",\n\t\t\t\t\ttype: \"BaseElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetRef\",\n\t\t\t\t\ttype: \"BaseElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Category\",\n\t\t\tsuperClass: [\n\t\t\t\t\"RootElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"categoryValue\",\n\t\t\t\t\ttype: \"CategoryValue\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Artifact\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CategoryValue\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"categorizedFlowElements\",\n\t\t\t\t\ttype: \"FlowElement\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"value\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Activity\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"FlowNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"isForCompensation\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"default\",\n\t\t\t\t\ttype: \"SequenceFlow\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ioSpecification\",\n\t\t\t\t\ttype: \"InputOutputSpecification\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"boundaryEventRefs\",\n\t\t\t\t\ttype: \"BoundaryEvent\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"properties\",\n\t\t\t\t\ttype: \"Property\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataInputAssociations\",\n\t\t\t\t\ttype: \"DataInputAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"dataOutputAssociations\",\n\t\t\t\t\ttype: \"DataOutputAssociation\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"startQuantity\",\n\t\t\t\t\t\"default\": 1,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Integer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resources\",\n\t\t\t\t\ttype: \"ResourceRole\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"completionQuantity\",\n\t\t\t\t\t\"default\": 1,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Integer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopCharacteristics\",\n\t\t\t\t\ttype: \"LoopCharacteristics\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ServiceTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operationRef\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SubProcess\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Activity\",\n\t\t\t\t\"FlowElementsContainer\",\n\t\t\t\t\"InteractionNode\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"triggeredByEvent\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"artifacts\",\n\t\t\t\t\ttype: \"Artifact\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"LoopCharacteristics\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MultiInstanceLoopCharacteristics\",\n\t\t\tsuperClass: [\n\t\t\t\t\"LoopCharacteristics\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"isSequential\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"behavior\",\n\t\t\t\t\ttype: \"MultiInstanceBehavior\",\n\t\t\t\t\t\"default\": \"All\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopCardinality\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopDataInputRef\",\n\t\t\t\t\ttype: \"ItemAwareElement\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopDataOutputRef\",\n\t\t\t\t\ttype: \"ItemAwareElement\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"inputDataItem\",\n\t\t\t\t\ttype: \"DataInput\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"outputDataItem\",\n\t\t\t\t\ttype: \"DataOutput\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"property\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"complexBehaviorDefinition\",\n\t\t\t\t\ttype: \"ComplexBehaviorDefinition\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"completionCondition\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"oneBehaviorEventRef\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"noneBehaviorEventRef\",\n\t\t\t\t\ttype: \"EventDefinition\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"StandardLoopCharacteristics\",\n\t\t\tsuperClass: [\n\t\t\t\t\"LoopCharacteristics\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"testBefore\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopCondition\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"loopMaximum\",\n\t\t\t\t\ttype: \"Integer\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"CallActivity\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Activity\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"calledElement\",\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Task\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Activity\",\n\t\t\t\t\"InteractionNode\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"SendTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operationRef\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ReceiveTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"instantiate\",\n\t\t\t\t\t\"default\": false,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"operationRef\",\n\t\t\t\t\ttype: \"Operation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageRef\",\n\t\t\t\t\ttype: \"Message\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ScriptTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"scriptFormat\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"script\",\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BusinessRuleTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"Task\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"AdHocSubProcess\",\n\t\t\tsuperClass: [\n\t\t\t\t\"SubProcess\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"completionCondition\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ordering\",\n\t\t\t\t\ttype: \"AdHocOrdering\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"cancelRemainingInstances\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Transaction\",\n\t\t\tsuperClass: [\n\t\t\t\t\"SubProcess\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"protocol\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"method\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalScriptTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"GlobalTask\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"scriptLanguage\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"script\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GlobalBusinessRuleTask\",\n\t\t\tsuperClass: [\n\t\t\t\t\"GlobalTask\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"implementation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ComplexBehaviorDefinition\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"condition\",\n\t\t\t\t\ttype: \"FormalExpression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"event\",\n\t\t\t\t\ttype: \"ImplicitThrowEvent\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ResourceRole\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"resourceRef\",\n\t\t\t\t\ttype: \"Resource\",\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resourceParameterBindings\",\n\t\t\t\t\ttype: \"ResourceParameterBinding\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resourceAssignmentExpression\",\n\t\t\t\t\ttype: \"ResourceAssignmentExpression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ResourceParameterBinding\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"expression\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"parameterRef\",\n\t\t\t\t\ttype: \"ResourceParameter\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ResourceAssignmentExpression\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"expression\",\n\t\t\t\t\ttype: \"Expression\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Import\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"importType\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"location\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"namespace\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Definitions\",\n\t\t\tsuperClass: [\n\t\t\t\t\"BaseElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetNamespace\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"expressionLanguage\",\n\t\t\t\t\t\"default\": \"http://www.w3.org/1999/XPath\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"typeLanguage\",\n\t\t\t\t\t\"default\": \"http://www.w3.org/2001/XMLSchema\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"imports\",\n\t\t\t\t\ttype: \"Import\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extensions\",\n\t\t\t\t\ttype: \"Extension\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"rootElements\",\n\t\t\t\t\ttype: \"RootElement\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"diagrams\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\ttype: \"bpmndi:BPMNDiagram\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"exporter\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"relationships\",\n\t\t\t\t\ttype: \"Relationship\",\n\t\t\t\t\tisMany: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"exporterVersion\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar enumerations = [\n\t\t{\n\t\t\tname: \"ProcessType\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"None\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Public\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Private\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"GatewayDirection\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Unspecified\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Converging\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Diverging\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Mixed\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"EventBasedGatewayType\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Parallel\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Exclusive\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"RelationshipDirection\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"None\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Forward\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Backward\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Both\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ItemKind\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Physical\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Information\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ChoreographyLoopType\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"None\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Standard\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"MultiInstanceSequential\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"MultiInstanceParallel\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"AssociationDirection\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"None\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"One\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Both\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MultiInstanceBehavior\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"None\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"One\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"All\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Complex\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"AdHocOrdering\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"Parallel\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"Sequential\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar xml = {\n\t\ttagAlias: \"lowerCase\",\n\t\ttypePrefix: \"t\"\n\t};\n\tvar BpmnPackage = {\n\t\tname: name,\n\t\turi: uri,\n\t\tprefix: prefix$1,\n\t\tassociations: associations,\n\t\ttypes: types$1,\n\t\tenumerations: enumerations,\n\t\txml: xml\n\t};\n\n\tvar name$1 = \"BPMNDI\";\n\tvar uri$1 = \"http://www.omg.org/spec/BPMN/20100524/DI\";\n\tvar prefix$1$1 = \"bpmndi\";\n\tvar types$1$1 = [\n\t\t{\n\t\t\tname: \"BPMNDiagram\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"plane\",\n\t\t\t\t\ttype: \"BPMNPlane\",\n\t\t\t\t\tredefines: \"di:Diagram#rootElement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"labelStyle\",\n\t\t\t\t\ttype: \"BPMNLabelStyle\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:Diagram\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BPMNPlane\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"bpmnElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"bpmn:BaseElement\",\n\t\t\t\t\tredefines: \"di:DiagramElement#modelElement\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:Plane\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BPMNShape\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"bpmnElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"bpmn:BaseElement\",\n\t\t\t\t\tredefines: \"di:DiagramElement#modelElement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isHorizontal\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isExpanded\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isMarkerVisible\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"label\",\n\t\t\t\t\ttype: \"BPMNLabel\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isMessageVisible\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Boolean\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"participantBandKind\",\n\t\t\t\t\ttype: \"ParticipantBandKind\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"choreographyActivityShape\",\n\t\t\t\t\ttype: \"BPMNShape\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:LabeledShape\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BPMNEdge\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"label\",\n\t\t\t\t\ttype: \"BPMNLabel\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"bpmnElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"bpmn:BaseElement\",\n\t\t\t\t\tredefines: \"di:DiagramElement#modelElement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sourceElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"di:DiagramElement\",\n\t\t\t\t\tredefines: \"di:Edge#source\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"targetElement\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"di:DiagramElement\",\n\t\t\t\t\tredefines: \"di:Edge#target\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"messageVisibleKind\",\n\t\t\t\t\ttype: \"MessageVisibleKind\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\t\"default\": \"initiating\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:LabeledEdge\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BPMNLabel\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"labelStyle\",\n\t\t\t\t\ttype: \"BPMNLabelStyle\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\tredefines: \"di:DiagramElement#style\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:Label\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"BPMNLabelStyle\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"font\",\n\t\t\t\t\ttype: \"dc:Font\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tsuperClass: [\n\t\t\t\t\"di:Style\"\n\t\t\t]\n\t\t}\n\t];\n\tvar enumerations$1 = [\n\t\t{\n\t\t\tname: \"ParticipantBandKind\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"top_initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"middle_initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"bottom_initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"top_non_initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"middle_non_initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"bottom_non_initiating\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"MessageVisibleKind\",\n\t\t\tliteralValues: [\n\t\t\t\t{\n\t\t\t\t\tname: \"initiating\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"non_initiating\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar associations$1 = [\n\t];\n\tvar BpmnDiPackage = {\n\t\tname: name$1,\n\t\turi: uri$1,\n\t\tprefix: prefix$1$1,\n\t\ttypes: types$1$1,\n\t\tenumerations: enumerations$1,\n\t\tassociations: associations$1\n\t};\n\n\tvar name$2 = \"DC\";\n\tvar uri$2 = \"http://www.omg.org/spec/DD/20100524/DC\";\n\tvar prefix$2 = \"dc\";\n\tvar types$2 = [\n\t\t{\n\t\t\tname: \"Boolean\"\n\t\t},\n\t\t{\n\t\t\tname: \"Integer\"\n\t\t},\n\t\t{\n\t\t\tname: \"Real\"\n\t\t},\n\t\t{\n\t\t\tname: \"String\"\n\t\t},\n\t\t{\n\t\t\tname: \"Font\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"size\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isBold\",\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isItalic\",\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isUnderline\",\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"isStrikeThrough\",\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Point\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"x\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\t\"default\": \"0\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"y\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\t\"default\": \"0\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Bounds\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"x\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\t\"default\": \"0\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"y\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\t\"default\": \"0\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"width\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"height\",\n\t\t\t\t\ttype: \"Real\",\n\t\t\t\t\tisAttr: true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar associations$2 = [\n\t];\n\tvar DcPackage = {\n\t\tname: name$2,\n\t\turi: uri$2,\n\t\tprefix: prefix$2,\n\t\ttypes: types$2,\n\t\tassociations: associations$2\n\t};\n\n\tvar name$3 = \"DI\";\n\tvar uri$3 = \"http://www.omg.org/spec/DD/20100524/DI\";\n\tvar prefix$3 = \"di\";\n\tvar types$3 = [\n\t\t{\n\t\t\tname: \"DiagramElement\",\n\t\t\tisAbstract: true,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"id\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisId: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"extension\",\n\t\t\t\t\ttype: \"Extension\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"owningDiagram\",\n\t\t\t\t\ttype: \"Diagram\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"owningElement\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"modelElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true,\n\t\t\t\t\ttype: \"Element\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"style\",\n\t\t\t\t\ttype: \"Style\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ownedElement\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Node\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"DiagramElement\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Edge\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"DiagramElement\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"source\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"target\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true,\n\t\t\t\t\tisReference: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"waypoint\",\n\t\t\t\t\tisUnique: false,\n\t\t\t\t\tisMany: true,\n\t\t\t\t\ttype: \"dc:Point\",\n\t\t\t\t\txml: {\n\t\t\t\t\t\tserialize: \"xsi:type\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Diagram\",\n\t\t\tisAbstract: true,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"id\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisId: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"rootElement\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisVirtual: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"name\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"documentation\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resolution\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"Real\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ownedStyle\",\n\t\t\t\t\ttype: \"Style\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Shape\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Node\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"bounds\",\n\t\t\t\t\ttype: \"dc:Bounds\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Plane\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Node\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"planeElement\",\n\t\t\t\t\ttype: \"DiagramElement\",\n\t\t\t\t\tsubsettedProperty: \"DiagramElement-ownedElement\",\n\t\t\t\t\tisMany: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"LabeledEdge\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Edge\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"ownedLabel\",\n\t\t\t\t\ttype: \"Label\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tsubsettedProperty: \"DiagramElement-ownedElement\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"LabeledShape\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Shape\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"ownedLabel\",\n\t\t\t\t\ttype: \"Label\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tsubsettedProperty: \"DiagramElement-ownedElement\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\tisVirtual: true\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Label\",\n\t\t\tisAbstract: true,\n\t\t\tsuperClass: [\n\t\t\t\t\"Node\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"bounds\",\n\t\t\t\t\ttype: \"dc:Bounds\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Style\",\n\t\t\tisAbstract: true,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"id\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\tisId: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"Extension\",\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"values\",\n\t\t\t\t\tisMany: true,\n\t\t\t\t\ttype: \"Element\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar associations$3 = [\n\t];\n\tvar xml$1 = {\n\t\ttagAlias: \"lowerCase\"\n\t};\n\tvar DiPackage = {\n\t\tname: name$3,\n\t\turi: uri$3,\n\t\tprefix: prefix$3,\n\t\ttypes: types$3,\n\t\tassociations: associations$3,\n\t\txml: xml$1\n\t};\n\n\tvar name$4 = \"bpmn.io colors for BPMN\";\n\tvar uri$4 = \"http://bpmn.io/schema/bpmn/biocolor/1.0\";\n\tvar prefix$4 = \"bioc\";\n\tvar types$4 = [\n\t\t{\n\t\t\tname: \"ColoredShape\",\n\t\t\t\"extends\": [\n\t\t\t\t\"bpmndi:BPMNShape\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"stroke\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"fill\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tname: \"ColoredEdge\",\n\t\t\t\"extends\": [\n\t\t\t\t\"bpmndi:BPMNEdge\"\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tname: \"stroke\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"fill\",\n\t\t\t\t\tisAttr: true,\n\t\t\t\t\ttype: \"String\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\tvar enumerations$2 = [\n\t];\n\tvar associations$4 = [\n\t];\n\tvar BiocPackage = {\n\t\tname: name$4,\n\t\turi: uri$4,\n\t\tprefix: prefix$4,\n\t\ttypes: types$4,\n\t\tenumerations: enumerations$2,\n\t\tassociations: associations$4\n\t};\n\n\tvar packages = {\n\t  bpmn: BpmnPackage,\n\t  bpmndi: BpmnDiPackage,\n\t  dc: DcPackage,\n\t  di: DiPackage,\n\t  bioc: BiocPackage\n\t};\n\n\tfunction simple(additionalPackages, options) {\n\t  var pks = assign({}, packages, additionalPackages);\n\n\t  return new BpmnModdle(pks, options);\n\t}\n\n\tfunction elementToString(e) {\n\t  if (!e) {\n\t    return '<null>';\n\t  }\n\n\t  return '<' + e.$type + (e.id ? ' id=\"' + e.id : '') + '\" />';\n\t}\n\n\tvar diRefs = new objectRefs(\n\t  { name: 'bpmnElement', enumerable: true },\n\t  { name: 'di', configurable: true }\n\t);\n\n\t/**\n\t * Returns true if an element has the given meta-model type\n\t *\n\t * @param  {ModdleElement}  element\n\t * @param  {string}         type\n\t *\n\t * @return {boolean}\n\t */\n\tfunction is(element, type) {\n\t  return element.$instanceOf(type);\n\t}\n\n\n\t/**\n\t * Find a suitable display candidate for definitions where the DI does not\n\t * correctly specify one.\n\t */\n\tfunction findDisplayCandidate(definitions) {\n\t  return find(definitions.rootElements, function(e) {\n\t    return is(e, 'bpmn:Process') || is(e, 'bpmn:Collaboration');\n\t  });\n\t}\n\n\n\tfunction BpmnTreeWalker(handler, translate) {\n\n\t  // list of containers already walked\n\t  var handledElements = {};\n\n\t  // list of elements to handle deferred to ensure\n\t  // prerequisites are drawn\n\t  var deferred = [];\n\n\t  // Helpers //////////////////////\n\n\t  function contextual(fn, ctx) {\n\t    return function(e) {\n\t      fn(e, ctx);\n\t    };\n\t  }\n\n\t  function handled(element) {\n\t    handledElements[element.id] = element;\n\t  }\n\n\t  function isHandled(element) {\n\t    return handledElements[element.id];\n\t  }\n\n\t  function visit(element, ctx) {\n\n\t    var gfx = element.gfx;\n\n\t    // avoid multiple rendering of elements\n\t    if (gfx) {\n\t      throw new Error(\n\t        translate('already rendered {element}', { element: elementToString(element) })\n\t      );\n\t    }\n\n\t    // call handler\n\t    return handler.element(element, ctx);\n\t  }\n\n\t  function visitRoot(element, diagram) {\n\t    return handler.root(element, diagram);\n\t  }\n\n\t  function visitIfDi(element, ctx) {\n\n\t    try {\n\t      var gfx = element.di && visit(element, ctx);\n\n\t      handled(element);\n\n\t      return gfx;\n\t    } catch (e) {\n\t      logError(e.message, { element: element, error: e });\n\n\t      console.error(translate('failed to import {element}', { element: elementToString(element) }));\n\t      console.error(e);\n\t    }\n\t  }\n\n\t  function logError(message, context) {\n\t    handler.error(message, context);\n\t  }\n\n\t  // DI handling //////////////////////\n\n\t  function registerDi(di) {\n\t    var bpmnElement = di.bpmnElement;\n\n\t    if (bpmnElement) {\n\t      if (bpmnElement.di) {\n\t        logError(\n\t          translate('multiple DI elements defined for {element}', {\n\t            element: elementToString(bpmnElement)\n\t          }),\n\t          { element: bpmnElement }\n\t        );\n\t      } else {\n\t        diRefs.bind(bpmnElement, 'di');\n\t        bpmnElement.di = di;\n\t      }\n\t    } else {\n\t      logError(\n\t        translate('no bpmnElement referenced in {element}', {\n\t          element: elementToString(di)\n\t        }),\n\t        { element: di }\n\t      );\n\t    }\n\t  }\n\n\t  function handleDiagram(diagram) {\n\t    handlePlane(diagram.plane);\n\t  }\n\n\t  function handlePlane(plane) {\n\t    registerDi(plane);\n\n\t    forEach(plane.planeElement, handlePlaneElement);\n\t  }\n\n\t  function handlePlaneElement(planeElement) {\n\t    registerDi(planeElement);\n\t  }\n\n\n\t  // Semantic handling //////////////////////\n\n\t  /**\n\t   * Handle definitions and return the rendered diagram (if any)\n\t   *\n\t   * @param {ModdleElement} definitions to walk and import\n\t   * @param {ModdleElement} [diagram] specific diagram to import and display\n\t   *\n\t   * @throws {Error} if no diagram to display could be found\n\t   */\n\t  function handleDefinitions(definitions, diagram) {\n\n\t    // make sure we walk the correct bpmnElement\n\n\t    var diagrams = definitions.diagrams;\n\n\t    if (diagram && diagrams.indexOf(diagram) === -1) {\n\t      throw new Error(translate('diagram not part of bpmn:Definitions'));\n\t    }\n\n\t    if (!diagram && diagrams && diagrams.length) {\n\t      diagram = diagrams[0];\n\t    }\n\n\t    // no diagram -> nothing to import\n\t    if (!diagram) {\n\t      throw new Error(translate('no diagram to display'));\n\t    }\n\n\t    // load DI from selected diagram only\n\t    handleDiagram(diagram);\n\n\n\t    var plane = diagram.plane;\n\n\t    if (!plane) {\n\t      throw new Error(translate(\n\t        'no plane for {element}',\n\t        { element: elementToString(diagram) }\n\t      ));\n\t    }\n\n\t    var rootElement = plane.bpmnElement;\n\n\t    // ensure we default to a suitable display candidate (process or collaboration),\n\t    // even if non is specified in DI\n\t    if (!rootElement) {\n\t      rootElement = findDisplayCandidate(definitions);\n\n\t      if (!rootElement) {\n\t        throw new Error(translate('no process or collaboration to display'));\n\t      } else {\n\n\t        logError(\n\t          translate('correcting missing bpmnElement on {plane} to {rootElement}', {\n\t            plane: elementToString(plane),\n\t            rootElement: elementToString(rootElement)\n\t          })\n\t        );\n\n\t        // correct DI on the fly\n\t        plane.bpmnElement = rootElement;\n\t        registerDi(plane);\n\t      }\n\t    }\n\n\n\t    var ctx = visitRoot(rootElement, plane);\n\n\t    if (is(rootElement, 'bpmn:Process')) {\n\t      handleProcess(rootElement, ctx);\n\t    } else if (is(rootElement, 'bpmn:Collaboration')) {\n\t      handleCollaboration(rootElement);\n\n\t      // force drawing of everything not yet drawn that is part of the target DI\n\t      handleUnhandledProcesses(definitions.rootElements, ctx);\n\t    } else {\n\t      throw new Error(\n\t        translate('unsupported bpmnElement for {plane}: {rootElement}', {\n\t          plane: elementToString(plane),\n\t          rootElement: elementToString(rootElement)\n\t        })\n\t      );\n\t    }\n\n\t    // handle all deferred elements\n\t    handleDeferred();\n\t  }\n\n\t  function handleDeferred() {\n\n\t    var fn;\n\n\t    // drain deferred until empty\n\t    while (deferred.length) {\n\t      fn = deferred.shift();\n\n\t      fn();\n\t    }\n\t  }\n\n\t  function handleProcess(process, context) {\n\t    handleFlowElementsContainer(process, context);\n\t    handleIoSpecification(process.ioSpecification, context);\n\n\t    handleArtifacts(process.artifacts, context);\n\n\t    // log process handled\n\t    handled(process);\n\t  }\n\n\t  function handleUnhandledProcesses(rootElements, ctx) {\n\n\t    // walk through all processes that have not yet been drawn and draw them\n\t    // if they contain lanes with DI information.\n\t    // we do this to pass the free-floating lane test cases in the MIWG test suite\n\t    var processes = filter(rootElements, function(e) {\n\t      return !isHandled(e) && is(e, 'bpmn:Process') && e.laneSets;\n\t    });\n\n\t    processes.forEach(contextual(handleProcess, ctx));\n\t  }\n\n\t  function handleMessageFlow(messageFlow, context) {\n\t    visitIfDi(messageFlow, context);\n\t  }\n\n\t  function handleMessageFlows(messageFlows, context) {\n\t    forEach(messageFlows, contextual(handleMessageFlow, context));\n\t  }\n\n\t  function handleDataAssociation(association, context) {\n\t    visitIfDi(association, context);\n\t  }\n\n\t  function handleDataInput(dataInput, context) {\n\t    visitIfDi(dataInput, context);\n\t  }\n\n\t  function handleDataOutput(dataOutput, context) {\n\t    visitIfDi(dataOutput, context);\n\t  }\n\n\t  function handleArtifact(artifact, context) {\n\n\t    // bpmn:TextAnnotation\n\t    // bpmn:Group\n\t    // bpmn:Association\n\n\t    visitIfDi(artifact, context);\n\t  }\n\n\t  function handleArtifacts(artifacts, context) {\n\n\t    forEach(artifacts, function(e) {\n\t      if (is(e, 'bpmn:Association')) {\n\t        deferred.push(function() {\n\t          handleArtifact(e, context);\n\t        });\n\t      } else {\n\t        handleArtifact(e, context);\n\t      }\n\t    });\n\t  }\n\n\t  function handleIoSpecification(ioSpecification, context) {\n\n\t    if (!ioSpecification) {\n\t      return;\n\t    }\n\n\t    forEach(ioSpecification.dataInputs, contextual(handleDataInput, context));\n\t    forEach(ioSpecification.dataOutputs, contextual(handleDataOutput, context));\n\t  }\n\n\t  function handleSubProcess(subProcess, context) {\n\t    handleFlowElementsContainer(subProcess, context);\n\t    handleArtifacts(subProcess.artifacts, context);\n\t  }\n\n\t  function handleFlowNode(flowNode, context) {\n\t    var childCtx = visitIfDi(flowNode, context);\n\n\t    if (is(flowNode, 'bpmn:SubProcess')) {\n\t      handleSubProcess(flowNode, childCtx || context);\n\t    }\n\n\t    if (is(flowNode, 'bpmn:Activity')) {\n\t      handleIoSpecification(flowNode.ioSpecification, context);\n\t    }\n\n\t    // defer handling of associations\n\t    // affected types:\n\t    //\n\t    //   * bpmn:Activity\n\t    //   * bpmn:ThrowEvent\n\t    //   * bpmn:CatchEvent\n\t    //\n\t    deferred.push(function() {\n\t      forEach(flowNode.dataInputAssociations, contextual(handleDataAssociation, context));\n\t      forEach(flowNode.dataOutputAssociations, contextual(handleDataAssociation, context));\n\t    });\n\t  }\n\n\t  function handleSequenceFlow(sequenceFlow, context) {\n\t    visitIfDi(sequenceFlow, context);\n\t  }\n\n\t  function handleDataElement(dataObject, context) {\n\t    visitIfDi(dataObject, context);\n\t  }\n\n\t  function handleLane(lane, context) {\n\n\t    deferred.push(function() {\n\n\t      var newContext = visitIfDi(lane, context);\n\n\t      if (lane.childLaneSet) {\n\t        handleLaneSet(lane.childLaneSet, newContext || context);\n\t      }\n\n\t      wireFlowNodeRefs(lane);\n\t    });\n\t  }\n\n\t  function handleLaneSet(laneSet, context) {\n\t    forEach(laneSet.lanes, contextual(handleLane, context));\n\t  }\n\n\t  function handleLaneSets(laneSets, context) {\n\t    forEach(laneSets, contextual(handleLaneSet, context));\n\t  }\n\n\t  function handleFlowElementsContainer(container, context) {\n\t    handleFlowElements(container.flowElements, context);\n\n\t    if (container.laneSets) {\n\t      handleLaneSets(container.laneSets, context);\n\t    }\n\t  }\n\n\t  function handleFlowElements(flowElements, context) {\n\t    forEach(flowElements, function(e) {\n\t      if (is(e, 'bpmn:SequenceFlow')) {\n\t        deferred.push(function() {\n\t          handleSequenceFlow(e, context);\n\t        });\n\t      } else if (is(e, 'bpmn:BoundaryEvent')) {\n\t        deferred.unshift(function() {\n\t          handleFlowNode(e, context);\n\t        });\n\t      } else if (is(e, 'bpmn:FlowNode')) {\n\t        handleFlowNode(e, context);\n\t      } else if (is(e, 'bpmn:DataObject')) ; else if (is(e, 'bpmn:DataStoreReference')) {\n\t        handleDataElement(e, context);\n\t      } else if (is(e, 'bpmn:DataObjectReference')) {\n\t        handleDataElement(e, context);\n\t      } else {\n\t        logError(\n\t          translate('unrecognized flowElement {element} in context {context}', {\n\t            element: elementToString(e),\n\t            context: (context ? elementToString(context.businessObject) : 'null')\n\t          }),\n\t          { element: e, context: context }\n\t        );\n\t      }\n\t    });\n\t  }\n\n\t  function handleParticipant(participant, context) {\n\t    var newCtx = visitIfDi(participant, context);\n\n\t    var process = participant.processRef;\n\t    if (process) {\n\t      handleProcess(process, newCtx || context);\n\t    }\n\t  }\n\n\t  function handleCollaboration(collaboration) {\n\n\t    forEach(collaboration.participants, contextual(handleParticipant));\n\n\t    handleArtifacts(collaboration.artifacts);\n\n\t    // handle message flows latest in the process\n\t    deferred.push(function() {\n\t      handleMessageFlows(collaboration.messageFlows);\n\t    });\n\t  }\n\n\n\t  function wireFlowNodeRefs(lane) {\n\n\t    // wire the virtual flowNodeRefs <-> relationship\n\t    forEach(lane.flowNodeRef, function(flowNode) {\n\t      var lanes = flowNode.get('lanes');\n\n\t      if (lanes) {\n\t        lanes.push(lane);\n\t      }\n\t    });\n\t  }\n\n\t  // API //////////////////////\n\n\t  return {\n\t    handleDeferred: handleDeferred,\n\t    handleDefinitions: handleDefinitions,\n\t    handleSubProcess: handleSubProcess,\n\t    registerDi: registerDi\n\t  };\n\t}\n\n\t/**\n\t * The importBpmnDiagram result.\n\t *\n\t * @typedef {Object} ImportBPMNDiagramResult\n\t *\n\t * @property {Array<string>} warnings\n\t */\n\n\t/**\n\t* The importBpmnDiagram error.\n\t*\n\t* @typedef {Error} ImportBPMNDiagramError\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t * Import the definitions into a diagram.\n\t *\n\t * Errors and warnings are reported through the specified callback.\n\t *\n\t * @param  {djs.Diagram} diagram\n\t * @param  {ModdleElement<Definitions>} definitions\n\t * @param  {ModdleElement<BPMNDiagram>} [bpmnDiagram] the diagram to be rendered\n\t * (if not provided, the first one will be rendered)\n\t *\n\t * Returns {Promise<ImportBPMNDiagramResult, ImportBPMNDiagramError>}\n\t */\n\tfunction importBpmnDiagram(diagram, definitions, bpmnDiagram) {\n\n\t  var importer,\n\t      eventBus,\n\t      translate;\n\n\t  var error,\n\t      warnings = [];\n\n\t  /**\n\t   * Walk the diagram semantically, importing (=drawing)\n\t   * all elements you encounter.\n\t   *\n\t   * @param {ModdleElement<Definitions>} definitions\n\t   * @param {ModdleElement<BPMNDiagram>} bpmnDiagram\n\t   */\n\t  function render(definitions, bpmnDiagram) {\n\n\t    var visitor = {\n\n\t      root: function(element) {\n\t        return importer.add(element);\n\t      },\n\n\t      element: function(element, parentShape) {\n\t        return importer.add(element, parentShape);\n\t      },\n\n\t      error: function(message, context) {\n\t        warnings.push({ message: message, context: context });\n\t      }\n\t    };\n\n\t    var walker = new BpmnTreeWalker(visitor, translate);\n\n\t    // traverse BPMN 2.0 document model,\n\t    // starting at definitions\n\t    walker.handleDefinitions(definitions, bpmnDiagram);\n\t  }\n\n\t  return new Promise(function(resolve, reject) {\n\t    try {\n\t      importer = diagram.get('bpmnImporter');\n\t      eventBus = diagram.get('eventBus');\n\t      translate = diagram.get('translate');\n\n\t      eventBus.fire('import.render.start', { definitions: definitions });\n\n\t      render(definitions, bpmnDiagram);\n\n\t      eventBus.fire('import.render.complete', {\n\t        error: error,\n\t        warnings: warnings\n\t      });\n\n\t      return resolve({ warnings: warnings });\n\t    } catch (e) {\n\n\t      e.warnings = warnings;\n\t      return reject(e);\n\t    }\n\t  });\n\t}\n\n\t// TODO(nikku): remove with future bpmn-js version\n\n\t/**\n\t * Wraps APIs to check:\n\t *\n\t * 1) If a callback is passed -> Warn users about callback deprecation.\n\t * 2) If Promise class is implemented in current environment.\n\t *\n\t * @private\n\t */\n\tfunction wrapForCompatibility(api) {\n\n\t  return function() {\n\n\t    if (!window.Promise) {\n\t      throw new Error('Promises is not supported in this environment. Please polyfill Promise.');\n\t    }\n\n\t    var argLen = arguments.length;\n\t    if (argLen >= 1 && isFunction(arguments[argLen - 1])) {\n\n\t      var callback = arguments[argLen - 1];\n\n\t      console.warn(new Error(\n\t        'Passing callbacks to ' + api.name + ' is deprecated and will be removed in a future major release. ' +\n\t        'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'\n\t      ));\n\n\t      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);\n\n\t      api.apply(this, argsWithoutCallback).then(function(result) {\n\n\t        var firstKey = Object.keys(result)[0];\n\n\t        // The APIs we are wrapping all resolve a single item depending on the API.\n\t        // For instance, importXML resolves { warnings } and saveXML returns { xml }.\n\t        // That's why we can call the callback with the first item of result.\n\t        return callback(null, result[firstKey]);\n\n\t        // Passing a second paramter instead of catch because we don't want to\n\t        // catch errors thrown by callback().\n\t      }, function(err) {\n\n\t        return callback(err, err.warnings);\n\t      });\n\t    } else {\n\n\t      return api.apply(this, arguments);\n\t    }\n\t  };\n\t}\n\n\t/**\n\t * This file must not be changed or exchanged.\n\t *\n\t * @see http://bpmn.io/license for more information.\n\t */\n\n\n\t// inlined ../../resources/logo.svg\n\tvar BPMNIO_LOGO_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14.02 5.57\" width=\"53\" height=\"21\" style=\"vertical-align:middle\"><path fill=\"currentColor\" d=\"M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z\"/><path fill=\"currentColor\" d=\"M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z\"/></svg>';\n\n\tvar BPMNIO_IMG = BPMNIO_LOGO_SVG;\n\n\tfunction css(attrs) {\n\t  return attrs.join(';');\n\t}\n\n\tvar LINK_STYLES = css([\n\t  'color: #404040'\n\t]);\n\n\tvar LIGHTBOX_STYLES = css([\n\t  'z-index: 1001',\n\t  'position: fixed',\n\t  'top: 0',\n\t  'left: 0',\n\t  'right: 0',\n\t  'bottom: 0'\n\t]);\n\n\tvar BACKDROP_STYLES = css([\n\t  'width: 100%',\n\t  'height: 100%',\n\t  'background: rgba(40,40,40,0.2)'\n\t]);\n\n\tvar NOTICE_STYLES = css([\n\t  'position: absolute',\n\t  'left: 50%',\n\t  'top: 40%',\n\t  'transform: translate(-50%)',\n\t  'width: 260px',\n\t  'padding: 10px',\n\t  'background: white',\n\t  'box-shadow: 0 1px 4px rgba(0,0,0,0.3)',\n\t  'font-family: Helvetica, Arial, sans-serif',\n\t  'font-size: 14px',\n\t  'display: flex',\n\t  'line-height: 1.3'\n\t]);\n\n\tvar LIGHTBOX_MARKUP =\n\t  '<div class=\"bjs-powered-by-lightbox\" style=\"' + LIGHTBOX_STYLES + '\">' +\n\t    '<div class=\"backdrop\" style=\"' + BACKDROP_STYLES + '\"></div>' +\n\t    '<div class=\"notice\" style=\"' + NOTICE_STYLES + '\">' +\n\t      '<a href=\"https://bpmn.io\" target=\"_blank\" rel=\"noopener\" style=\"margin: 15px 20px 15px 10px; align-self: center;' + LINK_STYLES + '\">' +\n\t        BPMNIO_IMG +\n\t      '</a>' +\n\t      '<span>' +\n\t        'Web-based tooling for BPMN, DMN and CMMN diagrams ' +\n\t        'powered by <a href=\"https://bpmn.io\" target=\"_blank\" rel=\"noopener\">bpmn.io</a>.' +\n\t      '</span>' +\n\t    '</div>' +\n\t  '</div>';\n\n\n\tvar lightbox;\n\n\tfunction open() {\n\n\t  if (!lightbox) {\n\t    lightbox = domify(LIGHTBOX_MARKUP);\n\n\t    delegateEvents.bind(lightbox, '.backdrop', 'click', function(event) {\n\t      document.body.removeChild(lightbox);\n\t    });\n\t  }\n\n\t  document.body.appendChild(lightbox);\n\t}\n\n\t/**\n\t * The code in the <project-logo></project-logo> area\n\t * must not be changed.\n\t *\n\t * @see http://bpmn.io/license for more information.\n\t */\n\n\t/**\n\t * A base viewer for BPMN 2.0 diagrams.\n\t *\n\t * Have a look at {@link Viewer}, {@link NavigatedViewer} or {@link Modeler} for\n\t * bundles that include actual features.\n\t *\n\t * @param {Object} [options] configuration options to pass to the viewer\n\t * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n\t * @param {string|number} [options.width] the width of the viewer\n\t * @param {string|number} [options.height] the height of the viewer\n\t * @param {Object} [options.moddleExtensions] extension packages to provide\n\t * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n\t * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n\t */\n\tfunction BaseViewer(options) {\n\n\t  options = assign({}, DEFAULT_OPTIONS, options);\n\n\t  this._moddle = this._createModdle(options);\n\n\t  this._container = this._createContainer(options);\n\n\t  /* <project-logo> */\n\n\t  addProjectLogo(this._container);\n\n\t  /* </project-logo> */\n\n\t  this._init(this._container, this._moddle, options);\n\t}\n\n\tinherits_browser(BaseViewer, Diagram);\n\n\t/**\n\t* The importXML result.\n\t*\n\t* @typedef {Object} ImportXMLResult\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t* The importXML error.\n\t*\n\t* @typedef {Error} ImportXMLError\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t * Parse and render a BPMN 2.0 diagram.\n\t *\n\t * Once finished the viewer reports back the result to the\n\t * provided callback function with (err, warnings).\n\t *\n\t * ## Life-Cycle Events\n\t *\n\t * During import the viewer will fire life-cycle events:\n\t *\n\t *   * import.parse.start (about to read model from xml)\n\t *   * import.parse.complete (model read; may have worked or not)\n\t *   * import.render.start (graphical import start)\n\t *   * import.render.complete (graphical import finished)\n\t *   * import.done (everything done)\n\t *\n\t * You can use these events to hook into the life-cycle.\n\t *\n\t * @param {string} xml the BPMN 2.0 xml\n\t * @param {ModdleElement<BPMNDiagram>|string} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n\t *\n\t * Returns {Promise<ImportXMLResult, ImportXMLError>}\n\t */\n\tBaseViewer.prototype.importXML = wrapForCompatibility(function importXML(xml, bpmnDiagram) {\n\n\t  var self = this;\n\n\t  function ParseCompleteEvent(data) {\n\n\t    var event = self.get('eventBus').createEvent(data);\n\n\t    // TODO(nikku): remove with future bpmn-js version\n\t    Object.defineProperty(event, 'context', {\n\t      enumerable: true,\n\t      get: function() {\n\n\t        console.warn(new Error(\n\t          'import.parse.complete <context> is deprecated ' +\n\t          'and will be removed in future library versions'\n\t        ));\n\n\t        return {\n\t          warnings: data.warnings,\n\t          references: data.references,\n\t          elementsById: data.elementsById\n\t        };\n\t      }\n\t    });\n\n\t    return event;\n\t  }\n\n\t  return new Promise(function(resolve, reject) {\n\n\t    // hook in pre-parse listeners +\n\t    // allow xml manipulation\n\t    xml = self._emit('import.parse.start', { xml: xml }) || xml;\n\n\t    self._moddle.fromXML(xml, 'bpmn:Definitions').then(function(result) {\n\t      var definitions = result.rootElement;\n\t      var references = result.references;\n\t      var parseWarnings = result.warnings;\n\t      var elementsById = result.elementsById;\n\n\t      // hook in post parse listeners +\n\t      // allow definitions manipulation\n\t      definitions = self._emit('import.parse.complete', ParseCompleteEvent({\n\t        error: null,\n\t        definitions: definitions,\n\t        elementsById: elementsById,\n\t        references: references,\n\t        warnings: parseWarnings\n\t      })) || definitions;\n\n\t      self.importDefinitions(definitions, bpmnDiagram).then(function(result) {\n\t        var allWarnings = [].concat(parseWarnings, result.warnings || []);\n\n\t        self._emit('import.done', { error: null, warnings: allWarnings });\n\n\t        return resolve({ warnings: allWarnings });\n\t      }).catch(function(err) {\n\t        var allWarnings = [].concat(parseWarnings, err.warnings || []);\n\n\t        self._emit('import.done', { error: err, warnings: allWarnings });\n\n\t        return reject(addWarningsToError(err, allWarnings));\n\t      });\n\t    }).catch(function(err) {\n\n\t      self._emit('import.parse.complete', {\n\t        error: err\n\t      });\n\n\t      err = checkValidationError(err);\n\n\t      self._emit('import.done', { error: err, warnings: err.warnings });\n\n\t      return reject(err);\n\t    });\n\t  });\n\t});\n\n\t/**\n\t* The importDefinitions result.\n\t*\n\t* @typedef {Object} ImportDefinitionsResult\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t* The importDefinitions error.\n\t*\n\t* @typedef {Error} ImportDefinitionsError\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t * Import parsed definitions and render a BPMN 2.0 diagram.\n\t *\n\t * Once finished the viewer reports back the result to the\n\t * provided callback function with (err, warnings).\n\t *\n\t * ## Life-Cycle Events\n\t *\n\t * During import the viewer will fire life-cycle events:\n\t *\n\t *   * import.render.start (graphical import start)\n\t *   * import.render.complete (graphical import finished)\n\t *\n\t * You can use these events to hook into the life-cycle.\n\t *\n\t * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions\n\t * @param {ModdleElement<BPMNDiagram>|string} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n\t *\n\t * Returns {Promise<ImportDefinitionsResult, ImportDefinitionsError>}\n\t */\n\tBaseViewer.prototype.importDefinitions = wrapForCompatibility(function importDefinitions(definitions, bpmnDiagram) {\n\n\t  var self = this;\n\n\t  return new Promise(function(resolve, reject) {\n\n\t    self._setDefinitions(definitions);\n\n\t    self.open(bpmnDiagram).then(function(result) {\n\n\t      var warnings = result.warnings;\n\n\t      return resolve({ warnings: warnings });\n\t    }).catch(function(err) {\n\n\t      return reject(err);\n\t    });\n\t  });\n\t});\n\n\t/**\n\t * The open result.\n\t *\n\t * @typedef {Object} OpenResult\n\t *\n\t * @property {Array<string>} warnings\n\t */\n\n\t/**\n\t* The open error.\n\t*\n\t* @typedef {Error} OpenError\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t * Open diagram of previously imported XML.\n\t *\n\t * Once finished the viewer reports back the result to the\n\t * provided callback function with (err, warnings).\n\t *\n\t * ## Life-Cycle Events\n\t *\n\t * During switch the viewer will fire life-cycle events:\n\t *\n\t *   * import.render.start (graphical import start)\n\t *   * import.render.complete (graphical import finished)\n\t *\n\t * You can use these events to hook into the life-cycle.\n\t *\n\t * @param {string|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open\n\t *\n\t * Returns {Promise<OpenResult, OpenError>}\n\t */\n\tBaseViewer.prototype.open = wrapForCompatibility(function open(bpmnDiagramOrId) {\n\n\t  var definitions = this._definitions;\n\t  var bpmnDiagram = bpmnDiagramOrId;\n\n\t  var self = this;\n\n\t  return new Promise(function(resolve, reject) {\n\t    if (!definitions) {\n\t      var err1 = new Error('no XML imported');\n\n\t      return reject(addWarningsToError(err1, []));\n\t    }\n\n\t    if (typeof bpmnDiagramOrId === 'string') {\n\t      bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n\t      if (!bpmnDiagram) {\n\t        var err2 = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');\n\n\t        return reject(addWarningsToError(err2, []));\n\t      }\n\t    }\n\n\t    // clear existing rendered diagram\n\t    // catch synchronous exceptions during #clear()\n\t    try {\n\t      self.clear();\n\t    } catch (error) {\n\n\t      return reject(addWarningsToError(error, []));\n\t    }\n\n\t    // perform graphical import\n\t    importBpmnDiagram(self, definitions, bpmnDiagram).then(function(result) {\n\n\t      var warnings = result.warnings;\n\n\t      return resolve({ warnings: warnings });\n\t    }).catch(function(err) {\n\n\t      return reject(err);\n\t    });\n\t  });\n\t});\n\n\t/**\n\t * The saveXML result.\n\t *\n\t * @typedef {Object} SaveXMLResult\n\t *\n\t * @property {string} xml\n\t */\n\n\t/**\n\t * Export the currently displayed BPMN 2.0 diagram as\n\t * a BPMN 2.0 XML document.\n\t *\n\t * ## Life-Cycle Events\n\t *\n\t * During XML saving the viewer will fire life-cycle events:\n\t *\n\t *   * saveXML.start (before serialization)\n\t *   * saveXML.serialized (after xml generation)\n\t *   * saveXML.done (everything done)\n\t *\n\t * You can use these events to hook into the life-cycle.\n\t *\n\t * @param {Object} [options] export options\n\t * @param {boolean} [options.format=false] output formatted XML\n\t * @param {boolean} [options.preamble=true] output preamble\n\t *\n\t * Returns {Promise<SaveXMLResult, Error>}\n\t */\n\tBaseViewer.prototype.saveXML = wrapForCompatibility(function saveXML(options) {\n\n\t  options = options || {};\n\n\t  var self = this;\n\n\t  var definitions = this._definitions;\n\n\t  return new Promise(function(resolve, reject) {\n\n\t    if (!definitions) {\n\t      var err = new Error('no definitions loaded');\n\n\t      return reject(err);\n\t    }\n\n\t    // allow to fiddle around with definitions\n\t    definitions = self._emit('saveXML.start', {\n\t      definitions: definitions\n\t    }) || definitions;\n\n\t    self._moddle.toXML(definitions, options).then(function(result) {\n\n\t      var xml = result.xml;\n\n\t      try {\n\t        xml = self._emit('saveXML.serialized', {\n\t          error: null,\n\t          xml: xml\n\t        }) || xml;\n\n\t        self._emit('saveXML.done', {\n\t          error: null,\n\t          xml: xml\n\t        });\n\t      } catch (e) {\n\t        console.error('error in saveXML life-cycle listener', e);\n\t      }\n\n\t      return resolve({ xml: xml });\n\t    }).catch(function(err) {\n\n\t      return reject(err);\n\t    });\n\t  });\n\t});\n\n\t/**\n\t * The saveSVG result.\n\t *\n\t * @typedef {Object} SaveSVGResult\n\t *\n\t * @property {string} svg\n\t */\n\n\t/**\n\t * Export the currently displayed BPMN 2.0 diagram as\n\t * an SVG image.\n\t *\n\t * ## Life-Cycle Events\n\t *\n\t * During SVG saving the viewer will fire life-cycle events:\n\t *\n\t *   * saveSVG.start (before serialization)\n\t *   * saveSVG.done (everything done)\n\t *\n\t * You can use these events to hook into the life-cycle.\n\t *\n\t * @param {Object} [options]\n\t *\n\t * Returns {Promise<SaveSVGResult, Error>}\n\t */\n\tBaseViewer.prototype.saveSVG = wrapForCompatibility(function saveSVG(options) {\n\n\t  var self = this;\n\n\t  return new Promise(function(resolve, reject) {\n\n\t    self._emit('saveSVG.start');\n\n\t    var svg, err;\n\n\t    try {\n\t      var canvas = self.get('canvas');\n\n\t      var contentNode = canvas.getDefaultLayer(),\n\t          defsNode = query('defs', canvas._svg);\n\n\t      var contents = innerSVG(contentNode),\n\t          defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n\n\t      var bbox = contentNode.getBBox();\n\n\t      svg =\n\t        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n\t        '<!-- created with bpmn-js / http://bpmn.io -->\\n' +\n\t        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' +\n\t        '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' +\n\t             'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' +\n\t             'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' +\n\t          defs + contents +\n\t        '</svg>';\n\t    } catch (e) {\n\t      err = e;\n\t    }\n\n\t    self._emit('saveSVG.done', {\n\t      error: err,\n\t      svg: svg\n\t    });\n\n\t    if (!err) {\n\t      return resolve({ svg: svg });\n\t    }\n\n\t    return reject(err);\n\t  });\n\t});\n\n\t/**\n\t * Get a named diagram service.\n\t *\n\t * @example\n\t *\n\t * var elementRegistry = viewer.get('elementRegistry');\n\t * var startEventShape = elementRegistry.get('StartEvent_1');\n\t *\n\t * @param {string} name\n\t *\n\t * @return {Object} diagram service instance\n\t *\n\t * @method BaseViewer#get\n\t */\n\n\t/**\n\t * Invoke a function in the context of this viewer.\n\t *\n\t * @example\n\t *\n\t * viewer.invoke(function(elementRegistry) {\n\t *   var startEventShape = elementRegistry.get('StartEvent_1');\n\t * });\n\t *\n\t * @param {Function} fn to be invoked\n\t *\n\t * @return {Object} the functions return value\n\t *\n\t * @method BaseViewer#invoke\n\t */\n\n\n\tBaseViewer.prototype._setDefinitions = function(definitions) {\n\t  this._definitions = definitions;\n\t};\n\n\tBaseViewer.prototype.getModules = function() {\n\t  return this._modules;\n\t};\n\n\t/**\n\t * Remove all drawn elements from the viewer.\n\t *\n\t * After calling this method the viewer can still\n\t * be reused for opening another diagram.\n\t *\n\t * @method BaseViewer#clear\n\t */\n\tBaseViewer.prototype.clear = function() {\n\t  if (!this.getDefinitions()) {\n\n\t    // no diagram to clear\n\t    return;\n\t  }\n\n\t  // remove businessObject#di binding\n\t  //\n\t  // this is necessary, as we establish the bindings\n\t  // in the BpmnTreeWalker (and assume none are given\n\t  // on reimport)\n\t  this.get('elementRegistry').forEach(function(element) {\n\t    var bo = element.businessObject;\n\n\t    if (bo && bo.di) {\n\t      delete bo.di;\n\t    }\n\t  });\n\n\t  // remove drawn elements\n\t  Diagram.prototype.clear.call(this);\n\t};\n\n\t/**\n\t * Destroy the viewer instance and remove all its\n\t * remainders from the document tree.\n\t */\n\tBaseViewer.prototype.destroy = function() {\n\n\t  // diagram destroy\n\t  Diagram.prototype.destroy.call(this);\n\n\t  // dom detach\n\t  remove(this._container);\n\t};\n\n\t/**\n\t * Register an event listener\n\t *\n\t * Remove a previously added listener via {@link #off(event, callback)}.\n\t *\n\t * @param {string} event\n\t * @param {number} [priority]\n\t * @param {Function} callback\n\t * @param {Object} [that]\n\t */\n\tBaseViewer.prototype.on = function(event, priority, callback, target) {\n\t  return this.get('eventBus').on(event, priority, callback, target);\n\t};\n\n\t/**\n\t * De-register an event listener\n\t *\n\t * @param {string} event\n\t * @param {Function} callback\n\t */\n\tBaseViewer.prototype.off = function(event, callback) {\n\t  this.get('eventBus').off(event, callback);\n\t};\n\n\tBaseViewer.prototype.attachTo = function(parentNode) {\n\n\t  if (!parentNode) {\n\t    throw new Error('parentNode required');\n\t  }\n\n\t  // ensure we detach from the\n\t  // previous, old parent\n\t  this.detach();\n\n\t  // unwrap jQuery if provided\n\t  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n\t    parentNode = parentNode.get(0);\n\t  }\n\n\t  if (typeof parentNode === 'string') {\n\t    parentNode = query(parentNode);\n\t  }\n\n\t  parentNode.appendChild(this._container);\n\n\t  this._emit('attach', {});\n\n\t  this.get('canvas').resized();\n\t};\n\n\tBaseViewer.prototype.getDefinitions = function() {\n\t  return this._definitions;\n\t};\n\n\tBaseViewer.prototype.detach = function() {\n\n\t  var container = this._container,\n\t      parentNode = container.parentNode;\n\n\t  if (!parentNode) {\n\t    return;\n\t  }\n\n\t  this._emit('detach', {});\n\n\t  parentNode.removeChild(container);\n\t};\n\n\tBaseViewer.prototype._init = function(container, moddle, options) {\n\n\t  var baseModules = options.modules || this.getModules(),\n\t      additionalModules = options.additionalModules || [],\n\t      staticModules = [\n\t        {\n\t          bpmnjs: [ 'value', this ],\n\t          moddle: [ 'value', moddle ]\n\t        }\n\t      ];\n\n\t  var diagramModules = [].concat(staticModules, baseModules, additionalModules);\n\n\t  var diagramOptions = assign(omit(options, [ 'additionalModules' ]), {\n\t    canvas: assign({}, options.canvas, { container: container }),\n\t    modules: diagramModules\n\t  });\n\n\t  // invoke diagram constructor\n\t  Diagram.call(this, diagramOptions);\n\n\t  if (options && options.container) {\n\t    this.attachTo(options.container);\n\t  }\n\t};\n\n\t/**\n\t * Emit an event on the underlying {@link EventBus}\n\t *\n\t * @param  {string} type\n\t * @param  {Object} event\n\t *\n\t * @return {Object} event processing result (if any)\n\t */\n\tBaseViewer.prototype._emit = function(type, event) {\n\t  return this.get('eventBus').fire(type, event);\n\t};\n\n\tBaseViewer.prototype._createContainer = function(options) {\n\n\t  var container = domify('<div class=\"bjs-container\"></div>');\n\n\t  assign(container.style, {\n\t    width: ensureUnit(options.width),\n\t    height: ensureUnit(options.height),\n\t    position: options.position\n\t  });\n\n\t  return container;\n\t};\n\n\tBaseViewer.prototype._createModdle = function(options) {\n\t  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n\n\t  return new simple(moddleOptions);\n\t};\n\n\tBaseViewer.prototype._modules = [];\n\n\t// helpers ///////////////\n\n\tfunction addWarningsToError(err, warningsAry) {\n\t  err.warnings = warningsAry;\n\t  return err;\n\t}\n\n\tfunction checkValidationError(err) {\n\n\t  // check if we can help the user by indicating wrong BPMN 2.0 xml\n\t  // (in case he or the exporting tool did not get that right)\n\n\t  var pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n\t  var match = pattern.exec(err.message);\n\n\t  if (match) {\n\t    err.message =\n\t      'unparsable content <' + match[1] + '> detected; ' +\n\t      'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n\t  }\n\n\t  return err;\n\t}\n\n\tvar DEFAULT_OPTIONS = {\n\t  width: '100%',\n\t  height: '100%',\n\t  position: 'relative'\n\t};\n\n\n\t/**\n\t * Ensure the passed argument is a proper unit (defaulting to px)\n\t */\n\tfunction ensureUnit(val) {\n\t  return val + (isNumber(val) ? 'px' : '');\n\t}\n\n\n\t/**\n\t * Find BPMNDiagram in definitions by ID\n\t *\n\t * @param {ModdleElement<Definitions>} definitions\n\t * @param {string} diagramId\n\t *\n\t * @return {ModdleElement<BPMNDiagram>|null}\n\t */\n\tfunction findBPMNDiagram(definitions, diagramId) {\n\t  if (!diagramId) {\n\t    return null;\n\t  }\n\n\t  return find(definitions.diagrams, function(element) {\n\t    return element.id === diagramId;\n\t  }) || null;\n\t}\n\n\t/**\n\t * Adds the project logo to the diagram container as\n\t * required by the bpmn.io license.\n\t *\n\t * @see http://bpmn.io/license\n\t *\n\t * @param {Element} container\n\t */\n\tfunction addProjectLogo(container) {\n\t  var img = BPMNIO_IMG;\n\n\t  var linkMarkup =\n\t    '<a href=\"http://bpmn.io\" ' +\n\t       'target=\"_blank\" ' +\n\t       'class=\"bjs-powered-by\" ' +\n\t       'title=\"Powered by bpmn.io\" ' +\n\t       'style=\"position: absolute; bottom: 15px; right: 15px; z-index: 100; ' + LINK_STYLES + '\">' +\n\t      img +\n\t    '</a>';\n\n\t  var linkElement = domify(linkMarkup);\n\n\t  container.appendChild(linkElement);\n\n\t  componentEvent.bind(linkElement, 'click', function(event) {\n\t    open();\n\n\t    event.preventDefault();\n\t  });\n\t}\n\n\t/* </project-logo> */\n\n\t/**\n\t * A base modeler for BPMN 2.0 diagrams.\n\t *\n\t * Have a look at {@link Modeler} for a bundle that includes actual features.\n\t *\n\t * @param {Object} [options] configuration options to pass to the viewer\n\t * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n\t * @param {string|number} [options.width] the width of the viewer\n\t * @param {string|number} [options.height] the height of the viewer\n\t * @param {Object} [options.moddleExtensions] extension packages to provide\n\t * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n\t * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n\t */\n\tfunction BaseModeler(options) {\n\t  BaseViewer.call(this, options);\n\n\t  // hook ID collection into the modeler\n\t  this.on('import.parse.complete', function(event) {\n\t    if (!event.error) {\n\t      this._collectIds(event.definitions, event.elementsById);\n\t    }\n\t  }, this);\n\n\t  this.on('diagram.destroy', function() {\n\t    this.get('moddle').ids.clear();\n\t  }, this);\n\t}\n\n\tinherits_browser(BaseModeler, BaseViewer);\n\n\n\t/**\n\t * Create a moddle instance, attaching ids to it.\n\t *\n\t * @param {Object} options\n\t */\n\tBaseModeler.prototype._createModdle = function(options) {\n\t  var moddle = BaseViewer.prototype._createModdle.call(this, options);\n\n\t  // attach ids to moddle to be able to track\n\t  // and validated ids in the BPMN 2.0 XML document\n\t  // tree\n\t  moddle.ids = new Ids([ 32, 36, 1 ]);\n\n\t  return moddle;\n\t};\n\n\t/**\n\t * Collect ids processed during parsing of the\n\t * definitions object.\n\t *\n\t * @param {ModdleElement} definitions\n\t * @param {Context} context\n\t */\n\tBaseModeler.prototype._collectIds = function(definitions, elementsById) {\n\n\t  var moddle = definitions.$model,\n\t      ids = moddle.ids,\n\t      id;\n\n\t  // remove references from previous import\n\t  ids.clear();\n\n\t  for (id in elementsById) {\n\t    ids.claim(id, elementsById[id]);\n\t  }\n\t};\n\n\t/**\n\t * Is an element of the given BPMN type?\n\t *\n\t * @param  {djs.model.Base|ModdleElement} element\n\t * @param  {string} type\n\t *\n\t * @return {boolean}\n\t */\n\tfunction is$1(element, type) {\n\t  var bo = getBusinessObject(element);\n\n\t  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n\t}\n\n\n\t/**\n\t * Return the business object for a given element.\n\t *\n\t * @param  {djs.model.Base|ModdleElement} element\n\t *\n\t * @return {ModdleElement}\n\t */\n\tfunction getBusinessObject(element) {\n\t  return (element && element.businessObject) || element;\n\t}\n\n\tfunction isExpanded(element) {\n\n\t  if (is$1(element, 'bpmn:CallActivity')) {\n\t    return false;\n\t  }\n\n\t  if (is$1(element, 'bpmn:SubProcess')) {\n\t    return !!getBusinessObject(element).di.isExpanded;\n\t  }\n\n\t  if (is$1(element, 'bpmn:Participant')) {\n\t    return !!getBusinessObject(element).processRef;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction isInterrupting(element) {\n\t  return element && getBusinessObject(element).isInterrupting !== false;\n\t}\n\n\tfunction isEventSubProcess(element) {\n\t  return element && !!getBusinessObject(element).triggeredByEvent;\n\t}\n\n\tfunction hasEventDefinition(element, eventType) {\n\t  var bo = getBusinessObject(element),\n\t      hasEventDefinition = false;\n\n\t  if (bo.eventDefinitions) {\n\t    forEach(bo.eventDefinitions, function(event) {\n\t      if (is$1(event, eventType)) {\n\t        hasEventDefinition = true;\n\t      }\n\t    });\n\t  }\n\n\t  return hasEventDefinition;\n\t}\n\n\tfunction hasErrorEventDefinition(element) {\n\t  return hasEventDefinition(element, 'bpmn:ErrorEventDefinition');\n\t}\n\n\tfunction hasEscalationEventDefinition(element) {\n\t  return hasEventDefinition(element, 'bpmn:EscalationEventDefinition');\n\t}\n\n\tfunction hasCompensateEventDefinition(element) {\n\t  return hasEventDefinition(element, 'bpmn:CompensateEventDefinition');\n\t}\n\n\tfunction getLabelAttr(semantic) {\n\t  if (\n\t    is$1(semantic, 'bpmn:FlowElement') ||\n\t    is$1(semantic, 'bpmn:Participant') ||\n\t    is$1(semantic, 'bpmn:Lane') ||\n\t    is$1(semantic, 'bpmn:SequenceFlow') ||\n\t    is$1(semantic, 'bpmn:MessageFlow') ||\n\t    is$1(semantic, 'bpmn:DataInput') ||\n\t    is$1(semantic, 'bpmn:DataOutput')\n\t  ) {\n\t    return 'name';\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:TextAnnotation')) {\n\t    return 'text';\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Group')) {\n\t    return 'categoryValueRef';\n\t  }\n\t}\n\n\tfunction getCategoryValue(semantic) {\n\t  var categoryValueRef = semantic['categoryValueRef'];\n\n\t  if (!categoryValueRef) {\n\t    return '';\n\t  }\n\n\n\t  return categoryValueRef.value || '';\n\t}\n\n\tfunction getLabel(element) {\n\t  var semantic = element.businessObject,\n\t      attr = getLabelAttr(semantic);\n\n\t  if (attr) {\n\n\t    if (attr === 'categoryValueRef') {\n\n\t      return getCategoryValue(semantic);\n\t    }\n\n\t    return semantic[attr] || '';\n\t  }\n\t}\n\n\n\tfunction setLabel(element, text, isExternal) {\n\t  var semantic = element.businessObject,\n\t      attr = getLabelAttr(semantic);\n\n\t  if (attr) {\n\n\t    if (attr === 'categoryValueRef') {\n\t      semantic['categoryValueRef'].value = text;\n\t    } else {\n\t      semantic[attr] = text;\n\t    }\n\n\t  }\n\n\t  return element;\n\t}\n\n\t// element utils //////////////////////\n\n\t/**\n\t * Checks if eventDefinition of the given element matches with semantic type.\n\t *\n\t * @return {boolean} true if element is of the given semantic type\n\t */\n\tfunction isTypedEvent(event, eventDefinitionType, filter) {\n\n\t  function matches(definition, filter) {\n\t    return every(filter, function(val, key) {\n\n\t      // we want a == conversion here, to be able to catch\n\t      // undefined == false and friends\n\t      /* jshint -W116 */\n\t      return definition[key] == val;\n\t    });\n\t  }\n\n\t  return some(event.eventDefinitions, function(definition) {\n\t    return definition.$type === eventDefinitionType && matches(event, filter);\n\t  });\n\t}\n\n\tfunction isThrowEvent(event) {\n\t  return (event.$type === 'bpmn:IntermediateThrowEvent') || (event.$type === 'bpmn:EndEvent');\n\t}\n\n\tfunction isCollection(element) {\n\t  var dataObject = element.dataObjectRef;\n\n\t  return element.isCollection || (dataObject && dataObject.isCollection);\n\t}\n\n\tfunction getDi(element) {\n\t  return element.businessObject.di;\n\t}\n\n\tfunction getSemantic(element) {\n\t  return element.businessObject;\n\t}\n\n\n\t// color access //////////////////////\n\n\tfunction getFillColor(element, defaultColor) {\n\t  return getDi(element).get('bioc:fill') || defaultColor || 'white';\n\t}\n\n\tfunction getStrokeColor(element, defaultColor) {\n\t  return getDi(element).get('bioc:stroke') || defaultColor || 'black';\n\t}\n\n\n\t// cropping path customizations //////////////////////\n\n\tfunction getCirclePath(shape) {\n\n\t  var cx = shape.x + shape.width / 2,\n\t      cy = shape.y + shape.height / 2,\n\t      radius = shape.width / 2;\n\n\t  var circlePath = [\n\t    ['M', cx, cy],\n\t    ['m', 0, -radius],\n\t    ['a', radius, radius, 0, 1, 1, 0, 2 * radius],\n\t    ['a', radius, radius, 0, 1, 1, 0, -2 * radius],\n\t    ['z']\n\t  ];\n\n\t  return componentsToPath(circlePath);\n\t}\n\n\tfunction getRoundRectPath(shape, borderRadius) {\n\n\t  var x = shape.x,\n\t      y = shape.y,\n\t      width = shape.width,\n\t      height = shape.height;\n\n\t  var roundRectPath = [\n\t    ['M', x + borderRadius, y],\n\t    ['l', width - borderRadius * 2, 0],\n\t    ['a', borderRadius, borderRadius, 0, 0, 1, borderRadius, borderRadius],\n\t    ['l', 0, height - borderRadius * 2],\n\t    ['a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, borderRadius],\n\t    ['l', borderRadius * 2 - width, 0],\n\t    ['a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, -borderRadius],\n\t    ['l', 0, borderRadius * 2 - height],\n\t    ['a', borderRadius, borderRadius, 0, 0, 1, borderRadius, -borderRadius],\n\t    ['z']\n\t  ];\n\n\t  return componentsToPath(roundRectPath);\n\t}\n\n\tfunction getDiamondPath(shape) {\n\n\t  var width = shape.width,\n\t      height = shape.height,\n\t      x = shape.x,\n\t      y = shape.y,\n\t      halfWidth = width / 2,\n\t      halfHeight = height / 2;\n\n\t  var diamondPath = [\n\t    ['M', x + halfWidth, y],\n\t    ['l', halfWidth, halfHeight],\n\t    ['l', -halfWidth, halfHeight],\n\t    ['l', -halfWidth, -halfHeight],\n\t    ['z']\n\t  ];\n\n\t  return componentsToPath(diamondPath);\n\t}\n\n\tfunction getRectPath(shape) {\n\t  var x = shape.x,\n\t      y = shape.y,\n\t      width = shape.width,\n\t      height = shape.height;\n\n\t  var rectPath = [\n\t    ['M', x, y],\n\t    ['l', width, 0],\n\t    ['l', 0, height],\n\t    ['l', -width, 0],\n\t    ['z']\n\t  ];\n\n\t  return componentsToPath(rectPath);\n\t}\n\n\tvar RENDERER_IDS = new Ids();\n\n\tvar TASK_BORDER_RADIUS = 10;\n\tvar INNER_OUTER_DIST = 3;\n\n\tvar DEFAULT_FILL_OPACITY = .95,\n\t    HIGH_FILL_OPACITY = .35;\n\n\n\tfunction BpmnRenderer(\n\t    config, eventBus, styles, pathMap,\n\t    canvas, textRenderer, priority) {\n\n\t  BaseRenderer.call(this, eventBus, priority);\n\n\t  var defaultFillColor = config && config.defaultFillColor,\n\t      defaultStrokeColor = config && config.defaultStrokeColor;\n\n\t  var rendererId = RENDERER_IDS.next();\n\n\t  var markers = {};\n\n\t  var computeStyle = styles.computeStyle;\n\n\t  function addMarker(id, options) {\n\t    var attrs = assign({\n\t      fill: 'black',\n\t      strokeWidth: 1,\n\t      strokeLinecap: 'round',\n\t      strokeDasharray: 'none'\n\t    }, options.attrs);\n\n\t    var ref = options.ref || { x: 0, y: 0 };\n\n\t    var scale = options.scale || 1;\n\n\t    // fix for safari / chrome / firefox bug not correctly\n\t    // resetting stroke dash array\n\t    if (attrs.strokeDasharray === 'none') {\n\t      attrs.strokeDasharray = [10000, 1];\n\t    }\n\n\t    var marker = create('marker');\n\n\t    attr$1(options.element, attrs);\n\n\t    append(marker, options.element);\n\n\t    attr$1(marker, {\n\t      id: id,\n\t      viewBox: '0 0 20 20',\n\t      refX: ref.x,\n\t      refY: ref.y,\n\t      markerWidth: 20 * scale,\n\t      markerHeight: 20 * scale,\n\t      orient: 'auto'\n\t    });\n\n\t    var defs = query('defs', canvas._svg);\n\n\t    if (!defs) {\n\t      defs = create('defs');\n\n\t      append(canvas._svg, defs);\n\t    }\n\n\t    append(defs, marker);\n\n\t    markers[id] = marker;\n\t  }\n\n\t  function colorEscape(str) {\n\n\t    // only allow characters and numbers\n\t    return str.replace(/[^0-9a-zA-z]+/g, '_');\n\t  }\n\n\t  function marker(type, fill, stroke) {\n\t    var id = type + '-' + colorEscape(fill) + '-' + colorEscape(stroke) + '-' + rendererId;\n\n\t    if (!markers[id]) {\n\t      createMarker(id, type, fill, stroke);\n\t    }\n\n\t    return 'url(#' + id + ')';\n\t  }\n\n\t  function createMarker(id, type, fill, stroke) {\n\n\t    if (type === 'sequenceflow-end') {\n\t      var sequenceflowEnd = create('path');\n\t      attr$1(sequenceflowEnd, { d: 'M 1 5 L 11 10 L 1 15 Z' });\n\n\t      addMarker(id, {\n\t        element: sequenceflowEnd,\n\t        ref: { x: 11, y: 10 },\n\t        scale: 0.5,\n\t        attrs: {\n\t          fill: stroke,\n\t          stroke: stroke\n\t        }\n\t      });\n\t    }\n\n\t    if (type === 'messageflow-start') {\n\t      var messageflowStart = create('circle');\n\t      attr$1(messageflowStart, { cx: 6, cy: 6, r: 3.5 });\n\n\t      addMarker(id, {\n\t        element: messageflowStart,\n\t        attrs: {\n\t          fill: fill,\n\t          stroke: stroke\n\t        },\n\t        ref: { x: 6, y: 6 }\n\t      });\n\t    }\n\n\t    if (type === 'messageflow-end') {\n\t      var messageflowEnd = create('path');\n\t      attr$1(messageflowEnd, { d: 'm 1 5 l 0 -3 l 7 3 l -7 3 z' });\n\n\t      addMarker(id, {\n\t        element: messageflowEnd,\n\t        attrs: {\n\t          fill: fill,\n\t          stroke: stroke,\n\t          strokeLinecap: 'butt'\n\t        },\n\t        ref: { x: 8.5, y: 5 }\n\t      });\n\t    }\n\n\t    if (type === 'association-start') {\n\t      var associationStart = create('path');\n\t      attr$1(associationStart, { d: 'M 11 5 L 1 10 L 11 15' });\n\n\t      addMarker(id, {\n\t        element: associationStart,\n\t        attrs: {\n\t          fill: 'none',\n\t          stroke: stroke,\n\t          strokeWidth: 1.5\n\t        },\n\t        ref: { x: 1, y: 10 },\n\t        scale: 0.5\n\t      });\n\t    }\n\n\t    if (type === 'association-end') {\n\t      var associationEnd = create('path');\n\t      attr$1(associationEnd, { d: 'M 1 5 L 11 10 L 1 15' });\n\n\t      addMarker(id, {\n\t        element: associationEnd,\n\t        attrs: {\n\t          fill: 'none',\n\t          stroke: stroke,\n\t          strokeWidth: 1.5\n\t        },\n\t        ref: { x: 12, y: 10 },\n\t        scale: 0.5\n\t      });\n\t    }\n\n\t    if (type === 'conditional-flow-marker') {\n\t      var conditionalflowMarker = create('path');\n\t      attr$1(conditionalflowMarker, { d: 'M 0 10 L 8 6 L 16 10 L 8 14 Z' });\n\n\t      addMarker(id, {\n\t        element: conditionalflowMarker,\n\t        attrs: {\n\t          fill: fill,\n\t          stroke: stroke\n\t        },\n\t        ref: { x: -1, y: 10 },\n\t        scale: 0.5\n\t      });\n\t    }\n\n\t    if (type === 'conditional-default-flow-marker') {\n\t      var conditionaldefaultflowMarker = create('path');\n\t      attr$1(conditionaldefaultflowMarker, { d: 'M 6 4 L 10 16' });\n\n\t      addMarker(id, {\n\t        element: conditionaldefaultflowMarker,\n\t        attrs: {\n\t          stroke: stroke\n\t        },\n\t        ref: { x: 0, y: 10 },\n\t        scale: 0.5\n\t      });\n\t    }\n\t  }\n\n\t  function drawCircle(parentGfx, width, height, offset, attrs) {\n\n\t    if (isObject(offset)) {\n\t      attrs = offset;\n\t      offset = 0;\n\t    }\n\n\t    offset = offset || 0;\n\n\t    attrs = computeStyle(attrs, {\n\t      stroke: 'black',\n\t      strokeWidth: 2,\n\t      fill: 'white'\n\t    });\n\n\t    if (attrs.fill === 'none') {\n\t      delete attrs.fillOpacity;\n\t    }\n\n\t    var cx = width / 2,\n\t        cy = height / 2;\n\n\t    var circle = create('circle');\n\t    attr$1(circle, {\n\t      cx: cx,\n\t      cy: cy,\n\t      r: Math.round((width + height) / 4 - offset)\n\t    });\n\t    attr$1(circle, attrs);\n\n\t    append(parentGfx, circle);\n\n\t    return circle;\n\t  }\n\n\t  function drawRect(parentGfx, width, height, r, offset, attrs) {\n\n\t    if (isObject(offset)) {\n\t      attrs = offset;\n\t      offset = 0;\n\t    }\n\n\t    offset = offset || 0;\n\n\t    attrs = computeStyle(attrs, {\n\t      stroke: 'black',\n\t      strokeWidth: 2,\n\t      fill: 'white'\n\t    });\n\n\t    var rect = create('rect');\n\t    attr$1(rect, {\n\t      x: offset,\n\t      y: offset,\n\t      width: width - offset * 2,\n\t      height: height - offset * 2,\n\t      rx: r,\n\t      ry: r\n\t    });\n\t    attr$1(rect, attrs);\n\n\t    append(parentGfx, rect);\n\n\t    return rect;\n\t  }\n\n\t  function drawDiamond(parentGfx, width, height, attrs) {\n\n\t    var x_2 = width / 2;\n\t    var y_2 = height / 2;\n\n\t    var points = [{ x: x_2, y: 0 }, { x: width, y: y_2 }, { x: x_2, y: height }, { x: 0, y: y_2 }];\n\n\t    var pointsString = points.map(function(point) {\n\t      return point.x + ',' + point.y;\n\t    }).join(' ');\n\n\t    attrs = computeStyle(attrs, {\n\t      stroke: 'black',\n\t      strokeWidth: 2,\n\t      fill: 'white'\n\t    });\n\n\t    var polygon = create('polygon');\n\t    attr$1(polygon, {\n\t      points: pointsString\n\t    });\n\t    attr$1(polygon, attrs);\n\n\t    append(parentGfx, polygon);\n\n\t    return polygon;\n\t  }\n\n\t  function drawLine(parentGfx, waypoints, attrs) {\n\t    attrs = computeStyle(attrs, [ 'no-fill' ], {\n\t      stroke: 'black',\n\t      strokeWidth: 2,\n\t      fill: 'none'\n\t    });\n\n\t    var line = createLine(waypoints, attrs);\n\n\t    append(parentGfx, line);\n\n\t    return line;\n\t  }\n\n\t  function drawPath(parentGfx, d, attrs) {\n\n\t    attrs = computeStyle(attrs, [ 'no-fill' ], {\n\t      strokeWidth: 2,\n\t      stroke: 'black'\n\t    });\n\n\t    var path = create('path');\n\t    attr$1(path, { d: d });\n\t    attr$1(path, attrs);\n\n\t    append(parentGfx, path);\n\n\t    return path;\n\t  }\n\n\t  function drawMarker(type, parentGfx, path, attrs) {\n\t    return drawPath(parentGfx, path, assign({ 'data-marker': type }, attrs));\n\t  }\n\n\t  function as(type) {\n\t    return function(parentGfx, element) {\n\t      return handlers[type](parentGfx, element);\n\t    };\n\t  }\n\n\t  function renderer(type) {\n\t    return handlers[type];\n\t  }\n\n\t  function renderEventContent(element, parentGfx) {\n\n\t    var event = getSemantic(element);\n\t    var isThrowing = isThrowEvent(event);\n\n\t    if (event.eventDefinitions && event.eventDefinitions.length>1) {\n\t      if (event.parallelMultiple) {\n\t        return renderer('bpmn:ParallelMultipleEventDefinition')(parentGfx, element, isThrowing);\n\t      }\n\t      else {\n\t        return renderer('bpmn:MultipleEventDefinition')(parentGfx, element, isThrowing);\n\t      }\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:MessageEventDefinition')) {\n\t      return renderer('bpmn:MessageEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:TimerEventDefinition')) {\n\t      return renderer('bpmn:TimerEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:ConditionalEventDefinition')) {\n\t      return renderer('bpmn:ConditionalEventDefinition')(parentGfx, element);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:SignalEventDefinition')) {\n\t      return renderer('bpmn:SignalEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:EscalationEventDefinition')) {\n\t      return renderer('bpmn:EscalationEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:LinkEventDefinition')) {\n\t      return renderer('bpmn:LinkEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:ErrorEventDefinition')) {\n\t      return renderer('bpmn:ErrorEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:CancelEventDefinition')) {\n\t      return renderer('bpmn:CancelEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:CompensateEventDefinition')) {\n\t      return renderer('bpmn:CompensateEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    if (isTypedEvent(event, 'bpmn:TerminateEventDefinition')) {\n\t      return renderer('bpmn:TerminateEventDefinition')(parentGfx, element, isThrowing);\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function renderLabel(parentGfx, label, options) {\n\n\t    options = assign({\n\t      size: {\n\t        width: 100\n\t      }\n\t    }, options);\n\n\t    var text = textRenderer.createText(label || '', options);\n\n\t    classes$1(text).add('djs-label');\n\n\t    append(parentGfx, text);\n\n\t    return text;\n\t  }\n\n\t  function renderEmbeddedLabel(parentGfx, element, align) {\n\t    var semantic = getSemantic(element);\n\n\t    return renderLabel(parentGfx, semantic.name, {\n\t      box: element,\n\t      align: align,\n\t      padding: 5,\n\t      style: {\n\t        fill: getStrokeColor(element, defaultStrokeColor)\n\t      }\n\t    });\n\t  }\n\n\t  function renderExternalLabel(parentGfx, element) {\n\n\t    var box = {\n\t      width: 90,\n\t      height: 30,\n\t      x: element.width / 2 + element.x,\n\t      y: element.height / 2 + element.y\n\t    };\n\n\t    return renderLabel(parentGfx, getLabel(element), {\n\t      box: box,\n\t      fitBox: true,\n\t      style: assign(\n\t        {},\n\t        textRenderer.getExternalStyle(),\n\t        {\n\t          fill: getStrokeColor(element, defaultStrokeColor)\n\t        }\n\t      )\n\t    });\n\t  }\n\n\t  function renderLaneLabel(parentGfx, text, element) {\n\t    var textBox = renderLabel(parentGfx, text, {\n\t      box: {\n\t        height: 30,\n\t        width: element.height\n\t      },\n\t      align: 'center-middle',\n\t      style: {\n\t        fill: getStrokeColor(element, defaultStrokeColor)\n\t      }\n\t    });\n\n\t    var top = -1 * element.height;\n\n\t    transform$1(textBox, 0, -top, 270);\n\t  }\n\n\t  function createPathFromConnection(connection) {\n\t    var waypoints = connection.waypoints;\n\n\t    var pathData = 'm  ' + waypoints[0].x + ',' + waypoints[0].y;\n\t    for (var i = 1; i < waypoints.length; i++) {\n\t      pathData += 'L' + waypoints[i].x + ',' + waypoints[i].y + ' ';\n\t    }\n\t    return pathData;\n\t  }\n\n\t  var handlers = this.handlers = {\n\t    'bpmn:Event': function(parentGfx, element, attrs) {\n\n\t      if (!('fillOpacity' in attrs)) {\n\t        attrs.fillOpacity = DEFAULT_FILL_OPACITY;\n\t      }\n\n\t      return drawCircle(parentGfx, element.width, element.height, attrs);\n\t    },\n\t    'bpmn:StartEvent': function(parentGfx, element) {\n\t      var attrs = {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      var semantic = getSemantic(element);\n\n\t      if (!semantic.isInterrupting) {\n\t        attrs = {\n\t          strokeDasharray: '6',\n\t          strokeLinecap: 'round',\n\t          fill: getFillColor(element, defaultFillColor),\n\t          stroke: getStrokeColor(element, defaultStrokeColor)\n\t        };\n\t      }\n\n\t      var circle = renderer('bpmn:Event')(parentGfx, element, attrs);\n\n\t      renderEventContent(element, parentGfx);\n\n\t      return circle;\n\t    },\n\t    'bpmn:MessageEventDefinition': function(parentGfx, element, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_MESSAGE', {\n\t        xScaleFactor: 0.9,\n\t        yScaleFactor: 0.9,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.235,\n\t          my: 0.315\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(element, defaultStrokeColor) : getFillColor(element, defaultFillColor);\n\t      var stroke = isThrowing ? getFillColor(element, defaultFillColor) : getStrokeColor(element, defaultStrokeColor);\n\n\t      var messagePath = drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: stroke\n\t      });\n\n\t      return messagePath;\n\t    },\n\t    'bpmn:TimerEventDefinition': function(parentGfx, element) {\n\t      var circle = drawCircle(parentGfx, element.width, element.height, 0.2 * element.height, {\n\t        strokeWidth: 2,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var pathData = pathMap.getScaledPath('EVENT_TIMER_WH', {\n\t        xScaleFactor: 0.75,\n\t        yScaleFactor: 0.75,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.5,\n\t          my: 0.5\n\t        }\n\t      });\n\n\t      drawPath(parentGfx, pathData, {\n\t        strokeWidth: 2,\n\t        strokeLinecap: 'square',\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      for (var i = 0;i < 12; i++) {\n\n\t        var linePathData = pathMap.getScaledPath('EVENT_TIMER_LINE', {\n\t          xScaleFactor: 0.75,\n\t          yScaleFactor: 0.75,\n\t          containerWidth: element.width,\n\t          containerHeight: element.height,\n\t          position: {\n\t            mx: 0.5,\n\t            my: 0.5\n\t          }\n\t        });\n\n\t        var width = element.width / 2;\n\t        var height = element.height / 2;\n\n\t        drawPath(parentGfx, linePathData, {\n\t          strokeWidth: 1,\n\t          strokeLinecap: 'square',\n\t          transform: 'rotate(' + (i * 30) + ',' + height + ',' + width + ')',\n\t          stroke: getStrokeColor(element, defaultStrokeColor)\n\t        });\n\t      }\n\n\t      return circle;\n\t    },\n\t    'bpmn:EscalationEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_ESCALATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.5,\n\t          my: 0.2\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:ConditionalEventDefinition': function(parentGfx, event) {\n\t      var pathData = pathMap.getScaledPath('EVENT_CONDITIONAL', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.5,\n\t          my: 0.222\n\t        }\n\t      });\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:LinkEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_LINK', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.57,\n\t          my: 0.263\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:ErrorEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_ERROR', {\n\t        xScaleFactor: 1.1,\n\t        yScaleFactor: 1.1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.2,\n\t          my: 0.722\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:CancelEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_CANCEL_45', {\n\t        xScaleFactor: 1.0,\n\t        yScaleFactor: 1.0,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.638,\n\t          my: -0.055\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      var path = drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\n\t      rotate(path, 45);\n\n\t      return path;\n\t    },\n\t    'bpmn:CompensateEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_COMPENSATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.22,\n\t          my: 0.5\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:SignalEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_SIGNAL', {\n\t        xScaleFactor: 0.9,\n\t        yScaleFactor: 0.9,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.5,\n\t          my: 0.2\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill,\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:MultipleEventDefinition': function(parentGfx, event, isThrowing) {\n\t      var pathData = pathMap.getScaledPath('EVENT_MULTIPLE', {\n\t        xScaleFactor: 1.1,\n\t        yScaleFactor: 1.1,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.222,\n\t          my: 0.36\n\t        }\n\t      });\n\n\t      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: fill\n\t      });\n\t    },\n\t    'bpmn:ParallelMultipleEventDefinition': function(parentGfx, event) {\n\t      var pathData = pathMap.getScaledPath('EVENT_PARALLEL_MULTIPLE', {\n\t        xScaleFactor: 1.2,\n\t        yScaleFactor: 1.2,\n\t        containerWidth: event.width,\n\t        containerHeight: event.height,\n\t        position: {\n\t          mx: 0.458,\n\t          my: 0.194\n\t        }\n\t      });\n\n\t      return drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getStrokeColor(event, defaultStrokeColor),\n\t        stroke: getStrokeColor(event, defaultStrokeColor)\n\t      });\n\t    },\n\t    'bpmn:EndEvent': function(parentGfx, element) {\n\t      var circle = renderer('bpmn:Event')(parentGfx, element, {\n\t        strokeWidth: 4,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      renderEventContent(element, parentGfx);\n\n\t      return circle;\n\t    },\n\t    'bpmn:TerminateEventDefinition': function(parentGfx, element) {\n\t      var circle = drawCircle(parentGfx, element.width, element.height, 8, {\n\t        strokeWidth: 4,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return circle;\n\t    },\n\t    'bpmn:IntermediateEvent': function(parentGfx, element) {\n\t      var outer = renderer('bpmn:Event')(parentGfx, element, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      /* inner */\n\t      drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, 'none'),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      renderEventContent(element, parentGfx);\n\n\t      return outer;\n\t    },\n\t    'bpmn:IntermediateCatchEvent': as('bpmn:IntermediateEvent'),\n\t    'bpmn:IntermediateThrowEvent': as('bpmn:IntermediateEvent'),\n\n\t    'bpmn:Activity': function(parentGfx, element, attrs) {\n\n\t      attrs = attrs || {};\n\n\t      if (!('fillOpacity' in attrs)) {\n\t        attrs.fillOpacity = DEFAULT_FILL_OPACITY;\n\t      }\n\n\t      return drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, attrs);\n\t    },\n\n\t    'bpmn:Task': function(parentGfx, element) {\n\t      var attrs = {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);\n\n\t      renderEmbeddedLabel(parentGfx, element, 'center-middle');\n\t      attachTaskMarkers(parentGfx, element);\n\n\t      return rect;\n\t    },\n\t    'bpmn:ServiceTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var pathDataBG = pathMap.getScaledPath('TASK_TYPE_SERVICE', {\n\t        abspos: {\n\t          x: 12,\n\t          y: 18\n\t        }\n\t      });\n\n\t      /* service bg */ drawPath(parentGfx, pathDataBG, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var fillPathData = pathMap.getScaledPath('TASK_TYPE_SERVICE_FILL', {\n\t        abspos: {\n\t          x: 17.2,\n\t          y: 18\n\t        }\n\t      });\n\n\t      /* service fill */ drawPath(parentGfx, fillPathData, {\n\t        strokeWidth: 0,\n\t        fill: getFillColor(element, defaultFillColor)\n\t      });\n\n\t      var pathData = pathMap.getScaledPath('TASK_TYPE_SERVICE', {\n\t        abspos: {\n\t          x: 17,\n\t          y: 22\n\t        }\n\t      });\n\n\t      /* service */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:UserTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var x = 15;\n\t      var y = 12;\n\n\t      var pathData = pathMap.getScaledPath('TASK_TYPE_USER_1', {\n\t        abspos: {\n\t          x: x,\n\t          y: y\n\t        }\n\t      });\n\n\t      /* user path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 0.5,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var pathData2 = pathMap.getScaledPath('TASK_TYPE_USER_2', {\n\t        abspos: {\n\t          x: x,\n\t          y: y\n\t        }\n\t      });\n\n\t      /* user2 path */ drawPath(parentGfx, pathData2, {\n\t        strokeWidth: 0.5,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var pathData3 = pathMap.getScaledPath('TASK_TYPE_USER_3', {\n\t        abspos: {\n\t          x: x,\n\t          y: y\n\t        }\n\t      });\n\n\t      /* user3 path */ drawPath(parentGfx, pathData3, {\n\t        strokeWidth: 0.5,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:ManualTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('TASK_TYPE_MANUAL', {\n\t        abspos: {\n\t          x: 17,\n\t          y: 15\n\t        }\n\t      });\n\n\t      /* manual path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 0.5, // 0.25,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:SendTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: 21,\n\t        containerHeight: 14,\n\t        position: {\n\t          mx: 0.285,\n\t          my: 0.357\n\t        }\n\t      });\n\n\t      /* send path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getFillColor(element, defaultFillColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:ReceiveTask' : function(parentGfx, element) {\n\t      var semantic = getSemantic(element);\n\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\t      var pathData;\n\n\t      if (semantic.instantiate) {\n\t        drawCircle(parentGfx, 28, 28, 20 * 0.22, { strokeWidth: 1 });\n\n\t        pathData = pathMap.getScaledPath('TASK_TYPE_INSTANTIATING_SEND', {\n\t          abspos: {\n\t            x: 7.77,\n\t            y: 9.52\n\t          }\n\t        });\n\t      } else {\n\n\t        pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {\n\t          xScaleFactor: 0.9,\n\t          yScaleFactor: 0.9,\n\t          containerWidth: 21,\n\t          containerHeight: 14,\n\t          position: {\n\t            mx: 0.3,\n\t            my: 0.4\n\t          }\n\t        });\n\t      }\n\n\t      /* receive path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:ScriptTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('TASK_TYPE_SCRIPT', {\n\t        abspos: {\n\t          x: 15,\n\t          y: 20\n\t        }\n\t      });\n\n\t      /* script path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:BusinessRuleTask': function(parentGfx, element) {\n\t      var task = renderer('bpmn:Task')(parentGfx, element);\n\n\t      var headerPathData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_HEADER', {\n\t        abspos: {\n\t          x: 8,\n\t          y: 8\n\t        }\n\t      });\n\n\t      var businessHeaderPath = drawPath(parentGfx, headerPathData);\n\t      attr$1(businessHeaderPath, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, '#aaaaaa'),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var headerData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_MAIN', {\n\t        abspos: {\n\t          x: 8,\n\t          y: 8\n\t        }\n\t      });\n\n\t      var businessPath = drawPath(parentGfx, headerData);\n\t      attr$1(businessPath, {\n\t        strokeWidth: 1,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return task;\n\t    },\n\t    'bpmn:SubProcess': function(parentGfx, element, attrs) {\n\t      attrs = assign({\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      }, attrs);\n\n\t      var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);\n\n\t      var expanded = isExpanded(element);\n\n\t      if (isEventSubProcess(element)) {\n\t        attr$1(rect, {\n\t          strokeDasharray: '1,2'\n\t        });\n\t      }\n\n\t      renderEmbeddedLabel(parentGfx, element, expanded ? 'center-top' : 'center-middle');\n\n\t      if (expanded) {\n\t        attachTaskMarkers(parentGfx, element);\n\t      } else {\n\t        attachTaskMarkers(parentGfx, element, ['SubProcessMarker']);\n\t      }\n\n\t      return rect;\n\t    },\n\t    'bpmn:AdHocSubProcess': function(parentGfx, element) {\n\t      return renderer('bpmn:SubProcess')(parentGfx, element);\n\t    },\n\t    'bpmn:Transaction': function(parentGfx, element) {\n\t      var outer = renderer('bpmn:SubProcess')(parentGfx, element);\n\n\t      var innerAttrs = styles.style([ 'no-fill', 'no-events' ], {\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      /* inner path */ drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS - 2, INNER_OUTER_DIST, innerAttrs);\n\n\t      return outer;\n\t    },\n\t    'bpmn:CallActivity': function(parentGfx, element) {\n\t      return renderer('bpmn:SubProcess')(parentGfx, element, {\n\t        strokeWidth: 5\n\t      });\n\t    },\n\t    'bpmn:Participant': function(parentGfx, element) {\n\n\t      var attrs = {\n\t        fillOpacity: DEFAULT_FILL_OPACITY,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      var lane = renderer('bpmn:Lane')(parentGfx, element, attrs);\n\n\t      var expandedPool = isExpanded(element);\n\n\t      if (expandedPool) {\n\t        drawLine(parentGfx, [\n\t          { x: 30, y: 0 },\n\t          { x: 30, y: element.height }\n\t        ], {\n\t          stroke: getStrokeColor(element, defaultStrokeColor)\n\t        });\n\t        var text = getSemantic(element).name;\n\t        renderLaneLabel(parentGfx, text, element);\n\t      } else {\n\n\t        // Collapsed pool draw text inline\n\t        var text2 = getSemantic(element).name;\n\t        renderLabel(parentGfx, text2, {\n\t          box: element, align: 'center-middle',\n\t          style: {\n\t            fill: getStrokeColor(element, defaultStrokeColor)\n\t          }\n\t        });\n\t      }\n\n\t      var participantMultiplicity = !!(getSemantic(element).participantMultiplicity);\n\n\t      if (participantMultiplicity) {\n\t        renderer('ParticipantMultiplicityMarker')(parentGfx, element);\n\t      }\n\n\t      return lane;\n\t    },\n\t    'bpmn:Lane': function(parentGfx, element, attrs) {\n\t      var rect = drawRect(parentGfx, element.width, element.height, 0, assign({\n\t        fill: getFillColor(element, defaultFillColor),\n\t        fillOpacity: HIGH_FILL_OPACITY,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      }, attrs));\n\n\t      var semantic = getSemantic(element);\n\n\t      if (semantic.$type === 'bpmn:Lane') {\n\t        var text = semantic.name;\n\t        renderLaneLabel(parentGfx, text, element);\n\t      }\n\n\t      return rect;\n\t    },\n\t    'bpmn:InclusiveGateway': function(parentGfx, element) {\n\t      var diamond = renderer('bpmn:Gateway')(parentGfx, element);\n\n\t      /* circle path */\n\t      drawCircle(parentGfx, element.width, element.height, element.height * 0.24, {\n\t        strokeWidth: 2.5,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return diamond;\n\t    },\n\t    'bpmn:ExclusiveGateway': function(parentGfx, element) {\n\t      var diamond = renderer('bpmn:Gateway')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('GATEWAY_EXCLUSIVE', {\n\t        xScaleFactor: 0.4,\n\t        yScaleFactor: 0.4,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.32,\n\t          my: 0.3\n\t        }\n\t      });\n\n\t      if ((getDi(element).isMarkerVisible)) {\n\t        drawPath(parentGfx, pathData, {\n\t          strokeWidth: 1,\n\t          fill: getStrokeColor(element, defaultStrokeColor),\n\t          stroke: getStrokeColor(element, defaultStrokeColor)\n\t        });\n\t      }\n\n\t      return diamond;\n\t    },\n\t    'bpmn:ComplexGateway': function(parentGfx, element) {\n\t      var diamond = renderer('bpmn:Gateway')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('GATEWAY_COMPLEX', {\n\t        xScaleFactor: 0.5,\n\t        yScaleFactor:0.5,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.46,\n\t          my: 0.26\n\t        }\n\t      });\n\n\t      /* complex path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return diamond;\n\t    },\n\t    'bpmn:ParallelGateway': function(parentGfx, element) {\n\t      var diamond = renderer('bpmn:Gateway')(parentGfx, element);\n\n\t      var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {\n\t        xScaleFactor: 0.6,\n\t        yScaleFactor:0.6,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.46,\n\t          my: 0.2\n\t        }\n\t      });\n\n\t      /* parallel path */ drawPath(parentGfx, pathData, {\n\t        strokeWidth: 1,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return diamond;\n\t    },\n\t    'bpmn:EventBasedGateway': function(parentGfx, element) {\n\n\t      var semantic = getSemantic(element);\n\n\t      var diamond = renderer('bpmn:Gateway')(parentGfx, element);\n\n\t      /* outer circle path */ drawCircle(parentGfx, element.width, element.height, element.height * 0.20, {\n\t        strokeWidth: 1,\n\t        fill: 'none',\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var type = semantic.eventGatewayType;\n\t      var instantiate = !!semantic.instantiate;\n\n\t      function drawEvent() {\n\n\t        var pathData = pathMap.getScaledPath('GATEWAY_EVENT_BASED', {\n\t          xScaleFactor: 0.18,\n\t          yScaleFactor: 0.18,\n\t          containerWidth: element.width,\n\t          containerHeight: element.height,\n\t          position: {\n\t            mx: 0.36,\n\t            my: 0.44\n\t          }\n\t        });\n\n\t        var attrs = {\n\t          strokeWidth: 2,\n\t          fill: getFillColor(element, 'none'),\n\t          stroke: getStrokeColor(element, defaultStrokeColor)\n\t        };\n\n\t        /* event path */ drawPath(parentGfx, pathData, attrs);\n\t      }\n\n\t      if (type === 'Parallel') {\n\n\t        var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {\n\t          xScaleFactor: 0.4,\n\t          yScaleFactor:0.4,\n\t          containerWidth: element.width,\n\t          containerHeight: element.height,\n\t          position: {\n\t            mx: 0.474,\n\t            my: 0.296\n\t          }\n\t        });\n\n\t        var parallelPath = drawPath(parentGfx, pathData);\n\t        attr$1(parallelPath, {\n\t          strokeWidth: 1,\n\t          fill: 'none'\n\t        });\n\t      } else if (type === 'Exclusive') {\n\n\t        if (!instantiate) {\n\t          var innerCircle = drawCircle(parentGfx, element.width, element.height, element.height * 0.26);\n\t          attr$1(innerCircle, {\n\t            strokeWidth: 1,\n\t            fill: 'none',\n\t            stroke: getStrokeColor(element, defaultStrokeColor)\n\t          });\n\t        }\n\n\t        drawEvent();\n\t      }\n\n\n\t      return diamond;\n\t    },\n\t    'bpmn:Gateway': function(parentGfx, element) {\n\t      var attrs = {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        fillOpacity: DEFAULT_FILL_OPACITY,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      return drawDiamond(parentGfx, element.width, element.height, attrs);\n\t    },\n\t    'bpmn:SequenceFlow': function(parentGfx, element) {\n\t      var pathData = createPathFromConnection(element);\n\n\t      var fill = getFillColor(element, defaultFillColor),\n\t          stroke = getStrokeColor(element, defaultStrokeColor);\n\n\t      var attrs = {\n\t        strokeLinejoin: 'round',\n\t        markerEnd: marker('sequenceflow-end', fill, stroke),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      var path = drawPath(parentGfx, pathData, attrs);\n\n\t      var sequenceFlow = getSemantic(element);\n\n\t      var source;\n\n\t      if (element.source) {\n\t        source = element.source.businessObject;\n\n\t        // conditional flow marker\n\t        if (sequenceFlow.conditionExpression && source.$instanceOf('bpmn:Activity')) {\n\t          attr$1(path, {\n\t            markerStart: marker('conditional-flow-marker', fill, stroke)\n\t          });\n\t        }\n\n\t        // default marker\n\t        if (source.default && (source.$instanceOf('bpmn:Gateway') || source.$instanceOf('bpmn:Activity')) &&\n\t            source.default === sequenceFlow) {\n\t          attr$1(path, {\n\t            markerStart: marker('conditional-default-flow-marker', fill, stroke)\n\t          });\n\t        }\n\t      }\n\n\t      return path;\n\t    },\n\t    'bpmn:Association': function(parentGfx, element, attrs) {\n\n\t      var semantic = getSemantic(element);\n\n\t      var fill = getFillColor(element, defaultFillColor),\n\t          stroke = getStrokeColor(element, defaultStrokeColor);\n\n\t      attrs = assign({\n\t        strokeDasharray: '0.5, 5',\n\t        strokeLinecap: 'round',\n\t        strokeLinejoin: 'round',\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      }, attrs || {});\n\n\t      if (semantic.associationDirection === 'One' ||\n\t          semantic.associationDirection === 'Both') {\n\t        attrs.markerEnd = marker('association-end', fill, stroke);\n\t      }\n\n\t      if (semantic.associationDirection === 'Both') {\n\t        attrs.markerStart = marker('association-start', fill, stroke);\n\t      }\n\n\t      return drawLine(parentGfx, element.waypoints, attrs);\n\t    },\n\t    'bpmn:DataInputAssociation': function(parentGfx, element) {\n\t      var fill = getFillColor(element, defaultFillColor),\n\t          stroke = getStrokeColor(element, defaultStrokeColor);\n\n\t      return renderer('bpmn:Association')(parentGfx, element, {\n\t        markerEnd: marker('association-end', fill, stroke)\n\t      });\n\t    },\n\t    'bpmn:DataOutputAssociation': function(parentGfx, element) {\n\t      var fill = getFillColor(element, defaultFillColor),\n\t          stroke = getStrokeColor(element, defaultStrokeColor);\n\n\t      return renderer('bpmn:Association')(parentGfx, element, {\n\t        markerEnd: marker('association-end', fill, stroke)\n\t      });\n\t    },\n\t    'bpmn:MessageFlow': function(parentGfx, element) {\n\n\t      var semantic = getSemantic(element),\n\t          di = getDi(element);\n\n\t      var fill = getFillColor(element, defaultFillColor),\n\t          stroke = getStrokeColor(element, defaultStrokeColor);\n\n\t      var pathData = createPathFromConnection(element);\n\n\t      var attrs = {\n\t        markerEnd: marker('messageflow-end', fill, stroke),\n\t        markerStart: marker('messageflow-start', fill, stroke),\n\t        strokeDasharray: '10, 12',\n\t        strokeLinecap: 'round',\n\t        strokeLinejoin: 'round',\n\t        strokeWidth: '1.5px',\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      var path = drawPath(parentGfx, pathData, attrs);\n\n\t      if (semantic.messageRef) {\n\t        var midPoint = path.getPointAtLength(path.getTotalLength() / 2);\n\n\t        var markerPathData = pathMap.getScaledPath('MESSAGE_FLOW_MARKER', {\n\t          abspos: {\n\t            x: midPoint.x,\n\t            y: midPoint.y\n\t          }\n\t        });\n\n\t        var messageAttrs = { strokeWidth: 1 };\n\n\t        if (di.messageVisibleKind === 'initiating') {\n\t          messageAttrs.fill = 'white';\n\t          messageAttrs.stroke = 'black';\n\t        } else {\n\t          messageAttrs.fill = '#888';\n\t          messageAttrs.stroke = 'white';\n\t        }\n\n\t        drawPath(parentGfx, markerPathData, messageAttrs);\n\t      }\n\n\t      return path;\n\t    },\n\t    'bpmn:DataObject': function(parentGfx, element) {\n\t      var pathData = pathMap.getScaledPath('DATA_OBJECT_PATH', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.474,\n\t          my: 0.296\n\t        }\n\t      });\n\n\t      var elementObject = drawPath(parentGfx, pathData, {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        fillOpacity: DEFAULT_FILL_OPACITY,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var semantic = getSemantic(element);\n\n\t      if (isCollection(semantic)) {\n\t        renderDataItemCollection(parentGfx, element);\n\t      }\n\n\t      return elementObject;\n\t    },\n\t    'bpmn:DataObjectReference': as('bpmn:DataObject'),\n\t    'bpmn:DataInput': function(parentGfx, element) {\n\n\t      var arrowPathData = pathMap.getRawPath('DATA_ARROW');\n\n\t      // page\n\t      var elementObject = renderer('bpmn:DataObject')(parentGfx, element);\n\n\t      /* input arrow path */ drawPath(parentGfx, arrowPathData, { strokeWidth: 1 });\n\n\t      return elementObject;\n\t    },\n\t    'bpmn:DataOutput': function(parentGfx, element) {\n\t      var arrowPathData = pathMap.getRawPath('DATA_ARROW');\n\n\t      // page\n\t      var elementObject = renderer('bpmn:DataObject')(parentGfx, element);\n\n\t      /* output arrow path */ drawPath(parentGfx, arrowPathData, {\n\t        strokeWidth: 1,\n\t        fill: 'black'\n\t      });\n\n\t      return elementObject;\n\t    },\n\t    'bpmn:DataStoreReference': function(parentGfx, element) {\n\t      var DATA_STORE_PATH = pathMap.getScaledPath('DATA_STORE', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0,\n\t          my: 0.133\n\t        }\n\t      });\n\n\t      var elementStore = drawPath(parentGfx, DATA_STORE_PATH, {\n\t        strokeWidth: 2,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        fillOpacity: DEFAULT_FILL_OPACITY,\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      return elementStore;\n\t    },\n\t    'bpmn:BoundaryEvent': function(parentGfx, element) {\n\n\t      var semantic = getSemantic(element),\n\t          cancel = semantic.cancelActivity;\n\n\t      var attrs = {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      };\n\n\t      if (!cancel) {\n\t        attrs.strokeDasharray = '6';\n\t        attrs.strokeLinecap = 'round';\n\t      }\n\n\t      // apply fillOpacity\n\t      var outerAttrs = assign({}, attrs, {\n\t        fillOpacity: 1\n\t      });\n\n\t      // apply no-fill\n\t      var innerAttrs = assign({}, attrs, {\n\t        fill: 'none'\n\t      });\n\n\t      var outer = renderer('bpmn:Event')(parentGfx, element, outerAttrs);\n\n\t      /* inner path */ drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, innerAttrs);\n\n\t      renderEventContent(element, parentGfx);\n\n\t      return outer;\n\t    },\n\t    'bpmn:Group': function(parentGfx, element) {\n\n\t      var group = drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, {\n\t        stroke: getStrokeColor(element, defaultStrokeColor),\n\t        strokeWidth: 1,\n\t        strokeDasharray: '8,3,1,3',\n\t        fill: 'none',\n\t        pointerEvents: 'none'\n\t      });\n\n\t      return group;\n\t    },\n\t    'label': function(parentGfx, element) {\n\t      return renderExternalLabel(parentGfx, element);\n\t    },\n\t    'bpmn:TextAnnotation': function(parentGfx, element) {\n\t      var style = {\n\t        'fill': 'none',\n\t        'stroke': 'none'\n\t      };\n\n\t      var textElement = drawRect(parentGfx, element.width, element.height, 0, 0, style);\n\n\t      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.0,\n\t          my: 0.0\n\t        }\n\t      });\n\n\t      drawPath(parentGfx, textPathData, {\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      var text = getSemantic(element).text || '';\n\t      renderLabel(parentGfx, text, {\n\t        box: element,\n\t        align: 'left-top',\n\t        padding: 5,\n\t        style: {\n\t          fill: getStrokeColor(element, defaultStrokeColor)\n\t        }\n\t      });\n\n\t      return textElement;\n\t    },\n\t    'ParticipantMultiplicityMarker': function(parentGfx, element) {\n\t      var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2) / element.width),\n\t          my: (element.height - 15) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('participant-multiplicity', parentGfx, markerPath, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    },\n\t    'SubProcessMarker': function(parentGfx, element) {\n\t      var markerRect = drawRect(parentGfx, 14, 14, 0, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\n\t      // Process marker is placed in the middle of the box\n\t      // therefore fixed values can be used here\n\t      translate(markerRect, element.width / 2 - 7.5, element.height - 20);\n\n\t      var markerPath = pathMap.getScaledPath('MARKER_SUB_PROCESS', {\n\t        xScaleFactor: 1.5,\n\t        yScaleFactor: 1.5,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: (element.width / 2 - 7.5) / element.width,\n\t          my: (element.height - 20) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('sub-process', parentGfx, markerPath, {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    },\n\t    'ParallelMarker': function(parentGfx, element, position) {\n\t      var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2 + position.parallel) / element.width),\n\t          my: (element.height - 20) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('parallel', parentGfx, markerPath, {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    },\n\t    'SequentialMarker': function(parentGfx, element, position) {\n\t      var markerPath = pathMap.getScaledPath('MARKER_SEQUENTIAL', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2 + position.seq) / element.width),\n\t          my: (element.height - 19) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('sequential', parentGfx, markerPath, {\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    },\n\t    'CompensationMarker': function(parentGfx, element, position) {\n\t      var markerMath = pathMap.getScaledPath('MARKER_COMPENSATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2 + position.compensation) / element.width),\n\t          my: (element.height - 13) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('compensation', parentGfx, markerMath, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    },\n\t    'LoopMarker': function(parentGfx, element, position) {\n\t      var markerPath = pathMap.getScaledPath('MARKER_LOOP', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2 + position.loop) / element.width),\n\t          my: (element.height - 7) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('loop', parentGfx, markerPath, {\n\t        strokeWidth: 1,\n\t        fill: getFillColor(element, defaultFillColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor),\n\t        strokeLinecap: 'round',\n\t        strokeMiterlimit: 0.5\n\t      });\n\t    },\n\t    'AdhocMarker': function(parentGfx, element, position) {\n\t      var markerPath = pathMap.getScaledPath('MARKER_ADHOC', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: ((element.width / 2 + position.adhoc) / element.width),\n\t          my: (element.height - 15) / element.height\n\t        }\n\t      });\n\n\t      drawMarker('adhoc', parentGfx, markerPath, {\n\t        strokeWidth: 1,\n\t        fill: getStrokeColor(element, defaultStrokeColor),\n\t        stroke: getStrokeColor(element, defaultStrokeColor)\n\t      });\n\t    }\n\t  };\n\n\t  function attachTaskMarkers(parentGfx, element, taskMarkers) {\n\t    var obj = getSemantic(element);\n\n\t    var subprocess = taskMarkers && taskMarkers.indexOf('SubProcessMarker') !== -1;\n\t    var position;\n\n\t    if (subprocess) {\n\t      position = {\n\t        seq: -21,\n\t        parallel: -22,\n\t        compensation: -42,\n\t        loop: -18,\n\t        adhoc: 10\n\t      };\n\t    } else {\n\t      position = {\n\t        seq: -3,\n\t        parallel: -6,\n\t        compensation: -27,\n\t        loop: 0,\n\t        adhoc: 10\n\t      };\n\t    }\n\n\t    forEach(taskMarkers, function(marker) {\n\t      renderer(marker)(parentGfx, element, position);\n\t    });\n\n\t    if (obj.isForCompensation) {\n\t      renderer('CompensationMarker')(parentGfx, element, position);\n\t    }\n\n\t    if (obj.$type === 'bpmn:AdHocSubProcess') {\n\t      renderer('AdhocMarker')(parentGfx, element, position);\n\t    }\n\n\t    var loopCharacteristics = obj.loopCharacteristics,\n\t        isSequential = loopCharacteristics && loopCharacteristics.isSequential;\n\n\t    if (loopCharacteristics) {\n\n\t      if (isSequential === undefined) {\n\t        renderer('LoopMarker')(parentGfx, element, position);\n\t      }\n\n\t      if (isSequential === false) {\n\t        renderer('ParallelMarker')(parentGfx, element, position);\n\t      }\n\n\t      if (isSequential === true) {\n\t        renderer('SequentialMarker')(parentGfx, element, position);\n\t      }\n\t    }\n\t  }\n\n\t  function renderDataItemCollection(parentGfx, element) {\n\n\t    var yPosition = (element.height - 16) / element.height;\n\n\t    var pathData = pathMap.getScaledPath('DATA_OBJECT_COLLECTION_PATH', {\n\t      xScaleFactor: 1,\n\t      yScaleFactor: 1,\n\t      containerWidth: element.width,\n\t      containerHeight: element.height,\n\t      position: {\n\t        mx: 0.451,\n\t        my: yPosition\n\t      }\n\t    });\n\n\t    /* collection path */ drawPath(parentGfx, pathData, {\n\t      strokeWidth: 2\n\t    });\n\t  }\n\n\n\t  // extension API, use at your own risk\n\t  this._drawPath = drawPath;\n\n\t}\n\n\n\tinherits_browser(BpmnRenderer, BaseRenderer);\n\n\tBpmnRenderer.$inject = [\n\t  'config.bpmnRenderer',\n\t  'eventBus',\n\t  'styles',\n\t  'pathMap',\n\t  'canvas',\n\t  'textRenderer'\n\t];\n\n\n\tBpmnRenderer.prototype.canRender = function(element) {\n\t  return is$1(element, 'bpmn:BaseElement');\n\t};\n\n\tBpmnRenderer.prototype.drawShape = function(parentGfx, element) {\n\t  var type = element.type;\n\t  var h = this.handlers[type];\n\n\t  /* jshint -W040 */\n\t  return h(parentGfx, element);\n\t};\n\n\tBpmnRenderer.prototype.drawConnection = function(parentGfx, element) {\n\t  var type = element.type;\n\t  var h = this.handlers[type];\n\n\t  /* jshint -W040 */\n\t  return h(parentGfx, element);\n\t};\n\n\tBpmnRenderer.prototype.getShapePath = function(element) {\n\n\t  if (is$1(element, 'bpmn:Event')) {\n\t    return getCirclePath(element);\n\t  }\n\n\t  if (is$1(element, 'bpmn:Activity')) {\n\t    return getRoundRectPath(element, TASK_BORDER_RADIUS);\n\t  }\n\n\t  if (is$1(element, 'bpmn:Gateway')) {\n\t    return getDiamondPath(element);\n\t  }\n\n\t  return getRectPath(element);\n\t};\n\n\tvar DEFAULT_BOX_PADDING = 0;\n\n\tvar DEFAULT_LABEL_SIZE = {\n\t  width: 150,\n\t  height: 50\n\t};\n\n\n\tfunction parseAlign(align) {\n\n\t  var parts = align.split('-');\n\n\t  return {\n\t    horizontal: parts[0] || 'center',\n\t    vertical: parts[1] || 'top'\n\t  };\n\t}\n\n\tfunction parsePadding(padding) {\n\n\t  if (isObject(padding)) {\n\t    return assign({ top: 0, left: 0, right: 0, bottom: 0 }, padding);\n\t  } else {\n\t    return {\n\t      top: padding,\n\t      left: padding,\n\t      right: padding,\n\t      bottom: padding\n\t    };\n\t  }\n\t}\n\n\tfunction getTextBBox(text, fakeText) {\n\n\t  fakeText.textContent = text;\n\n\t  var textBBox;\n\n\t  try {\n\t    var bbox,\n\t        emptyLine = text === '';\n\n\t    // add dummy text, when line is empty to\n\t    // determine correct height\n\t    fakeText.textContent = emptyLine ? 'dummy' : text;\n\n\t    textBBox = fakeText.getBBox();\n\n\t    // take text rendering related horizontal\n\t    // padding into account\n\t    bbox = {\n\t      width: textBBox.width + textBBox.x * 2,\n\t      height: textBBox.height\n\t    };\n\n\t    if (emptyLine) {\n\n\t      // correct width\n\t      bbox.width = 0;\n\t    }\n\n\t    return bbox;\n\t  } catch (e) {\n\t    return { width: 0, height: 0 };\n\t  }\n\t}\n\n\n\t/**\n\t * Layout the next line and return the layouted element.\n\t *\n\t * Alters the lines passed.\n\t *\n\t * @param  {Array<string>} lines\n\t * @return {Object} the line descriptor, an object { width, height, text }\n\t */\n\tfunction layoutNext(lines, maxWidth, fakeText) {\n\n\t  var originalLine = lines.shift(),\n\t      fitLine = originalLine;\n\n\t  var textBBox;\n\n\t  for (;;) {\n\t    textBBox = getTextBBox(fitLine, fakeText);\n\n\t    textBBox.width = fitLine ? textBBox.width : 0;\n\n\t    // try to fit\n\t    if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {\n\t      return fit(lines, fitLine, originalLine, textBBox);\n\t    }\n\n\t    fitLine = shortenLine(fitLine, textBBox.width, maxWidth);\n\t  }\n\t}\n\n\tfunction fit(lines, fitLine, originalLine, textBBox) {\n\t  if (fitLine.length < originalLine.length) {\n\t    var remainder = originalLine.slice(fitLine.length).trim();\n\n\t    lines.unshift(remainder);\n\t  }\n\n\t  return {\n\t    width: textBBox.width,\n\t    height: textBBox.height,\n\t    text: fitLine\n\t  };\n\t}\n\n\n\t/**\n\t * Shortens a line based on spacing and hyphens.\n\t * Returns the shortened result on success.\n\t *\n\t * @param  {string} line\n\t * @param  {number} maxLength the maximum characters of the string\n\t * @return {string} the shortened string\n\t */\n\tfunction semanticShorten(line, maxLength) {\n\t  var parts = line.split(/(\\s|-)/g),\n\t      part,\n\t      shortenedParts = [],\n\t      length = 0;\n\n\t  // try to shorten via spaces + hyphens\n\t  if (parts.length > 1) {\n\t    while ((part = parts.shift())) {\n\t      if (part.length + length < maxLength) {\n\t        shortenedParts.push(part);\n\t        length += part.length;\n\t      } else {\n\n\t        // remove previous part, too if hyphen does not fit anymore\n\t        if (part === '-') {\n\t          shortenedParts.pop();\n\t        }\n\n\t        break;\n\t      }\n\t    }\n\t  }\n\n\t  return shortenedParts.join('');\n\t}\n\n\n\tfunction shortenLine(line, width, maxWidth) {\n\t  var length = Math.max(line.length * (maxWidth / width), 1);\n\n\t  // try to shorten semantically (i.e. based on spaces and hyphens)\n\t  var shortenedLine = semanticShorten(line, length);\n\n\t  if (!shortenedLine) {\n\n\t    // force shorten by cutting the long word\n\t    shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));\n\t  }\n\n\t  return shortenedLine;\n\t}\n\n\n\tfunction getHelperSvg() {\n\t  var helperSvg = document.getElementById('helper-svg');\n\n\t  if (!helperSvg) {\n\t    helperSvg = create('svg');\n\n\t    attr$1(helperSvg, {\n\t      id: 'helper-svg',\n\t      width: 0,\n\t      height: 0,\n\t      style: 'visibility: hidden; position: fixed'\n\t    });\n\n\t    document.body.appendChild(helperSvg);\n\t  }\n\n\t  return helperSvg;\n\t}\n\n\n\t/**\n\t * Creates a new label utility\n\t *\n\t * @param {Object} config\n\t * @param {Dimensions} config.size\n\t * @param {number} config.padding\n\t * @param {Object} config.style\n\t * @param {string} config.align\n\t */\n\tfunction Text(config) {\n\n\t  this._config = assign({}, {\n\t    size: DEFAULT_LABEL_SIZE,\n\t    padding: DEFAULT_BOX_PADDING,\n\t    style: {},\n\t    align: 'center-top'\n\t  }, config || {});\n\t}\n\n\t/**\n\t * Returns the layouted text as an SVG element.\n\t *\n\t * @param {string} text\n\t * @param {Object} options\n\t *\n\t * @return {SVGElement}\n\t */\n\tText.prototype.createText = function(text, options) {\n\t  return this.layoutText(text, options).element;\n\t};\n\n\t/**\n\t * Returns a labels layouted dimensions.\n\t *\n\t * @param {string} text to layout\n\t * @param {Object} options\n\t *\n\t * @return {Dimensions}\n\t */\n\tText.prototype.getDimensions = function(text, options) {\n\t  return this.layoutText(text, options).dimensions;\n\t};\n\n\t/**\n\t * Creates and returns a label and its bounding box.\n\t *\n\t * @method Text#createText\n\t *\n\t * @param {string} text the text to render on the label\n\t * @param {Object} options\n\t * @param {string} options.align how to align in the bounding box.\n\t *                               Any of { 'center-middle', 'center-top' },\n\t *                               defaults to 'center-top'.\n\t * @param {string} options.style style to be applied to the text\n\t * @param {boolean} options.fitBox indicates if box will be recalculated to\n\t *                                 fit text\n\t *\n\t * @return {Object} { element, dimensions }\n\t */\n\tText.prototype.layoutText = function(text, options) {\n\t  var box = assign({}, this._config.size, options.box),\n\t      style = assign({}, this._config.style, options.style),\n\t      align = parseAlign(options.align || this._config.align),\n\t      padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),\n\t      fitBox = options.fitBox || false;\n\n\t  var lineHeight = getLineHeight(style);\n\n\t  var lines = text.split(/\\r?\\n/g),\n\t      layouted = [];\n\n\t  var maxWidth = box.width - padding.left - padding.right;\n\n\t  // ensure correct rendering by attaching helper text node to invisible SVG\n\t  var helperText = create('text');\n\t  attr$1(helperText, { x: 0, y: 0 });\n\t  attr$1(helperText, style);\n\n\t  var helperSvg = getHelperSvg();\n\n\t  append(helperSvg, helperText);\n\n\t  while (lines.length) {\n\t    layouted.push(layoutNext(lines, maxWidth, helperText));\n\t  }\n\n\t  if (align.vertical === 'middle') {\n\t    padding.top = padding.bottom = 0;\n\t  }\n\n\t  var totalHeight = reduce(layouted, function(sum, line, idx) {\n\t    return sum + (lineHeight || line.height);\n\t  }, 0) + padding.top + padding.bottom;\n\n\t  var maxLineWidth = reduce(layouted, function(sum, line, idx) {\n\t    return line.width > sum ? line.width : sum;\n\t  }, 0);\n\n\t  // the y position of the next line\n\t  var y = padding.top;\n\n\t  if (align.vertical === 'middle') {\n\t    y += (box.height - totalHeight) / 2;\n\t  }\n\n\t  // magic number initial offset\n\t  y -= (lineHeight || layouted[0].height) / 4;\n\n\n\t  var textElement = create('text');\n\n\t  attr$1(textElement, style);\n\n\t  // layout each line taking into account that parent\n\t  // shape might resize to fit text size\n\t  forEach(layouted, function(line) {\n\n\t    var x;\n\n\t    y += (lineHeight || line.height);\n\n\t    switch (align.horizontal) {\n\t    case 'left':\n\t      x = padding.left;\n\t      break;\n\n\t    case 'right':\n\t      x = ((fitBox ? maxLineWidth : maxWidth)\n\t        - padding.right - line.width);\n\t      break;\n\n\t    default:\n\n\t      // aka center\n\t      x = Math.max((((fitBox ? maxLineWidth : maxWidth)\n\t        - line.width) / 2 + padding.left), 0);\n\t    }\n\n\t    var tspan = create('tspan');\n\t    attr$1(tspan, { x: x, y: y });\n\n\t    tspan.textContent = line.text;\n\n\t    append(textElement, tspan);\n\t  });\n\n\t  remove$1(helperText);\n\n\t  var dimensions = {\n\t    width: maxLineWidth,\n\t    height: totalHeight\n\t  };\n\n\t  return {\n\t    dimensions: dimensions,\n\t    element: textElement\n\t  };\n\t};\n\n\n\tfunction getLineHeight(style) {\n\t  if ('fontSize' in style && 'lineHeight' in style) {\n\t    return style.lineHeight * parseInt(style.fontSize, 10);\n\t  }\n\t}\n\n\tvar DEFAULT_FONT_SIZE = 12;\n\tvar LINE_HEIGHT_RATIO = 1.2;\n\n\tvar MIN_TEXT_ANNOTATION_HEIGHT = 30;\n\n\n\tfunction TextRenderer(config) {\n\n\t  var defaultStyle = assign({\n\t    fontFamily: 'Arial, sans-serif',\n\t    fontSize: DEFAULT_FONT_SIZE,\n\t    fontWeight: 'normal',\n\t    lineHeight: LINE_HEIGHT_RATIO\n\t  }, config && config.defaultStyle || {});\n\n\t  var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;\n\n\t  var externalStyle = assign({}, defaultStyle, {\n\t    fontSize: fontSize\n\t  }, config && config.externalStyle || {});\n\n\t  var textUtil = new Text({\n\t    style: defaultStyle\n\t  });\n\n\t  /**\n\t   * Get the new bounds of an externally rendered,\n\t   * layouted label.\n\t   *\n\t   * @param  {Bounds} bounds\n\t   * @param  {string} text\n\t   *\n\t   * @return {Bounds}\n\t   */\n\t  this.getExternalLabelBounds = function(bounds, text) {\n\n\t    var layoutedDimensions = textUtil.getDimensions(text, {\n\t      box: {\n\t        width: 90,\n\t        height: 30,\n\t        x: bounds.width / 2 + bounds.x,\n\t        y: bounds.height / 2 + bounds.y\n\t      },\n\t      style: externalStyle\n\t    });\n\n\t    // resize label shape to fit label text\n\t    return {\n\t      x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),\n\t      y: Math.round(bounds.y),\n\t      width: Math.ceil(layoutedDimensions.width),\n\t      height: Math.ceil(layoutedDimensions.height)\n\t    };\n\n\t  };\n\n\t  /**\n\t   * Get the new bounds of text annotation.\n\t   *\n\t   * @param  {Bounds} bounds\n\t   * @param  {string} text\n\t   *\n\t   * @return {Bounds}\n\t   */\n\t  this.getTextAnnotationBounds = function(bounds, text) {\n\n\t    var layoutedDimensions = textUtil.getDimensions(text, {\n\t      box: bounds,\n\t      style: defaultStyle,\n\t      align: 'left-top',\n\t      padding: 5\n\t    });\n\n\t    return {\n\t      x: bounds.x,\n\t      y: bounds.y,\n\t      width: bounds.width,\n\t      height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))\n\t    };\n\t  };\n\n\t  /**\n\t   * Create a layouted text element.\n\t   *\n\t   * @param {string} text\n\t   * @param {Object} [options]\n\t   *\n\t   * @return {SVGElement} rendered text\n\t   */\n\t  this.createText = function(text, options) {\n\t    return textUtil.createText(text, options || {});\n\t  };\n\n\t  /**\n\t   * Get default text style.\n\t   */\n\t  this.getDefaultStyle = function() {\n\t    return defaultStyle;\n\t  };\n\n\t  /**\n\t   * Get the external text style.\n\t   */\n\t  this.getExternalStyle = function() {\n\t    return externalStyle;\n\t  };\n\n\t}\n\n\tTextRenderer.$inject = [\n\t  'config.textRenderer'\n\t];\n\n\t/**\n\t * Map containing SVG paths needed by BpmnRenderer.\n\t */\n\n\tfunction PathMap() {\n\n\t  /**\n\t   * Contains a map of path elements\n\t   *\n\t   * <h1>Path definition</h1>\n\t   * A parameterized path is defined like this:\n\t   * <pre>\n\t   * 'GATEWAY_PARALLEL': {\n\t   *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +\n\t          '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',\n\t   *   height: 17.5,\n\t   *   width:  17.5,\n\t   *   heightElements: [2.5, 7.5],\n\t   *   widthElements: [2.5, 7.5]\n\t   * }\n\t   * </pre>\n\t   * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling\n\t   * is based on the ratio between the specified height and width in this object and the\n\t   * height and width that is set as scale target (Note x,y coordinates will be scaled with\n\t   * individual ratios).</p>\n\t   * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.\n\t   * The scaling is based on the computed ratios.\n\t   * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using\n\t   * the computed ratio coefficient.\n\t   * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.\n\t   *   <ul>\n\t   *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>\n\t   *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>\n\t   *   </ul>\n\t   *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.\n\t   * </p>\n\t   */\n\t  this.pathMap = {\n\t    'EVENT_MESSAGE': {\n\t      d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [6, 14],\n\t      widthElements: [10.5, 21]\n\t    },\n\t    'EVENT_SIGNAL': {\n\t      d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x1},0 Z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [18],\n\t      widthElements: [10, 20]\n\t    },\n\t    'EVENT_ESCALATION': {\n\t      d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x0},-{e.y1} l -{e.x0},{e.y1} Z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [20, 7],\n\t      widthElements: [8]\n\t    },\n\t    'EVENT_CONDITIONAL': {\n\t      d: 'M {e.x0},{e.y0} l {e.x1},0 l 0,{e.y2} l -{e.x1},0 Z ' +\n\t         'M {e.x2},{e.y3} l {e.x0},0 ' +\n\t         'M {e.x2},{e.y4} l {e.x0},0 ' +\n\t         'M {e.x2},{e.y5} l {e.x0},0 ' +\n\t         'M {e.x2},{e.y6} l {e.x0},0 ' +\n\t         'M {e.x2},{e.y7} l {e.x0},0 ' +\n\t         'M {e.x2},{e.y8} l {e.x0},0 ',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [8.5, 14.5, 18, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5],\n\t      widthElements:  [10.5, 14.5, 12.5]\n\t    },\n\t    'EVENT_LINK': {\n\t      d: 'm {mx},{my} 0,{e.y0} -{e.x1},0 0,{e.y1} {e.x1},0 0,{e.y0} {e.x0},-{e.y2} -{e.x0},-{e.y2} z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [4.4375, 6.75, 7.8125],\n\t      widthElements: [9.84375, 13.5]\n\t    },\n\t    'EVENT_ERROR': {\n\t      d: 'm {mx},{my} {e.x0},-{e.y0} {e.x1},-{e.y1} {e.x2},{e.y2} {e.x3},-{e.y3} -{e.x4},{e.y4} -{e.x5},-{e.y5} z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [0.023, 8.737, 8.151, 16.564, 10.591, 8.714],\n\t      widthElements: [0.085, 6.672, 6.97, 4.273, 5.337, 6.636]\n\t    },\n\t    'EVENT_CANCEL_45': {\n\t      d: 'm {mx},{my} -{e.x1},0 0,{e.x0} {e.x1},0 0,{e.y1} {e.x0},0 ' +\n\t        '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [4.75, 8.5],\n\t      widthElements: [4.75, 8.5]\n\t    },\n\t    'EVENT_COMPENSATION': {\n\t      d: 'm {mx},{my} {e.x0},-{e.y0} 0,{e.y1} z m {e.x1},-{e.y2} {e.x2},-{e.y3} 0,{e.y1} -{e.x2},-{e.y3} z',\n\t      height: 36,\n\t      width: 36,\n\t      heightElements: [6.5, 13, 0.4, 6.1],\n\t      widthElements: [9, 9.3, 8.7]\n\t    },\n\t    'EVENT_TIMER_WH': {\n\t      d: 'M {mx},{my} l {e.x0},-{e.y0} m -{e.x0},{e.y0} l {e.x1},{e.y1} ',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [10, 2],\n\t      widthElements: [3, 7]\n\t    },\n\t    'EVENT_TIMER_LINE': {\n\t      d:  'M {mx},{my} ' +\n\t          'm {e.x0},{e.y0} l -{e.x1},{e.y1} ',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [10, 3],\n\t      widthElements: [0, 0]\n\t    },\n\t    'EVENT_MULTIPLE': {\n\t      d:'m {mx},{my} {e.x1},-{e.y0} {e.x1},{e.y0} -{e.x0},{e.y1} -{e.x2},0 z',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [6.28099, 12.56199],\n\t      widthElements: [3.1405, 9.42149, 12.56198]\n\t    },\n\t    'EVENT_PARALLEL_MULTIPLE': {\n\t      d:'m {mx},{my} {e.x0},0 0,{e.y1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +\n\t        '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',\n\t      height: 36,\n\t      width:  36,\n\t      heightElements: [2.56228, 7.68683],\n\t      widthElements: [2.56228, 7.68683]\n\t    },\n\t    'GATEWAY_EXCLUSIVE': {\n\t      d:'m {mx},{my} {e.x0},{e.y0} {e.x1},{e.y0} {e.x2},0 {e.x4},{e.y2} ' +\n\t                    '{e.x4},{e.y1} {e.x2},0 {e.x1},{e.y3} {e.x0},{e.y3} ' +\n\t                    '{e.x3},0 {e.x5},{e.y1} {e.x5},{e.y2} {e.x3},0 z',\n\t      height: 17.5,\n\t      width:  17.5,\n\t      heightElements: [8.5, 6.5312, -6.5312, -8.5],\n\t      widthElements:  [6.5, -6.5, 3, -3, 5, -5]\n\t    },\n\t    'GATEWAY_PARALLEL': {\n\t      d:'m {mx},{my} 0,{e.y1} -{e.x1},0 0,{e.y0} {e.x1},0 0,{e.y1} {e.x0},0 ' +\n\t        '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',\n\t      height: 30,\n\t      width:  30,\n\t      heightElements: [5, 12.5],\n\t      widthElements: [5, 12.5]\n\t    },\n\t    'GATEWAY_EVENT_BASED': {\n\t      d:'m {mx},{my} {e.x0},{e.y0} {e.x0},{e.y1} {e.x1},{e.y2} {e.x2},0 z',\n\t      height: 11,\n\t      width:  11,\n\t      heightElements: [-6, 6, 12, -12],\n\t      widthElements: [9, -3, -12]\n\t    },\n\t    'GATEWAY_COMPLEX': {\n\t      d:'m {mx},{my} 0,{e.y0} -{e.x0},-{e.y1} -{e.x1},{e.y2} {e.x0},{e.y1} -{e.x2},0 0,{e.y3} ' +\n\t        '{e.x2},0  -{e.x0},{e.y1} l {e.x1},{e.y2} {e.x0},-{e.y1} 0,{e.y0} {e.x3},0 0,-{e.y0} {e.x0},{e.y1} ' +\n\t        '{e.x1},-{e.y2} -{e.x0},-{e.y1} {e.x2},0 0,-{e.y3} -{e.x2},0 {e.x0},-{e.y1} -{e.x1},-{e.y2} ' +\n\t        '-{e.x0},{e.y1} 0,-{e.y0} -{e.x3},0 z',\n\t      height: 17.125,\n\t      width:  17.125,\n\t      heightElements: [4.875, 3.4375, 2.125, 3],\n\t      widthElements: [3.4375, 2.125, 4.875, 3]\n\t    },\n\t    'DATA_OBJECT_PATH': {\n\t      d:'m 0,0 {e.x1},0 {e.x0},{e.y0} 0,{e.y1} -{e.x2},0 0,-{e.y2} {e.x1},0 0,{e.y0} {e.x0},0',\n\t      height: 61,\n\t      width:  51,\n\t      heightElements: [10, 50, 60],\n\t      widthElements: [10, 40, 50, 60]\n\t    },\n\t    'DATA_OBJECT_COLLECTION_PATH': {\n\t      d:'m {mx}, {my} ' +\n\t        'm  0 15  l 0 -15 ' +\n\t        'm  4 15  l 0 -15 ' +\n\t        'm  4 15  l 0 -15 ',\n\t      height: 61,\n\t      width:  51,\n\t      heightElements: [12],\n\t      widthElements: [1, 6, 12, 15]\n\t    },\n\t    'DATA_ARROW': {\n\t      d:'m 5,9 9,0 0,-3 5,5 -5,5 0,-3 -9,0 z',\n\t      height: 61,\n\t      width:  51,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'DATA_STORE': {\n\t      d:'m  {mx},{my} ' +\n\t        'l  0,{e.y2} ' +\n\t        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +\n\t        'l  0,-{e.y2} ' +\n\t        'c -{e.x0},-{e.y1} -{e.x1},-{e.y1} -{e.x2},0' +\n\t        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +\n\t        'm  -{e.x2},{e.y0}' +\n\t        'c  {e.x0},{e.y1} {e.x1},{e.y1} {e.x2},0' +\n\t        'm  -{e.x2},{e.y0}' +\n\t        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0',\n\t      height: 61,\n\t      width:  61,\n\t      heightElements: [7, 10, 45],\n\t      widthElements:  [2, 58, 60]\n\t    },\n\t    'TEXT_ANNOTATION': {\n\t      d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',\n\t      height: 30,\n\t      width: 10,\n\t      heightElements: [30],\n\t      widthElements: [10]\n\t    },\n\t    'MARKER_SUB_PROCESS': {\n\t      d: 'm{mx},{my} m 7,2 l 0,10 m -5,-5 l 10,0',\n\t      height: 10,\n\t      width: 10,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'MARKER_PARALLEL': {\n\t      d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',\n\t      height: 10,\n\t      width: 10,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'MARKER_SEQUENTIAL': {\n\t      d: 'm{mx},{my} m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0',\n\t      height: 10,\n\t      width: 10,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'MARKER_COMPENSATION': {\n\t      d: 'm {mx},{my} 7,-5 0,10 z m 7.1,-0.3 6.9,-4.7 0,10 -6.9,-4.7 z',\n\t      height: 10,\n\t      width: 21,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'MARKER_LOOP': {\n\t      d: 'm {mx},{my} c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 ' +\n\t        '-6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 ' +\n\t        '0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 ' +\n\t        'l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902',\n\t      height: 13.9,\n\t      width: 13.7,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'MARKER_ADHOC': {\n\t      d: 'm {mx},{my} m 0.84461,2.64411 c 1.05533,-1.23780996 2.64337,-2.07882 4.29653,-1.97997996 2.05163,0.0805 ' +\n\t        '3.85579,1.15803 5.76082,1.79107 1.06385,0.34139996 2.24454,0.1438 3.18759,-0.43767 0.61743,-0.33642 ' +\n\t        '1.2775,-0.64078 1.7542,-1.17511 0,0.56023 0,1.12046 0,1.6807 -0.98706,0.96237996 -2.29792,1.62393996 ' +\n\t        '-3.6918,1.66181996 -1.24459,0.0927 -2.46671,-0.2491 -3.59505,-0.74812 -1.35789,-0.55965 ' +\n\t        '-2.75133,-1.33436996 -4.27027,-1.18121996 -1.37741,0.14601 -2.41842,1.13685996 -3.44288,1.96782996 z',\n\t      height: 4,\n\t      width: 15,\n\t      heightElements: [],\n\t      widthElements: []\n\t    },\n\t    'TASK_TYPE_SEND': {\n\t      d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',\n\t      height: 14,\n\t      width:  21,\n\t      heightElements: [6, 14],\n\t      widthElements: [10.5, 21]\n\t    },\n\t    'TASK_TYPE_SCRIPT': {\n\t      d: 'm {mx},{my} c 9.966553,-6.27276 -8.000926,-7.91932 2.968968,-14.938 l -8.802728,0 ' +\n\t        'c -10.969894,7.01868 6.997585,8.66524 -2.968967,14.938 z ' +\n\t        'm -7,-12 l 5,0 ' +\n\t        'm -4.5,3 l 4.5,0 ' +\n\t        'm -3,3 l 5,0' +\n\t        'm -4,3 l 5,0',\n\t      height: 15,\n\t      width:  12.6,\n\t      heightElements: [6, 14],\n\t      widthElements: [10.5, 21]\n\t    },\n\t    'TASK_TYPE_USER_1': {\n\t      d: 'm {mx},{my} c 0.909,-0.845 1.594,-2.049 1.594,-3.385 0,-2.554 -1.805,-4.62199999 ' +\n\t        '-4.357,-4.62199999 -2.55199998,0 -4.28799998,2.06799999 -4.28799998,4.62199999 0,1.348 ' +\n\t        '0.974,2.562 1.89599998,3.405 -0.52899998,0.187 -5.669,2.097 -5.794,4.7560005 v 6.718 ' +\n\t        'h 17 v -6.718 c 0,-2.2980005 -5.5279996,-4.5950005 -6.0509996,-4.7760005 z' +\n\t        'm -8,6 l 0,5.5 m 11,0 l 0,-5'\n\t    },\n\t    'TASK_TYPE_USER_2': {\n\t      d: 'm {mx},{my} m 2.162,1.009 c 0,2.4470005 -2.158,4.4310005 -4.821,4.4310005 ' +\n\t        '-2.66499998,0 -4.822,-1.981 -4.822,-4.4310005 '\n\t    },\n\t    'TASK_TYPE_USER_3': {\n\t      d: 'm {mx},{my} m -6.9,-3.80 c 0,0 2.25099998,-2.358 4.27399998,-1.177 2.024,1.181 4.221,1.537 ' +\n\t        '4.124,0.965 -0.098,-0.57 -0.117,-3.79099999 -4.191,-4.13599999 -3.57499998,0.001 ' +\n\t        '-4.20799998,3.36699999 -4.20699998,4.34799999 z'\n\t    },\n\t    'TASK_TYPE_MANUAL': {\n\t      d: 'm {mx},{my} c 0.234,-0.01 5.604,0.008 8.029,0.004 0.808,0 1.271,-0.172 1.417,-0.752 0.227,-0.898 ' +\n\t        '-0.334,-1.314 -1.338,-1.316 -2.467,-0.01 -7.886,-0.004 -8.108,-0.004 -0.014,-0.079 0.016,-0.533 0,-0.61 ' +\n\t        '0.195,-0.042 8.507,0.006 9.616,0.002 0.877,-0.007 1.35,-0.438 1.353,-1.208 0.003,-0.768 -0.479,-1.09 ' +\n\t        '-1.35,-1.091 -2.968,-0.002 -9.619,-0.013 -9.619,-0.013 v -0.591 c 0,0 5.052,-0.016 7.225,-0.016 ' +\n\t        '0.888,-0.002 1.354,-0.416 1.351,-1.193 -0.006,-0.761 -0.492,-1.196 -1.361,-1.196 -3.473,-0.005 ' +\n\t        '-10.86,-0.003 -11.0829995,-0.003 -0.022,-0.047 -0.045,-0.094 -0.069,-0.139 0.3939995,-0.319 ' +\n\t        '2.0409995,-1.626 2.4149995,-2.017 0.469,-0.4870005 0.519,-1.1650005 0.162,-1.6040005 -0.414,-0.511 ' +\n\t        '-0.973,-0.5 -1.48,-0.236 -1.4609995,0.764 -6.5999995,3.6430005 -7.7329995,4.2710005 -0.9,0.499 ' +\n\t        '-1.516,1.253 -1.882,2.19 -0.37000002,0.95 -0.17,2.01 -0.166,2.979 0.004,0.718 -0.27300002,1.345 ' +\n\t        '-0.055,2.063 0.629,2.087 2.425,3.312 4.859,3.318 4.6179995,0.014 9.2379995,-0.139 13.8569995,-0.158 ' +\n\t        '0.755,-0.004 1.171,-0.301 1.182,-1.033 0.012,-0.754 -0.423,-0.969 -1.183,-0.973 -1.778,-0.01 ' +\n\t        '-5.824,-0.004 -6.04,-0.004 10e-4,-0.084 0.003,-0.586 10e-4,-0.67 z'\n\t    },\n\t    'TASK_TYPE_INSTANTIATING_SEND': {\n\t      d: 'm {mx},{my} l 0,8.4 l 12.6,0 l 0,-8.4 z l 6.3,3.6 l 6.3,-3.6'\n\t    },\n\t    'TASK_TYPE_SERVICE': {\n\t      d: 'm {mx},{my} v -1.71335 c 0.352326,-0.0705 0.703932,-0.17838 1.047628,-0.32133 ' +\n\t        '0.344416,-0.14465 0.665822,-0.32133 0.966377,-0.52145 l 1.19431,1.18005 1.567487,-1.57688 ' +\n\t        '-1.195028,-1.18014 c 0.403376,-0.61394 0.683079,-1.29908 0.825447,-2.01824 l 1.622133,-0.01 ' +\n\t        'v -2.2196 l -1.636514,0.01 c -0.07333,-0.35153 -0.178319,-0.70024 -0.323564,-1.04372 ' +\n\t        '-0.145244,-0.34406 -0.321407,-0.6644 -0.522735,-0.96217 l 1.131035,-1.13631 -1.583305,-1.56293 ' +\n\t        '-1.129598,1.13589 c -0.614052,-0.40108 -1.302883,-0.68093 -2.022633,-0.82247 l 0.0093,-1.61852 ' +\n\t        'h -2.241173 l 0.0042,1.63124 c -0.353763,0.0736 -0.705369,0.17977 -1.049785,0.32371 -0.344415,0.14437 ' +\n\t        '-0.665102,0.32092 -0.9635006,0.52046 l -1.1698628,-1.15823 -1.5667691,1.5792 1.1684265,1.15669 ' +\n\t        'c -0.4026573,0.61283 -0.68308,1.29797 -0.8247287,2.01713 l -1.6588041,0.003 v 2.22174 ' +\n\t        'l 1.6724648,-0.006 c 0.073327,0.35077 0.1797598,0.70243 0.3242851,1.04472 0.1452428,0.34448 ' +\n\t        '0.3214064,0.6644 0.5227339,0.96066 l -1.1993431,1.19723 1.5840256,1.56011 1.1964668,-1.19348 ' +\n\t        'c 0.6140517,0.40346 1.3028827,0.68232 2.0233517,0.82331 l 7.19e-4,1.69892 h 2.226848 z ' +\n\t        'm 0.221462,-3.9957 c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +\n\t        '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +\n\t        '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'\n\t    },\n\t    'TASK_TYPE_SERVICE_FILL': {\n\t      d: 'm {mx},{my} c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +\n\t        '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +\n\t        '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'\n\t    },\n\t    'TASK_TYPE_BUSINESS_RULE_HEADER': {\n\t      d: 'm {mx},{my} 0,4 20,0 0,-4 z'\n\t    },\n\t    'TASK_TYPE_BUSINESS_RULE_MAIN': {\n\t      d: 'm {mx},{my} 0,12 20,0 0,-12 z' +\n\t        'm 0,8 l 20,0 ' +\n\t        'm -13,-4 l 0,8'\n\t    },\n\t    'MESSAGE_FLOW_MARKER': {\n\t      d: 'm {mx},{my} m -10.5 ,-7 l 0,14 l 21,0 l 0,-14 z l 10.5,6 l 10.5,-6'\n\t    }\n\t  };\n\n\t  this.getRawPath = function getRawPath(pathId) {\n\t    return this.pathMap[pathId].d;\n\t  };\n\n\t  /**\n\t   * Scales the path to the given height and width.\n\t   * <h1>Use case</h1>\n\t   * <p>Use case is to scale the content of elements (event, gateways) based\n\t   * on the element bounding box's size.\n\t   * </p>\n\t   * <h1>Why not transform</h1>\n\t   * <p>Scaling a path with transform() will also scale the stroke and IE does not support\n\t   * the option 'non-scaling-stroke' to prevent this.\n\t   * Also there are use cases where only some parts of a path should be\n\t   * scaled.</p>\n\t   *\n\t   * @param {string} pathId The ID of the path.\n\t   * @param {Object} param <p>\n\t   *   Example param object scales the path to 60% size of the container (data.width, data.height).\n\t   *   <pre>\n\t   *   {\n\t   *     xScaleFactor: 0.6,\n\t   *     yScaleFactor:0.6,\n\t   *     containerWidth: data.width,\n\t   *     containerHeight: data.height,\n\t   *     position: {\n\t   *       mx: 0.46,\n\t   *       my: 0.2,\n\t   *     }\n\t   *   }\n\t   *   </pre>\n\t   *   <ul>\n\t   *    <li>targetpathwidth = xScaleFactor * containerWidth</li>\n\t   *    <li>targetpathheight = yScaleFactor * containerHeight</li>\n\t   *    <li>Position is used to set the starting coordinate of the path. M is computed:\n\t    *    <ul>\n\t    *      <li>position.x * containerWidth</li>\n\t    *      <li>position.y * containerHeight</li>\n\t    *    </ul>\n\t    *    Center of the container <pre> position: {\n\t   *       mx: 0.5,\n\t   *       my: 0.5,\n\t   *     }</pre>\n\t   *     Upper left corner of the container\n\t   *     <pre> position: {\n\t   *       mx: 0.0,\n\t   *       my: 0.0,\n\t   *     }</pre>\n\t   *    </li>\n\t   *   </ul>\n\t   * </p>\n\t   *\n\t   */\n\t  this.getScaledPath = function getScaledPath(pathId, param) {\n\t    var rawPath = this.pathMap[pathId];\n\n\t    // positioning\n\t    // compute the start point of the path\n\t    var mx, my;\n\n\t    if (param.abspos) {\n\t      mx = param.abspos.x;\n\t      my = param.abspos.y;\n\t    } else {\n\t      mx = param.containerWidth * param.position.mx;\n\t      my = param.containerHeight * param.position.my;\n\t    }\n\n\t    var coordinates = {}; // map for the scaled coordinates\n\t    if (param.position) {\n\n\t      // path\n\t      var heightRatio = (param.containerHeight / rawPath.height) * param.yScaleFactor;\n\t      var widthRatio = (param.containerWidth / rawPath.width) * param.xScaleFactor;\n\n\n\t      // Apply height ratio\n\t      for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {\n\t        coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;\n\t      }\n\n\t      // Apply width ratio\n\t      for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {\n\t        coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;\n\t      }\n\t    }\n\n\t    // Apply value to raw path\n\t    var path = format(\n\t      rawPath.d, {\n\t        mx: mx,\n\t        my: my,\n\t        e: coordinates\n\t      }\n\t    );\n\t    return path;\n\t  };\n\t}\n\n\t// helpers //////////////////////\n\n\t// copied from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js\n\tvar tokenRegex = /\\{([^}]+)\\}/g,\n\t    objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g; // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\n\tfunction replacer(all, key, obj) {\n\t  var res = obj;\n\t  key.replace(objNotationRegex, function(all, name, quote, quotedName, isFunc) {\n\t    name = name || quotedName;\n\t    if (res) {\n\t      if (name in res) {\n\t        res = res[name];\n\t      }\n\t      typeof res == 'function' && isFunc && (res = res());\n\t    }\n\t  });\n\t  res = (res == null || res == obj ? all : res) + '';\n\n\t  return res;\n\t}\n\n\tfunction format(str, obj) {\n\t  return String(str).replace(tokenRegex, function(all, key) {\n\t    return replacer(all, key, obj);\n\t  });\n\t}\n\n\tvar DrawModule$1 = {\n\t  __init__: [ 'bpmnRenderer' ],\n\t  bpmnRenderer: [ 'type', BpmnRenderer ],\n\t  textRenderer: [ 'type', TextRenderer ],\n\t  pathMap: [ 'type', PathMap ]\n\t};\n\n\t/**\n\t * A simple translation stub to be used for multi-language support\n\t * in diagrams. Can be easily replaced with a more sophisticated\n\t * solution.\n\t *\n\t * @example\n\t *\n\t * // use it inside any diagram component by injecting `translate`.\n\t *\n\t * function MyService(translate) {\n\t *   alert(translate('HELLO {you}', { you: 'You!' }));\n\t * }\n\t *\n\t * @param {string} template to interpolate\n\t * @param {Object} [replacements] a map with substitutes\n\t *\n\t * @return {string} the translated string\n\t */\n\tfunction translate$1(template, replacements) {\n\n\t  replacements = replacements || {};\n\n\t  return template.replace(/{([^}]+)}/g, function(_, key) {\n\t    return replacements[key] || '{' + key + '}';\n\t  });\n\t}\n\n\tvar translate$2 = {\n\t  translate: [ 'value', translate$1 ]\n\t};\n\n\tvar DEFAULT_LABEL_SIZE$1 = {\n\t  width: 90,\n\t  height: 20\n\t};\n\n\tvar FLOW_LABEL_INDENT = 15;\n\n\n\t/**\n\t * Returns true if the given semantic has an external label\n\t *\n\t * @param {BpmnElement} semantic\n\t * @return {boolean} true if has label\n\t */\n\tfunction isLabelExternal(semantic) {\n\t  return is$1(semantic, 'bpmn:Event') ||\n\t         is$1(semantic, 'bpmn:Gateway') ||\n\t         is$1(semantic, 'bpmn:DataStoreReference') ||\n\t         is$1(semantic, 'bpmn:DataObjectReference') ||\n\t         is$1(semantic, 'bpmn:DataInput') ||\n\t         is$1(semantic, 'bpmn:DataOutput') ||\n\t         is$1(semantic, 'bpmn:SequenceFlow') ||\n\t         is$1(semantic, 'bpmn:MessageFlow') ||\n\t         is$1(semantic, 'bpmn:Group');\n\t}\n\n\t/**\n\t * Returns true if the given element has an external label\n\t *\n\t * @param {djs.model.shape} element\n\t * @return {boolean} true if has label\n\t */\n\tfunction hasExternalLabel(element) {\n\t  return isLabel(element.label);\n\t}\n\n\t/**\n\t * Get the position for sequence flow labels\n\t *\n\t * @param  {Array<Point>} waypoints\n\t * @return {Point} the label position\n\t */\n\tfunction getFlowLabelPosition(waypoints) {\n\n\t  // get the waypoints mid\n\t  var mid = waypoints.length / 2 - 1;\n\n\t  var first = waypoints[Math.floor(mid)];\n\t  var second = waypoints[Math.ceil(mid + 0.01)];\n\n\t  // get position\n\t  var position = getWaypointsMid(waypoints);\n\n\t  // calculate angle\n\t  var angle = Math.atan((second.y - first.y) / (second.x - first.x));\n\n\t  var x = position.x,\n\t      y = position.y;\n\n\t  if (Math.abs(angle) < Math.PI / 2) {\n\t    y -= FLOW_LABEL_INDENT;\n\t  } else {\n\t    x += FLOW_LABEL_INDENT;\n\t  }\n\n\t  return { x: x, y: y };\n\t}\n\n\n\t/**\n\t * Get the middle of a number of waypoints\n\t *\n\t * @param  {Array<Point>} waypoints\n\t * @return {Point} the mid point\n\t */\n\tfunction getWaypointsMid(waypoints) {\n\n\t  var mid = waypoints.length / 2 - 1;\n\n\t  var first = waypoints[Math.floor(mid)];\n\t  var second = waypoints[Math.ceil(mid + 0.01)];\n\n\t  return {\n\t    x: first.x + (second.x - first.x) / 2,\n\t    y: first.y + (second.y - first.y) / 2\n\t  };\n\t}\n\n\n\tfunction getExternalLabelMid(element) {\n\n\t  if (element.waypoints) {\n\t    return getFlowLabelPosition(element.waypoints);\n\t  } else if (is$1(element, 'bpmn:Group')) {\n\t    return {\n\t      x: element.x + element.width / 2,\n\t      y: element.y + DEFAULT_LABEL_SIZE$1.height / 2\n\t    };\n\t  } else {\n\t    return {\n\t      x: element.x + element.width / 2,\n\t      y: element.y + element.height + DEFAULT_LABEL_SIZE$1.height / 2\n\t    };\n\t  }\n\t}\n\n\n\t/**\n\t * Returns the bounds of an elements label, parsed from the elements DI or\n\t * generated from its bounds.\n\t *\n\t * @param {BpmnElement} semantic\n\t * @param {djs.model.Base} element\n\t */\n\tfunction getExternalLabelBounds(semantic, element) {\n\n\t  var mid,\n\t      size,\n\t      bounds,\n\t      di = semantic.di,\n\t      label = di.label;\n\n\t  if (label && label.bounds) {\n\t    bounds = label.bounds;\n\n\t    size = {\n\t      width: Math.max(DEFAULT_LABEL_SIZE$1.width, bounds.width),\n\t      height: bounds.height\n\t    };\n\n\t    mid = {\n\t      x: bounds.x + bounds.width / 2,\n\t      y: bounds.y + bounds.height / 2\n\t    };\n\t  } else {\n\n\t    mid = getExternalLabelMid(element);\n\n\t    size = DEFAULT_LABEL_SIZE$1;\n\t  }\n\n\t  return assign({\n\t    x: mid.x - size.width / 2,\n\t    y: mid.y - size.height / 2\n\t  }, size);\n\t}\n\n\tfunction isLabel(element) {\n\t  return element && !!element.labelTarget;\n\t}\n\n\t/**\n\t * Computes the distance between two points\n\t *\n\t * @param  {Point}  p\n\t * @param  {Point}  q\n\t *\n\t * @return {number}  distance\n\t */\n\tfunction pointDistance(a, b) {\n\t  if (!a || !b) {\n\t    return -1;\n\t  }\n\n\t  return Math.sqrt(\n\t    Math.pow(a.x - b.x, 2) +\n\t    Math.pow(a.y - b.y, 2)\n\t  );\n\t}\n\n\n\t/**\n\t * Returns true if the point r is on the line between p and q\n\t *\n\t * @param  {Point}  p\n\t * @param  {Point}  q\n\t * @param  {Point}  r\n\t * @param  {number} [accuracy=5] accuracy for points on line check (lower is better)\n\t *\n\t * @return {boolean}\n\t */\n\tfunction pointsOnLine(p, q, r, accuracy) {\n\n\t  if (typeof accuracy === 'undefined') {\n\t    accuracy = 5;\n\t  }\n\n\t  if (!p || !q || !r) {\n\t    return false;\n\t  }\n\n\t  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n\t      dist = pointDistance(p, q);\n\n\t  // @see http://stackoverflow.com/a/907491/412190\n\t  return Math.abs(val / dist) <= accuracy;\n\t}\n\n\n\tvar ALIGNED_THRESHOLD = 2;\n\n\t/**\n\t * Check whether two points are horizontally or vertically aligned.\n\t *\n\t * @param {Array<Point>|Point}\n\t * @param {Point}\n\t *\n\t * @return {string|boolean}\n\t */\n\tfunction pointsAligned(a, b) {\n\t  var points;\n\n\t  if (isArray(a)) {\n\t    points = a;\n\t  } else {\n\t    points = [ a, b ];\n\t  }\n\n\t  if (pointsAlignedHorizontally(points)) {\n\t    return 'h';\n\t  }\n\n\t  if (pointsAlignedVertically(points)) {\n\t    return 'v';\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction pointsAlignedHorizontally(a, b) {\n\t  var points;\n\n\t  if (isArray(a)) {\n\t    points = a;\n\t  } else {\n\t    points = [ a, b ];\n\t  }\n\n\t  var firstPoint = points.slice().shift();\n\n\t  return every(points, function(point) {\n\t    return Math.abs(firstPoint.y - point.y) <= ALIGNED_THRESHOLD;\n\t  });\n\t}\n\n\tfunction pointsAlignedVertically(a, b) {\n\t  var points;\n\n\t  if (isArray(a)) {\n\t    points = a;\n\t  } else {\n\t    points = [ a, b ];\n\t  }\n\n\t  var firstPoint = points.slice().shift();\n\n\t  return every(points, function(point) {\n\t    return Math.abs(firstPoint.x - point.x) <= ALIGNED_THRESHOLD;\n\t  });\n\t}\n\n\n\n\t/**\n\t * Returns true if the point p is inside the rectangle rect\n\t *\n\t * @param  {Point}  p\n\t * @param  {Rect} rect\n\t * @param  {number} tolerance\n\t *\n\t * @return {boolean}\n\t */\n\tfunction pointInRect(p, rect, tolerance) {\n\t  tolerance = tolerance || 0;\n\n\t  return p.x > rect.x - tolerance &&\n\t         p.y > rect.y - tolerance &&\n\t         p.x < rect.x + rect.width + tolerance &&\n\t         p.y < rect.y + rect.height + tolerance;\n\t}\n\n\t/**\n\t * Returns a point in the middle of points p and q\n\t *\n\t * @param  {Point}  p\n\t * @param  {Point}  q\n\t *\n\t * @return {Point} middle point\n\t */\n\tfunction getMidPoint(p, q) {\n\t  return {\n\t    x: Math.round(p.x + ((q.x - p.x) / 2.0)),\n\t    y: Math.round(p.y + ((q.y - p.y) / 2.0))\n\t  };\n\t}\n\n\t/**\n\t * This file contains source code adapted from Snap.svg (licensed Apache-2.0).\n\t *\n\t * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js\n\t */\n\n\t/* eslint no-fallthrough: \"off\" */\n\n\tvar p2s = /,?([a-z]),?/gi,\n\t    toFloat = parseFloat,\n\t    math = Math,\n\t    PI = math.PI,\n\t    mmin = math.min,\n\t    mmax = math.max,\n\t    pow = math.pow,\n\t    abs = math.abs,\n\t    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    pathValues = /(-?\\d*\\.?\\d*(?:e[-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig;\n\n\tvar isArray$2 = Array.isArray || function(o) { return o instanceof Array; };\n\n\tfunction hasProperty(obj, property) {\n\t  return Object.prototype.hasOwnProperty.call(obj, property);\n\t}\n\n\tfunction clone$1(obj) {\n\n\t  if (typeof obj == 'function' || Object(obj) !== obj) {\n\t    return obj;\n\t  }\n\n\t  var res = new obj.constructor;\n\n\t  for (var key in obj) {\n\t    if (hasProperty(obj, key)) {\n\t      res[key] = clone$1(obj[key]);\n\t    }\n\t  }\n\n\t  return res;\n\t}\n\n\tfunction repush(array, item) {\n\t  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t    return array.push(array.splice(i, 1)[0]);\n\t  }\n\t}\n\n\tfunction cacher(f) {\n\n\t  function newf() {\n\n\t    var arg = Array.prototype.slice.call(arguments, 0),\n\t        args = arg.join('\\u2400'),\n\t        cache = newf.cache = newf.cache || {},\n\t        count = newf.count = newf.count || [];\n\n\t    if (hasProperty(cache, args)) {\n\t      repush(count, args);\n\t      return cache[args];\n\t    }\n\n\t    count.length >= 1e3 && delete cache[count.shift()];\n\t    count.push(args);\n\t    cache[args] = f.apply(0, arg);\n\n\t    return cache[args];\n\t  }\n\t  return newf;\n\t}\n\n\tfunction parsePathString(pathString) {\n\n\t  if (!pathString) {\n\t    return null;\n\t  }\n\n\t  var pth = paths(pathString);\n\n\t  if (pth.arr) {\n\t    return clone$1(pth.arr);\n\t  }\n\n\t  var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },\n\t      data = [];\n\n\t  if (isArray$2(pathString) && isArray$2(pathString[0])) { // rough assumption\n\t    data = clone$1(pathString);\n\t  }\n\n\t  if (!data.length) {\n\n\t    String(pathString).replace(pathCommand, function(a, b, c) {\n\t      var params = [],\n\t          name = b.toLowerCase();\n\n\t      c.replace(pathValues, function(a, b) {\n\t        b && params.push(+b);\n\t      });\n\n\t      if (name == 'm' && params.length > 2) {\n\t        data.push([b].concat(params.splice(0, 2)));\n\t        name = 'l';\n\t        b = b == 'm' ? 'l' : 'L';\n\t      }\n\n\t      while (params.length >= paramCounts[name]) {\n\t        data.push([b].concat(params.splice(0, paramCounts[name])));\n\t        if (!paramCounts[name]) {\n\t          break;\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  data.toString = paths.toString;\n\t  pth.arr = clone$1(data);\n\n\t  return data;\n\t}\n\n\tfunction paths(ps) {\n\t  var p = paths.ps = paths.ps || {};\n\n\t  if (p[ps]) {\n\t    p[ps].sleep = 100;\n\t  } else {\n\t    p[ps] = {\n\t      sleep: 100\n\t    };\n\t  }\n\n\t  setTimeout(function() {\n\t    for (var key in p) {\n\t      if (hasProperty(p, key) && key != ps) {\n\t        p[key].sleep--;\n\t        !p[key].sleep && delete p[key];\n\t      }\n\t    }\n\t  });\n\n\t  return p[ps];\n\t}\n\n\tfunction rectBBox(x, y, width, height) {\n\n\t  if (arguments.length === 1) {\n\t    y = x.y;\n\t    width = x.width;\n\t    height = x.height;\n\t    x = x.x;\n\t  }\n\n\t  return {\n\t    x: x,\n\t    y: y,\n\t    width: width,\n\t    height: height,\n\t    x2: x + width,\n\t    y2: y + height\n\t  };\n\t}\n\n\tfunction pathToString() {\n\t  return this.join(',').replace(p2s, '$1');\n\t}\n\n\tfunction pathClone(pathArray) {\n\t  var res = clone$1(pathArray);\n\t  res.toString = pathToString;\n\t  return res;\n\t}\n\n\tfunction findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t  var t1 = 1 - t,\n\t      t13 = pow(t1, 3),\n\t      t12 = pow(t1, 2),\n\t      t2 = t * t,\n\t      t3 = t2 * t,\n\t      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n\n\t  return {\n\t    x: fixError(x),\n\t    y: fixError(y)\n\t  };\n\t}\n\n\tfunction bezierBBox(points) {\n\n\t  var bbox = curveBBox.apply(null, points);\n\n\t  return rectBBox(\n\t    bbox.x0,\n\t    bbox.y0,\n\t    bbox.x1 - bbox.x0,\n\t    bbox.y1 - bbox.y0\n\t  );\n\t}\n\n\tfunction isPointInsideBBox(bbox, x, y) {\n\t  return x >= bbox.x &&\n\t    x <= bbox.x + bbox.width &&\n\t    y >= bbox.y &&\n\t    y <= bbox.y + bbox.height;\n\t}\n\n\tfunction isBBoxIntersect(bbox1, bbox2) {\n\t  bbox1 = rectBBox(bbox1);\n\t  bbox2 = rectBBox(bbox2);\n\t  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n\t    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n\t    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n\t    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n\t    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n\t    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n\t    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n\t    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n\t    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n\t        || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n\t        || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t}\n\n\tfunction base3(t, p1, p2, p3, p4) {\n\t  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t  return t * t2 - 3 * p1 + 3 * p2;\n\t}\n\n\tfunction bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\n\t  if (z == null) {\n\t    z = 1;\n\t  }\n\n\t  z = z > 1 ? 1 : z < 0 ? 0 : z;\n\n\t  var z2 = z / 2,\n\t      n = 12,\n\t      Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n\t      Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t      sum = 0;\n\n\t  for (var i = 0; i < n; i++) {\n\t    var ct = z2 * Tvalues[i] + z2,\n\t        xbase = base3(ct, x1, x2, x3, x4),\n\t        ybase = base3(ct, y1, y2, y3, y4),\n\t        comb = xbase * xbase + ybase * ybase;\n\n\t    sum += Cvalues[i] * math.sqrt(comb);\n\t  }\n\n\t  return z2 * sum;\n\t}\n\n\n\tfunction intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n\t  if (\n\t    mmax(x1, x2) < mmin(x3, x4) ||\n\t      mmin(x1, x2) > mmax(x3, x4) ||\n\t      mmax(y1, y2) < mmin(y3, y4) ||\n\t      mmin(y1, y2) > mmax(y3, y4)\n\t  ) {\n\t    return;\n\t  }\n\n\t  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t  if (!denominator) {\n\t    return;\n\t  }\n\n\t  var px = fixError(nx / denominator),\n\t      py = fixError(ny / denominator),\n\t      px2 = +px.toFixed(2),\n\t      py2 = +py.toFixed(2);\n\n\t  if (\n\t    px2 < +mmin(x1, x2).toFixed(2) ||\n\t      px2 > +mmax(x1, x2).toFixed(2) ||\n\t      px2 < +mmin(x3, x4).toFixed(2) ||\n\t      px2 > +mmax(x3, x4).toFixed(2) ||\n\t      py2 < +mmin(y1, y2).toFixed(2) ||\n\t      py2 > +mmax(y1, y2).toFixed(2) ||\n\t      py2 < +mmin(y3, y4).toFixed(2) ||\n\t      py2 > +mmax(y3, y4).toFixed(2)\n\t  ) {\n\t    return;\n\t  }\n\n\t  return { x: px, y: py };\n\t}\n\n\tfunction fixError(number) {\n\t  return Math.round(number * 100000000000) / 100000000000;\n\t}\n\n\tfunction findBezierIntersections(bez1, bez2, justCount) {\n\t  var bbox1 = bezierBBox(bez1),\n\t      bbox2 = bezierBBox(bez2);\n\n\t  if (!isBBoxIntersect(bbox1, bbox2)) {\n\t    return justCount ? 0 : [];\n\t  }\n\n\t  // As an optimization, lines will have only 1 segment\n\n\t  var l1 = bezlen.apply(0, bez1),\n\t      l2 = bezlen.apply(0, bez2),\n\t      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,\n\t      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,\n\t      dots1 = [],\n\t      dots2 = [],\n\t      xy = {},\n\t      res = justCount ? 0 : [];\n\n\t  for (var i = 0; i < n1 + 1; i++) {\n\t    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t    dots1.push({ x: p.x, y: p.y, t: i / n1 });\n\t  }\n\n\t  for (i = 0; i < n2 + 1; i++) {\n\t    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t    dots2.push({ x: p.x, y: p.y, t: i / n2 });\n\t  }\n\n\t  for (i = 0; i < n1; i++) {\n\n\t    for (var j = 0; j < n2; j++) {\n\t      var di = dots1[i],\n\t          di1 = dots1[i + 1],\n\t          dj = dots2[j],\n\t          dj1 = dots2[j + 1],\n\t          ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',\n\t          cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',\n\t          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),\n\t          key;\n\n\t      if (is) {\n\t        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);\n\n\t        if (xy[key]) {\n\t          continue;\n\t        }\n\n\t        xy[key] = true;\n\n\t        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n\t        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\n\t          if (justCount) {\n\t            res++;\n\t          } else {\n\t            res.push({\n\t              x: is.x,\n\t              y: is.y,\n\t              t1: t1,\n\t              t2: t2\n\t            });\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return res;\n\t}\n\n\n\t/**\n\t * Find or counts the intersections between two SVG paths.\n\t *\n\t * Returns a number in counting mode and a list of intersections otherwise.\n\t *\n\t * A single intersection entry contains the intersection coordinates (x, y)\n\t * as well as additional information regarding the intersecting segments\n\t * on each path (segment1, segment2) and the relative location of the\n\t * intersection on these segments (t1, t2).\n\t *\n\t * The path may be an SVG path string or a list of path components\n\t * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.\n\t *\n\t * @example\n\t *\n\t * var intersections = findPathIntersections(\n\t *   'M0,0L100,100',\n\t *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]\n\t * );\n\t *\n\t * // intersections = [\n\t * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }\n\t * // ]\n\t *\n\t * @param {String|Array<PathDef>} path1\n\t * @param {String|Array<PathDef>} path2\n\t * @param {Boolean} [justCount=false]\n\t *\n\t * @return {Array<Intersection>|Number}\n\t */\n\tfunction findPathIntersections(path1, path2, justCount) {\n\t  path1 = pathToCurve(path1);\n\t  path2 = pathToCurve(path2);\n\n\t  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t      res = justCount ? 0 : [];\n\n\t  for (var i = 0, ii = path1.length; i < ii; i++) {\n\t    var pi = path1[i];\n\n\t    if (pi[0] == 'M') {\n\t      x1 = x1m = pi[1];\n\t      y1 = y1m = pi[2];\n\t    } else {\n\n\t      if (pi[0] == 'C') {\n\t        bez1 = [x1, y1].concat(pi.slice(1));\n\t        x1 = bez1[6];\n\t        y1 = bez1[7];\n\t      } else {\n\t        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t        x1 = x1m;\n\t        y1 = y1m;\n\t      }\n\n\t      for (var j = 0, jj = path2.length; j < jj; j++) {\n\t        var pj = path2[j];\n\n\t        if (pj[0] == 'M') {\n\t          x2 = x2m = pj[1];\n\t          y2 = y2m = pj[2];\n\t        } else {\n\n\t          if (pj[0] == 'C') {\n\t            bez2 = [x2, y2].concat(pj.slice(1));\n\t            x2 = bez2[6];\n\t            y2 = bez2[7];\n\t          } else {\n\t            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t            x2 = x2m;\n\t            y2 = y2m;\n\t          }\n\n\t          var intr = findBezierIntersections(bez1, bez2, justCount);\n\n\t          if (justCount) {\n\t            res += intr;\n\t          } else {\n\n\t            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t              intr[k].segment1 = i;\n\t              intr[k].segment2 = j;\n\t              intr[k].bez1 = bez1;\n\t              intr[k].bez2 = bez2;\n\t            }\n\n\t            res = res.concat(intr);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return res;\n\t}\n\n\n\tfunction pathToAbsolute(pathArray) {\n\t  var pth = paths(pathArray);\n\n\t  if (pth.abs) {\n\t    return pathClone(pth.abs);\n\t  }\n\n\t  if (!isArray$2(pathArray) || !isArray$2(pathArray && pathArray[0])) { // rough assumption\n\t    pathArray = parsePathString(pathArray);\n\t  }\n\n\t  if (!pathArray || !pathArray.length) {\n\t    return [['M', 0, 0]];\n\t  }\n\n\t  var res = [],\n\t      x = 0,\n\t      y = 0,\n\t      mx = 0,\n\t      my = 0,\n\t      start = 0,\n\t      pa0;\n\n\t  if (pathArray[0][0] == 'M') {\n\t    x = +pathArray[0][1];\n\t    y = +pathArray[0][2];\n\t    mx = x;\n\t    my = y;\n\t    start++;\n\t    res[0] = ['M', x, y];\n\t  }\n\n\t  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t    res.push(r = []);\n\t    pa = pathArray[i];\n\t    pa0 = pa[0];\n\n\t    if (pa0 != pa0.toUpperCase()) {\n\t      r[0] = pa0.toUpperCase();\n\n\t      switch (r[0]) {\n\t      case 'A':\n\t        r[1] = pa[1];\n\t        r[2] = pa[2];\n\t        r[3] = pa[3];\n\t        r[4] = pa[4];\n\t        r[5] = pa[5];\n\t        r[6] = +pa[6] + x;\n\t        r[7] = +pa[7] + y;\n\t        break;\n\t      case 'V':\n\t        r[1] = +pa[1] + y;\n\t        break;\n\t      case 'H':\n\t        r[1] = +pa[1] + x;\n\t        break;\n\t      case 'M':\n\t        mx = +pa[1] + x;\n\t        my = +pa[2] + y;\n\t      default:\n\t        for (var j = 1, jj = pa.length; j < jj; j++) {\n\t          r[j] = +pa[j] + ((j % 2) ? x : y);\n\t        }\n\t      }\n\t    } else {\n\t      for (var k = 0, kk = pa.length; k < kk; k++) {\n\t        r[k] = pa[k];\n\t      }\n\t    }\n\t    pa0 = pa0.toUpperCase();\n\n\t    switch (r[0]) {\n\t    case 'Z':\n\t      x = +mx;\n\t      y = +my;\n\t      break;\n\t    case 'H':\n\t      x = r[1];\n\t      break;\n\t    case 'V':\n\t      y = r[1];\n\t      break;\n\t    case 'M':\n\t      mx = r[r.length - 2];\n\t      my = r[r.length - 1];\n\t    default:\n\t      x = r[r.length - 2];\n\t      y = r[r.length - 1];\n\t    }\n\t  }\n\n\t  res.toString = pathToString;\n\t  pth.abs = pathClone(res);\n\n\t  return res;\n\t}\n\n\tfunction isLine(bez) {\n\t  return (\n\t    bez[0] === bez[2] &&\n\t    bez[1] === bez[3] &&\n\t    bez[4] === bez[6] &&\n\t    bez[5] === bez[7]\n\t  );\n\t}\n\n\tfunction lineToCurve(x1, y1, x2, y2) {\n\t  return [\n\t    x1, y1, x2,\n\t    y2, x2, y2\n\t  ];\n\t}\n\n\tfunction qubicToCurve(x1, y1, ax, ay, x2, y2) {\n\t  var _13 = 1 / 3,\n\t      _23 = 2 / 3;\n\n\t  return [\n\t    _13 * x1 + _23 * ax,\n\t    _13 * y1 + _23 * ay,\n\t    _13 * x2 + _23 * ax,\n\t    _13 * y2 + _23 * ay,\n\t    x2,\n\t    y2\n\t  ];\n\t}\n\n\tfunction arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\n\t  // for more information of where this math came from visit:\n\t  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t  var _120 = PI * 120 / 180,\n\t      rad = PI / 180 * (+angle || 0),\n\t      res = [],\n\t      xy,\n\t      rotate = cacher(function(x, y, rad) {\n\t        var X = x * math.cos(rad) - y * math.sin(rad),\n\t            Y = x * math.sin(rad) + y * math.cos(rad);\n\n\t        return { x: X, y: Y };\n\t      });\n\n\t  if (!recursive) {\n\t    xy = rotate(x1, y1, -rad);\n\t    x1 = xy.x;\n\t    y1 = xy.y;\n\t    xy = rotate(x2, y2, -rad);\n\t    x2 = xy.x;\n\t    y2 = xy.y;\n\n\t    var x = (x1 - x2) / 2,\n\t        y = (y1 - y2) / 2;\n\n\t    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\n\t    if (h > 1) {\n\t      h = math.sqrt(h);\n\t      rx = h * rx;\n\t      ry = h * ry;\n\t    }\n\n\t    var rx2 = rx * rx,\n\t        ry2 = ry * ry,\n\t        k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t            math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t        cx = k * rx * y / ry + (x1 + x2) / 2,\n\t        cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t        f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t    f1 = x1 < cx ? PI - f1 : f1;\n\t    f2 = x2 < cx ? PI - f2 : f2;\n\t    f1 < 0 && (f1 = PI * 2 + f1);\n\t    f2 < 0 && (f2 = PI * 2 + f2);\n\n\t    if (sweep_flag && f1 > f2) {\n\t      f1 = f1 - PI * 2;\n\t    }\n\t    if (!sweep_flag && f2 > f1) {\n\t      f2 = f2 - PI * 2;\n\t    }\n\t  } else {\n\t    f1 = recursive[0];\n\t    f2 = recursive[1];\n\t    cx = recursive[2];\n\t    cy = recursive[3];\n\t  }\n\n\t  var df = f2 - f1;\n\n\t  if (abs(df) > _120) {\n\t    var f2old = f2,\n\t        x2old = x2,\n\t        y2old = y2;\n\n\t    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t    x2 = cx + rx * math.cos(f2);\n\t    y2 = cy + ry * math.sin(f2);\n\t    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t  }\n\n\t  df = f2 - f1;\n\n\t  var c1 = math.cos(f1),\n\t      s1 = math.sin(f1),\n\t      c2 = math.cos(f2),\n\t      s2 = math.sin(f2),\n\t      t = math.tan(df / 4),\n\t      hx = 4 / 3 * rx * t,\n\t      hy = 4 / 3 * ry * t,\n\t      m1 = [x1, y1],\n\t      m2 = [x1 + hx * s1, y1 - hy * c1],\n\t      m3 = [x2 + hx * s2, y2 - hy * c2],\n\t      m4 = [x2, y2];\n\n\t  m2[0] = 2 * m1[0] - m2[0];\n\t  m2[1] = 2 * m1[1] - m2[1];\n\n\t  if (recursive) {\n\t    return [m2, m3, m4].concat(res);\n\t  } else {\n\t    res = [m2, m3, m4].concat(res).join().split(',');\n\t    var newres = [];\n\n\t    for (var i = 0, ii = res.length; i < ii; i++) {\n\t      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t    }\n\n\t    return newres;\n\t  }\n\t}\n\n\t// Returns bounding box of cubic bezier curve.\n\t// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t// Original version: NISHIO Hirokazu\n\t// Modifications: https://github.com/timo22345\n\tfunction curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t  var tvalues = [],\n\t      bounds = [[], []],\n\t      a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n\t  for (var i = 0; i < 2; ++i) {\n\n\t    if (i == 0) {\n\t      b = 6 * x0 - 12 * x1 + 6 * x2;\n\t      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t      c = 3 * x1 - 3 * x0;\n\t    } else {\n\t      b = 6 * y0 - 12 * y1 + 6 * y2;\n\t      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t      c = 3 * y1 - 3 * y0;\n\t    }\n\n\t    if (abs(a) < 1e-12) {\n\n\t      if (abs(b) < 1e-12) {\n\t        continue;\n\t      }\n\n\t      t = -c / b;\n\n\t      if (0 < t && t < 1) {\n\t        tvalues.push(t);\n\t      }\n\n\t      continue;\n\t    }\n\n\t    b2ac = b * b - 4 * c * a;\n\t    sqrtb2ac = math.sqrt(b2ac);\n\n\t    if (b2ac < 0) {\n\t      continue;\n\t    }\n\n\t    t1 = (-b + sqrtb2ac) / (2 * a);\n\n\t    if (0 < t1 && t1 < 1) {\n\t      tvalues.push(t1);\n\t    }\n\n\t    t2 = (-b - sqrtb2ac) / (2 * a);\n\n\t    if (0 < t2 && t2 < 1) {\n\t      tvalues.push(t2);\n\t    }\n\t  }\n\n\t  var j = tvalues.length,\n\t      jlen = j,\n\t      mt;\n\n\t  while (j--) {\n\t    t = tvalues[j];\n\t    mt = 1 - t;\n\t    bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t    bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t  }\n\n\t  bounds[0][jlen] = x0;\n\t  bounds[1][jlen] = y0;\n\t  bounds[0][jlen + 1] = x3;\n\t  bounds[1][jlen + 1] = y3;\n\t  bounds[0].length = bounds[1].length = jlen + 2;\n\n\t  return {\n\t    x0: mmin.apply(0, bounds[0]),\n\t    y0: mmin.apply(0, bounds[1]),\n\t    x1: mmax.apply(0, bounds[0]),\n\t    y1: mmax.apply(0, bounds[1])\n\t  };\n\t}\n\n\tfunction pathToCurve(path) {\n\n\t  var pth = paths(path);\n\n\t  // return cached curve, if existing\n\t  if (pth.curve) {\n\t    return pathClone(pth.curve);\n\t  }\n\n\t  var curvedPath = pathToAbsolute(path),\n\t      attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n\t      processPath = function(path, d, pathCommand) {\n\t        var nx, ny;\n\n\t        if (!path) {\n\t          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n\t        }\n\n\t        !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\n\t        switch (path[0]) {\n\t        case 'M':\n\t          d.X = path[1];\n\t          d.Y = path[2];\n\t          break;\n\t        case 'A':\n\t          path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t          break;\n\t        case 'S':\n\t          if (pathCommand == 'C' || pathCommand == 'S') {\n\t            // In 'S' case we have to take into account, if the previous command is C/S.\n\t            nx = d.x * 2 - d.bx;\n\t            // And reflect the previous\n\t            ny = d.y * 2 - d.by;\n\t            // command's control point relative to the current point.\n\t          }\n\t          else {\n\t            // or some else or nothing\n\t            nx = d.x;\n\t            ny = d.y;\n\t          }\n\t          path = ['C', nx, ny].concat(path.slice(1));\n\t          break;\n\t        case 'T':\n\t          if (pathCommand == 'Q' || pathCommand == 'T') {\n\t            // In 'T' case we have to take into account, if the previous command is Q/T.\n\t            d.qx = d.x * 2 - d.qx;\n\t            // And make a reflection similar\n\t            d.qy = d.y * 2 - d.qy;\n\t            // to case 'S'.\n\t          }\n\t          else {\n\t            // or something else or nothing\n\t            d.qx = d.x;\n\t            d.qy = d.y;\n\t          }\n\t          path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t          break;\n\t        case 'Q':\n\t          d.qx = path[1];\n\t          d.qy = path[2];\n\t          path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t          break;\n\t        case 'L':\n\t          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));\n\t          break;\n\t        case 'H':\n\t          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));\n\t          break;\n\t        case 'V':\n\t          path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));\n\t          break;\n\t        case 'Z':\n\t          path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));\n\t          break;\n\t        }\n\n\t        return path;\n\t      },\n\n\t      fixArc = function(pp, i) {\n\n\t        if (pp[i].length > 7) {\n\t          pp[i].shift();\n\t          var pi = pp[i];\n\n\t          while (pi.length) {\n\t            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved\n\t            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n\t          }\n\n\t          pp.splice(i, 1);\n\t          ii = curvedPath.length;\n\t        }\n\t      },\n\n\t      pathCommands = [], // path commands of original path p\n\t      pfirst = '', // temporary holder for original path command\n\t      pathCommand = ''; // holder for previous path command of original path\n\n\t  for (var i = 0, ii = curvedPath.length; i < ii; i++) {\n\t    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command\n\n\t    if (pfirst != 'C') // C is not saved yet, because it may be result of conversion\n\t    {\n\t      pathCommands[i] = pfirst; // Save current path command\n\t      i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand\n\t    }\n\t    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath\n\n\t    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command\n\t    // which may produce multiple C:s\n\t    // so we have to make sure that C is also C in original path\n\n\t    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands\n\n\t    var seg = curvedPath[i],\n\t        seglen = seg.length;\n\n\t    attrs.x = seg[seglen - 2];\n\t    attrs.y = seg[seglen - 1];\n\t    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t  }\n\n\t  // cache curve\n\t  pth.curve = pathClone(curvedPath);\n\n\t  return curvedPath;\n\t}\n\n\tvar intersect = findPathIntersections;\n\n\tfunction roundBounds(bounds) {\n\t  return {\n\t    x: Math.round(bounds.x),\n\t    y: Math.round(bounds.y),\n\t    width: Math.round(bounds.width),\n\t    height: Math.round(bounds.height)\n\t  };\n\t}\n\n\n\tfunction roundPoint(point) {\n\n\t  return {\n\t    x: Math.round(point.x),\n\t    y: Math.round(point.y)\n\t  };\n\t}\n\n\n\t/**\n\t * Convert the given bounds to a { top, left, bottom, right } descriptor.\n\t *\n\t * @param {Bounds|Point} bounds\n\t *\n\t * @return {Object}\n\t */\n\tfunction asTRBL(bounds) {\n\t  return {\n\t    top: bounds.y,\n\t    right: bounds.x + (bounds.width || 0),\n\t    bottom: bounds.y + (bounds.height || 0),\n\t    left: bounds.x\n\t  };\n\t}\n\n\n\t/**\n\t * Convert a { top, left, bottom, right } to an objects bounds.\n\t *\n\t * @param {Object} trbl\n\t *\n\t * @return {Bounds}\n\t */\n\tfunction asBounds(trbl) {\n\t  return {\n\t    x: trbl.left,\n\t    y: trbl.top,\n\t    width: trbl.right - trbl.left,\n\t    height: trbl.bottom - trbl.top\n\t  };\n\t}\n\n\n\t/**\n\t * Get the mid of the given bounds or point.\n\t *\n\t * @param {Bounds|Point} bounds\n\t *\n\t * @return {Point}\n\t */\n\tfunction getMid(bounds) {\n\t  return roundPoint({\n\t    x: bounds.x + (bounds.width || 0) / 2,\n\t    y: bounds.y + (bounds.height || 0) / 2\n\t  });\n\t}\n\n\n\t// orientation utils //////////////////////\n\n\t/**\n\t * Get orientation of the given rectangle with respect to\n\t * the reference rectangle.\n\t *\n\t * A padding (positive or negative) may be passed to influence\n\t * horizontal / vertical orientation and intersection.\n\t *\n\t * @param {Bounds} rect\n\t * @param {Bounds} reference\n\t * @param {Point|number} padding\n\t *\n\t * @return {string} the orientation; one of top, top-left, left, ..., bottom, right or intersect.\n\t */\n\tfunction getOrientation(rect, reference, padding) {\n\n\t  padding = padding || 0;\n\n\t  // make sure we can use an object, too\n\t  // for individual { x, y } padding\n\t  if (!isObject(padding)) {\n\t    padding = { x: padding, y: padding };\n\t  }\n\n\n\t  var rectOrientation = asTRBL(rect),\n\t      referenceOrientation = asTRBL(reference);\n\n\t  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,\n\t      right = rectOrientation.left - padding.x >= referenceOrientation.right,\n\t      bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,\n\t      left = rectOrientation.right + padding.x <= referenceOrientation.left;\n\n\t  var vertical = top ? 'top' : (bottom ? 'bottom' : null),\n\t      horizontal = left ? 'left' : (right ? 'right' : null);\n\n\t  if (horizontal && vertical) {\n\t    return vertical + '-' + horizontal;\n\t  } else {\n\t    return horizontal || vertical || 'intersect';\n\t  }\n\t}\n\n\n\t// intersection utils //////////////////////\n\n\t/**\n\t * Get intersection between an element and a line path.\n\t *\n\t * @param {PathDef} elementPath\n\t * @param {PathDef} linePath\n\t * @param {boolean} cropStart crop from start or end\n\t *\n\t * @return {Point}\n\t */\n\tfunction getElementLineIntersection(elementPath, linePath, cropStart) {\n\n\t  var intersections = getIntersections(elementPath, linePath);\n\n\t  // recognize intersections\n\t  // only one -> choose\n\t  // two close together -> choose first\n\t  // two or more distinct -> pull out appropriate one\n\t  // none -> ok (fallback to point itself)\n\t  if (intersections.length === 1) {\n\t    return roundPoint(intersections[0]);\n\t  } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {\n\t    return roundPoint(intersections[0]);\n\t  } else if (intersections.length > 1) {\n\n\t    // sort by intersections based on connection segment +\n\t    // distance from start\n\t    intersections = sortBy(intersections, function(i) {\n\t      var distance = Math.floor(i.t2 * 100) || 1;\n\n\t      distance = 100 - distance;\n\n\t      distance = (distance < 10 ? '0' : '') + distance;\n\n\t      // create a sort string that makes sure we sort\n\t      // line segment ASC + line segment position DESC (for cropStart)\n\t      // line segment ASC + line segment position ASC (for cropEnd)\n\t      return i.segment2 + '#' + distance;\n\t    });\n\n\t    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);\n\t  }\n\n\t  return null;\n\t}\n\n\n\tfunction getIntersections(a, b) {\n\t  return intersect(a, b);\n\t}\n\n\n\tfunction filterRedundantWaypoints(waypoints) {\n\n\t  // alter copy of waypoints, not original\n\t  waypoints = waypoints.slice();\n\n\t  var idx = 0,\n\t      point,\n\t      previousPoint,\n\t      nextPoint;\n\n\t  while (waypoints[idx]) {\n\t    point = waypoints[idx];\n\t    previousPoint = waypoints[idx - 1];\n\t    nextPoint = waypoints[idx + 1];\n\n\t    if (pointDistance(point, nextPoint) === 0 ||\n\t        pointsOnLine(previousPoint, nextPoint, point)) {\n\n\t      // remove point, if overlapping with {nextPoint}\n\t      // or on line with {previousPoint} -> {point} -> {nextPoint}\n\t      waypoints.splice(idx, 1);\n\t    } else {\n\t      idx++;\n\t    }\n\t  }\n\n\t  return waypoints;\n\t}\n\n\tfunction elementData(semantic, attrs) {\n\t  return assign({\n\t    id: semantic.id,\n\t    type: semantic.$type,\n\t    businessObject: semantic\n\t  }, attrs);\n\t}\n\n\tfunction getWaypoints(bo, source, target) {\n\n\t  var waypoints = bo.di.waypoint;\n\n\t  if (!waypoints || waypoints.length < 2) {\n\t    return [ getMid(source), getMid(target) ];\n\t  }\n\n\t  return waypoints.map(function(p) {\n\t    return { x: p.x, y: p.y };\n\t  });\n\t}\n\n\tfunction notYetDrawn(translate, semantic, refSemantic, property) {\n\t  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {\n\t    element: elementToString(refSemantic),\n\t    referenced: elementToString(semantic),\n\t    property: property\n\t  }));\n\t}\n\n\n\t/**\n\t * An importer that adds bpmn elements to the canvas\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {ElementFactory} elementFactory\n\t * @param {ElementRegistry} elementRegistry\n\t * @param {Function} translate\n\t * @param {TextRenderer} textRenderer\n\t */\n\tfunction BpmnImporter(\n\t    eventBus, canvas, elementFactory,\n\t    elementRegistry, translate, textRenderer) {\n\n\t  this._eventBus = eventBus;\n\t  this._canvas = canvas;\n\t  this._elementFactory = elementFactory;\n\t  this._elementRegistry = elementRegistry;\n\t  this._translate = translate;\n\t  this._textRenderer = textRenderer;\n\t}\n\n\tBpmnImporter.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'elementFactory',\n\t  'elementRegistry',\n\t  'translate',\n\t  'textRenderer'\n\t];\n\n\n\t/**\n\t * Add bpmn element (semantic) to the canvas onto the\n\t * specified parent shape.\n\t */\n\tBpmnImporter.prototype.add = function(semantic, parentElement) {\n\n\t  var di = semantic.di,\n\t      element,\n\t      translate = this._translate,\n\t      hidden;\n\n\t  var parentIndex;\n\n\t  // ROOT ELEMENT\n\t  // handle the special case that we deal with a\n\t  // invisible root element (process or collaboration)\n\t  if (is$1(di, 'bpmndi:BPMNPlane')) {\n\n\t    // add a virtual element (not being drawn)\n\t    element = this._elementFactory.createRoot(elementData(semantic));\n\n\t    this._canvas.setRootElement(element);\n\t  }\n\n\t  // SHAPE\n\t  else if (is$1(di, 'bpmndi:BPMNShape')) {\n\n\t    var collapsed = !isExpanded(semantic),\n\t        isFrame = isFrameElement$1(semantic);\n\t    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n\t    var bounds = semantic.di.bounds;\n\n\t    element = this._elementFactory.createShape(elementData(semantic, {\n\t      collapsed: collapsed,\n\t      hidden: hidden,\n\t      x: Math.round(bounds.x),\n\t      y: Math.round(bounds.y),\n\t      width: Math.round(bounds.width),\n\t      height: Math.round(bounds.height),\n\t      isFrame: isFrame\n\t    }));\n\n\t    if (is$1(semantic, 'bpmn:BoundaryEvent')) {\n\t      this._attachBoundary(semantic, element);\n\t    }\n\n\t    // insert lanes behind other flow nodes (cf. #727)\n\t    if (is$1(semantic, 'bpmn:Lane')) {\n\t      parentIndex = 0;\n\t    }\n\n\t    if (is$1(semantic, 'bpmn:DataStoreReference')) {\n\n\t      // check whether data store is inside our outside of its semantic parent\n\t      if (!isPointInsideBBox$1(parentElement, getMid(bounds))) {\n\t        parentElement = this._canvas.getRootElement();\n\t      }\n\t    }\n\n\t    this._canvas.addShape(element, parentElement, parentIndex);\n\t  }\n\n\t  // CONNECTION\n\t  else if (is$1(di, 'bpmndi:BPMNEdge')) {\n\n\t    var source = this._getSource(semantic),\n\t        target = this._getTarget(semantic);\n\n\t    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n\t    element = this._elementFactory.createConnection(elementData(semantic, {\n\t      hidden: hidden,\n\t      source: source,\n\t      target: target,\n\t      waypoints: getWaypoints(semantic, source, target)\n\t    }));\n\n\t    if (is$1(semantic, 'bpmn:DataAssociation')) {\n\n\t      // render always on top; this ensures DataAssociations\n\t      // are rendered correctly across different \"hacks\" people\n\t      // love to model such as cross participant / sub process\n\t      // associations\n\t      parentElement = null;\n\t    }\n\n\t    // insert sequence flows behind other flow nodes (cf. #727)\n\t    if (is$1(semantic, 'bpmn:SequenceFlow')) {\n\t      parentIndex = 0;\n\t    }\n\n\t    this._canvas.addConnection(element, parentElement, parentIndex);\n\t  } else {\n\t    throw new Error(translate('unknown di {di} for element {semantic}', {\n\t      di: elementToString(di),\n\t      semantic: elementToString(semantic)\n\t    }));\n\t  }\n\n\t  // (optional) LABEL\n\t  if (isLabelExternal(semantic) && getLabel(element)) {\n\t    this.addLabel(semantic, element);\n\t  }\n\n\n\t  this._eventBus.fire('bpmnElement.added', { element: element });\n\n\t  return element;\n\t};\n\n\n\t/**\n\t * Attach the boundary element to the given host\n\t *\n\t * @param {ModdleElement} boundarySemantic\n\t * @param {djs.model.Base} boundaryElement\n\t */\n\tBpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {\n\t  var translate = this._translate;\n\t  var hostSemantic = boundarySemantic.attachedToRef;\n\n\t  if (!hostSemantic) {\n\t    throw new Error(translate('missing {semantic}#attachedToRef', {\n\t      semantic: elementToString(boundarySemantic)\n\t    }));\n\t  }\n\n\t  var host = this._elementRegistry.get(hostSemantic.id),\n\t      attachers = host && host.attachers;\n\n\t  if (!host) {\n\t    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');\n\t  }\n\n\t  // wire element.host <> host.attachers\n\t  boundaryElement.host = host;\n\n\t  if (!attachers) {\n\t    host.attachers = attachers = [];\n\t  }\n\n\t  if (attachers.indexOf(boundaryElement) === -1) {\n\t    attachers.push(boundaryElement);\n\t  }\n\t};\n\n\n\t/**\n\t * add label for an element\n\t */\n\tBpmnImporter.prototype.addLabel = function(semantic, element) {\n\t  var bounds,\n\t      text,\n\t      label;\n\n\t  bounds = getExternalLabelBounds(semantic, element);\n\n\t  text = getLabel(element);\n\n\t  if (text) {\n\n\t    // get corrected bounds from actual layouted text\n\t    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n\t  }\n\n\t  label = this._elementFactory.createLabel(elementData(semantic, {\n\t    id: semantic.id + '_label',\n\t    labelTarget: element,\n\t    type: 'label',\n\t    hidden: element.hidden || !getLabel(element),\n\t    x: Math.round(bounds.x),\n\t    y: Math.round(bounds.y),\n\t    width: Math.round(bounds.width),\n\t    height: Math.round(bounds.height)\n\t  }));\n\n\t  return this._canvas.addShape(label, element.parent);\n\t};\n\n\t/**\n\t * Return the drawn connection end based on the given side.\n\t *\n\t * @throws {Error} if the end is not yet drawn\n\t */\n\tBpmnImporter.prototype._getEnd = function(semantic, side) {\n\n\t  var element,\n\t      refSemantic,\n\t      type = semantic.$type,\n\t      translate = this._translate;\n\n\t  refSemantic = semantic[side + 'Ref'];\n\n\t  // handle mysterious isMany DataAssociation#sourceRef\n\t  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n\t    refSemantic = refSemantic && refSemantic[0];\n\t  }\n\n\t  // fix source / target for DataInputAssociation / DataOutputAssociation\n\t  if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||\n\t      side === 'target' && type === 'bpmn:DataInputAssociation') {\n\n\t    refSemantic = semantic.$parent;\n\t  }\n\n\t  element = refSemantic && this._getElement(refSemantic);\n\n\t  if (element) {\n\t    return element;\n\t  }\n\n\t  if (refSemantic) {\n\t    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');\n\t  } else {\n\t    throw new Error(translate('{semantic}#{side} Ref not specified', {\n\t      semantic: elementToString(semantic),\n\t      side: side\n\t    }));\n\t  }\n\t};\n\n\tBpmnImporter.prototype._getSource = function(semantic) {\n\t  return this._getEnd(semantic, 'source');\n\t};\n\n\tBpmnImporter.prototype._getTarget = function(semantic) {\n\t  return this._getEnd(semantic, 'target');\n\t};\n\n\n\tBpmnImporter.prototype._getElement = function(semantic) {\n\t  return this._elementRegistry.get(semantic.id);\n\t};\n\n\n\t// helpers ////////////////////\n\n\tfunction isPointInsideBBox$1(bbox, point) {\n\t  var x = point.x,\n\t      y = point.y;\n\n\t  return x >= bbox.x &&\n\t    x <= bbox.x + bbox.width &&\n\t    y >= bbox.y &&\n\t    y <= bbox.y + bbox.height;\n\t}\n\n\tfunction isFrameElement$1(semantic) {\n\t  return is$1(semantic, 'bpmn:Group');\n\t}\n\n\tvar ImportModule = {\n\t  __depends__: [\n\t    translate$2\n\t  ],\n\t  bpmnImporter: [ 'type', BpmnImporter ]\n\t};\n\n\tvar CoreModule$1 = {\n\t  __depends__: [\n\t    DrawModule$1,\n\t    ImportModule\n\t  ]\n\t};\n\n\tfunction __stopPropagation(event) {\n\t  if (!event || typeof event.stopPropagation !== 'function') {\n\t    return;\n\t  }\n\n\t  event.stopPropagation();\n\t}\n\n\n\tfunction getOriginal(event) {\n\t  return event.originalEvent || event.srcEvent;\n\t}\n\n\n\tfunction stopPropagation(event, immediate) {\n\t  __stopPropagation(event);\n\t  __stopPropagation(getOriginal(event));\n\t}\n\n\n\tfunction toPoint(event) {\n\n\t  if (event.pointers && event.pointers.length) {\n\t    event = event.pointers[0];\n\t  }\n\n\t  if (event.touches && event.touches.length) {\n\t    event = event.touches[0];\n\t  }\n\n\t  return event ? {\n\t    x: event.clientX,\n\t    y: event.clientY\n\t  } : null;\n\t}\n\n\tfunction isMac() {\n\t  return (/mac/i).test(navigator.platform);\n\t}\n\n\tfunction isPrimaryButton(event) {\n\n\t  // button === 0 -> left áka primary mouse button\n\t  return !(getOriginal(event) || event).button;\n\t}\n\n\tfunction hasPrimaryModifier(event) {\n\t  var originalEvent = getOriginal(event) || event;\n\n\t  if (!isPrimaryButton(event)) {\n\t    return false;\n\t  }\n\n\t  // Use alt as primary modifier key for mac OS\n\t  if (isMac()) {\n\t    return originalEvent.metaKey;\n\t  } else {\n\t    return originalEvent.ctrlKey;\n\t  }\n\t}\n\n\n\tfunction hasSecondaryModifier(event) {\n\t  var originalEvent = getOriginal(event) || event;\n\n\t  return isPrimaryButton(event) && originalEvent.shiftKey;\n\t}\n\n\tfunction allowAll(e) { return true; }\n\n\tvar LOW_PRIORITY = 500;\n\n\n\t/**\n\t * A plugin that provides interaction events for diagram elements.\n\t *\n\t * It emits the following events:\n\t *\n\t *   * element.click\n\t *   * element.contextmenu\n\t *   * element.dblclick\n\t *   * element.hover\n\t *   * element.mousedown\n\t *   * element.mousemove\n\t *   * element.mouseup\n\t *   * element.out\n\t *\n\t * Each event is a tuple { element, gfx, originalEvent }.\n\t *\n\t * Canceling the event via Event#preventDefault()\n\t * prevents the original DOM operation.\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction InteractionEvents(eventBus, elementRegistry, styles) {\n\n\t  var self = this;\n\n\t  /**\n\t   * Fire an interaction event.\n\t   *\n\t   * @param {string} type local event name, e.g. element.click.\n\t   * @param {DOMEvent} event native event\n\t   * @param {djs.model.Base} [element] the diagram element to emit the event on;\n\t   *                                   defaults to the event target\n\t   */\n\t  function fire(type, event, element) {\n\n\t    if (isIgnored(type, event)) {\n\t      return;\n\t    }\n\n\t    var target, gfx, returnValue;\n\n\t    if (!element) {\n\t      target = event.delegateTarget || event.target;\n\n\t      if (target) {\n\t        gfx = target;\n\t        element = elementRegistry.get(gfx);\n\t      }\n\t    } else {\n\t      gfx = elementRegistry.getGraphics(element);\n\t    }\n\n\t    if (!gfx || !element) {\n\t      return;\n\t    }\n\n\t    returnValue = eventBus.fire(type, {\n\t      element: element,\n\t      gfx: gfx,\n\t      originalEvent: event\n\t    });\n\n\t    if (returnValue === false) {\n\t      event.stopPropagation();\n\t      event.preventDefault();\n\t    }\n\t  }\n\n\t  // TODO(nikku): document this\n\t  var handlers = {};\n\n\t  function mouseHandler(localEventName) {\n\t    return handlers[localEventName];\n\t  }\n\n\t  function isIgnored(localEventName, event) {\n\n\t    var filter = ignoredFilters[localEventName] || isPrimaryButton;\n\n\t    // only react on left mouse button interactions\n\t    // except for interaction events that are enabled\n\t    // for secundary mouse button\n\t    return !filter(event);\n\t  }\n\n\t  var bindings = {\n\t    click: 'element.click',\n\t    contextmenu: 'element.contextmenu',\n\t    dblclick: 'element.dblclick',\n\t    mousedown: 'element.mousedown',\n\t    mousemove: 'element.mousemove',\n\t    mouseover: 'element.hover',\n\t    mouseout: 'element.out',\n\t    mouseup: 'element.mouseup',\n\t  };\n\n\t  var ignoredFilters = {\n\t    'element.contextmenu': allowAll\n\t  };\n\n\n\t  // manual event trigger //////////\n\n\t  /**\n\t   * Trigger an interaction event (based on a native dom event)\n\t   * on the target shape or connection.\n\t   *\n\t   * @param {string} eventName the name of the triggered DOM event\n\t   * @param {MouseEvent} event\n\t   * @param {djs.model.Base} targetElement\n\t   */\n\t  function triggerMouseEvent(eventName, event, targetElement) {\n\n\t    // i.e. element.mousedown...\n\t    var localEventName = bindings[eventName];\n\n\t    if (!localEventName) {\n\t      throw new Error('unmapped DOM event name <' + eventName + '>');\n\t    }\n\n\t    return fire(localEventName, event, targetElement);\n\t  }\n\n\n\t  var ELEMENT_SELECTOR = 'svg, .djs-element';\n\n\t  // event handling ///////\n\n\t  function registerEvent(node, event, localEvent, ignoredFilter) {\n\n\t    var handler = handlers[localEvent] = function(event) {\n\t      fire(localEvent, event);\n\t    };\n\n\t    if (ignoredFilter) {\n\t      ignoredFilters[localEvent] = ignoredFilter;\n\t    }\n\n\t    handler.$delegate = delegateEvents.bind(node, ELEMENT_SELECTOR, event, handler);\n\t  }\n\n\t  function unregisterEvent(node, event, localEvent) {\n\n\t    var handler = mouseHandler(localEvent);\n\n\t    if (!handler) {\n\t      return;\n\t    }\n\n\t    delegateEvents.unbind(node, event, handler.$delegate);\n\t  }\n\n\t  function registerEvents(svg) {\n\t    forEach(bindings, function(val, key) {\n\t      registerEvent(svg, key, val);\n\t    });\n\t  }\n\n\t  function unregisterEvents(svg) {\n\t    forEach(bindings, function(val, key) {\n\t      unregisterEvent(svg, key, val);\n\t    });\n\t  }\n\n\t  eventBus.on('canvas.destroy', function(event) {\n\t    unregisterEvents(event.svg);\n\t  });\n\n\t  eventBus.on('canvas.init', function(event) {\n\t    registerEvents(event.svg);\n\t  });\n\n\n\t  // hit box updating ////////////////\n\n\t  eventBus.on([ 'shape.added', 'connection.added' ], function(event) {\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    eventBus.fire('interactionEvents.createHit', { element: element, gfx: gfx });\n\t  });\n\n\t  // Update djs-hit on change.\n\t  // A low priortity is necessary, because djs-hit of labels has to be updated\n\t  // after the label bounds have been updated in the renderer.\n\t  eventBus.on([\n\t    'shape.changed',\n\t    'connection.changed'\n\t  ], LOW_PRIORITY, function(event) {\n\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    eventBus.fire('interactionEvents.updateHit', { element: element, gfx: gfx });\n\t  });\n\n\t  eventBus.on('interactionEvents.createHit', LOW_PRIORITY, function(event) {\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    self.createDefaultHit(element, gfx);\n\t  });\n\n\t  eventBus.on('interactionEvents.updateHit', function(event) {\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    self.updateDefaultHit(element, gfx);\n\t  });\n\n\n\t  // hit styles ////////////\n\n\t  var STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-stroke');\n\n\t  var CLICK_STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-click-stroke');\n\n\t  var ALL_HIT_STYLE = createHitStyle('djs-hit djs-hit-all');\n\n\t  var HIT_TYPES = {\n\t    'all': ALL_HIT_STYLE,\n\t    'click-stroke': CLICK_STROKE_HIT_STYLE,\n\t    'stroke': STROKE_HIT_STYLE\n\t  };\n\n\t  function createHitStyle(classNames, attrs) {\n\n\t    attrs = assign({\n\t      stroke: 'white',\n\t      strokeWidth: 15\n\t    }, attrs || {});\n\n\t    return styles.cls(classNames, [ 'no-fill', 'no-border' ], attrs);\n\t  }\n\n\n\t  // style helpers ///////////////\n\n\t  function applyStyle(hit, type) {\n\n\t    var attrs = HIT_TYPES[type];\n\n\t    if (!attrs) {\n\t      throw new Error('invalid hit type <' + type + '>');\n\t    }\n\n\t    attr$1(hit, attrs);\n\n\t    return hit;\n\t  }\n\n\t  function appendHit(gfx, hit) {\n\t    append(gfx, hit);\n\t  }\n\n\n\t  // API\n\n\t  /**\n\t   * Remove hints on the given graphics.\n\t   *\n\t   * @param {SVGElement} gfx\n\t   */\n\t  this.removeHits = function(gfx) {\n\t    var hits = all('.djs-hit', gfx);\n\n\t    forEach(hits, remove$1);\n\t  };\n\n\t  /**\n\t   * Create default hit for the given element.\n\t   *\n\t   * @param {djs.model.Base} element\n\t   * @param {SVGElement} gfx\n\t   *\n\t   * @return {SVGElement} created hit\n\t   */\n\t  this.createDefaultHit = function(element, gfx) {\n\t    var waypoints = element.waypoints,\n\t        isFrame = element.isFrame,\n\t        boxType;\n\n\t    if (waypoints) {\n\t      return this.createWaypointsHit(gfx, waypoints);\n\t    } else {\n\n\t      boxType = isFrame ? 'stroke' : 'all';\n\n\t      return this.createBoxHit(gfx, boxType, {\n\t        width: element.width,\n\t        height: element.height\n\t      });\n\t    }\n\t  };\n\n\t  /**\n\t   * Create hits for the given waypoints.\n\t   *\n\t   * @param {SVGElement} gfx\n\t   * @param {Array<Point>} waypoints\n\t   *\n\t   * @return {SVGElement}\n\t   */\n\t  this.createWaypointsHit = function(gfx, waypoints) {\n\n\t    var hit = createLine(waypoints);\n\n\t    applyStyle(hit, 'stroke');\n\n\t    appendHit(gfx, hit);\n\n\t    return hit;\n\t  };\n\n\t  /**\n\t   * Create hits for a box.\n\t   *\n\t   * @param {SVGElement} gfx\n\t   * @param {string} hitType\n\t   * @param {Object} attrs\n\t   *\n\t   * @return {SVGElement}\n\t   */\n\t  this.createBoxHit = function(gfx, type, attrs) {\n\n\t    attrs = assign({\n\t      x: 0,\n\t      y: 0\n\t    }, attrs);\n\n\t    var hit = create('rect');\n\n\t    applyStyle(hit, type);\n\n\t    attr$1(hit, attrs);\n\n\t    appendHit(gfx, hit);\n\n\t    return hit;\n\t  };\n\n\t  /**\n\t   * Update default hit of the element.\n\t   *\n\t   * @param  {djs.model.Base} element\n\t   * @param  {SVGElement} gfx\n\t   *\n\t   * @return {SVGElement} updated hit\n\t   */\n\t  this.updateDefaultHit = function(element, gfx) {\n\n\t    var hit = query('.djs-hit', gfx);\n\n\t    if (!hit) {\n\t      return;\n\t    }\n\n\t    if (element.waypoints) {\n\t      updateLine(hit, element.waypoints);\n\t    } else {\n\t      attr$1(hit, {\n\t        width: element.width,\n\t        height: element.height\n\t      });\n\t    }\n\n\t    return hit;\n\t  };\n\n\t  this.fire = fire;\n\n\t  this.triggerMouseEvent = triggerMouseEvent;\n\n\t  this.mouseHandler = mouseHandler;\n\n\t  this.registerEvent = registerEvent;\n\t  this.unregisterEvent = unregisterEvent;\n\t}\n\n\n\tInteractionEvents.$inject = [\n\t  'eventBus',\n\t  'elementRegistry',\n\t  'styles'\n\t];\n\n\n\t/**\n\t * An event indicating that the mouse hovered over an element\n\t *\n\t * @event element.hover\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the mouse has left an element\n\t *\n\t * @event element.out\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the mouse has clicked an element\n\t *\n\t * @event element.click\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the mouse has double clicked an element\n\t *\n\t * @event element.dblclick\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the mouse has gone down on an element.\n\t *\n\t * @event element.mousedown\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the mouse has gone up on an element.\n\t *\n\t * @event element.mouseup\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\t/**\n\t * An event indicating that the context menu action is triggered\n\t * via mouse or touch controls.\n\t *\n\t * @event element.contextmenu\n\t *\n\t * @type {Object}\n\t * @property {djs.model.Base} element\n\t * @property {SVGElement} gfx\n\t * @property {Event} originalEvent\n\t */\n\n\tvar InteractionEventsModule = {\n\t  __init__: [ 'interactionEvents' ],\n\t  interactionEvents: [ 'type', InteractionEvents ]\n\t};\n\n\tvar LOW_PRIORITY$1 = 500;\n\n\n\t/**\n\t * @class\n\t *\n\t * A plugin that adds an outline to shapes and connections that may be activated and styled\n\t * via CSS classes.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Styles} styles\n\t * @param {ElementRegistry} elementRegistry\n\t */\n\tfunction Outline(eventBus, styles, elementRegistry) {\n\n\t  this.offset = 6;\n\n\t  var OUTLINE_STYLE = styles.cls('djs-outline', [ 'no-fill' ]);\n\n\t  var self = this;\n\n\t  function createOutline(gfx, bounds) {\n\t    var outline = create('rect');\n\n\t    attr$1(outline, assign({\n\t      x: 10,\n\t      y: 10,\n\t      width: 100,\n\t      height: 100\n\t    }, OUTLINE_STYLE));\n\n\t    append(gfx, outline);\n\n\t    return outline;\n\t  }\n\n\t  // A low priortity is necessary, because outlines of labels have to be updated\n\t  // after the label bounds have been updated in the renderer.\n\t  eventBus.on([ 'shape.added', 'shape.changed' ], LOW_PRIORITY$1, function(event) {\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    var outline = query('.djs-outline', gfx);\n\n\t    if (!outline) {\n\t      outline = createOutline(gfx);\n\t    }\n\n\t    self.updateShapeOutline(outline, element);\n\t  });\n\n\t  eventBus.on([ 'connection.added', 'connection.changed' ], function(event) {\n\t    var element = event.element,\n\t        gfx = event.gfx;\n\n\t    var outline = query('.djs-outline', gfx);\n\n\t    if (!outline) {\n\t      outline = createOutline(gfx);\n\t    }\n\n\t    self.updateConnectionOutline(outline, element);\n\t  });\n\t}\n\n\n\t/**\n\t * Updates the outline of a shape respecting the dimension of the\n\t * element and an outline offset.\n\t *\n\t * @param  {SVGElement} outline\n\t * @param  {djs.model.Base} element\n\t */\n\tOutline.prototype.updateShapeOutline = function(outline, element) {\n\n\t  attr$1(outline, {\n\t    x: -this.offset,\n\t    y: -this.offset,\n\t    width: element.width + this.offset * 2,\n\t    height: element.height + this.offset * 2\n\t  });\n\n\t};\n\n\n\t/**\n\t * Updates the outline of a connection respecting the bounding box of\n\t * the connection and an outline offset.\n\t *\n\t * @param  {SVGElement} outline\n\t * @param  {djs.model.Base} element\n\t */\n\tOutline.prototype.updateConnectionOutline = function(outline, connection) {\n\n\t  var bbox = getBBox(connection);\n\n\t  attr$1(outline, {\n\t    x: bbox.x - this.offset,\n\t    y: bbox.y - this.offset,\n\t    width: bbox.width + this.offset * 2,\n\t    height: bbox.height + this.offset * 2\n\t  });\n\n\t};\n\n\n\tOutline.$inject = ['eventBus', 'styles', 'elementRegistry'];\n\n\tvar OutlineModule = {\n\t  __init__: [ 'outline' ],\n\t  outline: [ 'type', Outline ]\n\t};\n\n\t/**\n\t * A service that offers the current selection in a diagram.\n\t * Offers the api to control the selection, too.\n\t *\n\t * @class\n\t *\n\t * @param {EventBus} eventBus the event bus\n\t */\n\tfunction Selection(eventBus) {\n\n\t  this._eventBus = eventBus;\n\n\t  this._selectedElements = [];\n\n\t  var self = this;\n\n\t  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {\n\t    var element = e.element;\n\t    self.deselect(element);\n\t  });\n\n\t  eventBus.on([ 'diagram.clear' ], function(e) {\n\t    self.select(null);\n\t  });\n\t}\n\n\tSelection.$inject = [ 'eventBus' ];\n\n\n\tSelection.prototype.deselect = function(element) {\n\t  var selectedElements = this._selectedElements;\n\n\t  var idx = selectedElements.indexOf(element);\n\n\t  if (idx !== -1) {\n\t    var oldSelection = selectedElements.slice();\n\n\t    selectedElements.splice(idx, 1);\n\n\t    this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n\t  }\n\t};\n\n\n\tSelection.prototype.get = function() {\n\t  return this._selectedElements;\n\t};\n\n\tSelection.prototype.isSelected = function(element) {\n\t  return this._selectedElements.indexOf(element) !== -1;\n\t};\n\n\n\t/**\n\t * This method selects one or more elements on the diagram.\n\t *\n\t * By passing an additional add parameter you can decide whether or not the element(s)\n\t * should be added to the already existing selection or not.\n\t *\n\t * @method Selection#select\n\t *\n\t * @param  {Object|Object[]} elements element or array of elements to be selected\n\t * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false\n\t */\n\tSelection.prototype.select = function(elements, add) {\n\t  var selectedElements = this._selectedElements,\n\t      oldSelection = selectedElements.slice();\n\n\t  if (!isArray(elements)) {\n\t    elements = elements ? [ elements ] : [];\n\t  }\n\n\t  // selection may be cleared by passing an empty array or null\n\t  // to the method\n\t  if (add) {\n\t    forEach(elements, function(element) {\n\t      if (selectedElements.indexOf(element) !== -1) {\n\n\t        // already selected\n\t        return;\n\t      } else {\n\t        selectedElements.push(element);\n\t      }\n\t    });\n\t  } else {\n\t    this._selectedElements = selectedElements = elements.slice();\n\t  }\n\n\t  this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n\t};\n\n\tvar MARKER_HOVER = 'hover',\n\t    MARKER_SELECTED = 'selected';\n\n\n\t/**\n\t * A plugin that adds a visible selection UI to shapes and connections\n\t * by appending the <code>hover</code> and <code>selected</code> classes to them.\n\t *\n\t * @class\n\t *\n\t * Makes elements selectable, too.\n\t *\n\t * @param {EventBus} events\n\t * @param {SelectionService} selection\n\t * @param {Canvas} canvas\n\t */\n\tfunction SelectionVisuals(events, canvas, selection, styles) {\n\n\t  this._multiSelectionBox = null;\n\n\t  function addMarker(e, cls) {\n\t    canvas.addMarker(e, cls);\n\t  }\n\n\t  function removeMarker(e, cls) {\n\t    canvas.removeMarker(e, cls);\n\t  }\n\n\t  events.on('element.hover', function(event) {\n\t    addMarker(event.element, MARKER_HOVER);\n\t  });\n\n\t  events.on('element.out', function(event) {\n\t    removeMarker(event.element, MARKER_HOVER);\n\t  });\n\n\t  events.on('selection.changed', function(event) {\n\n\t    function deselect(s) {\n\t      removeMarker(s, MARKER_SELECTED);\n\t    }\n\n\t    function select(s) {\n\t      addMarker(s, MARKER_SELECTED);\n\t    }\n\n\t    var oldSelection = event.oldSelection,\n\t        newSelection = event.newSelection;\n\n\t    forEach(oldSelection, function(e) {\n\t      if (newSelection.indexOf(e) === -1) {\n\t        deselect(e);\n\t      }\n\t    });\n\n\t    forEach(newSelection, function(e) {\n\t      if (oldSelection.indexOf(e) === -1) {\n\t        select(e);\n\t      }\n\t    });\n\t  });\n\t}\n\n\tSelectionVisuals.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'selection',\n\t  'styles'\n\t];\n\n\tfunction SelectionBehavior(\n\t    eventBus, selection, canvas,\n\t    elementRegistry) {\n\n\t  eventBus.on('create.end', 500, function(e) {\n\n\t    var context = e.context,\n\t        canExecute = context.canExecute,\n\t        elements = context.elements,\n\t        hints = context.hints || {},\n\t        autoSelect = hints.autoSelect;\n\n\t    // select elements after they have been created\n\t    if (canExecute) {\n\t      if (autoSelect === false) {\n\n\t        // select no elements\n\t        return;\n\t      }\n\n\t      if (isArray(autoSelect)) {\n\t        selection.select(autoSelect);\n\t      } else {\n\n\t        // select all elements by default\n\t        selection.select(elements.filter(isShown));\n\t      }\n\t    }\n\t  });\n\n\t  eventBus.on('connect.end', 500, function(e) {\n\n\t    // select the connect end target\n\t    // after a connect operation\n\t    if (e.context.canExecute && e.context.hover) {\n\t      selection.select(e.context.hover);\n\t    }\n\t  });\n\n\t  eventBus.on('shape.move.end', 500, function(e) {\n\t    var previousSelection = e.previousSelection || [];\n\n\t    var shape = elementRegistry.get(e.context.shape.id);\n\n\t    // make sure at least the main moved element is being\n\t    // selected after a move operation\n\t    var inSelection = find(previousSelection, function(selectedShape) {\n\t      return shape.id === selectedShape.id;\n\t    });\n\n\t    if (!inSelection) {\n\t      selection.select(shape);\n\t    }\n\t  });\n\n\t  // Shift + click selection\n\t  eventBus.on('element.click', function(event) {\n\n\t    var element = event.element;\n\n\t    // do not select the root element\n\t    // or connections\n\t    if (element === canvas.getRootElement()) {\n\t      element = null;\n\t    }\n\n\t    var isSelected = selection.isSelected(element),\n\t        isMultiSelect = selection.get().length > 1;\n\n\t    // mouse-event: SELECTION_KEY\n\t    var add = hasPrimaryModifier(event);\n\n\t    // select OR deselect element in multi selection\n\t    if (isSelected && isMultiSelect) {\n\t      if (add) {\n\t        return selection.deselect(element);\n\t      } else {\n\t        return selection.select(element);\n\t      }\n\t    } else\n\t    if (!isSelected) {\n\t      selection.select(element, add);\n\t    } else {\n\t      selection.deselect(element);\n\t    }\n\t  });\n\t}\n\n\tSelectionBehavior.$inject = [\n\t  'eventBus',\n\t  'selection',\n\t  'canvas',\n\t  'elementRegistry'\n\t];\n\n\n\tfunction isShown(element) {\n\t  return !element.hidden;\n\t}\n\n\tvar SelectionModule = {\n\t  __init__: [ 'selectionVisuals', 'selectionBehavior' ],\n\t  __depends__: [\n\t    InteractionEventsModule,\n\t    OutlineModule\n\t  ],\n\t  selection: [ 'type', Selection ],\n\t  selectionVisuals: [ 'type', SelectionVisuals ],\n\t  selectionBehavior: [ 'type', SelectionBehavior ]\n\t};\n\n\t/**\n\t * Util that provides unique IDs.\n\t *\n\t * @class djs.util.IdGenerator\n\t * @constructor\n\t * @memberOf djs.util\n\t *\n\t * The ids can be customized via a given prefix and contain a random value to avoid collisions.\n\t *\n\t * @param {string} prefix a prefix to prepend to generated ids (for better readability)\n\t */\n\tfunction IdGenerator(prefix) {\n\n\t  this._counter = 0;\n\t  this._prefix = (prefix ? prefix + '-' : '') + Math.floor(Math.random() * 1000000000) + '-';\n\t}\n\n\t/**\n\t * Returns a next unique ID.\n\t *\n\t * @method djs.util.IdGenerator#next\n\t *\n\t * @returns {string} the id\n\t */\n\tIdGenerator.prototype.next = function() {\n\t  return this._prefix + (++this._counter);\n\t};\n\n\t// document wide unique overlay ids\n\tvar ids = new IdGenerator('ov');\n\n\tvar LOW_PRIORITY$2 = 500;\n\n\n\t/**\n\t * A service that allows users to attach overlays to diagram elements.\n\t *\n\t * The overlay service will take care of overlay positioning during updates.\n\t *\n\t * @example\n\t *\n\t * // add a pink badge on the top left of the shape\n\t * overlays.add(someShape, {\n\t *   position: {\n\t *     top: -5,\n\t *     left: -5\n\t *   },\n\t *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n\t * });\n\t *\n\t * // or add via shape id\n\t *\n\t * overlays.add('some-element-id', {\n\t *   position: {\n\t *     top: -5,\n\t *     left: -5\n\t *   }\n\t *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n\t * });\n\t *\n\t * // or add with optional type\n\t *\n\t * overlays.add(someShape, 'badge', {\n\t *   position: {\n\t *     top: -5,\n\t *     left: -5\n\t *   }\n\t *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n\t * });\n\t *\n\t *\n\t * // remove an overlay\n\t *\n\t * var id = overlays.add(...);\n\t * overlays.remove(id);\n\t *\n\t *\n\t * You may configure overlay defaults during tool by providing a `config` module\n\t * with `overlays.defaults` as an entry:\n\t *\n\t * {\n\t *   overlays: {\n\t *     defaults: {\n\t *       show: {\n\t *         minZoom: 0.7,\n\t *         maxZoom: 5.0\n\t *       },\n\t *       scale: {\n\t *         min: 1\n\t *       }\n\t *     }\n\t * }\n\t *\n\t * @param {Object} config\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {ElementRegistry} elementRegistry\n\t */\n\tfunction Overlays(config, eventBus, canvas, elementRegistry) {\n\n\t  this._eventBus = eventBus;\n\t  this._canvas = canvas;\n\t  this._elementRegistry = elementRegistry;\n\n\t  this._ids = ids;\n\n\t  this._overlayDefaults = assign({\n\n\t    // no show constraints\n\t    show: null,\n\n\t    // always scale\n\t    scale: true\n\t  }, config && config.defaults);\n\n\t  /**\n\t   * Mapping overlayId -> overlay\n\t   */\n\t  this._overlays = {};\n\n\t  /**\n\t   * Mapping elementId -> overlay container\n\t   */\n\t  this._overlayContainers = [];\n\n\t  // root html element for all overlays\n\t  this._overlayRoot = createRoot(canvas.getContainer());\n\n\t  this._init();\n\t}\n\n\n\tOverlays.$inject = [\n\t  'config.overlays',\n\t  'eventBus',\n\t  'canvas',\n\t  'elementRegistry'\n\t];\n\n\n\t/**\n\t * Returns the overlay with the specified id or a list of overlays\n\t * for an element with a given type.\n\t *\n\t * @example\n\t *\n\t * // return the single overlay with the given id\n\t * overlays.get('some-id');\n\t *\n\t * // return all overlays for the shape\n\t * overlays.get({ element: someShape });\n\t *\n\t * // return all overlays on shape with type 'badge'\n\t * overlays.get({ element: someShape, type: 'badge' });\n\t *\n\t * // shape can also be specified as id\n\t * overlays.get({ element: 'element-id', type: 'badge' });\n\t *\n\t *\n\t * @param {Object} search\n\t * @param {string} [search.id]\n\t * @param {string|djs.model.Base} [search.element]\n\t * @param {string} [search.type]\n\t *\n\t * @return {Object|Array<Object>} the overlay(s)\n\t */\n\tOverlays.prototype.get = function(search) {\n\n\t  if (isString(search)) {\n\t    search = { id: search };\n\t  }\n\n\t  if (isString(search.element)) {\n\t    search.element = this._elementRegistry.get(search.element);\n\t  }\n\n\t  if (search.element) {\n\t    var container = this._getOverlayContainer(search.element, true);\n\n\t    // return a list of overlays when searching by element (+type)\n\t    if (container) {\n\t      return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();\n\t    } else {\n\t      return [];\n\t    }\n\t  } else\n\t  if (search.type) {\n\t    return filter(this._overlays, matchPattern({ type: search.type }));\n\t  } else {\n\n\t    // return single element when searching by id\n\t    return search.id ? this._overlays[search.id] : null;\n\t  }\n\t};\n\n\t/**\n\t * Adds a HTML overlay to an element.\n\t *\n\t * @param {string|djs.model.Base}   element   attach overlay to this shape\n\t * @param {string}                  [type]    optional type to assign to the overlay\n\t * @param {Object}                  overlay   the overlay configuration\n\t *\n\t * @param {string|DOMElement}       overlay.html                 html element to use as an overlay\n\t * @param {Object}                  [overlay.show]               show configuration\n\t * @param {number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay\n\t * @param {number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay\n\t * @param {Object}                  overlay.position             where to attach the overlay\n\t * @param {number}                  [overlay.position.left]      relative to element bbox left attachment\n\t * @param {number}                  [overlay.position.top]       relative to element bbox top attachment\n\t * @param {number}                  [overlay.position.bottom]    relative to element bbox bottom attachment\n\t * @param {number}                  [overlay.position.right]     relative to element bbox right attachment\n\t * @param {boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of\n\t *                                                               diagram zoom\n\t * @param {number}                  [overlay.scale.min]\n\t * @param {number}                  [overlay.scale.max]\n\t *\n\t * @return {string}                 id that may be used to reference the overlay for update or removal\n\t */\n\tOverlays.prototype.add = function(element, type, overlay) {\n\n\t  if (isObject(type)) {\n\t    overlay = type;\n\t    type = null;\n\t  }\n\n\t  if (!element.id) {\n\t    element = this._elementRegistry.get(element);\n\t  }\n\n\t  if (!overlay.position) {\n\t    throw new Error('must specifiy overlay position');\n\t  }\n\n\t  if (!overlay.html) {\n\t    throw new Error('must specifiy overlay html');\n\t  }\n\n\t  if (!element) {\n\t    throw new Error('invalid element specified');\n\t  }\n\n\t  var id = this._ids.next();\n\n\t  overlay = assign({}, this._overlayDefaults, overlay, {\n\t    id: id,\n\t    type: type,\n\t    element: element,\n\t    html: overlay.html\n\t  });\n\n\t  this._addOverlay(overlay);\n\n\t  return id;\n\t};\n\n\n\t/**\n\t * Remove an overlay with the given id or all overlays matching the given filter.\n\t *\n\t * @see Overlays#get for filter options.\n\t *\n\t * @param {string} [id]\n\t * @param {Object} [filter]\n\t */\n\tOverlays.prototype.remove = function(filter) {\n\n\t  var overlays = this.get(filter) || [];\n\n\t  if (!isArray(overlays)) {\n\t    overlays = [ overlays ];\n\t  }\n\n\t  var self = this;\n\n\t  forEach(overlays, function(overlay) {\n\n\t    var container = self._getOverlayContainer(overlay.element, true);\n\n\t    if (overlay) {\n\t      remove(overlay.html);\n\t      remove(overlay.htmlContainer);\n\n\t      delete overlay.htmlContainer;\n\t      delete overlay.element;\n\n\t      delete self._overlays[overlay.id];\n\t    }\n\n\t    if (container) {\n\t      var idx = container.overlays.indexOf(overlay);\n\t      if (idx !== -1) {\n\t        container.overlays.splice(idx, 1);\n\t      }\n\t    }\n\t  });\n\n\t};\n\n\n\tOverlays.prototype.show = function() {\n\t  setVisible(this._overlayRoot);\n\t};\n\n\n\tOverlays.prototype.hide = function() {\n\t  setVisible(this._overlayRoot, false);\n\t};\n\n\tOverlays.prototype.clear = function() {\n\t  this._overlays = {};\n\n\t  this._overlayContainers = [];\n\n\t  clear(this._overlayRoot);\n\t};\n\n\tOverlays.prototype._updateOverlayContainer = function(container) {\n\t  var element = container.element,\n\t      html = container.html;\n\n\t  // update container left,top according to the elements x,y coordinates\n\t  // this ensures we can attach child elements relative to this container\n\n\t  var x = element.x,\n\t      y = element.y;\n\n\t  if (element.waypoints) {\n\t    var bbox = getBBox(element);\n\t    x = bbox.x;\n\t    y = bbox.y;\n\t  }\n\n\t  setPosition(html, x, y);\n\n\t  attr(container.html, 'data-container-id', element.id);\n\t};\n\n\n\tOverlays.prototype._updateOverlay = function(overlay) {\n\n\t  var position = overlay.position,\n\t      htmlContainer = overlay.htmlContainer,\n\t      element = overlay.element;\n\n\t  // update overlay html relative to shape because\n\t  // it is already positioned on the element\n\n\t  // update relative\n\t  var left = position.left,\n\t      top = position.top;\n\n\t  if (position.right !== undefined) {\n\n\t    var width;\n\n\t    if (element.waypoints) {\n\t      width = getBBox(element).width;\n\t    } else {\n\t      width = element.width;\n\t    }\n\n\t    left = position.right * -1 + width;\n\t  }\n\n\t  if (position.bottom !== undefined) {\n\n\t    var height;\n\n\t    if (element.waypoints) {\n\t      height = getBBox(element).height;\n\t    } else {\n\t      height = element.height;\n\t    }\n\n\t    top = position.bottom * -1 + height;\n\t  }\n\n\t  setPosition(htmlContainer, left || 0, top || 0);\n\t};\n\n\n\tOverlays.prototype._createOverlayContainer = function(element) {\n\t  var html = domify('<div class=\"djs-overlays\" style=\"position: absolute\" />');\n\n\t  this._overlayRoot.appendChild(html);\n\n\t  var container = {\n\t    html: html,\n\t    element: element,\n\t    overlays: []\n\t  };\n\n\t  this._updateOverlayContainer(container);\n\n\t  this._overlayContainers.push(container);\n\n\t  return container;\n\t};\n\n\n\tOverlays.prototype._updateRoot = function(viewbox) {\n\t  var scale = viewbox.scale || 1;\n\n\t  var matrix = 'matrix(' +\n\t  [\n\t    scale,\n\t    0,\n\t    0,\n\t    scale,\n\t    -1 * viewbox.x * scale,\n\t    -1 * viewbox.y * scale\n\t  ].join(',') +\n\t  ')';\n\n\t  setTransform(this._overlayRoot, matrix);\n\t};\n\n\n\tOverlays.prototype._getOverlayContainer = function(element, raw) {\n\t  var container = find(this._overlayContainers, function(c) {\n\t    return c.element === element;\n\t  });\n\n\n\t  if (!container && !raw) {\n\t    return this._createOverlayContainer(element);\n\t  }\n\n\t  return container;\n\t};\n\n\n\tOverlays.prototype._addOverlay = function(overlay) {\n\n\t  var id = overlay.id,\n\t      element = overlay.element,\n\t      html = overlay.html,\n\t      htmlContainer,\n\t      overlayContainer;\n\n\t  // unwrap jquery (for those who need it)\n\t  if (html.get && html.constructor.prototype.jquery) {\n\t    html = html.get(0);\n\t  }\n\n\t  // create proper html elements from\n\t  // overlay HTML strings\n\t  if (isString(html)) {\n\t    html = domify(html);\n\t  }\n\n\t  overlayContainer = this._getOverlayContainer(element);\n\n\t  htmlContainer = domify('<div class=\"djs-overlay\" data-overlay-id=\"' + id + '\" style=\"position: absolute\">');\n\n\t  htmlContainer.appendChild(html);\n\n\t  if (overlay.type) {\n\t    classes(htmlContainer).add('djs-overlay-' + overlay.type);\n\t  }\n\n\t  overlay.htmlContainer = htmlContainer;\n\n\t  overlayContainer.overlays.push(overlay);\n\t  overlayContainer.html.appendChild(htmlContainer);\n\n\t  this._overlays[id] = overlay;\n\n\t  this._updateOverlay(overlay);\n\t  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());\n\t};\n\n\n\tOverlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {\n\t  var show = overlay.show,\n\t      minZoom = show && show.minZoom,\n\t      maxZoom = show && show.maxZoom,\n\t      htmlContainer = overlay.htmlContainer,\n\t      visible = true;\n\n\t  if (show) {\n\t    if (\n\t      (isDefined(minZoom) && minZoom > viewbox.scale) ||\n\t      (isDefined(maxZoom) && maxZoom < viewbox.scale)\n\t    ) {\n\t      visible = false;\n\t    }\n\n\t    setVisible(htmlContainer, visible);\n\t  }\n\n\t  this._updateOverlayScale(overlay, viewbox);\n\t};\n\n\n\tOverlays.prototype._updateOverlayScale = function(overlay, viewbox) {\n\t  var shouldScale = overlay.scale,\n\t      minScale,\n\t      maxScale,\n\t      htmlContainer = overlay.htmlContainer;\n\n\t  var scale, transform = '';\n\n\t  if (shouldScale !== true) {\n\n\t    if (shouldScale === false) {\n\t      minScale = 1;\n\t      maxScale = 1;\n\t    } else {\n\t      minScale = shouldScale.min;\n\t      maxScale = shouldScale.max;\n\t    }\n\n\t    if (isDefined(minScale) && viewbox.scale < minScale) {\n\t      scale = (1 / viewbox.scale || 1) * minScale;\n\t    }\n\n\t    if (isDefined(maxScale) && viewbox.scale > maxScale) {\n\t      scale = (1 / viewbox.scale || 1) * maxScale;\n\t    }\n\t  }\n\n\t  if (isDefined(scale)) {\n\t    transform = 'scale(' + scale + ',' + scale + ')';\n\t  }\n\n\t  setTransform(htmlContainer, transform);\n\t};\n\n\n\tOverlays.prototype._updateOverlaysVisibilty = function(viewbox) {\n\n\t  var self = this;\n\n\t  forEach(this._overlays, function(overlay) {\n\t    self._updateOverlayVisibilty(overlay, viewbox);\n\t  });\n\t};\n\n\n\tOverlays.prototype._init = function() {\n\n\t  var eventBus = this._eventBus;\n\n\t  var self = this;\n\n\n\t  // scroll/zoom integration\n\n\t  function updateViewbox(viewbox) {\n\t    self._updateRoot(viewbox);\n\t    self._updateOverlaysVisibilty(viewbox);\n\n\t    self.show();\n\t  }\n\n\t  eventBus.on('canvas.viewbox.changing', function(event) {\n\t    self.hide();\n\t  });\n\n\t  eventBus.on('canvas.viewbox.changed', function(event) {\n\t    updateViewbox(event.viewbox);\n\t  });\n\n\n\t  // remove integration\n\n\t  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {\n\t    var element = e.element;\n\t    var overlays = self.get({ element: element });\n\n\t    forEach(overlays, function(o) {\n\t      self.remove(o.id);\n\t    });\n\n\t    var container = self._getOverlayContainer(element);\n\n\t    if (container) {\n\t      remove(container.html);\n\t      var i = self._overlayContainers.indexOf(container);\n\t      if (i !== -1) {\n\t        self._overlayContainers.splice(i, 1);\n\t      }\n\t    }\n\t  });\n\n\n\t  // move integration\n\n\t  eventBus.on('element.changed', LOW_PRIORITY$2, function(e) {\n\t    var element = e.element;\n\n\t    var container = self._getOverlayContainer(element, true);\n\n\t    if (container) {\n\t      forEach(container.overlays, function(overlay) {\n\t        self._updateOverlay(overlay);\n\t      });\n\n\t      self._updateOverlayContainer(container);\n\t    }\n\t  });\n\n\n\t  // marker integration, simply add them on the overlays as classes, too.\n\n\t  eventBus.on('element.marker.update', function(e) {\n\t    var container = self._getOverlayContainer(e.element, true);\n\t    if (container) {\n\t      classes(container.html)[e.add ? 'add' : 'remove'](e.marker);\n\t    }\n\t  });\n\n\n\t  // clear overlays with diagram\n\n\t  eventBus.on('diagram.clear', this.clear, this);\n\t};\n\n\n\n\t// helpers /////////////////////////////\n\n\tfunction createRoot(parentNode) {\n\t  var root = domify(\n\t    '<div class=\"djs-overlay-container\" style=\"position: absolute; width: 0; height: 0;\" />'\n\t  );\n\n\t  parentNode.insertBefore(root, parentNode.firstChild);\n\n\t  return root;\n\t}\n\n\tfunction setPosition(el, x, y) {\n\t  assign(el.style, { left: x + 'px', top: y + 'px' });\n\t}\n\n\tfunction setVisible(el, visible) {\n\t  el.style.display = visible === false ? 'none' : '';\n\t}\n\n\tfunction setTransform(el, transform) {\n\n\t  el.style['transform-origin'] = 'top left';\n\n\t  [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {\n\t    el.style[prefix + 'transform'] = transform;\n\t  });\n\t}\n\n\tvar OverlaysModule = {\n\t  __init__: [ 'overlays' ],\n\t  overlays: [ 'type', Overlays ]\n\t};\n\n\t/**\n\t * A viewer for BPMN 2.0 diagrams.\n\t *\n\t * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include\n\t * additional features.\n\t *\n\t *\n\t * ## Extending the Viewer\n\t *\n\t * In order to extend the viewer pass extension modules to bootstrap via the\n\t * `additionalModules` option. An extension module is an object that exposes\n\t * named services.\n\t *\n\t * The following example depicts the integration of a simple\n\t * logging component that integrates with interaction events:\n\t *\n\t *\n\t * ```javascript\n\t *\n\t * // logging component\n\t * function InteractionLogger(eventBus) {\n\t *   eventBus.on('element.hover', function(event) {\n\t *     console.log()\n\t *   })\n\t * }\n\t *\n\t * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n\t *\n\t * // extension module\n\t * var extensionModule = {\n\t *   __init__: [ 'interactionLogger' ],\n\t *   interactionLogger: [ 'type', InteractionLogger ]\n\t * };\n\t *\n\t * // extend the viewer\n\t * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\n\t * bpmnViewer.importXML(...);\n\t * ```\n\t *\n\t * @param {Object} [options] configuration options to pass to the viewer\n\t * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n\t * @param {string|number} [options.width] the width of the viewer\n\t * @param {string|number} [options.height] the height of the viewer\n\t * @param {Object} [options.moddleExtensions] extension packages to provide\n\t * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n\t * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n\t */\n\tfunction Viewer(options) {\n\t  BaseViewer.call(this, options);\n\t}\n\n\tinherits_browser(Viewer, BaseViewer);\n\n\t// modules the viewer is composed of\n\tViewer.prototype._modules = [\n\t  CoreModule$1,\n\t  translate$2,\n\t  SelectionModule,\n\t  OverlaysModule\n\t];\n\n\t// default moddle extensions the viewer is composed of\n\tViewer.prototype._moddleExtensions = {};\n\n\t/**\r\n\t * Returns true if event was triggered with any modifier\r\n\t * @param {KeyboardEvent} event\r\n\t */\r\n\tfunction hasModifier(event) {\r\n\t  return (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {KeyboardEvent} event\r\n\t */\r\n\tfunction isCmd(event) {\r\n\r\n\t  // ensure we don't react to AltGr\r\n\t  // (mapped to CTRL + ALT)\r\n\t  if (event.altKey) {\r\n\t    return false;\r\n\t  }\r\n\r\n\t  return event.ctrlKey || event.metaKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if key pressed is one of provided keys.\r\n\t *\r\n\t * @param {string|Array<string>} keys\r\n\t * @param {KeyboardEvent} event\r\n\t */\r\n\tfunction isKey(keys, event) {\r\n\t  keys = isArray(keys) ? keys : [ keys ];\r\n\r\n\t  return keys.indexOf(event.key) !== -1 || keys.indexOf(event.keyCode) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {KeyboardEvent} event\r\n\t */\r\n\tfunction isShift(event) {\r\n\t  return event.shiftKey;\r\n\t}\n\n\tvar KEYDOWN_EVENT = 'keyboard.keydown',\n\t    KEYUP_EVENT = 'keyboard.keyup';\n\n\tvar DEFAULT_PRIORITY$1 = 1000;\n\n\n\t/**\n\t * A keyboard abstraction that may be activated and\n\t * deactivated by users at will, consuming key events\n\t * and triggering diagram actions.\n\t *\n\t * For keys pressed down, keyboard fires `keyboard.keydown` event.\n\t * The event context contains one field which is `KeyboardEvent` event.\n\t *\n\t * The implementation fires the following key events that allow\n\t * other components to hook into key handling:\n\t *\n\t *  - keyboard.bind\n\t *  - keyboard.unbind\n\t *  - keyboard.init\n\t *  - keyboard.destroy\n\t *\n\t * All events contain one field which is node.\n\t *\n\t * A default binding for the keyboard may be specified via the\n\t * `keyboard.bindTo` configuration option.\n\t *\n\t * @param {Config} config\n\t * @param {EventBus} eventBus\n\t */\n\tfunction Keyboard(config, eventBus) {\n\t  var self = this;\n\n\t  this._config = config || {};\n\t  this._eventBus = eventBus;\n\n\t  this._keydownHandler = this._keydownHandler.bind(this);\n\t  this._keyupHandler = this._keyupHandler.bind(this);\n\n\t  // properly clean dom registrations\n\t  eventBus.on('diagram.destroy', function() {\n\t    self._fire('destroy');\n\n\t    self.unbind();\n\t  });\n\n\t  eventBus.on('diagram.init', function() {\n\t    self._fire('init');\n\t  });\n\n\t  eventBus.on('attach', function() {\n\t    if (config && config.bindTo) {\n\t      self.bind(config.bindTo);\n\t    }\n\t  });\n\n\t  eventBus.on('detach', function() {\n\t    self.unbind();\n\t  });\n\t}\n\n\tKeyboard.$inject = [\n\t  'config.keyboard',\n\t  'eventBus'\n\t];\n\n\tKeyboard.prototype._keydownHandler = function(event) {\n\t  this._keyHandler(event, KEYDOWN_EVENT);\n\t};\n\n\tKeyboard.prototype._keyupHandler = function(event) {\n\t  this._keyHandler(event, KEYUP_EVENT);\n\t};\n\n\tKeyboard.prototype._keyHandler = function(event, type) {\n\t  var target = event.target,\n\t      eventBusResult;\n\n\t  if (isInput(target)) {\n\t    return;\n\t  }\n\n\t  var context = {\n\t    keyEvent: event\n\t  };\n\n\t  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n\n\t  if (eventBusResult) {\n\t    event.preventDefault();\n\t  }\n\t};\n\n\tKeyboard.prototype.bind = function(node) {\n\n\t  // make sure that the keyboard is only bound once to the DOM\n\t  this.unbind();\n\n\t  this._node = node;\n\n\t  // bind key events\n\t  componentEvent.bind(node, 'keydown', this._keydownHandler, true);\n\t  componentEvent.bind(node, 'keyup', this._keyupHandler, true);\n\n\t  this._fire('bind');\n\t};\n\n\tKeyboard.prototype.getBinding = function() {\n\t  return this._node;\n\t};\n\n\tKeyboard.prototype.unbind = function() {\n\t  var node = this._node;\n\n\t  if (node) {\n\t    this._fire('unbind');\n\n\t    // unbind key events\n\t    componentEvent.unbind(node, 'keydown', this._keydownHandler, true);\n\t    componentEvent.unbind(node, 'keyup', this._keyupHandler, true);\n\t  }\n\n\t  this._node = null;\n\t};\n\n\tKeyboard.prototype._fire = function(event) {\n\t  this._eventBus.fire('keyboard.' + event, { node: this._node });\n\t};\n\n\t/**\n\t * Add a listener function that is notified with `KeyboardEvent` whenever\n\t * the keyboard is bound and the user presses a key. If no priority is\n\t * provided, the default value of 1000 is used.\n\t *\n\t * @param {number} [priority]\n\t * @param {Function} listener\n\t * @param {string} type\n\t */\n\tKeyboard.prototype.addListener = function(priority, listener, type) {\n\t  if (isFunction(priority)) {\n\t    type = listener;\n\t    listener = priority;\n\t    priority = DEFAULT_PRIORITY$1;\n\t  }\n\n\t  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n\t};\n\n\tKeyboard.prototype.removeListener = function(listener, type) {\n\t  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n\t};\n\n\tKeyboard.prototype.hasModifier = hasModifier;\n\tKeyboard.prototype.isCmd = isCmd;\n\tKeyboard.prototype.isShift = isShift;\n\tKeyboard.prototype.isKey = isKey;\n\n\n\n\t// helpers ///////\n\n\tfunction isInput(target) {\n\t  return target && (matchesSelector(target, 'input, textarea') || target.contentEditable === 'true');\n\t}\n\n\tvar LOW_PRIORITY$3 = 500;\n\n\tvar KEYCODE_C = 67;\n\tvar KEYCODE_V = 86;\n\tvar KEYCODE_Y = 89;\n\tvar KEYCODE_Z = 90;\n\n\tvar KEYS_COPY = ['c', 'C', KEYCODE_C ];\n\tvar KEYS_PASTE = [ 'v', 'V', KEYCODE_V ];\n\tvar KEYS_REDO = [ 'y', 'Y', KEYCODE_Y ];\n\tvar KEYS_UNDO = [ 'z', 'Z', KEYCODE_Z ];\n\n\n\t/**\n\t * Adds default keyboard bindings.\n\t *\n\t * This does not pull in any features will bind only actions that\n\t * have previously been registered against the editorActions component.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Keyboard} keyboard\n\t */\n\tfunction KeyboardBindings(eventBus, keyboard) {\n\n\t  var self = this;\n\n\t  eventBus.on('editorActions.init', LOW_PRIORITY$3, function(event) {\n\n\t    var editorActions = event.editorActions;\n\n\t    self.registerBindings(keyboard, editorActions);\n\t  });\n\t}\n\n\tKeyboardBindings.$inject = [\n\t  'eventBus',\n\t  'keyboard'\n\t];\n\n\n\t/**\n\t * Register available keyboard bindings.\n\t *\n\t * @param {Keyboard} keyboard\n\t * @param {EditorActions} editorActions\n\t */\n\tKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n\t  /**\n\t   * Add keyboard binding if respective editor action\n\t   * is registered.\n\t   *\n\t   * @param {string} action name\n\t   * @param {Function} fn that implements the key binding\n\t   */\n\t  function addListener(action, fn) {\n\n\t    if (editorActions.isRegistered(action)) {\n\t      keyboard.addListener(fn);\n\t    }\n\t  }\n\n\n\t  // undo\n\t  // (CTRL|CMD) + Z\n\t  addListener('undo', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event)) {\n\t      editorActions.trigger('undo');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // redo\n\t  // CTRL + Y\n\t  // CMD + SHIFT + Z\n\t  addListener('redo', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isCmd(event) && (isKey(KEYS_REDO, event) || (isKey(KEYS_UNDO, event) && isShift(event)))) {\n\t      editorActions.trigger('redo');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // copy\n\t  // CTRL/CMD + C\n\t  addListener('copy', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isCmd(event) && isKey(KEYS_COPY, event)) {\n\t      editorActions.trigger('copy');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // paste\n\t  // CTRL/CMD + V\n\t  addListener('paste', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isCmd(event) && isKey(KEYS_PASTE, event)) {\n\t      editorActions.trigger('paste');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // zoom in one step\n\t  // CTRL/CMD + +\n\t  addListener('stepZoom', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isKey([ '+', 'Add' ], event) && isCmd(event)) {\n\t      editorActions.trigger('stepZoom', { value: 1 });\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // zoom out one step\n\t  // CTRL + -\n\t  addListener('stepZoom', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {\n\t      editorActions.trigger('stepZoom', { value: -1 });\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // zoom to the default level\n\t  // CTRL + 0\n\t  addListener('zoom', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isKey('0', event) && isCmd(event)) {\n\t      editorActions.trigger('zoom', { value: 1 });\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // delete selected element\n\t  // DEL\n\t  addListener('removeSelection', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (isKey([ 'Delete', 'Del' ], event)) {\n\t      editorActions.trigger('removeSelection');\n\n\t      return true;\n\t    }\n\t  });\n\t};\n\n\tvar KeyboardModule = {\n\t  __init__: [ 'keyboard', 'keyboardBindings' ],\n\t  keyboard: [ 'type', Keyboard ],\n\t  keyboardBindings: [ 'type', KeyboardBindings ]\n\t};\n\n\tvar DEFAULT_CONFIG = {\n\t  moveSpeed: 50,\n\t  moveSpeedAccelerated: 200\n\t};\n\n\n\t/**\n\t * A feature that allows users to move the canvas using the keyboard.\n\t *\n\t * @param {Object} config\n\t * @param {number} [config.moveSpeed=50]\n\t * @param {number} [config.moveSpeedAccelerated=200]\n\t * @param {Keyboard} keyboard\n\t * @param {Canvas} canvas\n\t */\n\tfunction KeyboardMove(\n\t    config,\n\t    keyboard,\n\t    canvas\n\t) {\n\n\t  var self = this;\n\n\t  this._config = assign({}, DEFAULT_CONFIG, config || {});\n\n\t  keyboard.addListener(arrowsListener);\n\n\n\t  function arrowsListener(context) {\n\n\t    var event = context.keyEvent,\n\t        config = self._config;\n\n\t    if (!keyboard.isCmd(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey([\n\t      'ArrowLeft', 'Left',\n\t      'ArrowUp', 'Up',\n\t      'ArrowDown', 'Down',\n\t      'ArrowRight', 'Right'\n\t    ], event)) {\n\n\t      var speed = (\n\t        keyboard.isShift(event) ?\n\t          config.moveSpeedAccelerated :\n\t          config.moveSpeed\n\t      );\n\n\t      var direction;\n\n\t      switch (event.key) {\n\t      case 'ArrowLeft':\n\t      case 'Left':\n\t        direction = 'left';\n\t        break;\n\t      case 'ArrowUp':\n\t      case 'Up':\n\t        direction = 'up';\n\t        break;\n\t      case 'ArrowRight':\n\t      case 'Right':\n\t        direction = 'right';\n\t        break;\n\t      case 'ArrowDown':\n\t      case 'Down':\n\t        direction = 'down';\n\t        break;\n\t      }\n\n\t      self.moveCanvas({\n\t        speed: speed,\n\t        direction: direction\n\t      });\n\n\t      return true;\n\t    }\n\t  }\n\n\t  this.moveCanvas = function(opts) {\n\n\t    var dx = 0,\n\t        dy = 0,\n\t        speed = opts.speed;\n\n\t    var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);\n\n\t    switch (opts.direction) {\n\t    case 'left': // Left\n\t      dx = actualSpeed;\n\t      break;\n\t    case 'up': // Up\n\t      dy = actualSpeed;\n\t      break;\n\t    case 'right': // Right\n\t      dx = -actualSpeed;\n\t      break;\n\t    case 'down': // Down\n\t      dy = -actualSpeed;\n\t      break;\n\t    }\n\n\t    canvas.scroll({\n\t      dx: dx,\n\t      dy: dy\n\t    });\n\t  };\n\n\t}\n\n\n\tKeyboardMove.$inject = [\n\t  'config.keyboardMove',\n\t  'keyboard',\n\t  'canvas'\n\t];\n\n\tvar KeyboardMoveModule = {\n\t  __depends__: [\n\t    KeyboardModule\n\t  ],\n\t  __init__: [ 'keyboardMove' ],\n\t  keyboardMove: [ 'type', KeyboardMove ]\n\t};\n\n\tvar CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;\n\n\n\tfunction set$1(mode) {\n\t  var classes$1 = classes(document.body);\n\n\t  classes$1.removeMatching(CURSOR_CLS_PATTERN);\n\n\t  if (mode) {\n\t    classes$1.add('djs-cursor-' + mode);\n\t  }\n\t}\n\n\tfunction unset() {\n\t  set$1(null);\n\t}\n\n\tvar TRAP_PRIORITY = 5000;\n\n\t/**\n\t * Installs a click trap that prevents a ghost click following a dragging operation.\n\t *\n\t * @return {Function} a function to immediately remove the installed trap.\n\t */\n\tfunction install(eventBus, eventName) {\n\n\t  eventName = eventName || 'element.click';\n\n\t  function trap() {\n\t    return false;\n\t  }\n\n\t  eventBus.once(eventName, TRAP_PRIORITY, trap);\n\n\t  return function() {\n\t    eventBus.off(eventName, trap);\n\t  };\n\t}\n\n\tfunction center(bounds) {\n\t  return {\n\t    x: bounds.x + (bounds.width / 2),\n\t    y: bounds.y + (bounds.height / 2)\n\t  };\n\t}\n\n\n\tfunction delta(a, b) {\n\t  return {\n\t    x: a.x - b.x,\n\t    y: a.y - b.y\n\t  };\n\t}\n\n\tvar THRESHOLD = 15;\n\n\n\t/**\n\t * Move the canvas via mouse.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t */\n\tfunction MoveCanvas(eventBus, canvas) {\n\n\t  var context;\n\n\n\t  // listen for move on element mouse down;\n\t  // allow others to hook into the event before us though\n\t  // (dragging / element moving will do this)\n\t  eventBus.on('element.mousedown', 500, function(e) {\n\t    return handleStart(e.originalEvent);\n\t  });\n\n\n\t  function handleMove(event) {\n\n\t    var start = context.start,\n\t        position = toPoint(event),\n\t        delta$1 = delta(position, start);\n\n\t    if (!context.dragging && length(delta$1) > THRESHOLD) {\n\t      context.dragging = true;\n\n\t      install(eventBus);\n\n\t      set$1('grab');\n\t    }\n\n\t    if (context.dragging) {\n\n\t      var lastPosition = context.last || context.start;\n\n\t      delta$1 = delta(position, lastPosition);\n\n\t      canvas.scroll({\n\t        dx: delta$1.x,\n\t        dy: delta$1.y\n\t      });\n\n\t      context.last = position;\n\t    }\n\n\t    // prevent select\n\t    event.preventDefault();\n\t  }\n\n\n\t  function handleEnd(event) {\n\t    componentEvent.unbind(document, 'mousemove', handleMove);\n\t    componentEvent.unbind(document, 'mouseup', handleEnd);\n\n\t    context = null;\n\n\t    unset();\n\t  }\n\n\t  function handleStart(event) {\n\n\t    // event is already handled by '.djs-draggable'\n\t    if (closest(event.target, '.djs-draggable')) {\n\t      return;\n\t    }\n\n\n\t    // reject non-left left mouse button or modifier key\n\t    if (event.button || event.ctrlKey || event.shiftKey || event.altKey) {\n\t      return;\n\t    }\n\n\t    context = {\n\t      start: toPoint(event)\n\t    };\n\n\t    componentEvent.bind(document, 'mousemove', handleMove);\n\t    componentEvent.bind(document, 'mouseup', handleEnd);\n\n\t    // we've handled the event\n\t    return true;\n\t  }\n\t}\n\n\n\tMoveCanvas.$inject = [\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\n\n\t// helpers ///////\n\n\tfunction length(point) {\n\t  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n\t}\n\n\tvar MoveCanvasModule = {\n\t  __init__: [ 'moveCanvas' ],\n\t  moveCanvas: [ 'type', MoveCanvas ]\n\t};\n\n\t/**\n\t * Get the logarithm of x with base 10\n\t * @param  {Integer} value\n\t */\n\tfunction log10(x) {\n\t  return Math.log(x) / Math.log(10);\n\t}\n\n\t/**\n\t * Get step size for given range and number of steps.\n\t *\n\t * @param {Object} range\n\t * @param {number} range.min\n\t * @param {number} range.max\n\t */\n\tfunction getStepSize(range, steps) {\n\n\t  var minLinearRange = log10(range.min),\n\t      maxLinearRange = log10(range.max);\n\n\t  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);\n\n\t  return absoluteLinearRange / steps;\n\t}\n\n\tfunction cap(range, scale) {\n\t  return Math.max(range.min, Math.min(range.max, scale));\n\t}\n\n\tvar sign = Math.sign || function(n) {\n\t  return n >= 0 ? 1 : -1;\n\t};\n\n\tvar RANGE = { min: 0.2, max: 4 },\n\t    NUM_STEPS = 10;\n\n\tvar DELTA_THRESHOLD = 0.1;\n\n\tvar DEFAULT_SCALE = 0.75;\n\n\t/**\n\t * An implementation of zooming and scrolling within the\n\t * {@link Canvas} via the mouse wheel.\n\t *\n\t * Mouse wheel zooming / scrolling may be disabled using\n\t * the {@link toggle(enabled)} method.\n\t *\n\t * @param {Object} [config]\n\t * @param {boolean} [config.enabled=true] default enabled state\n\t * @param {number} [config.scale=.75] scroll sensivity\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t */\n\tfunction ZoomScroll(config, eventBus, canvas) {\n\n\t  config = config || {};\n\n\t  this._enabled = false;\n\n\t  this._canvas = canvas;\n\t  this._container = canvas._container;\n\n\t  this._handleWheel = bind(this._handleWheel, this);\n\n\t  this._totalDelta = 0;\n\t  this._scale = config.scale || DEFAULT_SCALE;\n\n\t  var self = this;\n\n\t  eventBus.on('canvas.init', function(e) {\n\t    self._init(config.enabled !== false);\n\t  });\n\t}\n\n\tZoomScroll.$inject = [\n\t  'config.zoomScroll',\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\tZoomScroll.prototype.scroll = function scroll(delta) {\n\t  this._canvas.scroll(delta);\n\t};\n\n\n\tZoomScroll.prototype.reset = function reset() {\n\t  this._canvas.zoom('fit-viewport');\n\t};\n\n\t/**\n\t * Zoom depending on delta.\n\t *\n\t * @param {number} delta\n\t * @param {Object} position\n\t */\n\tZoomScroll.prototype.zoom = function zoom(delta, position) {\n\n\t  // zoom with half the step size of stepZoom\n\t  var stepSize = getStepSize(RANGE, NUM_STEPS * 2);\n\n\t  // add until threshold reached\n\t  this._totalDelta += delta;\n\n\t  if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {\n\t    this._zoom(delta, position, stepSize);\n\n\t    // reset\n\t    this._totalDelta = 0;\n\t  }\n\t};\n\n\n\tZoomScroll.prototype._handleWheel = function handleWheel(event) {\n\n\t  // event is already handled by '.djs-scrollable'\n\t  if (closest(event.target, '.djs-scrollable', true)) {\n\t    return;\n\t  }\n\n\t  var element = this._container;\n\n\t  event.preventDefault();\n\n\t  // pinch to zoom is mapped to wheel + ctrlKey = true\n\t  // in modern browsers (!)\n\n\t  var isZoom = event.ctrlKey;\n\n\t  var isHorizontalScroll = event.shiftKey;\n\n\t  var factor = -1 * this._scale,\n\t      delta;\n\n\t  if (isZoom) {\n\t    factor *= event.deltaMode === 0 ? 0.020 : 0.32;\n\t  } else {\n\t    factor *= event.deltaMode === 0 ? 1.0 : 16.0;\n\t  }\n\n\t  if (isZoom) {\n\t    var elementRect = element.getBoundingClientRect();\n\n\t    var offset = {\n\t      x: event.clientX - elementRect.left,\n\t      y: event.clientY - elementRect.top\n\t    };\n\n\t    delta = (\n\t      Math.sqrt(\n\t        Math.pow(event.deltaY, 2) +\n\t        Math.pow(event.deltaX, 2)\n\t      ) * sign(event.deltaY) * factor\n\t    );\n\n\t    // zoom in relative to diagram {x,y} coordinates\n\t    this.zoom(delta, offset);\n\t  } else {\n\n\t    if (isHorizontalScroll) {\n\t      delta = {\n\t        dx: factor * event.deltaY,\n\t        dy: 0\n\t      };\n\t    } else {\n\t      delta = {\n\t        dx: factor * event.deltaX,\n\t        dy: factor * event.deltaY\n\t      };\n\t    }\n\n\t    this.scroll(delta);\n\t  }\n\t};\n\n\t/**\n\t * Zoom with fixed step size.\n\t *\n\t * @param {number} delta - Zoom delta (1 for zooming in, -1 for out).\n\t * @param {Object} position\n\t */\n\tZoomScroll.prototype.stepZoom = function stepZoom(delta, position) {\n\n\t  var stepSize = getStepSize(RANGE, NUM_STEPS);\n\n\t  this._zoom(delta, position, stepSize);\n\t};\n\n\n\t/**\n\t * Zoom in/out given a step size.\n\t *\n\t * @param {number} delta\n\t * @param {Object} position\n\t * @param {number} stepSize\n\t */\n\tZoomScroll.prototype._zoom = function(delta, position, stepSize) {\n\t  var canvas = this._canvas;\n\n\t  var direction = delta > 0 ? 1 : -1;\n\n\t  var currentLinearZoomLevel = log10(canvas.zoom());\n\n\t  // snap to a proximate zoom step\n\t  var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;\n\n\t  // increase or decrease one zoom step in the given direction\n\t  newLinearZoomLevel += stepSize * direction;\n\n\t  // calculate the absolute logarithmic zoom level based on the linear zoom level\n\t  // (e.g. 2 for an absolute x2 zoom)\n\t  var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);\n\n\t  canvas.zoom(cap(RANGE, newLogZoomLevel), position);\n\t};\n\n\n\t/**\n\t * Toggle the zoom scroll ability via mouse wheel.\n\t *\n\t * @param  {boolean} [newEnabled] new enabled state\n\t */\n\tZoomScroll.prototype.toggle = function toggle(newEnabled) {\n\n\t  var element = this._container;\n\t  var handleWheel = this._handleWheel;\n\n\t  var oldEnabled = this._enabled;\n\n\t  if (typeof newEnabled === 'undefined') {\n\t    newEnabled = !oldEnabled;\n\t  }\n\n\t  // only react on actual changes\n\t  if (oldEnabled !== newEnabled) {\n\n\t    // add or remove wheel listener based on\n\t    // changed enabled state\n\t    componentEvent[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);\n\t  }\n\n\t  this._enabled = newEnabled;\n\n\t  return newEnabled;\n\t};\n\n\n\tZoomScroll.prototype._init = function(newEnabled) {\n\t  this.toggle(newEnabled);\n\t};\n\n\tvar ZoomScrollModule = {\n\t  __init__: [ 'zoomScroll' ],\n\t  zoomScroll: [ 'type', ZoomScroll ]\n\t};\n\n\t/**\n\t * A viewer that includes mouse navigation facilities\n\t *\n\t * @param {Object} options\n\t */\n\tfunction NavigatedViewer(options) {\n\t  Viewer.call(this, options);\n\t}\n\n\tinherits_browser(NavigatedViewer, Viewer);\n\n\n\tNavigatedViewer.prototype._navigationModules = [\n\t  KeyboardMoveModule,\n\t  MoveCanvasModule,\n\t  ZoomScrollModule\n\t];\n\n\tNavigatedViewer.prototype._modules = [].concat(\n\t  Viewer.prototype._modules,\n\t  NavigatedViewer.prototype._navigationModules\n\t);\n\n\tvar hammer = createCommonjsModule(function (module) {\n\t/*! Hammer.JS - v2.0.7 - 2016-04-22\n\t * http://hammerjs.github.io/\n\t *\n\t * Copyright (c) 2016 Jorik Tangelder;\n\t * Licensed under the MIT license */\n\t(function(window, document, exportName, undefined$1) {\n\n\tvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n\tvar TEST_ELEMENT = document.createElement('div');\n\n\tvar TYPE_FUNCTION = 'function';\n\n\tvar round = Math.round;\n\tvar abs = Math.abs;\n\tvar now = Date.now;\n\n\t/**\n\t * set a timeout with a given scope\n\t * @param {Function} fn\n\t * @param {Number} timeout\n\t * @param {Object} context\n\t * @returns {number}\n\t */\n\tfunction setTimeoutContext(fn, timeout, context) {\n\t    return setTimeout(bindFn(fn, context), timeout);\n\t}\n\n\t/**\n\t * if the argument is an array, we want to execute the fn on each entry\n\t * if it aint an array we don't want to do a thing.\n\t * this is used by all the methods that accept a single and array argument.\n\t * @param {*|Array} arg\n\t * @param {String} fn\n\t * @param {Object} [context]\n\t * @returns {Boolean}\n\t */\n\tfunction invokeArrayArg(arg, fn, context) {\n\t    if (Array.isArray(arg)) {\n\t        each(arg, context[fn], context);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * walk objects and arrays\n\t * @param {Object} obj\n\t * @param {Function} iterator\n\t * @param {Object} context\n\t */\n\tfunction each(obj, iterator, context) {\n\t    var i;\n\n\t    if (!obj) {\n\t        return;\n\t    }\n\n\t    if (obj.forEach) {\n\t        obj.forEach(iterator, context);\n\t    } else if (obj.length !== undefined$1) {\n\t        i = 0;\n\t        while (i < obj.length) {\n\t            iterator.call(context, obj[i], i, obj);\n\t            i++;\n\t        }\n\t    } else {\n\t        for (i in obj) {\n\t            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * wrap a method with a deprecation warning and stack trace\n\t * @param {Function} method\n\t * @param {String} name\n\t * @param {String} message\n\t * @returns {Function} A new function wrapping the supplied method.\n\t */\n\tfunction deprecate(method, name, message) {\n\t    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n\t    return function() {\n\t        var e = new Error('get-stack-trace');\n\t        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n\t            .replace(/^\\s+at\\s+/gm, '')\n\t            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n\t        var log = window.console && (window.console.warn || window.console.log);\n\t        if (log) {\n\t            log.call(window.console, deprecationMessage, stack);\n\t        }\n\t        return method.apply(this, arguments);\n\t    };\n\t}\n\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} target\n\t * @param {...Object} objects_to_assign\n\t * @returns {Object} target\n\t */\n\tvar assign;\n\tif (typeof Object.assign !== 'function') {\n\t    assign = function assign(target) {\n\t        if (target === undefined$1 || target === null) {\n\t            throw new TypeError('Cannot convert undefined or null to object');\n\t        }\n\n\t        var output = Object(target);\n\t        for (var index = 1; index < arguments.length; index++) {\n\t            var source = arguments[index];\n\t            if (source !== undefined$1 && source !== null) {\n\t                for (var nextKey in source) {\n\t                    if (source.hasOwnProperty(nextKey)) {\n\t                        output[nextKey] = source[nextKey];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return output;\n\t    };\n\t} else {\n\t    assign = Object.assign;\n\t}\n\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @param {Boolean} [merge=false]\n\t * @returns {Object} dest\n\t */\n\tvar extend = deprecate(function extend(dest, src, merge) {\n\t    var keys = Object.keys(src);\n\t    var i = 0;\n\t    while (i < keys.length) {\n\t        if (!merge || (merge && dest[keys[i]] === undefined$1)) {\n\t            dest[keys[i]] = src[keys[i]];\n\t        }\n\t        i++;\n\t    }\n\t    return dest;\n\t}, 'extend', 'Use `assign`.');\n\n\t/**\n\t * merge the values from src in the dest.\n\t * means that properties that exist in dest will not be overwritten by src\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @returns {Object} dest\n\t */\n\tvar merge = deprecate(function merge(dest, src) {\n\t    return extend(dest, src, true);\n\t}, 'merge', 'Use `assign`.');\n\n\t/**\n\t * simple class inheritance\n\t * @param {Function} child\n\t * @param {Function} base\n\t * @param {Object} [properties]\n\t */\n\tfunction inherit(child, base, properties) {\n\t    var baseP = base.prototype,\n\t        childP;\n\n\t    childP = child.prototype = Object.create(baseP);\n\t    childP.constructor = child;\n\t    childP._super = baseP;\n\n\t    if (properties) {\n\t        assign(childP, properties);\n\t    }\n\t}\n\n\t/**\n\t * simple function bind\n\t * @param {Function} fn\n\t * @param {Object} context\n\t * @returns {Function}\n\t */\n\tfunction bindFn(fn, context) {\n\t    return function boundFn() {\n\t        return fn.apply(context, arguments);\n\t    };\n\t}\n\n\t/**\n\t * let a boolean value also be a function that must return a boolean\n\t * this first item in args will be used as the context\n\t * @param {Boolean|Function} val\n\t * @param {Array} [args]\n\t * @returns {Boolean}\n\t */\n\tfunction boolOrFn(val, args) {\n\t    if (typeof val == TYPE_FUNCTION) {\n\t        return val.apply(args ? args[0] || undefined$1 : undefined$1, args);\n\t    }\n\t    return val;\n\t}\n\n\t/**\n\t * use the val2 when val1 is undefined\n\t * @param {*} val1\n\t * @param {*} val2\n\t * @returns {*}\n\t */\n\tfunction ifUndefined(val1, val2) {\n\t    return (val1 === undefined$1) ? val2 : val1;\n\t}\n\n\t/**\n\t * addEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction addEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.addEventListener(type, handler, false);\n\t    });\n\t}\n\n\t/**\n\t * removeEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction removeEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.removeEventListener(type, handler, false);\n\t    });\n\t}\n\n\t/**\n\t * find if a node is in the given parent\n\t * @method hasParent\n\t * @param {HTMLElement} node\n\t * @param {HTMLElement} parent\n\t * @return {Boolean} found\n\t */\n\tfunction hasParent(node, parent) {\n\t    while (node) {\n\t        if (node == parent) {\n\t            return true;\n\t        }\n\t        node = node.parentNode;\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * small indexOf wrapper\n\t * @param {String} str\n\t * @param {String} find\n\t * @returns {Boolean} found\n\t */\n\tfunction inStr(str, find) {\n\t    return str.indexOf(find) > -1;\n\t}\n\n\t/**\n\t * split string on whitespace\n\t * @param {String} str\n\t * @returns {Array} words\n\t */\n\tfunction splitStr(str) {\n\t    return str.trim().split(/\\s+/g);\n\t}\n\n\t/**\n\t * find if a array contains the object using indexOf or a simple polyFill\n\t * @param {Array} src\n\t * @param {String} find\n\t * @param {String} [findByKey]\n\t * @return {Boolean|Number} false when not found, or the index\n\t */\n\tfunction inArray(src, find, findByKey) {\n\t    if (src.indexOf && !findByKey) {\n\t        return src.indexOf(find);\n\t    } else {\n\t        var i = 0;\n\t        while (i < src.length) {\n\t            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n\t                return i;\n\t            }\n\t            i++;\n\t        }\n\t        return -1;\n\t    }\n\t}\n\n\t/**\n\t * convert array-like objects to real arrays\n\t * @param {Object} obj\n\t * @returns {Array}\n\t */\n\tfunction toArray(obj) {\n\t    return Array.prototype.slice.call(obj, 0);\n\t}\n\n\t/**\n\t * unique array with objects based on a key (like 'id') or just by the array's value\n\t * @param {Array} src [{id:1},{id:2},{id:1}]\n\t * @param {String} [key]\n\t * @param {Boolean} [sort=False]\n\t * @returns {Array} [{id:1},{id:2}]\n\t */\n\tfunction uniqueArray(src, key, sort) {\n\t    var results = [];\n\t    var values = [];\n\t    var i = 0;\n\n\t    while (i < src.length) {\n\t        var val = key ? src[i][key] : src[i];\n\t        if (inArray(values, val) < 0) {\n\t            results.push(src[i]);\n\t        }\n\t        values[i] = val;\n\t        i++;\n\t    }\n\n\t    if (sort) {\n\t        if (!key) {\n\t            results = results.sort();\n\t        } else {\n\t            results = results.sort(function sortUniqueArray(a, b) {\n\t                return a[key] > b[key];\n\t            });\n\t        }\n\t    }\n\n\t    return results;\n\t}\n\n\t/**\n\t * get the prefixed property\n\t * @param {Object} obj\n\t * @param {String} property\n\t * @returns {String|Undefined} prefixed\n\t */\n\tfunction prefixed(obj, property) {\n\t    var prefix, prop;\n\t    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n\t    var i = 0;\n\t    while (i < VENDOR_PREFIXES.length) {\n\t        prefix = VENDOR_PREFIXES[i];\n\t        prop = (prefix) ? prefix + camelProp : property;\n\n\t        if (prop in obj) {\n\t            return prop;\n\t        }\n\t        i++;\n\t    }\n\t    return undefined$1;\n\t}\n\n\t/**\n\t * get a unique id\n\t * @returns {number} uniqueId\n\t */\n\tvar _uniqueId = 1;\n\tfunction uniqueId() {\n\t    return _uniqueId++;\n\t}\n\n\t/**\n\t * get the window object of an element\n\t * @param {HTMLElement} element\n\t * @returns {DocumentView|Window}\n\t */\n\tfunction getWindowForElement(element) {\n\t    var doc = element.ownerDocument || element;\n\t    return (doc.defaultView || doc.parentWindow || window);\n\t}\n\n\tvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\n\tvar SUPPORT_TOUCH = ('ontouchstart' in window);\n\tvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;\n\tvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\n\tvar INPUT_TYPE_TOUCH = 'touch';\n\tvar INPUT_TYPE_PEN = 'pen';\n\tvar INPUT_TYPE_MOUSE = 'mouse';\n\tvar INPUT_TYPE_KINECT = 'kinect';\n\n\tvar COMPUTE_INTERVAL = 25;\n\n\tvar INPUT_START = 1;\n\tvar INPUT_MOVE = 2;\n\tvar INPUT_END = 4;\n\tvar INPUT_CANCEL = 8;\n\n\tvar DIRECTION_NONE = 1;\n\tvar DIRECTION_LEFT = 2;\n\tvar DIRECTION_RIGHT = 4;\n\tvar DIRECTION_UP = 8;\n\tvar DIRECTION_DOWN = 16;\n\n\tvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n\tvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n\tvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\n\tvar PROPS_XY = ['x', 'y'];\n\tvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n\t/**\n\t * create new input type manager\n\t * @param {Manager} manager\n\t * @param {Function} callback\n\t * @returns {Input}\n\t * @constructor\n\t */\n\tfunction Input(manager, callback) {\n\t    var self = this;\n\t    this.manager = manager;\n\t    this.callback = callback;\n\t    this.element = manager.element;\n\t    this.target = manager.options.inputTarget;\n\n\t    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n\t    // so when disabled the input events are completely bypassed.\n\t    this.domHandler = function(ev) {\n\t        if (boolOrFn(manager.options.enable, [manager])) {\n\t            self.handler(ev);\n\t        }\n\t    };\n\n\t    this.init();\n\n\t}\n\n\tInput.prototype = {\n\t    /**\n\t     * should handle the inputEvent data and trigger the callback\n\t     * @virtual\n\t     */\n\t    handler: function() { },\n\n\t    /**\n\t     * bind the events\n\t     */\n\t    init: function() {\n\t        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    },\n\n\t    /**\n\t     * unbind the events\n\t     */\n\t    destroy: function() {\n\t        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    }\n\t};\n\n\t/**\n\t * create new input type manager\n\t * called by the Manager constructor\n\t * @param {Hammer} manager\n\t * @returns {Input}\n\t */\n\tfunction createInputInstance(manager) {\n\t    var Type;\n\t    var inputClass = manager.options.inputClass;\n\n\t    if (inputClass) {\n\t        Type = inputClass;\n\t    } else if (SUPPORT_POINTER_EVENTS) {\n\t        Type = PointerEventInput;\n\t    } else if (SUPPORT_ONLY_TOUCH) {\n\t        Type = TouchInput;\n\t    } else if (!SUPPORT_TOUCH) {\n\t        Type = MouseInput;\n\t    } else {\n\t        Type = TouchMouseInput;\n\t    }\n\t    return new (Type)(manager, inputHandler);\n\t}\n\n\t/**\n\t * handle input events\n\t * @param {Manager} manager\n\t * @param {String} eventType\n\t * @param {Object} input\n\t */\n\tfunction inputHandler(manager, eventType, input) {\n\t    var pointersLen = input.pointers.length;\n\t    var changedPointersLen = input.changedPointers.length;\n\t    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n\t    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n\t    input.isFirst = !!isFirst;\n\t    input.isFinal = !!isFinal;\n\n\t    if (isFirst) {\n\t        manager.session = {};\n\t    }\n\n\t    // source event is the normalized value of the domEvents\n\t    // like 'touchstart, mouseup, pointerdown'\n\t    input.eventType = eventType;\n\n\t    // compute scale, rotation etc\n\t    computeInputData(manager, input);\n\n\t    // emit secret event\n\t    manager.emit('hammer.input', input);\n\n\t    manager.recognize(input);\n\t    manager.session.prevInput = input;\n\t}\n\n\t/**\n\t * extend the data with some usable properties like scale, rotate, velocity etc\n\t * @param {Object} manager\n\t * @param {Object} input\n\t */\n\tfunction computeInputData(manager, input) {\n\t    var session = manager.session;\n\t    var pointers = input.pointers;\n\t    var pointersLength = pointers.length;\n\n\t    // store the first input to calculate the distance and direction\n\t    if (!session.firstInput) {\n\t        session.firstInput = simpleCloneInputData(input);\n\t    }\n\n\t    // to compute scale and rotation we need to store the multiple touches\n\t    if (pointersLength > 1 && !session.firstMultiple) {\n\t        session.firstMultiple = simpleCloneInputData(input);\n\t    } else if (pointersLength === 1) {\n\t        session.firstMultiple = false;\n\t    }\n\n\t    var firstInput = session.firstInput;\n\t    var firstMultiple = session.firstMultiple;\n\t    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n\t    var center = input.center = getCenter(pointers);\n\t    input.timeStamp = now();\n\t    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n\t    input.angle = getAngle(offsetCenter, center);\n\t    input.distance = getDistance(offsetCenter, center);\n\n\t    computeDeltaXY(session, input);\n\t    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n\t    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n\t    input.overallVelocityX = overallVelocity.x;\n\t    input.overallVelocityY = overallVelocity.y;\n\t    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n\t    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n\t    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n\t    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n\t        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n\t    computeIntervalInputData(session, input);\n\n\t    // find the correct target\n\t    var target = manager.element;\n\t    if (hasParent(input.srcEvent.target, target)) {\n\t        target = input.srcEvent.target;\n\t    }\n\t    input.target = target;\n\t}\n\n\tfunction computeDeltaXY(session, input) {\n\t    var center = input.center;\n\t    var offset = session.offsetDelta || {};\n\t    var prevDelta = session.prevDelta || {};\n\t    var prevInput = session.prevInput || {};\n\n\t    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n\t        prevDelta = session.prevDelta = {\n\t            x: prevInput.deltaX || 0,\n\t            y: prevInput.deltaY || 0\n\t        };\n\n\t        offset = session.offsetDelta = {\n\t            x: center.x,\n\t            y: center.y\n\t        };\n\t    }\n\n\t    input.deltaX = prevDelta.x + (center.x - offset.x);\n\t    input.deltaY = prevDelta.y + (center.y - offset.y);\n\t}\n\n\t/**\n\t * velocity is calculated every x ms\n\t * @param {Object} session\n\t * @param {Object} input\n\t */\n\tfunction computeIntervalInputData(session, input) {\n\t    var last = session.lastInterval || input,\n\t        deltaTime = input.timeStamp - last.timeStamp,\n\t        velocity, velocityX, velocityY, direction;\n\n\t    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {\n\t        var deltaX = input.deltaX - last.deltaX;\n\t        var deltaY = input.deltaY - last.deltaY;\n\n\t        var v = getVelocity(deltaTime, deltaX, deltaY);\n\t        velocityX = v.x;\n\t        velocityY = v.y;\n\t        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n\t        direction = getDirection(deltaX, deltaY);\n\n\t        session.lastInterval = input;\n\t    } else {\n\t        // use latest velocity info if it doesn't overtake a minimum period\n\t        velocity = last.velocity;\n\t        velocityX = last.velocityX;\n\t        velocityY = last.velocityY;\n\t        direction = last.direction;\n\t    }\n\n\t    input.velocity = velocity;\n\t    input.velocityX = velocityX;\n\t    input.velocityY = velocityY;\n\t    input.direction = direction;\n\t}\n\n\t/**\n\t * create a simple clone from the input used for storage of firstInput and firstMultiple\n\t * @param {Object} input\n\t * @returns {Object} clonedInputData\n\t */\n\tfunction simpleCloneInputData(input) {\n\t    // make a simple copy of the pointers because we will get a reference if we don't\n\t    // we only need clientXY for the calculations\n\t    var pointers = [];\n\t    var i = 0;\n\t    while (i < input.pointers.length) {\n\t        pointers[i] = {\n\t            clientX: round(input.pointers[i].clientX),\n\t            clientY: round(input.pointers[i].clientY)\n\t        };\n\t        i++;\n\t    }\n\n\t    return {\n\t        timeStamp: now(),\n\t        pointers: pointers,\n\t        center: getCenter(pointers),\n\t        deltaX: input.deltaX,\n\t        deltaY: input.deltaY\n\t    };\n\t}\n\n\t/**\n\t * get the center of all the pointers\n\t * @param {Array} pointers\n\t * @return {Object} center contains `x` and `y` properties\n\t */\n\tfunction getCenter(pointers) {\n\t    var pointersLength = pointers.length;\n\n\t    // no need to loop when only one touch\n\t    if (pointersLength === 1) {\n\t        return {\n\t            x: round(pointers[0].clientX),\n\t            y: round(pointers[0].clientY)\n\t        };\n\t    }\n\n\t    var x = 0, y = 0, i = 0;\n\t    while (i < pointersLength) {\n\t        x += pointers[i].clientX;\n\t        y += pointers[i].clientY;\n\t        i++;\n\t    }\n\n\t    return {\n\t        x: round(x / pointersLength),\n\t        y: round(y / pointersLength)\n\t    };\n\t}\n\n\t/**\n\t * calculate the velocity between two points. unit is in px per ms.\n\t * @param {Number} deltaTime\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Object} velocity `x` and `y`\n\t */\n\tfunction getVelocity(deltaTime, x, y) {\n\t    return {\n\t        x: x / deltaTime || 0,\n\t        y: y / deltaTime || 0\n\t    };\n\t}\n\n\t/**\n\t * get the direction between two points\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Number} direction\n\t */\n\tfunction getDirection(x, y) {\n\t    if (x === y) {\n\t        return DIRECTION_NONE;\n\t    }\n\n\t    if (abs(x) >= abs(y)) {\n\t        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t    }\n\t    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n\t}\n\n\t/**\n\t * calculate the absolute distance between two points\n\t * @param {Object} p1 {x, y}\n\t * @param {Object} p2 {x, y}\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} distance\n\t */\n\tfunction getDistance(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\n\t    return Math.sqrt((x * x) + (y * y));\n\t}\n\n\t/**\n\t * calculate the angle between two coordinates\n\t * @param {Object} p1\n\t * @param {Object} p2\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} angle\n\t */\n\tfunction getAngle(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t    return Math.atan2(y, x) * 180 / Math.PI;\n\t}\n\n\t/**\n\t * calculate the rotation degrees between two pointersets\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} rotation\n\t */\n\tfunction getRotation(start, end) {\n\t    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n\t}\n\n\t/**\n\t * calculate the scale factor between two pointersets\n\t * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} scale\n\t */\n\tfunction getScale(start, end) {\n\t    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n\t}\n\n\tvar MOUSE_INPUT_MAP = {\n\t    mousedown: INPUT_START,\n\t    mousemove: INPUT_MOVE,\n\t    mouseup: INPUT_END\n\t};\n\n\tvar MOUSE_ELEMENT_EVENTS = 'mousedown';\n\tvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n\t/**\n\t * Mouse events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction MouseInput() {\n\t    this.evEl = MOUSE_ELEMENT_EVENTS;\n\t    this.evWin = MOUSE_WINDOW_EVENTS;\n\n\t    this.pressed = false; // mousedown state\n\n\t    Input.apply(this, arguments);\n\t}\n\n\tinherit(MouseInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function MEhandler(ev) {\n\t        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n\t        // on start we want to have the left mouse button down\n\t        if (eventType & INPUT_START && ev.button === 0) {\n\t            this.pressed = true;\n\t        }\n\n\t        if (eventType & INPUT_MOVE && ev.which !== 1) {\n\t            eventType = INPUT_END;\n\t        }\n\n\t        // mouse must be down\n\t        if (!this.pressed) {\n\t            return;\n\t        }\n\n\t        if (eventType & INPUT_END) {\n\t            this.pressed = false;\n\t        }\n\n\t        this.callback(this.manager, eventType, {\n\t            pointers: [ev],\n\t            changedPointers: [ev],\n\t            pointerType: INPUT_TYPE_MOUSE,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\n\tvar POINTER_INPUT_MAP = {\n\t    pointerdown: INPUT_START,\n\t    pointermove: INPUT_MOVE,\n\t    pointerup: INPUT_END,\n\t    pointercancel: INPUT_CANCEL,\n\t    pointerout: INPUT_CANCEL\n\t};\n\n\t// in IE10 the pointer types is defined as an enum\n\tvar IE10_POINTER_TYPE_ENUM = {\n\t    2: INPUT_TYPE_TOUCH,\n\t    3: INPUT_TYPE_PEN,\n\t    4: INPUT_TYPE_MOUSE,\n\t    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\t};\n\n\tvar POINTER_ELEMENT_EVENTS = 'pointerdown';\n\tvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n\t// IE10 has prefixed support, and case-sensitive\n\tif (window.MSPointerEvent && !window.PointerEvent) {\n\t    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n\t    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n\t}\n\n\t/**\n\t * Pointer events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction PointerEventInput() {\n\t    this.evEl = POINTER_ELEMENT_EVENTS;\n\t    this.evWin = POINTER_WINDOW_EVENTS;\n\n\t    Input.apply(this, arguments);\n\n\t    this.store = (this.manager.session.pointerEvents = []);\n\t}\n\n\tinherit(PointerEventInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function PEhandler(ev) {\n\t        var store = this.store;\n\t        var removePointer = false;\n\n\t        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n\t        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n\t        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n\t        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n\t        // get index of the event in the store\n\t        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n\t        // start and mouse must be down\n\t        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n\t            if (storeIndex < 0) {\n\t                store.push(ev);\n\t                storeIndex = store.length - 1;\n\t            }\n\t        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t            removePointer = true;\n\t        }\n\n\t        // it not found, so the pointer hasn't been down (so it's probably a hover)\n\t        if (storeIndex < 0) {\n\t            return;\n\t        }\n\n\t        // update the event in the store\n\t        store[storeIndex] = ev;\n\n\t        this.callback(this.manager, eventType, {\n\t            pointers: store,\n\t            changedPointers: [ev],\n\t            pointerType: pointerType,\n\t            srcEvent: ev\n\t        });\n\n\t        if (removePointer) {\n\t            // remove from the store\n\t            store.splice(storeIndex, 1);\n\t        }\n\t    }\n\t});\n\n\tvar SINGLE_TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\n\tvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n\tvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n\t/**\n\t * Touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction SingleTouchInput() {\n\t    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n\t    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n\t    this.started = false;\n\n\t    Input.apply(this, arguments);\n\t}\n\n\tinherit(SingleTouchInput, Input, {\n\t    handler: function TEhandler(ev) {\n\t        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n\t        // should we handle the touch events?\n\t        if (type === INPUT_START) {\n\t            this.started = true;\n\t        }\n\n\t        if (!this.started) {\n\t            return;\n\t        }\n\n\t        var touches = normalizeSingleTouches.call(this, ev, type);\n\n\t        // when done, reset the started state\n\t        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n\t            this.started = false;\n\t        }\n\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction normalizeSingleTouches(ev, type) {\n\t    var all = toArray(ev.touches);\n\t    var changed = toArray(ev.changedTouches);\n\n\t    if (type & (INPUT_END | INPUT_CANCEL)) {\n\t        all = uniqueArray(all.concat(changed), 'identifier', true);\n\t    }\n\n\t    return [all, changed];\n\t}\n\n\tvar TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\n\tvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n\t/**\n\t * Multi-user touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction TouchInput() {\n\t    this.evTarget = TOUCH_TARGET_EVENTS;\n\t    this.targetIds = {};\n\n\t    Input.apply(this, arguments);\n\t}\n\n\tinherit(TouchInput, Input, {\n\t    handler: function MTEhandler(ev) {\n\t        var type = TOUCH_INPUT_MAP[ev.type];\n\t        var touches = getTouches.call(this, ev, type);\n\t        if (!touches) {\n\t            return;\n\t        }\n\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction getTouches(ev, type) {\n\t    var allTouches = toArray(ev.touches);\n\t    var targetIds = this.targetIds;\n\n\t    // when there is only one touch, the process can be simplified\n\t    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n\t        targetIds[allTouches[0].identifier] = true;\n\t        return [allTouches, allTouches];\n\t    }\n\n\t    var i,\n\t        targetTouches,\n\t        changedTouches = toArray(ev.changedTouches),\n\t        changedTargetTouches = [],\n\t        target = this.target;\n\n\t    // get target touches from touches\n\t    targetTouches = allTouches.filter(function(touch) {\n\t        return hasParent(touch.target, target);\n\t    });\n\n\t    // collect touches\n\t    if (type === INPUT_START) {\n\t        i = 0;\n\t        while (i < targetTouches.length) {\n\t            targetIds[targetTouches[i].identifier] = true;\n\t            i++;\n\t        }\n\t    }\n\n\t    // filter changed touches to only contain touches that exist in the collected target ids\n\t    i = 0;\n\t    while (i < changedTouches.length) {\n\t        if (targetIds[changedTouches[i].identifier]) {\n\t            changedTargetTouches.push(changedTouches[i]);\n\t        }\n\n\t        // cleanup removed touches\n\t        if (type & (INPUT_END | INPUT_CANCEL)) {\n\t            delete targetIds[changedTouches[i].identifier];\n\t        }\n\t        i++;\n\t    }\n\n\t    if (!changedTargetTouches.length) {\n\t        return;\n\t    }\n\n\t    return [\n\t        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n\t        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n\t        changedTargetTouches\n\t    ];\n\t}\n\n\t/**\n\t * Combined touch and mouse input\n\t *\n\t * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n\t * This because touch devices also emit mouse events while doing a touch.\n\t *\n\t * @constructor\n\t * @extends Input\n\t */\n\n\tvar DEDUP_TIMEOUT = 2500;\n\tvar DEDUP_DISTANCE = 25;\n\n\tfunction TouchMouseInput() {\n\t    Input.apply(this, arguments);\n\n\t    var handler = bindFn(this.handler, this);\n\t    this.touch = new TouchInput(this.manager, handler);\n\t    this.mouse = new MouseInput(this.manager, handler);\n\n\t    this.primaryTouch = null;\n\t    this.lastTouches = [];\n\t}\n\n\tinherit(TouchMouseInput, Input, {\n\t    /**\n\t     * handle mouse and touch events\n\t     * @param {Hammer} manager\n\t     * @param {String} inputEvent\n\t     * @param {Object} inputData\n\t     */\n\t    handler: function TMEhandler(manager, inputEvent, inputData) {\n\t        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n\t            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n\t        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n\t            return;\n\t        }\n\n\t        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\t        if (isTouch) {\n\t            recordTouches.call(this, inputEvent, inputData);\n\t        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n\t            return;\n\t        }\n\n\t        this.callback(manager, inputEvent, inputData);\n\t    },\n\n\t    /**\n\t     * remove the event listeners\n\t     */\n\t    destroy: function destroy() {\n\t        this.touch.destroy();\n\t        this.mouse.destroy();\n\t    }\n\t});\n\n\tfunction recordTouches(eventType, eventData) {\n\t    if (eventType & INPUT_START) {\n\t        this.primaryTouch = eventData.changedPointers[0].identifier;\n\t        setLastTouch.call(this, eventData);\n\t    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t        setLastTouch.call(this, eventData);\n\t    }\n\t}\n\n\tfunction setLastTouch(eventData) {\n\t    var touch = eventData.changedPointers[0];\n\n\t    if (touch.identifier === this.primaryTouch) {\n\t        var lastTouch = {x: touch.clientX, y: touch.clientY};\n\t        this.lastTouches.push(lastTouch);\n\t        var lts = this.lastTouches;\n\t        var removeLastTouch = function() {\n\t            var i = lts.indexOf(lastTouch);\n\t            if (i > -1) {\n\t                lts.splice(i, 1);\n\t            }\n\t        };\n\t        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n\t    }\n\t}\n\n\tfunction isSyntheticEvent(eventData) {\n\t    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n\t    for (var i = 0; i < this.lastTouches.length; i++) {\n\t        var t = this.lastTouches[i];\n\t        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n\t        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\n\tvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n\tvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1;\n\n\t// magical touchAction value\n\tvar TOUCH_ACTION_COMPUTE = 'compute';\n\tvar TOUCH_ACTION_AUTO = 'auto';\n\tvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\tvar TOUCH_ACTION_NONE = 'none';\n\tvar TOUCH_ACTION_PAN_X = 'pan-x';\n\tvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\tvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n\t/**\n\t * Touch Action\n\t * sets the touchAction property or uses the js alternative\n\t * @param {Manager} manager\n\t * @param {String} value\n\t * @constructor\n\t */\n\tfunction TouchAction(manager, value) {\n\t    this.manager = manager;\n\t    this.set(value);\n\t}\n\n\tTouchAction.prototype = {\n\t    /**\n\t     * set the touchAction value on the element or enable the polyfill\n\t     * @param {String} value\n\t     */\n\t    set: function(value) {\n\t        // find out the touch-action by the event handlers\n\t        if (value == TOUCH_ACTION_COMPUTE) {\n\t            value = this.compute();\n\t        }\n\n\t        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n\t            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n\t        }\n\t        this.actions = value.toLowerCase().trim();\n\t    },\n\n\t    /**\n\t     * just re-set the touchAction value\n\t     */\n\t    update: function() {\n\t        this.set(this.manager.options.touchAction);\n\t    },\n\n\t    /**\n\t     * compute the value for the touchAction property based on the recognizer's settings\n\t     * @returns {String} value\n\t     */\n\t    compute: function() {\n\t        var actions = [];\n\t        each(this.manager.recognizers, function(recognizer) {\n\t            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n\t                actions = actions.concat(recognizer.getTouchAction());\n\t            }\n\t        });\n\t        return cleanTouchActions(actions.join(' '));\n\t    },\n\n\t    /**\n\t     * this method is called on each input cycle and provides the preventing of the browser behavior\n\t     * @param {Object} input\n\t     */\n\t    preventDefaults: function(input) {\n\t        var srcEvent = input.srcEvent;\n\t        var direction = input.offsetDirection;\n\n\t        // if the touch action did prevented once this session\n\t        if (this.manager.session.prevented) {\n\t            srcEvent.preventDefault();\n\t            return;\n\t        }\n\n\t        var actions = this.actions;\n\t        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n\t        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n\t        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n\t        if (hasNone) {\n\t            //do not prevent defaults if this is a tap gesture\n\n\t            var isTapPointer = input.pointers.length === 1;\n\t            var isTapMovement = input.distance < 2;\n\t            var isTapTouchTime = input.deltaTime < 250;\n\n\t            if (isTapPointer && isTapMovement && isTapTouchTime) {\n\t                return;\n\t            }\n\t        }\n\n\t        if (hasPanX && hasPanY) {\n\t            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n\t            return;\n\t        }\n\n\t        if (hasNone ||\n\t            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n\t            (hasPanX && direction & DIRECTION_VERTICAL)) {\n\t            return this.preventSrc(srcEvent);\n\t        }\n\t    },\n\n\t    /**\n\t     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n\t     * @param {Object} srcEvent\n\t     */\n\t    preventSrc: function(srcEvent) {\n\t        this.manager.session.prevented = true;\n\t        srcEvent.preventDefault();\n\t    }\n\t};\n\n\t/**\n\t * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n\t * @param {String} actions\n\t * @returns {*}\n\t */\n\tfunction cleanTouchActions(actions) {\n\t    // none\n\t    if (inStr(actions, TOUCH_ACTION_NONE)) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\n\t    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\t    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n\t    // if both pan-x and pan-y are set (different recognizers\n\t    // for different directions, e.g. horizontal pan but vertical swipe?)\n\t    // we need none (as otherwise with pan-x pan-y combined none of these\n\t    // recognizers will work, since the browser would handle all panning\n\t    if (hasPanX && hasPanY) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\n\t    // pan-x OR pan-y\n\t    if (hasPanX || hasPanY) {\n\t        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n\t    }\n\n\t    // manipulation\n\t    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n\t        return TOUCH_ACTION_MANIPULATION;\n\t    }\n\n\t    return TOUCH_ACTION_AUTO;\n\t}\n\n\tfunction getTouchActionProps() {\n\t    if (!NATIVE_TOUCH_ACTION) {\n\t        return false;\n\t    }\n\t    var touchMap = {};\n\t    var cssSupports = window.CSS && window.CSS.supports;\n\t    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n\t        // If css.supports is not supported but there is native touch-action assume it supports\n\t        // all values. This is the case for IE 10 and 11.\n\t        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n\t    });\n\t    return touchMap;\n\t}\n\n\t/**\n\t * Recognizer flow explained; *\n\t * All recognizers have the initial state of POSSIBLE when a input session starts.\n\t * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n\t * Example session for mouse-input: mousedown -> mousemove -> mouseup\n\t *\n\t * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n\t * which determines with state it should be.\n\t *\n\t * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n\t * POSSIBLE to give it another change on the next cycle.\n\t *\n\t *               Possible\n\t *                  |\n\t *            +-----+---------------+\n\t *            |                     |\n\t *      +-----+-----+               |\n\t *      |           |               |\n\t *   Failed      Cancelled          |\n\t *                          +-------+------+\n\t *                          |              |\n\t *                      Recognized       Began\n\t *                                         |\n\t *                                      Changed\n\t *                                         |\n\t *                                  Ended/Recognized\n\t */\n\tvar STATE_POSSIBLE = 1;\n\tvar STATE_BEGAN = 2;\n\tvar STATE_CHANGED = 4;\n\tvar STATE_ENDED = 8;\n\tvar STATE_RECOGNIZED = STATE_ENDED;\n\tvar STATE_CANCELLED = 16;\n\tvar STATE_FAILED = 32;\n\n\t/**\n\t * Recognizer\n\t * Every recognizer needs to extend from this class.\n\t * @constructor\n\t * @param {Object} options\n\t */\n\tfunction Recognizer(options) {\n\t    this.options = assign({}, this.defaults, options || {});\n\n\t    this.id = uniqueId();\n\n\t    this.manager = null;\n\n\t    // default is enable true\n\t    this.options.enable = ifUndefined(this.options.enable, true);\n\n\t    this.state = STATE_POSSIBLE;\n\n\t    this.simultaneous = {};\n\t    this.requireFail = [];\n\t}\n\n\tRecognizer.prototype = {\n\t    /**\n\t     * @virtual\n\t     * @type {Object}\n\t     */\n\t    defaults: {},\n\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @return {Recognizer}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\n\t        // also update the touchAction, in case something changed about the directions/enabled state\n\t        this.manager && this.manager.touchAction.update();\n\t        return this;\n\t    },\n\n\t    /**\n\t     * recognize simultaneous with an other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    recognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n\t            return this;\n\t        }\n\n\t        var simultaneous = this.simultaneous;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (!simultaneous[otherRecognizer.id]) {\n\t            simultaneous[otherRecognizer.id] = otherRecognizer;\n\t            otherRecognizer.recognizeWith(this);\n\t        }\n\t        return this;\n\t    },\n\n\t    /**\n\t     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRecognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n\t            return this;\n\t        }\n\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        delete this.simultaneous[otherRecognizer.id];\n\t        return this;\n\t    },\n\n\t    /**\n\t     * recognizer can only run when an other is failing\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    requireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n\t            return this;\n\t        }\n\n\t        var requireFail = this.requireFail;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (inArray(requireFail, otherRecognizer) === -1) {\n\t            requireFail.push(otherRecognizer);\n\t            otherRecognizer.requireFailure(this);\n\t        }\n\t        return this;\n\t    },\n\n\t    /**\n\t     * drop the requireFailure link. it does not remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRequireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n\t            return this;\n\t        }\n\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        var index = inArray(this.requireFail, otherRecognizer);\n\t        if (index > -1) {\n\t            this.requireFail.splice(index, 1);\n\t        }\n\t        return this;\n\t    },\n\n\t    /**\n\t     * has require failures boolean\n\t     * @returns {boolean}\n\t     */\n\t    hasRequireFailures: function() {\n\t        return this.requireFail.length > 0;\n\t    },\n\n\t    /**\n\t     * if the recognizer can recognize simultaneous with an other recognizer\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Boolean}\n\t     */\n\t    canRecognizeWith: function(otherRecognizer) {\n\t        return !!this.simultaneous[otherRecognizer.id];\n\t    },\n\n\t    /**\n\t     * You should use `tryEmit` instead of `emit` directly to check\n\t     * that all the needed recognizers has failed before emitting.\n\t     * @param {Object} input\n\t     */\n\t    emit: function(input) {\n\t        var self = this;\n\t        var state = this.state;\n\n\t        function emit(event) {\n\t            self.manager.emit(event, input);\n\t        }\n\n\t        // 'panstart' and 'panmove'\n\t        if (state < STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\n\t        emit(self.options.event); // simple 'eventName' events\n\n\t        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n\t            emit(input.additionalEvent);\n\t        }\n\n\t        // panend and pancancel\n\t        if (state >= STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\t    },\n\n\t    /**\n\t     * Check that all the require failure recognizers has failed,\n\t     * if true, it emits a gesture event,\n\t     * otherwise, setup the state to FAILED.\n\t     * @param {Object} input\n\t     */\n\t    tryEmit: function(input) {\n\t        if (this.canEmit()) {\n\t            return this.emit(input);\n\t        }\n\t        // it's failing anyway\n\t        this.state = STATE_FAILED;\n\t    },\n\n\t    /**\n\t     * can we emit?\n\t     * @returns {boolean}\n\t     */\n\t    canEmit: function() {\n\t        var i = 0;\n\t        while (i < this.requireFail.length) {\n\t            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n\t                return false;\n\t            }\n\t            i++;\n\t        }\n\t        return true;\n\t    },\n\n\t    /**\n\t     * update the recognizer\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        // make a new copy of the inputData\n\t        // so we can change the inputData without messing up the other recognizers\n\t        var inputDataClone = assign({}, inputData);\n\n\t        // is is enabled and allow recognizing?\n\t        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n\t            this.reset();\n\t            this.state = STATE_FAILED;\n\t            return;\n\t        }\n\n\t        // reset when we've reached the end\n\t        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n\t            this.state = STATE_POSSIBLE;\n\t        }\n\n\t        this.state = this.process(inputDataClone);\n\n\t        // the recognizer has recognized a gesture\n\t        // so trigger an event\n\t        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n\t            this.tryEmit(inputDataClone);\n\t        }\n\t    },\n\n\t    /**\n\t     * return the state of the recognizer\n\t     * the actual recognizing happens in this method\n\t     * @virtual\n\t     * @param {Object} inputData\n\t     * @returns {Const} STATE\n\t     */\n\t    process: function(inputData) { }, // jshint ignore:line\n\n\t    /**\n\t     * return the preferred touch-action\n\t     * @virtual\n\t     * @returns {Array}\n\t     */\n\t    getTouchAction: function() { },\n\n\t    /**\n\t     * called when the gesture isn't allowed to recognize\n\t     * like when another is being recognized or it is disabled\n\t     * @virtual\n\t     */\n\t    reset: function() { }\n\t};\n\n\t/**\n\t * get a usable string, used as event postfix\n\t * @param {Const} state\n\t * @returns {String} state\n\t */\n\tfunction stateStr(state) {\n\t    if (state & STATE_CANCELLED) {\n\t        return 'cancel';\n\t    } else if (state & STATE_ENDED) {\n\t        return 'end';\n\t    } else if (state & STATE_CHANGED) {\n\t        return 'move';\n\t    } else if (state & STATE_BEGAN) {\n\t        return 'start';\n\t    }\n\t    return '';\n\t}\n\n\t/**\n\t * direction cons to string\n\t * @param {Const} direction\n\t * @returns {String}\n\t */\n\tfunction directionStr(direction) {\n\t    if (direction == DIRECTION_DOWN) {\n\t        return 'down';\n\t    } else if (direction == DIRECTION_UP) {\n\t        return 'up';\n\t    } else if (direction == DIRECTION_LEFT) {\n\t        return 'left';\n\t    } else if (direction == DIRECTION_RIGHT) {\n\t        return 'right';\n\t    }\n\t    return '';\n\t}\n\n\t/**\n\t * get a recognizer by name if it is bound to a manager\n\t * @param {Recognizer|String} otherRecognizer\n\t * @param {Recognizer} recognizer\n\t * @returns {Recognizer}\n\t */\n\tfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n\t    var manager = recognizer.manager;\n\t    if (manager) {\n\t        return manager.get(otherRecognizer);\n\t    }\n\t    return otherRecognizer;\n\t}\n\n\t/**\n\t * This recognizer is just used as a base for the simple attribute recognizers.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction AttrRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t}\n\n\tinherit(AttrRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof AttrRecognizer\n\t     */\n\t    defaults: {\n\t        /**\n\t         * @type {Number}\n\t         * @default 1\n\t         */\n\t        pointers: 1\n\t    },\n\n\t    /**\n\t     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {Boolean} recognized\n\t     */\n\t    attrTest: function(input) {\n\t        var optionPointers = this.options.pointers;\n\t        return optionPointers === 0 || input.pointers.length === optionPointers;\n\t    },\n\n\t    /**\n\t     * Process the input and return the state for the recognizer\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {*} State\n\t     */\n\t    process: function(input) {\n\t        var state = this.state;\n\t        var eventType = input.eventType;\n\n\t        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n\t        var isValid = this.attrTest(input);\n\n\t        // on cancel input and we've recognized before, return STATE_CANCELLED\n\t        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n\t            return state | STATE_CANCELLED;\n\t        } else if (isRecognized || isValid) {\n\t            if (eventType & INPUT_END) {\n\t                return state | STATE_ENDED;\n\t            } else if (!(state & STATE_BEGAN)) {\n\t                return STATE_BEGAN;\n\t            }\n\t            return state | STATE_CHANGED;\n\t        }\n\t        return STATE_FAILED;\n\t    }\n\t});\n\n\t/**\n\t * Pan\n\t * Recognized when the pointer is down and moved in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PanRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\n\t    this.pX = null;\n\t    this.pY = null;\n\t}\n\n\tinherit(PanRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PanRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pan',\n\t        threshold: 10,\n\t        pointers: 1,\n\t        direction: DIRECTION_ALL\n\t    },\n\n\t    getTouchAction: function() {\n\t        var direction = this.options.direction;\n\t        var actions = [];\n\t        if (direction & DIRECTION_HORIZONTAL) {\n\t            actions.push(TOUCH_ACTION_PAN_Y);\n\t        }\n\t        if (direction & DIRECTION_VERTICAL) {\n\t            actions.push(TOUCH_ACTION_PAN_X);\n\t        }\n\t        return actions;\n\t    },\n\n\t    directionTest: function(input) {\n\t        var options = this.options;\n\t        var hasMoved = true;\n\t        var distance = input.distance;\n\t        var direction = input.direction;\n\t        var x = input.deltaX;\n\t        var y = input.deltaY;\n\n\t        // lock to axis?\n\t        if (!(direction & options.direction)) {\n\t            if (options.direction & DIRECTION_HORIZONTAL) {\n\t                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t                hasMoved = x != this.pX;\n\t                distance = Math.abs(input.deltaX);\n\t            } else {\n\t                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n\t                hasMoved = y != this.pY;\n\t                distance = Math.abs(input.deltaY);\n\t            }\n\t        }\n\t        input.direction = direction;\n\t        return hasMoved && distance > options.threshold && direction & options.direction;\n\t    },\n\n\t    attrTest: function(input) {\n\t        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n\t            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n\t    },\n\n\t    emit: function(input) {\n\n\t        this.pX = input.deltaX;\n\t        this.pY = input.deltaY;\n\n\t        var direction = directionStr(input.direction);\n\n\t        if (direction) {\n\t            input.additionalEvent = this.options.event + direction;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\n\t/**\n\t * Pinch\n\t * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PinchRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\n\tinherit(PinchRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pinch',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n\t    },\n\n\t    emit: function(input) {\n\t        if (input.scale !== 1) {\n\t            var inOut = input.scale < 1 ? 'in' : 'out';\n\t            input.additionalEvent = this.options.event + inOut;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\n\t/**\n\t * Press\n\t * Recognized when the pointer is down for x ms without any movement.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction PressRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\n\t    this._timer = null;\n\t    this._input = null;\n\t}\n\n\tinherit(PressRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PressRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'press',\n\t        pointers: 1,\n\t        time: 251, // minimal time of the pointer to be pressed\n\t        threshold: 9 // a minimal movement is ok, but keep it low\n\t    },\n\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_AUTO];\n\t    },\n\n\t    process: function(input) {\n\t        var options = this.options;\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTime = input.deltaTime > options.time;\n\n\t        this._input = input;\n\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n\t            this.reset();\n\t        } else if (input.eventType & INPUT_START) {\n\t            this.reset();\n\t            this._timer = setTimeoutContext(function() {\n\t                this.state = STATE_RECOGNIZED;\n\t                this.tryEmit();\n\t            }, options.time, this);\n\t        } else if (input.eventType & INPUT_END) {\n\t            return STATE_RECOGNIZED;\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\n\t    emit: function(input) {\n\t        if (this.state !== STATE_RECOGNIZED) {\n\t            return;\n\t        }\n\n\t        if (input && (input.eventType & INPUT_END)) {\n\t            this.manager.emit(this.options.event + 'up', input);\n\t        } else {\n\t            this._input.timeStamp = now();\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\n\t/**\n\t * Rotate\n\t * Recognized when two or more pointer are moving in a circular motion.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction RotateRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\n\tinherit(RotateRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof RotateRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'rotate',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n\t    }\n\t});\n\n\t/**\n\t * Swipe\n\t * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction SwipeRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\n\tinherit(SwipeRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof SwipeRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'swipe',\n\t        threshold: 10,\n\t        velocity: 0.3,\n\t        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n\t        pointers: 1\n\t    },\n\n\t    getTouchAction: function() {\n\t        return PanRecognizer.prototype.getTouchAction.call(this);\n\t    },\n\n\t    attrTest: function(input) {\n\t        var direction = this.options.direction;\n\t        var velocity;\n\n\t        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n\t            velocity = input.overallVelocity;\n\t        } else if (direction & DIRECTION_HORIZONTAL) {\n\t            velocity = input.overallVelocityX;\n\t        } else if (direction & DIRECTION_VERTICAL) {\n\t            velocity = input.overallVelocityY;\n\t        }\n\n\t        return this._super.attrTest.call(this, input) &&\n\t            direction & input.offsetDirection &&\n\t            input.distance > this.options.threshold &&\n\t            input.maxPointers == this.options.pointers &&\n\t            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n\t    },\n\n\t    emit: function(input) {\n\t        var direction = directionStr(input.offsetDirection);\n\t        if (direction) {\n\t            this.manager.emit(this.options.event + direction, input);\n\t        }\n\n\t        this.manager.emit(this.options.event, input);\n\t    }\n\t});\n\n\t/**\n\t * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n\t * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n\t * a single tap.\n\t *\n\t * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n\t * multi-taps being recognized.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction TapRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\n\t    // previous time and center,\n\t    // used for tap counting\n\t    this.pTime = false;\n\t    this.pCenter = false;\n\n\t    this._timer = null;\n\t    this._input = null;\n\t    this.count = 0;\n\t}\n\n\tinherit(TapRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'tap',\n\t        pointers: 1,\n\t        taps: 1,\n\t        interval: 300, // max time between the multi-tap taps\n\t        time: 250, // max time of the pointer to be down (like finger on the screen)\n\t        threshold: 9, // a minimal movement is ok, but keep it low\n\t        posThreshold: 10 // a multi-tap can be a bit off the initial position\n\t    },\n\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_MANIPULATION];\n\t    },\n\n\t    process: function(input) {\n\t        var options = this.options;\n\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTouchTime = input.deltaTime < options.time;\n\n\t        this.reset();\n\n\t        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n\t            return this.failTimeout();\n\t        }\n\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (validMovement && validTouchTime && validPointers) {\n\t            if (input.eventType != INPUT_END) {\n\t                return this.failTimeout();\n\t            }\n\n\t            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n\t            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n\t            this.pTime = input.timeStamp;\n\t            this.pCenter = input.center;\n\n\t            if (!validMultiTap || !validInterval) {\n\t                this.count = 1;\n\t            } else {\n\t                this.count += 1;\n\t            }\n\n\t            this._input = input;\n\n\t            // if tap count matches we have recognized it,\n\t            // else it has began recognizing...\n\t            var tapCount = this.count % options.taps;\n\t            if (tapCount === 0) {\n\t                // no failing requirements, immediately trigger the tap event\n\t                // or wait as long as the multitap interval to trigger\n\t                if (!this.hasRequireFailures()) {\n\t                    return STATE_RECOGNIZED;\n\t                } else {\n\t                    this._timer = setTimeoutContext(function() {\n\t                        this.state = STATE_RECOGNIZED;\n\t                        this.tryEmit();\n\t                    }, options.interval, this);\n\t                    return STATE_BEGAN;\n\t                }\n\t            }\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\n\t    failTimeout: function() {\n\t        this._timer = setTimeoutContext(function() {\n\t            this.state = STATE_FAILED;\n\t        }, this.options.interval, this);\n\t        return STATE_FAILED;\n\t    },\n\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\n\t    emit: function() {\n\t        if (this.state == STATE_RECOGNIZED) {\n\t            this._input.tapCount = this.count;\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\n\t/**\n\t * Simple way to create a manager with a default set of recognizers.\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Hammer(element, options) {\n\t    options = options || {};\n\t    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n\t    return new Manager(element, options);\n\t}\n\n\t/**\n\t * @const {string}\n\t */\n\tHammer.VERSION = '2.0.7';\n\n\t/**\n\t * default settings\n\t * @namespace\n\t */\n\tHammer.defaults = {\n\t    /**\n\t     * set if DOM events are being triggered.\n\t     * But this is slower and unused by simple implementations, so disabled by default.\n\t     * @type {Boolean}\n\t     * @default false\n\t     */\n\t    domEvents: false,\n\n\t    /**\n\t     * The value for the touchAction property/fallback.\n\t     * When set to `compute` it will magically set the correct value based on the added recognizers.\n\t     * @type {String}\n\t     * @default compute\n\t     */\n\t    touchAction: TOUCH_ACTION_COMPUTE,\n\n\t    /**\n\t     * @type {Boolean}\n\t     * @default true\n\t     */\n\t    enable: true,\n\n\t    /**\n\t     * EXPERIMENTAL FEATURE -- can be removed/changed\n\t     * Change the parent input target element.\n\t     * If Null, then it is being set the to main element.\n\t     * @type {Null|EventTarget}\n\t     * @default null\n\t     */\n\t    inputTarget: null,\n\n\t    /**\n\t     * force an input class\n\t     * @type {Null|Function}\n\t     * @default null\n\t     */\n\t    inputClass: null,\n\n\t    /**\n\t     * Default recognizer setup when calling `Hammer()`\n\t     * When creating a new Manager these will be skipped.\n\t     * @type {Array}\n\t     */\n\t    preset: [\n\t        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n\t        [RotateRecognizer, {enable: false}],\n\t        [PinchRecognizer, {enable: false}, ['rotate']],\n\t        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n\t        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n\t        [TapRecognizer],\n\t        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n\t        [PressRecognizer]\n\t    ],\n\n\t    /**\n\t     * Some CSS properties can be used to improve the working of Hammer.\n\t     * Add them to this method and they will be set when creating a new Manager.\n\t     * @namespace\n\t     */\n\t    cssProps: {\n\t        /**\n\t         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userSelect: 'none',\n\n\t        /**\n\t         * Disable the Windows Phone grippers when pressing an element.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchSelect: 'none',\n\n\t        /**\n\t         * Disables the default callout shown when you touch and hold a touch target.\n\t         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n\t         * a callout containing information about the link. This property allows you to disable that callout.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchCallout: 'none',\n\n\t        /**\n\t         * Specifies whether zooming is enabled. Used by IE10>\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        contentZooming: 'none',\n\n\t        /**\n\t         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userDrag: 'none',\n\n\t        /**\n\t         * Overrides the highlight color shown when the user taps a link or a JavaScript\n\t         * clickable element in iOS. This property obeys the alpha value, if specified.\n\t         * @type {String}\n\t         * @default 'rgba(0,0,0,0)'\n\t         */\n\t        tapHighlightColor: 'rgba(0,0,0,0)'\n\t    }\n\t};\n\n\tvar STOP = 1;\n\tvar FORCED_STOP = 2;\n\n\t/**\n\t * Manager\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Manager(element, options) {\n\t    this.options = assign({}, Hammer.defaults, options || {});\n\n\t    this.options.inputTarget = this.options.inputTarget || element;\n\n\t    this.handlers = {};\n\t    this.session = {};\n\t    this.recognizers = [];\n\t    this.oldCssProps = {};\n\n\t    this.element = element;\n\t    this.input = createInputInstance(this);\n\t    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n\t    toggleCssProps(this, true);\n\n\t    each(this.options.recognizers, function(item) {\n\t        var recognizer = this.add(new (item[0])(item[1]));\n\t        item[2] && recognizer.recognizeWith(item[2]);\n\t        item[3] && recognizer.requireFailure(item[3]);\n\t    }, this);\n\t}\n\n\tManager.prototype = {\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @returns {Manager}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\n\t        // Options that need a little more setup\n\t        if (options.touchAction) {\n\t            this.touchAction.update();\n\t        }\n\t        if (options.inputTarget) {\n\t            // Clean up existing event listeners and reinitialize\n\t            this.input.destroy();\n\t            this.input.target = options.inputTarget;\n\t            this.input.init();\n\t        }\n\t        return this;\n\t    },\n\n\t    /**\n\t     * stop recognizing for this session.\n\t     * This session will be discarded, when a new [input]start event is fired.\n\t     * When forced, the recognizer cycle is stopped immediately.\n\t     * @param {Boolean} [force]\n\t     */\n\t    stop: function(force) {\n\t        this.session.stopped = force ? FORCED_STOP : STOP;\n\t    },\n\n\t    /**\n\t     * run the recognizers!\n\t     * called by the inputHandler function on every movement of the pointers (touches)\n\t     * it walks through all the recognizers and tries to detect the gesture that is being made\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        var session = this.session;\n\t        if (session.stopped) {\n\t            return;\n\t        }\n\n\t        // run the touch-action polyfill\n\t        this.touchAction.preventDefaults(inputData);\n\n\t        var recognizer;\n\t        var recognizers = this.recognizers;\n\n\t        // this holds the recognizer that is being recognized.\n\t        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n\t        // if no recognizer is detecting a thing, it is set to `null`\n\t        var curRecognizer = session.curRecognizer;\n\n\t        // reset when the last recognizer is recognized\n\t        // or when we're in a new session\n\t        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n\t            curRecognizer = session.curRecognizer = null;\n\t        }\n\n\t        var i = 0;\n\t        while (i < recognizers.length) {\n\t            recognizer = recognizers[i];\n\n\t            // find out if we are allowed try to recognize the input for this one.\n\t            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n\t            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n\t            //      that is being recognized.\n\t            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n\t            //      this can be setup with the `recognizeWith()` method on the recognizer.\n\t            if (session.stopped !== FORCED_STOP && ( // 1\n\t                    !curRecognizer || recognizer == curRecognizer || // 2\n\t                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n\t                recognizer.recognize(inputData);\n\t            } else {\n\t                recognizer.reset();\n\t            }\n\n\t            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n\t            // current active recognizer. but only if we don't already have an active recognizer\n\t            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n\t                curRecognizer = session.curRecognizer = recognizer;\n\t            }\n\t            i++;\n\t        }\n\t    },\n\n\t    /**\n\t     * get a recognizer by its event name.\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Recognizer|Null}\n\t     */\n\t    get: function(recognizer) {\n\t        if (recognizer instanceof Recognizer) {\n\t            return recognizer;\n\t        }\n\n\t        var recognizers = this.recognizers;\n\t        for (var i = 0; i < recognizers.length; i++) {\n\t            if (recognizers[i].options.event == recognizer) {\n\t                return recognizers[i];\n\t            }\n\t        }\n\t        return null;\n\t    },\n\n\t    /**\n\t     * add a recognizer to the manager\n\t     * existing recognizers with the same event name will be removed\n\t     * @param {Recognizer} recognizer\n\t     * @returns {Recognizer|Manager}\n\t     */\n\t    add: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'add', this)) {\n\t            return this;\n\t        }\n\n\t        // remove existing\n\t        var existing = this.get(recognizer.options.event);\n\t        if (existing) {\n\t            this.remove(existing);\n\t        }\n\n\t        this.recognizers.push(recognizer);\n\t        recognizer.manager = this;\n\n\t        this.touchAction.update();\n\t        return recognizer;\n\t    },\n\n\t    /**\n\t     * remove a recognizer by name or instance\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Manager}\n\t     */\n\t    remove: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'remove', this)) {\n\t            return this;\n\t        }\n\n\t        recognizer = this.get(recognizer);\n\n\t        // let's make sure this recognizer exists\n\t        if (recognizer) {\n\t            var recognizers = this.recognizers;\n\t            var index = inArray(recognizers, recognizer);\n\n\t            if (index !== -1) {\n\t                recognizers.splice(index, 1);\n\t                this.touchAction.update();\n\t            }\n\t        }\n\n\t        return this;\n\t    },\n\n\t    /**\n\t     * bind event\n\t     * @param {String} events\n\t     * @param {Function} handler\n\t     * @returns {EventEmitter} this\n\t     */\n\t    on: function(events, handler) {\n\t        if (events === undefined$1) {\n\t            return;\n\t        }\n\t        if (handler === undefined$1) {\n\t            return;\n\t        }\n\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            handlers[event] = handlers[event] || [];\n\t            handlers[event].push(handler);\n\t        });\n\t        return this;\n\t    },\n\n\t    /**\n\t     * unbind event, leave emit blank to remove all handlers\n\t     * @param {String} events\n\t     * @param {Function} [handler]\n\t     * @returns {EventEmitter} this\n\t     */\n\t    off: function(events, handler) {\n\t        if (events === undefined$1) {\n\t            return;\n\t        }\n\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            if (!handler) {\n\t                delete handlers[event];\n\t            } else {\n\t                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n\t            }\n\t        });\n\t        return this;\n\t    },\n\n\t    /**\n\t     * emit event to the listeners\n\t     * @param {String} event\n\t     * @param {Object} data\n\t     */\n\t    emit: function(event, data) {\n\t        // we also want to trigger dom events\n\t        if (this.options.domEvents) {\n\t            triggerDomEvent(event, data);\n\t        }\n\n\t        // no handlers, so skip it all\n\t        var handlers = this.handlers[event] && this.handlers[event].slice();\n\t        if (!handlers || !handlers.length) {\n\t            return;\n\t        }\n\n\t        data.type = event;\n\t        data.preventDefault = function() {\n\t            data.srcEvent.preventDefault();\n\t        };\n\n\t        var i = 0;\n\t        while (i < handlers.length) {\n\t            handlers[i](data);\n\t            i++;\n\t        }\n\t    },\n\n\t    /**\n\t     * destroy the manager and unbinds all events\n\t     * it doesn't unbind dom events, that is the user own responsibility\n\t     */\n\t    destroy: function() {\n\t        this.element && toggleCssProps(this, false);\n\n\t        this.handlers = {};\n\t        this.session = {};\n\t        this.input.destroy();\n\t        this.element = null;\n\t    }\n\t};\n\n\t/**\n\t * add/remove the css properties as defined in manager.options.cssProps\n\t * @param {Manager} manager\n\t * @param {Boolean} add\n\t */\n\tfunction toggleCssProps(manager, add) {\n\t    var element = manager.element;\n\t    if (!element.style) {\n\t        return;\n\t    }\n\t    var prop;\n\t    each(manager.options.cssProps, function(value, name) {\n\t        prop = prefixed(element.style, name);\n\t        if (add) {\n\t            manager.oldCssProps[prop] = element.style[prop];\n\t            element.style[prop] = value;\n\t        } else {\n\t            element.style[prop] = manager.oldCssProps[prop] || '';\n\t        }\n\t    });\n\t    if (!add) {\n\t        manager.oldCssProps = {};\n\t    }\n\t}\n\n\t/**\n\t * trigger dom event\n\t * @param {String} event\n\t * @param {Object} data\n\t */\n\tfunction triggerDomEvent(event, data) {\n\t    var gestureEvent = document.createEvent('Event');\n\t    gestureEvent.initEvent(event, true, true);\n\t    gestureEvent.gesture = data;\n\t    data.target.dispatchEvent(gestureEvent);\n\t}\n\n\tassign(Hammer, {\n\t    INPUT_START: INPUT_START,\n\t    INPUT_MOVE: INPUT_MOVE,\n\t    INPUT_END: INPUT_END,\n\t    INPUT_CANCEL: INPUT_CANCEL,\n\n\t    STATE_POSSIBLE: STATE_POSSIBLE,\n\t    STATE_BEGAN: STATE_BEGAN,\n\t    STATE_CHANGED: STATE_CHANGED,\n\t    STATE_ENDED: STATE_ENDED,\n\t    STATE_RECOGNIZED: STATE_RECOGNIZED,\n\t    STATE_CANCELLED: STATE_CANCELLED,\n\t    STATE_FAILED: STATE_FAILED,\n\n\t    DIRECTION_NONE: DIRECTION_NONE,\n\t    DIRECTION_LEFT: DIRECTION_LEFT,\n\t    DIRECTION_RIGHT: DIRECTION_RIGHT,\n\t    DIRECTION_UP: DIRECTION_UP,\n\t    DIRECTION_DOWN: DIRECTION_DOWN,\n\t    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n\t    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n\t    DIRECTION_ALL: DIRECTION_ALL,\n\n\t    Manager: Manager,\n\t    Input: Input,\n\t    TouchAction: TouchAction,\n\n\t    TouchInput: TouchInput,\n\t    MouseInput: MouseInput,\n\t    PointerEventInput: PointerEventInput,\n\t    TouchMouseInput: TouchMouseInput,\n\t    SingleTouchInput: SingleTouchInput,\n\n\t    Recognizer: Recognizer,\n\t    AttrRecognizer: AttrRecognizer,\n\t    Tap: TapRecognizer,\n\t    Pan: PanRecognizer,\n\t    Swipe: SwipeRecognizer,\n\t    Pinch: PinchRecognizer,\n\t    Rotate: RotateRecognizer,\n\t    Press: PressRecognizer,\n\n\t    on: addEventListeners,\n\t    off: removeEventListeners,\n\t    each: each,\n\t    merge: merge,\n\t    extend: extend,\n\t    assign: assign,\n\t    inherit: inherit,\n\t    bindFn: bindFn,\n\t    prefixed: prefixed\n\t});\n\n\t// this prevents errors when Hammer is loaded in the presence of an AMD\n\t//  style loader but by script tag, not by the loader.\n\tvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\n\tfreeGlobal.Hammer = Hammer;\n\n\tif (typeof undefined$1 === 'function' && undefined$1.amd) {\n\t    undefined$1(function() {\n\t        return Hammer;\n\t    });\n\t} else if ( module.exports) {\n\t    module.exports = Hammer;\n\t} else {\n\t    window[exportName] = Hammer;\n\t}\n\n\t})(window, document, 'Hammer');\n\t});\n\n\tvar MIN_ZOOM = 0.2,\n\t    MAX_ZOOM = 4;\n\n\tvar mouseEvents = [\n\t  'mousedown',\n\t  'mouseup',\n\t  'mouseover',\n\t  'mouseout',\n\t  'click',\n\t  'dblclick'\n\t];\n\n\tfunction get$1(service, injector) {\n\t  return injector.get(service, false);\n\t}\n\n\tfunction stopEvent(event) {\n\n\t  event.preventDefault();\n\t  event.stopPropagation();\n\n\t  if (typeof event.stopImmediatePropagation === 'function') {\n\t    event.stopImmediatePropagation();\n\t  }\n\t}\n\n\n\tfunction createTouchRecognizer(node) {\n\n\t  function stopMouse(event) {\n\n\t    forEach(mouseEvents, function(e) {\n\t      componentEvent.bind(node, e, stopEvent, true);\n\t    });\n\t  }\n\n\t  function allowMouse(event) {\n\t    setTimeout(function() {\n\t      forEach(mouseEvents, function(e) {\n\t        componentEvent.unbind(node, e, stopEvent, true);\n\t      });\n\t    }, 500);\n\t  }\n\n\t  componentEvent.bind(node, 'touchstart', stopMouse, true);\n\t  componentEvent.bind(node, 'touchend', allowMouse, true);\n\t  componentEvent.bind(node, 'touchcancel', allowMouse, true);\n\n\t  // A touch event recognizer that handles\n\t  // touch events only (we know, we can already handle\n\t  // mouse events out of the box)\n\n\t  var recognizer = new hammer.Manager(node, {\n\t    inputClass: hammer.TouchInput,\n\t    recognizers: []\n\t  });\n\n\n\t  var tap = new hammer.Tap();\n\t  var pan = new hammer.Pan({ threshold: 10 });\n\t  var press = new hammer.Press();\n\t  var pinch = new hammer.Pinch();\n\n\t  var doubleTap = new hammer.Tap({ event: 'doubletap', taps: 2 });\n\n\t  pinch.requireFailure(pan);\n\t  pinch.requireFailure(press);\n\n\t  recognizer.add([ pan, press, pinch, doubleTap, tap ]);\n\n\t  recognizer.reset = function(force) {\n\t    var recognizers = this.recognizers,\n\t        session = this.session;\n\n\t    if (session.stopped) {\n\t      return;\n\t    }\n\n\t    recognizer.stop(force);\n\n\t    setTimeout(function() {\n\t      var i, r;\n\t      for (i = 0; (r = recognizers[i]); i++) {\n\t        r.reset();\n\t        r.state = 8; // FAILED STATE\n\t      }\n\n\t      session.curRecognizer = null;\n\t    }, 0);\n\t  };\n\n\t  recognizer.on('hammer.input', function(event) {\n\t    if (event.srcEvent.defaultPrevented) {\n\t      recognizer.reset(true);\n\t    }\n\t  });\n\n\t  return recognizer;\n\t}\n\n\t/**\n\t * A plugin that provides touch events for elements.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {InteractionEvents} interactionEvents\n\t */\n\tfunction TouchInteractionEvents(\n\t    injector, canvas, eventBus,\n\t    elementRegistry, interactionEvents) {\n\n\t  // optional integrations\n\t  var dragging = get$1('dragging', injector),\n\t      move = get$1('move', injector),\n\t      contextPad = get$1('contextPad', injector),\n\t      palette = get$1('palette', injector);\n\n\t  // the touch recognizer\n\t  var recognizer;\n\n\t  function handler(type) {\n\n\t    return function(event) {\n\n\t      interactionEvents.fire(type, event);\n\t    };\n\t  }\n\n\t  function getGfx(target) {\n\t    var node = closest(target, 'svg, .djs-element', true);\n\t    return node;\n\t  }\n\n\t  function initEvents(svg) {\n\n\t    // touch recognizer\n\t    recognizer = createTouchRecognizer(svg);\n\n\t    recognizer.on('doubletap', handler('element.dblclick'));\n\n\t    recognizer.on('tap', handler('element.click'));\n\n\t    function startGrabCanvas(event) {\n\n\t      var lx = 0, ly = 0;\n\n\t      function update(e) {\n\n\t        var dx = e.deltaX - lx,\n\t            dy = e.deltaY - ly;\n\n\t        canvas.scroll({ dx: dx, dy: dy });\n\n\t        lx = e.deltaX;\n\t        ly = e.deltaY;\n\t      }\n\n\t      function end(e) {\n\t        recognizer.off('panmove', update);\n\t        recognizer.off('panend', end);\n\t        recognizer.off('pancancel', end);\n\t      }\n\n\t      recognizer.on('panmove', update);\n\t      recognizer.on('panend', end);\n\t      recognizer.on('pancancel', end);\n\t    }\n\n\t    function startGrab(event) {\n\n\t      var gfx = getGfx(event.target),\n\t          element = gfx && elementRegistry.get(gfx);\n\n\t      // recognizer\n\t      if (move && canvas.getRootElement() !== element) {\n\t        return move.start(event, element, true);\n\t      } else {\n\t        startGrabCanvas();\n\t      }\n\t    }\n\n\t    function startZoom(e) {\n\n\t      var zoom = canvas.zoom(),\n\t          mid = e.center;\n\n\t      function update(e) {\n\n\t        var ratio = 1 - (1 - e.scale) / 1.50,\n\t            newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom));\n\n\t        canvas.zoom(newZoom, mid);\n\n\t        stopEvent(e);\n\t      }\n\n\t      function end(e) {\n\t        recognizer.off('pinchmove', update);\n\t        recognizer.off('pinchend', end);\n\t        recognizer.off('pinchcancel', end);\n\n\t        recognizer.reset(true);\n\t      }\n\n\t      recognizer.on('pinchmove', update);\n\t      recognizer.on('pinchend', end);\n\t      recognizer.on('pinchcancel', end);\n\t    }\n\n\t    recognizer.on('panstart', startGrab);\n\t    recognizer.on('press', startGrab);\n\n\t    recognizer.on('pinchstart', startZoom);\n\t  }\n\n\t  if (dragging) {\n\n\t    // simulate hover during dragging\n\t    eventBus.on('drag.move', function(event) {\n\n\t      var originalEvent = event.originalEvent;\n\n\t      if (!originalEvent || originalEvent instanceof MouseEvent) {\n\t        return;\n\t      }\n\n\t      var position = toPoint(originalEvent);\n\n\t      // this gets really expensive ...\n\t      var node = document.elementFromPoint(position.x, position.y),\n\t          gfx = getGfx(node),\n\t          element = gfx && elementRegistry.get(gfx);\n\n\t      if (element !== event.hover) {\n\t        if (event.hover) {\n\t          dragging.out(event);\n\t        }\n\n\t        if (element) {\n\t          dragging.hover({ element: element, gfx: gfx });\n\n\t          event.hover = element;\n\t          event.hoverGfx = gfx;\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  if (contextPad) {\n\n\t    eventBus.on('contextPad.create', function(event) {\n\t      var node = event.pad.html;\n\n\t      // touch recognizer\n\t      var padRecognizer = createTouchRecognizer(node);\n\n\t      padRecognizer.on('panstart', function(event) {\n\t        contextPad.trigger('dragstart', event, true);\n\t      });\n\n\t      padRecognizer.on('press', function(event) {\n\t        contextPad.trigger('dragstart', event, true);\n\t      });\n\n\t      padRecognizer.on('tap', function(event) {\n\t        contextPad.trigger('click', event);\n\t      });\n\t    });\n\t  }\n\n\t  if (palette) {\n\t    eventBus.on('palette.create', function(event) {\n\t      var node = event.container;\n\n\t      // touch recognizer\n\t      var padRecognizer = createTouchRecognizer(node);\n\n\t      padRecognizer.on('panstart', function(event) {\n\t        palette.trigger('dragstart', event, true);\n\t      });\n\n\t      padRecognizer.on('press', function(event) {\n\t        palette.trigger('dragstart', event, true);\n\t      });\n\n\t      padRecognizer.on('tap', function(event) {\n\t        palette.trigger('click', event);\n\t      });\n\t    });\n\t  }\n\n\t  eventBus.on('canvas.init', function(event) {\n\t    initEvents(event.svg);\n\t  });\n\t}\n\n\n\tTouchInteractionEvents.$inject = [\n\t  'injector',\n\t  'canvas',\n\t  'eventBus',\n\t  'elementRegistry',\n\t  'interactionEvents',\n\t  'touchFix'\n\t];\n\n\tfunction TouchFix(canvas, eventBus) {\n\n\t  var self = this;\n\n\t  eventBus.on('canvas.init', function(e) {\n\t    self.addBBoxMarker(e.svg);\n\t  });\n\t}\n\n\tTouchFix.$inject = [ 'canvas', 'eventBus' ];\n\n\n\t/**\n\t * Safari mobile (iOS 7) does not fire touchstart event in <SVG> element\n\t * if there is no shape between 0,0 and viewport elements origin.\n\t *\n\t * So touchstart event is only fired when the <g class=\"viewport\"> element was hit.\n\t * Putting an element over and below the 'viewport' fixes that behavior.\n\t */\n\tTouchFix.prototype.addBBoxMarker = function(svg) {\n\n\t  var markerStyle = {\n\t    fill: 'none',\n\t    class: 'outer-bound-marker'\n\t  };\n\n\t  var rect1 = create('rect');\n\t  attr$1(rect1, {\n\t    x: -10000,\n\t    y: 10000,\n\t    width: 10,\n\t    height: 10\n\t  });\n\t  attr$1(rect1, markerStyle);\n\n\t  append(svg, rect1);\n\n\t  var rect2 = create('rect');\n\t  attr$1(rect2, {\n\t    x: 10000,\n\t    y: 10000,\n\t    width: 10,\n\t    height: 10\n\t  });\n\t  attr$1(rect2, markerStyle);\n\n\t  append(svg, rect2);\n\t};\n\n\tvar TouchModule = {\n\t  __depends__: [ InteractionEventsModule ],\n\t  __init__: [ 'touchInteractionEvents' ],\n\t  touchInteractionEvents: [ 'type', TouchInteractionEvents ],\n\t  touchFix: [ 'type', TouchFix ]\n\t};\n\n\tvar TouchModule$1 = {\n\t  __depends__: [\n\t    TouchModule\n\t  ]\n\t};\n\n\tfunction last(arr) {\n\t  return arr && arr[arr.length - 1];\n\t}\n\n\tfunction sortTopOrMiddle(element) {\n\t  return element.y;\n\t}\n\n\tfunction sortLeftOrCenter(element) {\n\t  return element.x;\n\t}\n\n\t/**\n\t * Sorting functions for different types of alignment\n\t *\n\t * @type {Object}\n\t *\n\t * @return {Function}\n\t */\n\tvar ALIGNMENT_SORTING = {\n\t  left: sortLeftOrCenter,\n\t  center: sortLeftOrCenter,\n\t  right: function(element) {\n\t    return element.x + element.width;\n\t  },\n\t  top: sortTopOrMiddle,\n\t  middle: sortTopOrMiddle,\n\t  bottom: function(element) {\n\t    return element.y + element.height;\n\t  }\n\t};\n\n\n\tfunction AlignElements(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tAlignElements.$inject = [ 'modeling' ];\n\n\n\t/**\n\t * Get the relevant \"axis\" and \"dimension\" related to the current type of alignment\n\t *\n\t * @param  {string} type left|right|center|top|bottom|middle\n\t *\n\t * @return {Object} { axis, dimension }\n\t */\n\tAlignElements.prototype._getOrientationDetails = function(type) {\n\t  var vertical = [ 'top', 'bottom', 'middle' ],\n\t      axis = 'x',\n\t      dimension = 'width';\n\n\t  if (vertical.indexOf(type) !== -1) {\n\t    axis = 'y';\n\t    dimension = 'height';\n\t  }\n\n\t  return {\n\t    axis: axis,\n\t    dimension: dimension\n\t  };\n\t};\n\n\tAlignElements.prototype._isType = function(type, types) {\n\t  return types.indexOf(type) !== -1;\n\t};\n\n\t/**\n\t * Get a point on the relevant axis where elements should align to\n\t *\n\t * @param  {string} type left|right|center|top|bottom|middle\n\t * @param  {Array} sortedElements\n\t *\n\t * @return {Object}\n\t */\n\tAlignElements.prototype._alignmentPosition = function(type, sortedElements) {\n\t  var orientation = this._getOrientationDetails(type),\n\t      axis = orientation.axis,\n\t      dimension = orientation.dimension,\n\t      alignment = {},\n\t      centers = {},\n\t      hasSharedCenters = false,\n\t      centeredElements,\n\t      firstElement,\n\t      lastElement;\n\n\t  function getMiddleOrTop(first, last) {\n\t    return Math.round((first[axis] + last[axis] + last[dimension]) / 2);\n\t  }\n\n\t  if (this._isType(type, [ 'left', 'top' ])) {\n\t    alignment[type] = sortedElements[0][axis];\n\n\t  } else if (this._isType(type, [ 'right', 'bottom' ])) {\n\t    lastElement = last(sortedElements);\n\n\t    alignment[type] = lastElement[axis] + lastElement[dimension];\n\n\t  } else if (this._isType(type, [ 'center', 'middle' ])) {\n\n\t    // check if there is a center shared by more than one shape\n\t    // if not, just take the middle of the range\n\t    forEach(sortedElements, function(element) {\n\t      var center = element[axis] + Math.round(element[dimension] / 2);\n\n\t      if (centers[center]) {\n\t        centers[center].elements.push(element);\n\t      } else {\n\t        centers[center] = {\n\t          elements: [ element ],\n\t          center: center\n\t        };\n\t      }\n\t    });\n\n\t    centeredElements = sortBy(centers, function(center) {\n\t      if (center.elements.length > 1) {\n\t        hasSharedCenters = true;\n\t      }\n\n\t      return center.elements.length;\n\t    });\n\n\t    if (hasSharedCenters) {\n\t      alignment[type] = last(centeredElements).center;\n\n\t      return alignment;\n\t    }\n\n\t    firstElement = sortedElements[0];\n\n\t    sortedElements = sortBy(sortedElements, function(element) {\n\t      return element[axis] + element[dimension];\n\t    });\n\n\t    lastElement = last(sortedElements);\n\n\t    alignment[type] = getMiddleOrTop(firstElement, lastElement);\n\t  }\n\n\t  return alignment;\n\t};\n\n\t/**\n\t * Executes the alignment of a selection of elements\n\t *\n\t * @param  {Array} elements [description]\n\t * @param  {string} type left|right|center|top|bottom|middle\n\t */\n\tAlignElements.prototype.trigger = function(elements, type) {\n\t  var modeling = this._modeling;\n\n\t  var filteredElements = filter(elements, function(element) {\n\t    return !(element.waypoints || element.host || element.labelTarget);\n\t  });\n\n\t  var sortFn = ALIGNMENT_SORTING[type];\n\n\t  var sortedElements = sortBy(filteredElements, sortFn);\n\n\t  var alignment = this._alignmentPosition(type, sortedElements);\n\n\t  modeling.alignElements(sortedElements, alignment);\n\t};\n\n\tvar AlignElementsModule = {\n\t  __init__: [ 'alignElements' ],\n\t  alignElements: [ 'type', AlignElements ]\n\t};\n\n\t// padding to detect element placement\n\tvar PLACEMENT_DETECTION_PAD = 10;\n\n\tvar DEFAULT_DISTANCE = 50;\n\n\tvar DEFAULT_MAX_DISTANCE = 250;\n\n\n\t/**\n\t * Get free position starting from given position.\n\t *\n\t * @param {djs.model.Shape} source\n\t * @param {djs.model.Shape} element\n\t * @param {Point} position\n\t * @param {Function} getNextPosition\n\t *\n\t * @return {Point}\n\t */\n\tfunction findFreePosition(source, element, position, getNextPosition) {\n\t  var connectedAtPosition;\n\n\t  while ((connectedAtPosition = getConnectedAtPosition(source, position, element))) {\n\t    position = getNextPosition(element, position, connectedAtPosition);\n\t  }\n\n\t  return position;\n\t}\n\n\t/**\n\t * Returns function that returns next position.\n\t *\n\t * @param {Object} nextPositionDirection\n\t * @param {Object} [nextPositionDirection.x]\n\t * @param {Object} [nextPositionDirection.y]\n\t *\n\t * @returns {Function}\n\t */\n\tfunction generateGetNextPosition(nextPositionDirection) {\n\t  return function(element, previousPosition, connectedAtPosition) {\n\t    var nextPosition = {\n\t      x: previousPosition.x,\n\t      y: previousPosition.y\n\t    };\n\n\t    [ 'x', 'y' ].forEach(function(axis) {\n\n\t      var nextPositionDirectionForAxis = nextPositionDirection[ axis ];\n\n\t      if (!nextPositionDirectionForAxis) {\n\t        return;\n\t      }\n\n\t      var dimension = axis === 'x' ? 'width' : 'height';\n\n\t      var margin = nextPositionDirectionForAxis.margin,\n\t          minDistance = nextPositionDirectionForAxis.minDistance;\n\n\t      if (margin < 0) {\n\t        nextPosition[ axis ] = Math.min(\n\t          connectedAtPosition[ axis ] + margin - element[ dimension ] / 2,\n\t          previousPosition[ axis ] - minDistance + margin\n\t        );\n\t      } else {\n\t        nextPosition[ axis ] = Math.max(\n\t          connectedAtPosition[ axis ] + connectedAtPosition[ dimension ] + margin + element[ dimension ] / 2,\n\t          previousPosition[ axis ] + minDistance + margin\n\t        );\n\t      }\n\t    });\n\n\t    return nextPosition;\n\t  };\n\t}\n\n\t/**\n\t * Return target at given position, if defined.\n\t *\n\t * This takes connected elements from host and attachers\n\t * into account, too.\n\t */\n\tfunction getConnectedAtPosition(source, position, element) {\n\n\t  var bounds = {\n\t    x: position.x - (element.width / 2),\n\t    y: position.y - (element.height / 2),\n\t    width: element.width,\n\t    height: element.height\n\t  };\n\n\t  var closure = getAutoPlaceClosure(source);\n\n\t  return find(closure, function(target) {\n\n\t    if (target === element) {\n\t      return false;\n\t    }\n\n\t    var orientation = getOrientation(target, bounds, PLACEMENT_DETECTION_PAD);\n\n\t    return orientation === 'intersect';\n\t  });\n\t}\n\n\t/**\n\t* Compute optimal distance between source and target based on existing connections to and from source.\n\t* Assumes left-to-right and top-to-down modeling.\n\t*\n\t* @param {djs.model.Shape} source\n\t* @param {Object} [hints]\n\t* @param {number} [hints.defaultDistance]\n\t* @param {string} [hints.direction]\n\t* @param {Function} [hints.filter]\n\t* @param {Function} [hints.getWeight]\n\t* @param {number} [hints.maxDistance]\n\t* @param {string} [hints.reference]\n\t*\n\t* @return {number}\n\t*/\n\tfunction getConnectedDistance(source, hints) {\n\t  if (!hints) {\n\t    hints = {};\n\t  }\n\n\t  // targets > sources by default\n\t  function getDefaultWeight(connection) {\n\t    return connection.source === source ? 1 : -1;\n\t  }\n\n\t  var defaultDistance = hints.defaultDistance || DEFAULT_DISTANCE,\n\t      direction = hints.direction || 'e',\n\t      filter = hints.filter,\n\t      getWeight = hints.getWeight || getDefaultWeight,\n\t      maxDistance = hints.maxDistance || DEFAULT_MAX_DISTANCE,\n\t      reference = hints.reference || 'start';\n\n\t  if (!filter) {\n\t    filter = noneFilter;\n\t  }\n\n\t  function getDistance(a, b) {\n\t    if (direction === 'n') {\n\t      if (reference === 'start') {\n\t        return asTRBL(a).top - asTRBL(b).bottom;\n\t      } else if (reference === 'center') {\n\t        return asTRBL(a).top - getMid(b).y;\n\t      } else {\n\t        return asTRBL(a).top - asTRBL(b).top;\n\t      }\n\t    } else if (direction === 'w') {\n\t      if (reference === 'start') {\n\t        return asTRBL(a).left - asTRBL(b).right;\n\t      } else if (reference === 'center') {\n\t        return asTRBL(a).left - getMid(b).x;\n\t      } else {\n\t        return asTRBL(a).left - asTRBL(b).left;\n\t      }\n\t    } else if (direction === 's') {\n\t      if (reference === 'start') {\n\t        return asTRBL(b).top - asTRBL(a).bottom;\n\t      } else if (reference === 'center') {\n\t        return getMid(b).y - asTRBL(a).bottom;\n\t      } else {\n\t        return asTRBL(b).bottom - asTRBL(a).bottom;\n\t      }\n\t    } else {\n\t      if (reference === 'start') {\n\t        return asTRBL(b).left - asTRBL(a).right;\n\t      } else if (reference === 'center') {\n\t        return getMid(b).x - asTRBL(a).right;\n\t      } else {\n\t        return asTRBL(b).right - asTRBL(a).right;\n\t      }\n\t    }\n\t  }\n\n\t  var sourcesDistances = source.incoming\n\t    .filter(filter)\n\t    .map(function(connection) {\n\t      var weight = getWeight(connection);\n\n\t      var distance = weight < 0\n\t        ? getDistance(connection.source, source)\n\t        : getDistance(source, connection.source);\n\n\t      return {\n\t        id: connection.source.id,\n\t        distance: distance,\n\t        weight: weight\n\t      };\n\t    });\n\n\t  var targetsDistances = source.outgoing\n\t    .filter(filter)\n\t    .map(function(connection) {\n\t      var weight = getWeight(connection);\n\n\t      var distance = weight > 0\n\t        ? getDistance(source, connection.target)\n\t        : getDistance(connection.target, source);\n\n\t      return {\n\t        id: connection.target.id,\n\t        distance: distance,\n\t        weight: weight\n\t      };\n\t    });\n\n\t  var distances = sourcesDistances.concat(targetsDistances).reduce(function(accumulator, currentValue) {\n\t    accumulator[ currentValue.id + '__weight_' + currentValue.weight ] = currentValue;\n\n\t    return accumulator;\n\t  }, {});\n\n\t  var distancesGrouped = reduce(distances, function(accumulator, currentValue) {\n\t    var distance = currentValue.distance,\n\t        weight = currentValue.weight;\n\n\t    if (distance < 0 || distance > maxDistance) {\n\t      return accumulator;\n\t    }\n\n\t    if (!accumulator[ String(distance) ]) {\n\t      accumulator[ String(distance) ] = 0;\n\t    }\n\n\t    accumulator[ String(distance) ] += 1 * weight;\n\n\t    if (!accumulator.distance || accumulator[ accumulator.distance ] < accumulator[ String(distance) ]) {\n\t      accumulator.distance = distance;\n\t    }\n\n\t    return accumulator;\n\t  }, {});\n\n\t  return distancesGrouped.distance || defaultDistance;\n\t}\n\n\t/**\n\t * Returns all connected elements around the given source.\n\t *\n\t * This includes:\n\t *\n\t *   - connected elements\n\t *   - host connected elements\n\t *   - attachers connected elements\n\t *\n\t * @param  {djs.model.Shape} source\n\t *\n\t * @return {Array<djs.model.Shape>}\n\t */\n\tfunction getAutoPlaceClosure(source) {\n\n\t  var allConnected = getConnected(source);\n\n\t  if (source.host) {\n\t    allConnected = allConnected.concat(getConnected(source.host));\n\t  }\n\n\t  if (source.attachers) {\n\t    allConnected = allConnected.concat(source.attachers.reduce(function(shapes, attacher) {\n\t      return shapes.concat(getConnected(attacher));\n\t    }, []));\n\t  }\n\n\t  return allConnected;\n\t}\n\n\tfunction getConnected(element) {\n\t  return getTargets(element).concat(getSources(element));\n\t}\n\n\tfunction getSources(shape) {\n\t  return shape.incoming.map(function(connection) {\n\t    return connection.source;\n\t  });\n\t}\n\n\tfunction getTargets(shape) {\n\t  return shape.outgoing.map(function(connection) {\n\t    return connection.target;\n\t  });\n\t}\n\n\tfunction noneFilter() {\n\t  return true;\n\t}\n\n\tvar LOW_PRIORITY$4 = 100;\n\n\n\t/**\n\t * A service that places elements connected to existing ones\n\t * to an appropriate position in an _automated_ fashion.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t */\n\tfunction AutoPlace(eventBus, modeling) {\n\n\t  eventBus.on('autoPlace', LOW_PRIORITY$4, function(context) {\n\t    var shape = context.shape,\n\t        source = context.source;\n\n\t    return getNewShapePosition(source, shape);\n\t  });\n\n\t  /**\n\t   * Append shape to source at appropriate position.\n\t   *\n\t   * @param {djs.model.Shape} source\n\t   * @param {djs.model.Shape} shape\n\t   *\n\t   * @return {djs.model.Shape} appended shape\n\t   */\n\t  this.append = function(source, shape, hints) {\n\n\t    eventBus.fire('autoPlace.start', {\n\t      source: source,\n\t      shape: shape\n\t    });\n\n\t    // allow others to provide the position\n\t    var position = eventBus.fire('autoPlace', {\n\t      source: source,\n\t      shape: shape\n\t    });\n\n\t    var newShape = modeling.appendShape(source, shape, position, source.parent, hints);\n\n\t    eventBus.fire('autoPlace.end', {\n\t      source: source,\n\t      shape: newShape\n\t    });\n\n\t    return newShape;\n\t  };\n\n\t}\n\n\tAutoPlace.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\t// helpers //////////\n\n\t/**\n\t * Find the new position for the target element to\n\t * connect to source.\n\t *\n\t * @param  {djs.model.Shape} source\n\t * @param  {djs.model.Shape} element\n\t * @param  {Object} [hints]\n\t * @param  {Object} [hints.defaultDistance]\n\t *\n\t * @returns {Point}\n\t */\n\tfunction getNewShapePosition(source, element, hints) {\n\t  if (!hints) {\n\t    hints = {};\n\t  }\n\n\t  var distance = hints.defaultDistance || DEFAULT_DISTANCE;\n\n\t  var sourceMid = getMid(source),\n\t      sourceTrbl = asTRBL(source);\n\n\t  // simply put element right next to source\n\t  return {\n\t    x: sourceTrbl.right + distance + element.width / 2,\n\t    y: sourceMid.y\n\t  };\n\t}\n\n\t/**\n\t * Select element after auto placement.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Selection} selection\n\t */\n\tfunction AutoPlaceSelectionBehavior(eventBus, selection) {\n\n\t  eventBus.on('autoPlace.end', 500, function(e) {\n\t    selection.select(e.shape);\n\t  });\n\n\t}\n\n\tAutoPlaceSelectionBehavior.$inject = [\n\t  'eventBus',\n\t  'selection'\n\t];\n\n\tvar AutoPlaceModule = {\n\t  __init__: [ 'autoPlaceSelectionBehavior' ],\n\t  autoPlace: [ 'type', AutoPlace ],\n\t  autoPlaceSelectionBehavior: [ 'type', AutoPlaceSelectionBehavior ]\n\t};\n\n\t/**\n\t * Return true if element has any of the given types.\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {Array<string>} types\n\t *\n\t * @return {boolean}\n\t */\n\tfunction isAny(element, types) {\n\t  return some(types, function(t) {\n\t    return is$1(element, t);\n\t  });\n\t}\n\n\n\t/**\n\t * Return the parent of the element with any of the given types.\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {string|Array<string>} anyType\n\t *\n\t * @return {djs.model.Base}\n\t */\n\tfunction getParent$1(element, anyType) {\n\n\t  if (typeof anyType === 'string') {\n\t    anyType = [ anyType ];\n\t  }\n\n\t  while ((element = element.parent)) {\n\t    if (isAny(element, anyType)) {\n\t      return element;\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\t/**\n\t * Find the new position for the target element to\n\t * connect to source.\n\t *\n\t * @param  {djs.model.Shape} source\n\t * @param  {djs.model.Shape} element\n\t *\n\t * @return {Point}\n\t */\n\tfunction getNewShapePosition$1(source, element) {\n\n\t  if (is$1(element, 'bpmn:TextAnnotation')) {\n\t    return getTextAnnotationPosition(source, element);\n\t  }\n\n\t  if (isAny(element, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {\n\t    return getDataElementPosition(source, element);\n\t  }\n\n\t  if (is$1(element, 'bpmn:FlowNode')) {\n\t    return getFlowNodePosition(source, element);\n\t  }\n\t}\n\n\t/**\n\t * Always try to place element right of source;\n\t * compute actual distance from previous nodes in flow.\n\t */\n\tfunction getFlowNodePosition(source, element) {\n\n\t  var sourceTrbl = asTRBL(source);\n\t  var sourceMid = getMid(source);\n\n\t  var horizontalDistance = getConnectedDistance(source, {\n\t    filter: function(connection) {\n\t      return is$1(connection, 'bpmn:SequenceFlow');\n\t    }\n\t  });\n\n\t  var margin = 30,\n\t      minDistance = 80,\n\t      orientation = 'left';\n\n\t  if (is$1(source, 'bpmn:BoundaryEvent')) {\n\t    orientation = getOrientation(source, source.host, -25);\n\n\t    if (orientation.indexOf('top') !== -1) {\n\t      margin *= -1;\n\t    }\n\t  }\n\n\t  var position = {\n\t    x: sourceTrbl.right + horizontalDistance + element.width / 2,\n\t    y: sourceMid.y + getVerticalDistance(orientation, minDistance)\n\t  };\n\n\t  var nextPositionDirection = {\n\t    y: {\n\t      margin: margin,\n\t      minDistance: minDistance\n\t    }\n\t  };\n\n\t  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));\n\t}\n\n\n\tfunction getVerticalDistance(orientation, minDistance) {\n\t  if (orientation.indexOf('top') != -1) {\n\t    return -1 * minDistance;\n\t  } else if (orientation.indexOf('bottom') != -1) {\n\t    return minDistance;\n\t  } else {\n\t    return 0;\n\t  }\n\t}\n\n\n\t/**\n\t * Always try to place text annotations top right of source.\n\t */\n\tfunction getTextAnnotationPosition(source, element) {\n\n\t  var sourceTrbl = asTRBL(source);\n\n\t  var position = {\n\t    x: sourceTrbl.right + element.width / 2,\n\t    y: sourceTrbl.top - 50 - element.height / 2\n\t  };\n\n\t  var nextPositionDirection = {\n\t    y: {\n\t      margin: -30,\n\t      minDistance: 20\n\t    }\n\t  };\n\n\t  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));\n\t}\n\n\n\t/**\n\t * Always put element bottom right of source.\n\t */\n\tfunction getDataElementPosition(source, element) {\n\n\t  var sourceTrbl = asTRBL(source);\n\n\t  var position = {\n\t    x: sourceTrbl.right - 10 + element.width / 2,\n\t    y: sourceTrbl.bottom + 40 + element.width / 2\n\t  };\n\n\t  var nextPositionDirection = {\n\t    x: {\n\t      margin: 30,\n\t      minDistance: 30\n\t    }\n\t  };\n\n\t  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));\n\t}\n\n\t/**\n\t * BPMN auto-place behavior.\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction AutoPlace$1(eventBus) {\n\t  eventBus.on('autoPlace', function(context) {\n\t    var shape = context.shape,\n\t        source = context.source;\n\n\t    return getNewShapePosition$1(source, shape);\n\t  });\n\t}\n\n\tAutoPlace$1.$inject = [ 'eventBus' ];\n\n\tvar AutoPlaceModule$1 = {\n\t  __depends__: [ AutoPlaceModule ],\n\t  __init__: [ 'bpmnAutoPlace' ],\n\t  bpmnAutoPlace: [ 'type', AutoPlace$1 ]\n\t};\n\n\tvar DEFAULT_PRIORITY$2 = 1000;\n\n\t/**\n\t * A utility that can be used to plug-in into the command execution for\n\t * extension and/or validation.\n\t *\n\t * @param {EventBus} eventBus\n\t *\n\t * @example\n\t *\n\t * import inherits from 'inherits';\n\t *\n\t * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\t *\n\t * function CommandLogger(eventBus) {\n\t *   CommandInterceptor.call(this, eventBus);\n\t *\n\t *   this.preExecute(function(event) {\n\t *     console.log('command pre-execute', event);\n\t *   });\n\t * }\n\t *\n\t * inherits(CommandLogger, CommandInterceptor);\n\t *\n\t */\n\tfunction CommandInterceptor(eventBus) {\n\t  this._eventBus = eventBus;\n\t}\n\n\tCommandInterceptor.$inject = [ 'eventBus' ];\n\n\tfunction unwrapEvent(fn, that) {\n\t  return function(event) {\n\t    return fn.call(that || null, event.context, event.command, event);\n\t  };\n\t}\n\n\t/**\n\t * Register an interceptor for a command execution\n\t *\n\t * @param {string|Array<string>} [events] list of commands to register on\n\t * @param {string} [hook] command hook, i.e. preExecute, executed to listen on\n\t * @param {number} [priority] the priority on which to hook into the execution\n\t * @param {Function} handlerFn interceptor to be invoked with (event)\n\t * @param {boolean} unwrap if true, unwrap the event and pass (context, command, event) to the\n\t *                          listener instead\n\t * @param {Object} [that] Pass context (`this`) to the handler function\n\t */\n\tCommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {\n\n\t  if (isFunction(hook) || isNumber(hook)) {\n\t    that = unwrap;\n\t    unwrap = handlerFn;\n\t    handlerFn = priority;\n\t    priority = hook;\n\t    hook = null;\n\t  }\n\n\t  if (isFunction(priority)) {\n\t    that = unwrap;\n\t    unwrap = handlerFn;\n\t    handlerFn = priority;\n\t    priority = DEFAULT_PRIORITY$2;\n\t  }\n\n\t  if (isObject(unwrap)) {\n\t    that = unwrap;\n\t    unwrap = false;\n\t  }\n\n\t  if (!isFunction(handlerFn)) {\n\t    throw new Error('handlerFn must be a function');\n\t  }\n\n\t  if (!isArray(events)) {\n\t    events = [ events ];\n\t  }\n\n\t  var eventBus = this._eventBus;\n\n\t  forEach(events, function(event) {\n\n\t    // concat commandStack(.event)?(.hook)?\n\t    var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');\n\n\t    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);\n\t  });\n\t};\n\n\n\tvar hooks = [\n\t  'canExecute',\n\t  'preExecute',\n\t  'preExecuted',\n\t  'execute',\n\t  'executed',\n\t  'postExecute',\n\t  'postExecuted',\n\t  'revert',\n\t  'reverted'\n\t];\n\n\t/*\n\t * Install hook shortcuts\n\t *\n\t * This will generate the CommandInterceptor#(preExecute|...|reverted) methods\n\t * which will in term forward to CommandInterceptor#on.\n\t */\n\tforEach(hooks, function(hook) {\n\n\t  /**\n\t   * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}\n\t   *\n\t   * A named hook for plugging into the command execution\n\t   *\n\t   * @param {string|Array<string>} [events] list of commands to register on\n\t   * @param {number} [priority] the priority on which to hook into the execution\n\t   * @param {Function} handlerFn interceptor to be invoked with (event)\n\t   * @param {boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the\n\t   *                          listener instead\n\t   * @param {Object} [that] Pass context (`this`) to the handler function\n\t   */\n\t  CommandInterceptor.prototype[hook] = function(events, priority, handlerFn, unwrap, that) {\n\n\t    if (isFunction(events) || isNumber(events)) {\n\t      that = unwrap;\n\t      unwrap = handlerFn;\n\t      handlerFn = priority;\n\t      priority = events;\n\t      events = null;\n\t    }\n\n\t    this.on(events, hook, priority, handlerFn, unwrap, that);\n\t  };\n\t});\n\n\t/**\n\t * An auto resize component that takes care of expanding a parent element\n\t * if child elements are created or moved close the parents edge.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementRegistry} elementRegistry\n\t * @param {Modeling} modeling\n\t * @param {Rules} rules\n\t */\n\tfunction AutoResize(eventBus, elementRegistry, modeling, rules) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this._elementRegistry = elementRegistry;\n\t  this._modeling = modeling;\n\t  this._rules = rules;\n\n\t  var self = this;\n\n\t  this.postExecuted([ 'shape.create' ], function(event) {\n\t    var context = event.context,\n\t        hints = context.hints || {},\n\t        shape = context.shape,\n\t        parent = context.parent || context.newParent;\n\n\t    if (hints.autoResize === false) {\n\t      return;\n\t    }\n\n\t    self._expand([ shape ], parent);\n\t  });\n\n\t  this.postExecuted([ 'elements.move' ], function(event) {\n\t    var context = event.context,\n\t        elements = flatten(values(context.closure.topLevel)),\n\t        hints = context.hints;\n\n\t    var autoResize = hints ? hints.autoResize : true;\n\n\t    if (autoResize === false) {\n\t      return;\n\t    }\n\n\t    var expandings = groupBy(elements, function(element) {\n\t      return element.parent.id;\n\t    });\n\n\t    forEach(expandings, function(elements, parentId) {\n\n\t      // optionally filter elements to be considered when resizing\n\t      if (isArray(autoResize)) {\n\t        elements = elements.filter(function(element) {\n\t          return find(autoResize, matchPattern({ id: element.id }));\n\t        });\n\t      }\n\n\t      self._expand(elements, parentId);\n\t    });\n\t  });\n\n\t  this.postExecuted([ 'shape.toggleCollapse' ], function(event) {\n\t    var context = event.context,\n\t        hints = context.hints,\n\t        shape = context.shape;\n\n\t    if (hints && hints.autoResize === false) {\n\t      return;\n\t    }\n\n\t    if (shape.collapsed) {\n\t      return;\n\t    }\n\n\t    self._expand(shape.children || [], shape);\n\t  });\n\n\t  this.postExecuted([ 'shape.resize' ], function(event) {\n\t    var context = event.context,\n\t        hints = context.hints,\n\t        shape = context.shape,\n\t        parent = shape.parent;\n\n\t    if (hints && hints.autoResize === false) {\n\t      return;\n\t    }\n\n\t    if (parent) {\n\t      self._expand([ shape ], parent);\n\t    }\n\t  });\n\n\t}\n\n\tAutoResize.$inject = [\n\t  'eventBus',\n\t  'elementRegistry',\n\t  'modeling',\n\t  'rules'\n\t];\n\n\tinherits_browser(AutoResize, CommandInterceptor);\n\n\n\t/**\n\t * Calculate the new bounds of the target shape, given\n\t * a number of elements have been moved or added into the parent.\n\t *\n\t * This method considers the current size, the added elements as well as\n\t * the provided padding for the new bounds.\n\t *\n\t * @param {Array<djs.model.Shape>} elements\n\t * @param {djs.model.Shape} target\n\t */\n\tAutoResize.prototype._getOptimalBounds = function(elements, target) {\n\n\t  var offset = this.getOffset(target),\n\t      padding = this.getPadding(target);\n\n\t  var elementsTrbl = asTRBL(getBBox(elements)),\n\t      targetTrbl = asTRBL(target);\n\n\t  var newTrbl = {};\n\n\t  if (elementsTrbl.top - targetTrbl.top < padding.top) {\n\t    newTrbl.top = elementsTrbl.top - offset.top;\n\t  }\n\n\t  if (elementsTrbl.left - targetTrbl.left < padding.left) {\n\t    newTrbl.left = elementsTrbl.left - offset.left;\n\t  }\n\n\t  if (targetTrbl.right - elementsTrbl.right < padding.right) {\n\t    newTrbl.right = elementsTrbl.right + offset.right;\n\t  }\n\n\t  if (targetTrbl.bottom - elementsTrbl.bottom < padding.bottom) {\n\t    newTrbl.bottom = elementsTrbl.bottom + offset.bottom;\n\t  }\n\n\t  return asBounds(assign({}, targetTrbl, newTrbl));\n\t};\n\n\n\t/**\n\t * Expand the target shape respecting rules, offset and padding\n\t *\n\t * @param {Array<djs.model.Shape>} elements\n\t * @param {djs.model.Shape|string} target|targetId\n\t */\n\tAutoResize.prototype._expand = function(elements, target) {\n\n\t  if (typeof target === 'string') {\n\t    target = this._elementRegistry.get(target);\n\t  }\n\n\t  var allowed = this._rules.allowed('element.autoResize', {\n\t    elements: elements,\n\t    target: target\n\t  });\n\n\t  if (!allowed) {\n\t    return;\n\t  }\n\n\t  // calculate the new bounds\n\t  var newBounds = this._getOptimalBounds(elements, target);\n\n\t  if (!boundsChanged(newBounds, target)) {\n\t    return;\n\t  }\n\n\t  var resizeDirections = getResizeDirections(pick(target, [ 'x', 'y', 'width', 'height' ]), newBounds);\n\n\t  // resize the parent shape\n\t  this.resize(target, newBounds, {\n\t    autoResize: resizeDirections\n\t  });\n\n\t  var parent = target.parent;\n\n\t  // recursively expand parent elements\n\t  if (parent) {\n\t    this._expand([ target ], parent);\n\t  }\n\t};\n\n\n\t/**\n\t * Get the amount to expand the given shape in each direction.\n\t *\n\t * @param {djs.model.Shape} shape\n\t *\n\t * @return {TRBL}\n\t */\n\tAutoResize.prototype.getOffset = function(shape) {\n\t  return { top: 60, bottom: 60, left: 100, right: 100 };\n\t};\n\n\n\t/**\n\t * Get the activation threshold for each side for which\n\t * resize triggers.\n\t *\n\t * @param {djs.model.Shape} shape\n\t *\n\t * @return {TRBL}\n\t */\n\tAutoResize.prototype.getPadding = function(shape) {\n\t  return { top: 2, bottom: 2, left: 15, right: 15 };\n\t};\n\n\n\t/**\n\t * Perform the actual resize operation.\n\t *\n\t * @param {djs.model.Shape} shape\n\t * @param {Bounds} newBounds\n\t * @param {Object} [hints]\n\t * @param {string} [hints.autoResize]\n\t */\n\tAutoResize.prototype.resize = function(shape, newBounds, hints) {\n\t  this._modeling.resizeShape(shape, newBounds, null, hints);\n\t};\n\n\n\tfunction boundsChanged(newBounds, oldBounds) {\n\t  return (\n\t    newBounds.x !== oldBounds.x ||\n\t    newBounds.y !== oldBounds.y ||\n\t    newBounds.width !== oldBounds.width ||\n\t    newBounds.height !== oldBounds.height\n\t  );\n\t}\n\n\t/**\n\t * Get directions of resize as {n|w|s|e} e.g. \"nw\".\n\t *\n\t * @param {Bounds} oldBounds\n\t * @param {Bounds} newBounds\n\t *\n\t * @returns {string} Resize directions as {n|w|s|e}.\n\t */\n\tfunction getResizeDirections(oldBounds, newBounds) {\n\t  var directions = '';\n\n\t  oldBounds = asTRBL(oldBounds);\n\t  newBounds = asTRBL(newBounds);\n\n\t  if (oldBounds.top > newBounds.top) {\n\t    directions = directions.concat('n');\n\t  }\n\n\t  if (oldBounds.right < newBounds.right) {\n\t    directions = directions.concat('w');\n\t  }\n\n\t  if (oldBounds.bottom < newBounds.bottom) {\n\t    directions = directions.concat('s');\n\t  }\n\n\t  if (oldBounds.left > newBounds.left) {\n\t    directions = directions.concat('e');\n\t  }\n\n\t  return directions;\n\t}\n\n\t/**\n\t * Sub class of the AutoResize module which implements a BPMN\n\t * specific resize function.\n\t */\n\tfunction BpmnAutoResize(injector) {\n\n\t  injector.invoke(AutoResize, this);\n\t}\n\n\tBpmnAutoResize.$inject = [\n\t  'injector'\n\t];\n\n\tinherits_browser(BpmnAutoResize, AutoResize);\n\n\n\t/**\n\t * Resize shapes and lanes.\n\t *\n\t * @param {djs.model.Shape} target\n\t * @param {Bounds} newBounds\n\t * @param {Object} hints\n\t */\n\tBpmnAutoResize.prototype.resize = function(target, newBounds, hints) {\n\n\t  if (is$1(target, 'bpmn:Participant')) {\n\t    this._modeling.resizeLane(target, newBounds, null, hints);\n\t  } else {\n\t    this._modeling.resizeShape(target, newBounds, null, hints);\n\t  }\n\t};\n\n\t/**\n\t * A basic provider that may be extended to implement modeling rules.\n\t *\n\t * Extensions should implement the init method to actually add their custom\n\t * modeling checks. Checks may be added via the #addRule(action, fn) method.\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction RuleProvider(eventBus) {\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this.init();\n\t}\n\n\tRuleProvider.$inject = [ 'eventBus' ];\n\n\tinherits_browser(RuleProvider, CommandInterceptor);\n\n\n\t/**\n\t * Adds a modeling rule for the given action, implemented through\n\t * a callback function.\n\t *\n\t * The function will receive the modeling specific action context\n\t * to perform its check. It must return `false` to disallow the\n\t * action from happening or `true` to allow the action.\n\t *\n\t * A rule provider may pass over the evaluation to lower priority\n\t * rules by returning return nothing (or <code>undefined</code>).\n\t *\n\t * @example\n\t *\n\t * ResizableRules.prototype.init = function() {\n\t *\n\t *   \\/**\n\t *    * Return `true`, `false` or nothing to denote\n\t *    * _allowed_, _not allowed_ and _continue evaluating_.\n\t *    *\\/\n\t *   this.addRule('shape.resize', function(context) {\n\t *\n\t *     var shape = context.shape;\n\t *\n\t *     if (!context.newBounds) {\n\t *       // check general resizability\n\t *       if (!shape.resizable) {\n\t *         return false;\n\t *       }\n\t *\n\t *       // not returning anything (read: undefined)\n\t *       // will continue the evaluation of other rules\n\t *       // (with lower priority)\n\t *       return;\n\t *     } else {\n\t *       // element must have minimum size of 10*10 points\n\t *       return context.newBounds.width > 10 && context.newBounds.height > 10;\n\t *     }\n\t *   });\n\t * };\n\t *\n\t * @param {string|Array<string>} actions the identifier for the modeling action to check\n\t * @param {number} [priority] the priority at which this rule is being applied\n\t * @param {Function} fn the callback function that performs the actual check\n\t */\n\tRuleProvider.prototype.addRule = function(actions, priority, fn) {\n\n\t  var self = this;\n\n\t  if (typeof actions === 'string') {\n\t    actions = [ actions ];\n\t  }\n\n\t  actions.forEach(function(action) {\n\n\t    self.canExecute(action, priority, function(context, action, event) {\n\t      return fn(context);\n\t    }, true);\n\t  });\n\t};\n\n\t/**\n\t * Implement this method to add new rules during provider initialization.\n\t */\n\tRuleProvider.prototype.init = function() {};\n\n\t/**\n\t * This is a base rule provider for the element.autoResize rule.\n\t */\n\tfunction AutoResizeProvider(eventBus) {\n\n\t  RuleProvider.call(this, eventBus);\n\n\t  var self = this;\n\n\t  this.addRule('element.autoResize', function(context) {\n\t    return self.canResize(context.elements, context.target);\n\t  });\n\t}\n\n\tAutoResizeProvider.$inject = [ 'eventBus' ];\n\n\tinherits_browser(AutoResizeProvider, RuleProvider);\n\n\t/**\n\t * Needs to be implemented by sub classes to allow actual auto resize\n\t *\n\t * @param  {Array<djs.model.Shape>} elements\n\t * @param  {djs.model.Shape} target\n\t *\n\t * @return {boolean}\n\t */\n\tAutoResizeProvider.prototype.canResize = function(elements, target) {\n\t  return false;\n\t};\n\n\t/**\n\t * This module is a provider for automatically resizing parent BPMN elements\n\t */\n\tfunction BpmnAutoResizeProvider(eventBus, modeling) {\n\t  AutoResizeProvider.call(this, eventBus);\n\n\t  this._modeling = modeling;\n\t}\n\n\tinherits_browser(BpmnAutoResizeProvider, AutoResizeProvider);\n\n\tBpmnAutoResizeProvider.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\n\t/**\n\t * Check if the given target can be expanded\n\t *\n\t * @param  {djs.model.Shape} target\n\t *\n\t * @return {boolean}\n\t */\n\tBpmnAutoResizeProvider.prototype.canResize = function(elements, target) {\n\n\t  if (!is$1(target, 'bpmn:Participant') && !is$1(target, 'bpmn:Lane') && !(is$1(target, 'bpmn:SubProcess'))) {\n\t    return false;\n\t  }\n\n\t  var canResize = true;\n\n\t  forEach(elements, function(element) {\n\n\t    if (is$1(element, 'bpmn:Lane') || element.labelTarget) {\n\t      canResize = false;\n\t      return;\n\t    }\n\t  });\n\n\t  return canResize;\n\t};\n\n\tvar AutoResizeModule = {\n\t  __init__: [\n\t    'bpmnAutoResize',\n\t    'bpmnAutoResizeProvider'\n\t  ],\n\t  bpmnAutoResize: [ 'type', BpmnAutoResize ],\n\t  bpmnAutoResizeProvider: [ 'type', BpmnAutoResizeProvider ]\n\t};\n\n\t/* global TouchEvent */\n\n\tvar round$1 = Math.round;\n\n\tvar DRAG_ACTIVE_CLS = 'djs-drag-active';\n\n\n\tfunction preventDefault(event) {\n\t  event.preventDefault();\n\t}\n\n\tfunction isTouchEvent(event) {\n\n\t  // check for TouchEvent being available first\n\t  // (i.e. not available on desktop Firefox)\n\t  return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;\n\t}\n\n\tfunction getLength(point) {\n\t  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n\t}\n\n\t/**\n\t * A helper that fires canvas localized drag events and realizes\n\t * the general \"drag-and-drop\" look and feel.\n\t *\n\t * Calling {@link Dragging#activate} activates dragging on a canvas.\n\t *\n\t * It provides the following:\n\t *\n\t *   * emits life cycle events, namespaced with a prefix assigned\n\t *     during dragging activation\n\t *   * sets and restores the cursor\n\t *   * sets and restores the selection if elements still exist\n\t *   * ensures there can be only one drag operation active at a time\n\t *\n\t * Dragging may be canceled manually by calling {@link Dragging#cancel}\n\t * or by pressing ESC.\n\t *\n\t *\n\t * ## Life-cycle events\n\t *\n\t * Dragging can be in three different states, off, initialized\n\t * and active.\n\t *\n\t * (1) off: no dragging operation is in progress\n\t * (2) initialized: a new drag operation got initialized but not yet\n\t *                  started (i.e. because of no initial move)\n\t * (3) started: dragging is in progress\n\t *\n\t * Eventually dragging will be off again after a drag operation has\n\t * been ended or canceled via user click or ESC key press.\n\t *\n\t * To indicate transitions between these states dragging emits generic\n\t * life-cycle events with the `drag.` prefix _and_ events namespaced\n\t * to a prefix choosen by a user during drag initialization.\n\t *\n\t * The following events are emitted (appropriately prefixed) via\n\t * the {@link EventBus}.\n\t *\n\t * * `init`\n\t * * `start`\n\t * * `move`\n\t * * `end`\n\t * * `ended` (dragging already in off state)\n\t * * `cancel` (only if previously started)\n\t * * `canceled` (dragging already in off state, only if previously started)\n\t * * `cleanup`\n\t *\n\t *\n\t * @example\n\t *\n\t * function MyDragComponent(eventBus, dragging) {\n\t *\n\t *   eventBus.on('mydrag.start', function(event) {\n\t *     console.log('yes, we start dragging');\n\t *   });\n\t *\n\t *   eventBus.on('mydrag.move', function(event) {\n\t *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);\n\t *\n\t *     // local drag data is passed with the event\n\t *     event.context.foo; // \"BAR\"\n\t *\n\t *     // the original mouse event, too\n\t *     event.originalEvent; // MouseEvent(...)\n\t *   });\n\t *\n\t *   eventBus.on('element.click', function(event) {\n\t *     dragging.init(event, 'mydrag', {\n\t *       cursor: 'grabbing',\n\t *       data: {\n\t *         context: {\n\t *           foo: \"BAR\"\n\t *         }\n\t *       }\n\t *     });\n\t *   });\n\t * }\n\t */\n\tfunction Dragging(eventBus, canvas, selection, elementRegistry) {\n\n\t  var defaultOptions = {\n\t    threshold: 5,\n\t    trapClick: true\n\t  };\n\n\t  // the currently active drag operation\n\t  // dragging is active as soon as this context exists.\n\t  //\n\t  // it is visually _active_ only when a context.active flag is set to true.\n\t  var context;\n\n\t  /* convert a global event into local coordinates */\n\t  function toLocalPoint(globalPosition) {\n\n\t    var viewbox = canvas.viewbox();\n\n\t    var clientRect = canvas._container.getBoundingClientRect();\n\n\t    return {\n\t      x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,\n\t      y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale\n\t    };\n\t  }\n\n\t  // helpers\n\n\t  function fire(type, dragContext) {\n\t    dragContext = dragContext || context;\n\n\t    var event = eventBus.createEvent(\n\t      assign(\n\t        {},\n\t        dragContext.payload,\n\t        dragContext.data,\n\t        { isTouch: dragContext.isTouch }\n\t      )\n\t    );\n\n\t    // default integration\n\t    if (eventBus.fire('drag.' + type, event) === false) {\n\t      return false;\n\t    }\n\n\t    return eventBus.fire(dragContext.prefix + '.' + type, event);\n\t  }\n\n\t  function restoreSelection(previousSelection) {\n\t    var existingSelection = previousSelection.filter(function(element) {\n\t      return elementRegistry.get(element.id);\n\t    });\n\n\t    existingSelection.length && selection.select(existingSelection);\n\t  }\n\n\t  // event listeners\n\n\t  function move(event, activate) {\n\t    var payload = context.payload,\n\t        displacement = context.displacement;\n\n\t    var globalStart = context.globalStart,\n\t        globalCurrent = toPoint(event),\n\t        globalDelta = delta(globalCurrent, globalStart);\n\n\t    var localStart = context.localStart,\n\t        localCurrent = toLocalPoint(globalCurrent),\n\t        localDelta = delta(localCurrent, localStart);\n\n\n\t    // activate context explicitly or once threshold is reached\n\t    if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {\n\n\t      // fire start event with original\n\t      // starting coordinates\n\n\t      assign(payload, {\n\t        x: round$1(localStart.x + displacement.x),\n\t        y: round$1(localStart.y + displacement.y),\n\t        dx: 0,\n\t        dy: 0\n\t      }, { originalEvent: event });\n\n\t      if (false === fire('start')) {\n\t        return cancel();\n\t      }\n\n\t      context.active = true;\n\n\t      // unset selection and remember old selection\n\t      // the previous (old) selection will always passed\n\t      // with the event via the event.previousSelection property\n\t      if (!context.keepSelection) {\n\t        payload.previousSelection = selection.get();\n\t        selection.select(null);\n\t      }\n\n\t      // allow custom cursor\n\t      if (context.cursor) {\n\t        set$1(context.cursor);\n\t      }\n\n\t      // indicate dragging via marker on root element\n\t      canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n\t    }\n\n\t    stopPropagation(event);\n\n\t    if (context.active) {\n\n\t      // update payload with actual coordinates\n\t      assign(payload, {\n\t        x: round$1(localCurrent.x + displacement.x),\n\t        y: round$1(localCurrent.y + displacement.y),\n\t        dx: round$1(localDelta.x),\n\t        dy: round$1(localDelta.y)\n\t      }, { originalEvent: event });\n\n\t      // emit move event\n\t      fire('move');\n\t    }\n\t  }\n\n\t  function end(event) {\n\t    var previousContext,\n\t        returnValue = true;\n\n\t    if (context.active) {\n\n\t      if (event) {\n\t        context.payload.originalEvent = event;\n\n\t        // suppress original event (click, ...)\n\t        // because we just ended a drag operation\n\t        stopPropagation(event);\n\t      }\n\n\t      // implementations may stop restoring the\n\t      // original state (selections, ...) by preventing the\n\t      // end events default action\n\t      returnValue = fire('end');\n\t    }\n\n\t    if (returnValue === false) {\n\t      fire('rejected');\n\t    }\n\n\t    previousContext = cleanup(returnValue !== true);\n\n\t    // last event to be fired when all drag operations are done\n\t    // at this point in time no drag operation is in progress anymore\n\t    fire('ended', previousContext);\n\t  }\n\n\n\t  // cancel active drag operation if the user presses\n\t  // the ESC key on the keyboard\n\n\t  function checkCancel(event) {\n\n\t    if (event.which === 27) {\n\t      preventDefault(event);\n\n\t      cancel();\n\t    }\n\t  }\n\n\n\t  // prevent ghost click that might occur after a finished\n\t  // drag and drop session\n\n\t  function trapClickAndEnd(event) {\n\n\t    var untrap;\n\n\t    // trap the click in case we are part of an active\n\t    // drag operation. This will effectively prevent\n\t    // the ghost click that cannot be canceled otherwise.\n\t    if (context.active) {\n\n\t      untrap = install(eventBus);\n\n\t      // remove trap after minimal delay\n\t      setTimeout(untrap, 400);\n\n\t      // prevent default action (click)\n\t      preventDefault(event);\n\t    }\n\n\t    end(event);\n\t  }\n\n\t  function trapTouch(event) {\n\t    move(event);\n\t  }\n\n\t  // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)\n\t  // properties during hover and out and fire {prefix}.hover and {prefix}.out properties\n\t  // respectively\n\n\t  function hover(event) {\n\t    var payload = context.payload;\n\n\t    payload.hoverGfx = event.gfx;\n\t    payload.hover = event.element;\n\n\t    fire('hover');\n\t  }\n\n\t  function out(event) {\n\t    fire('out');\n\n\t    var payload = context.payload;\n\n\t    payload.hoverGfx = null;\n\t    payload.hover = null;\n\t  }\n\n\n\t  // life-cycle methods\n\n\t  function cancel(restore) {\n\t    var previousContext;\n\n\t    if (!context) {\n\t      return;\n\t    }\n\n\t    var wasActive = context.active;\n\n\t    if (wasActive) {\n\t      fire('cancel');\n\t    }\n\n\t    previousContext = cleanup(restore);\n\n\t    if (wasActive) {\n\n\t      // last event to be fired when all drag operations are done\n\t      // at this point in time no drag operation is in progress anymore\n\t      fire('canceled', previousContext);\n\t    }\n\t  }\n\n\t  function cleanup(restore) {\n\t    var previousContext,\n\t        endDrag;\n\n\t    fire('cleanup');\n\n\t    // reset cursor\n\t    unset();\n\n\t    if (context.trapClick) {\n\t      endDrag = trapClickAndEnd;\n\t    } else {\n\t      endDrag = end;\n\t    }\n\n\t    // reset dom listeners\n\t    componentEvent.unbind(document, 'mousemove', move);\n\n\t    componentEvent.unbind(document, 'dragstart', preventDefault);\n\t    componentEvent.unbind(document, 'selectstart', preventDefault);\n\n\t    componentEvent.unbind(document, 'mousedown', endDrag, true);\n\t    componentEvent.unbind(document, 'mouseup', endDrag, true);\n\n\t    componentEvent.unbind(document, 'keyup', checkCancel);\n\n\t    componentEvent.unbind(document, 'touchstart', trapTouch, true);\n\t    componentEvent.unbind(document, 'touchcancel', cancel, true);\n\t    componentEvent.unbind(document, 'touchmove', move, true);\n\t    componentEvent.unbind(document, 'touchend', end, true);\n\n\t    eventBus.off('element.hover', hover);\n\t    eventBus.off('element.out', out);\n\n\t    // remove drag marker on root element\n\t    canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n\n\t    // restore selection, unless it has changed\n\t    var previousSelection = context.payload.previousSelection;\n\n\t    if (restore !== false && previousSelection && !selection.get().length) {\n\t      restoreSelection(previousSelection);\n\t    }\n\n\t    previousContext = context;\n\n\t    context = null;\n\n\t    return previousContext;\n\t  }\n\n\t  /**\n\t   * Initialize a drag operation.\n\t   *\n\t   * If `localPosition` is given, drag events will be emitted\n\t   * relative to it.\n\t   *\n\t   * @param {MouseEvent|TouchEvent} [event]\n\t   * @param {Point} [localPosition] actual diagram local position this drag operation should start at\n\t   * @param {string} prefix\n\t   * @param {Object} [options]\n\t   */\n\t  function init(event, relativeTo, prefix, options) {\n\n\t    // only one drag operation may be active, at a time\n\t    if (context) {\n\t      cancel(false);\n\t    }\n\n\t    if (typeof relativeTo === 'string') {\n\t      options = prefix;\n\t      prefix = relativeTo;\n\t      relativeTo = null;\n\t    }\n\n\t    options = assign({}, defaultOptions, options || {});\n\n\t    var data = options.data || {},\n\t        originalEvent,\n\t        globalStart,\n\t        localStart,\n\t        endDrag,\n\t        isTouch;\n\n\t    if (options.trapClick) {\n\t      endDrag = trapClickAndEnd;\n\t    } else {\n\t      endDrag = end;\n\t    }\n\n\t    if (event) {\n\t      originalEvent = getOriginal(event) || event;\n\t      globalStart = toPoint(event);\n\n\t      stopPropagation(event);\n\n\t      // prevent default browser dragging behavior\n\t      if (originalEvent.type === 'dragstart') {\n\t        preventDefault(originalEvent);\n\t      }\n\t    } else {\n\t      originalEvent = null;\n\t      globalStart = { x: 0, y: 0 };\n\t    }\n\n\t    localStart = toLocalPoint(globalStart);\n\n\t    if (!relativeTo) {\n\t      relativeTo = localStart;\n\t    }\n\n\t    isTouch = isTouchEvent(originalEvent);\n\n\t    context = assign({\n\t      prefix: prefix,\n\t      data: data,\n\t      payload: {},\n\t      globalStart: globalStart,\n\t      displacement: delta(relativeTo, localStart),\n\t      localStart: localStart,\n\t      isTouch: isTouch\n\t    }, options);\n\n\t    // skip dom registration if trigger\n\t    // is set to manual (during testing)\n\t    if (!options.manual) {\n\n\t      // add dom listeners\n\n\t      if (isTouch) {\n\t        componentEvent.bind(document, 'touchstart', trapTouch, true);\n\t        componentEvent.bind(document, 'touchcancel', cancel, true);\n\t        componentEvent.bind(document, 'touchmove', move, true);\n\t        componentEvent.bind(document, 'touchend', end, true);\n\t      } else {\n\n\t        // assume we use the mouse to interact per default\n\t        componentEvent.bind(document, 'mousemove', move);\n\n\t        // prevent default browser drag and text selection behavior\n\t        componentEvent.bind(document, 'dragstart', preventDefault);\n\t        componentEvent.bind(document, 'selectstart', preventDefault);\n\n\t        componentEvent.bind(document, 'mousedown', endDrag, true);\n\t        componentEvent.bind(document, 'mouseup', endDrag, true);\n\t      }\n\n\t      componentEvent.bind(document, 'keyup', checkCancel);\n\n\t      eventBus.on('element.hover', hover);\n\t      eventBus.on('element.out', out);\n\t    }\n\n\t    fire('init');\n\n\t    if (options.autoActivate) {\n\t      move(event, true);\n\t    }\n\t  }\n\n\t  // cancel on diagram destruction\n\t  eventBus.on('diagram.destroy', cancel);\n\n\n\t  // API\n\n\t  this.init = init;\n\t  this.move = move;\n\t  this.hover = hover;\n\t  this.out = out;\n\t  this.end = end;\n\n\t  this.cancel = cancel;\n\n\t  // for introspection\n\n\t  this.context = function() {\n\t    return context;\n\t  };\n\n\t  this.setOptions = function(options) {\n\t    assign(defaultOptions, options);\n\t  };\n\t}\n\n\tDragging.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'selection',\n\t  'elementRegistry'\n\t];\n\n\tvar HIGH_PRIORITY = 1500;\n\n\n\t/**\n\t * Browsers may swallow certain events (hover, out ...) if users are to\n\t * fast with the mouse.\n\t *\n\t * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event\n\t *\n\t * The fix implemented in this component ensure that we\n\t *\n\t * 1) have a hover state after a successful drag.move event\n\t * 2) have an out event when dragging leaves an element\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Dragging} dragging\n\t * @param {ElementRegistry} elementRegistry\n\t */\n\tfunction HoverFix(eventBus, dragging, elementRegistry) {\n\n\t  var self = this;\n\n\t  /**\n\t   * Make sure we are god damn hovering!\n\t   *\n\t   * @param {Event} dragging event\n\t   */\n\t  function ensureHover(event) {\n\n\t    if (event.hover) {\n\t      return;\n\t    }\n\n\t    var originalEvent = event.originalEvent;\n\n\t    var gfx = self._findTargetGfx(originalEvent);\n\n\t    var element = gfx && elementRegistry.get(gfx);\n\n\t    if (gfx && element) {\n\n\t      // 1) cancel current mousemove\n\t      event.stopPropagation();\n\n\t      // 2) emit fake hover for new target\n\t      dragging.hover({ element: element, gfx: gfx });\n\n\t      // 3) re-trigger move event\n\t      dragging.move(originalEvent);\n\t    }\n\t  }\n\n\t  /**\n\t   * We wait for a specific sequence of events before\n\t   * emitting a fake drag.hover event.\n\t   *\n\t   * Event Sequence:\n\t   *\n\t   * drag.start\n\t   * drag.move >> ensure we are hovering\n\t   */\n\t  eventBus.on('drag.start', function(event) {\n\n\t    eventBus.once('drag.move', HIGH_PRIORITY, function(event) {\n\n\t      ensureHover(event);\n\n\t    });\n\n\t  });\n\n\n\t  /**\n\t   * We make sure that drag.out is always fired, even if the\n\t   * browser swallows an element.out event.\n\t   *\n\t   * Event sequence:\n\t   *\n\t   * drag.hover\n\t   * (element.out >> sometimes swallowed)\n\t   * element.hover >> ensure we fired drag.out\n\t   */\n\t  eventBus.on('drag.init', function() {\n\n\t    var hover, hoverGfx;\n\n\t    function setDragHover(event) {\n\t      hover = event.hover;\n\t      hoverGfx = event.hoverGfx;\n\t    }\n\n\t    function unsetHover() {\n\t      hover = null;\n\t      hoverGfx = null;\n\t    }\n\n\t    function ensureOut() {\n\n\t      if (!hover) {\n\t        return;\n\t      }\n\n\t      var element = hover,\n\t          gfx = hoverGfx;\n\n\t      hover = null;\n\t      hoverGfx = null;\n\n\t      // emit synthetic out event\n\t      dragging.out({\n\t        element: element,\n\t        gfx: gfx\n\t      });\n\t    }\n\n\t    eventBus.on('drag.hover', setDragHover);\n\t    eventBus.on('element.out', unsetHover);\n\t    eventBus.on('element.hover', HIGH_PRIORITY, ensureOut);\n\n\t    eventBus.once('drag.cleanup', function() {\n\t      eventBus.off('drag.hover', setDragHover);\n\t      eventBus.off('element.out', unsetHover);\n\t      eventBus.off('element.hover', ensureOut);\n\t    });\n\n\t  });\n\n\t  this._findTargetGfx = function(event) {\n\t    var position,\n\t        target;\n\n\t    if (!(event instanceof MouseEvent)) {\n\t      return;\n\t    }\n\n\t    position = toPoint(event);\n\n\t    // damn expensive operation, ouch!\n\t    target = document.elementFromPoint(position.x, position.y);\n\n\t    return getGfx(target);\n\t  };\n\n\t}\n\n\tHoverFix.$inject = [\n\t  'eventBus',\n\t  'dragging',\n\t  'elementRegistry'\n\t];\n\n\n\t// helpers /////////////////////\n\n\tfunction getGfx(target) {\n\t  return closest(target, 'svg, .djs-element', true);\n\t}\n\n\tvar DraggingModule = {\n\t  __init__: [\n\t    'hoverFix'\n\t  ],\n\t  __depends__: [\n\t    SelectionModule\n\t  ],\n\t  dragging: [ 'type', Dragging ],\n\t  hoverFix: [ 'type', HoverFix ]\n\t};\n\n\t/**\n\t * Initiates canvas scrolling if current cursor point is close to a border.\n\t * Cancelled when current point moves back inside the scrolling borders\n\t * or cancelled manually.\n\t *\n\t * Default options :\n\t *   scrollThresholdIn: [ 20, 20, 20, 20 ],\n\t *   scrollThresholdOut: [ 0, 0, 0, 0 ],\n\t *   scrollRepeatTimeout: 15,\n\t *   scrollStep: 10\n\t *\n\t * Threshold order:\n\t *   [ left, top, right, bottom ]\n\t */\n\tfunction AutoScroll(config, eventBus, canvas) {\n\n\t  this._canvas = canvas;\n\n\t  this._opts = assign({\n\t    scrollThresholdIn: [ 20, 20, 20, 20 ],\n\t    scrollThresholdOut: [ 0, 0, 0, 0 ],\n\t    scrollRepeatTimeout: 15,\n\t    scrollStep: 10\n\t  }, config);\n\n\t  var self = this;\n\n\t  eventBus.on('drag.move', function(e) {\n\t    var point = self._toBorderPoint(e);\n\n\t    self.startScroll(point);\n\t  });\n\n\t  eventBus.on([ 'drag.cleanup' ], function() {\n\t    self.stopScroll();\n\t  });\n\t}\n\n\tAutoScroll.$inject = [\n\t  'config.autoScroll',\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\n\t/**\n\t * Starts scrolling loop.\n\t * Point is given in global scale in canvas container box plane.\n\t *\n\t * @param  {Object} point { x: X, y: Y }\n\t */\n\tAutoScroll.prototype.startScroll = function(point) {\n\n\t  var canvas = this._canvas;\n\t  var opts = this._opts;\n\t  var self = this;\n\n\t  var clientRect = canvas.getContainer().getBoundingClientRect();\n\n\t  var diff = [\n\t    point.x,\n\t    point.y,\n\t    clientRect.width - point.x,\n\t    clientRect.height - point.y\n\t  ];\n\n\t  this.stopScroll();\n\n\t  var dx = 0,\n\t      dy = 0;\n\n\t  for (var i = 0; i < 4; i++) {\n\t    if (between(diff[i], opts.scrollThresholdOut[i], opts.scrollThresholdIn[i])) {\n\t      if (i === 0) {\n\t        dx = opts.scrollStep;\n\t      } else if (i == 1) {\n\t        dy = opts.scrollStep;\n\t      } else if (i == 2) {\n\t        dx = -opts.scrollStep;\n\t      } else if (i == 3) {\n\t        dy = -opts.scrollStep;\n\t      }\n\t    }\n\t  }\n\n\t  if (dx !== 0 || dy !== 0) {\n\t    canvas.scroll({ dx: dx, dy: dy });\n\n\t    this._scrolling = setTimeout(function() {\n\t      self.startScroll(point);\n\t    }, opts.scrollRepeatTimeout);\n\t  }\n\t};\n\n\tfunction between(val, start, end) {\n\t  if (start < val && val < end) {\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\n\t/**\n\t * Stops scrolling loop.\n\t */\n\tAutoScroll.prototype.stopScroll = function() {\n\t  clearTimeout(this._scrolling);\n\t};\n\n\n\t/**\n\t * Overrides defaults options.\n\t *\n\t * @param  {Object} options\n\t */\n\tAutoScroll.prototype.setOptions = function(options) {\n\t  this._opts = assign({}, this._opts, options);\n\t};\n\n\n\t/**\n\t * Converts event to a point in canvas container plane in global scale.\n\t *\n\t * @param  {Event} event\n\t * @return {Point}\n\t */\n\tAutoScroll.prototype._toBorderPoint = function(event) {\n\t  var clientRect = this._canvas._container.getBoundingClientRect();\n\n\t  var globalPosition = toPoint(event.originalEvent);\n\n\t  return {\n\t    x: globalPosition.x - clientRect.left,\n\t    y: globalPosition.y - clientRect.top\n\t  };\n\t};\n\n\tvar AutoScrollModule = {\n\t  __depends__: [\n\t    DraggingModule,\n\t  ],\n\t  __init__: [ 'autoScroll' ],\n\t  autoScroll: [ 'type', AutoScroll ]\n\t};\n\n\t/**\n\t * A service that provides rules for certain diagram actions.\n\t *\n\t * The default implementation will hook into the {@link CommandStack}\n\t * to perform the actual rule evaluation. Make sure to provide the\n\t * `commandStack` service with this module if you plan to use it.\n\t *\n\t * Together with this implementation you may use the {@link RuleProvider}\n\t * to implement your own rule checkers.\n\t *\n\t * This module is ment to be easily replaced, thus the tiny foot print.\n\t *\n\t * @param {Injector} injector\n\t */\n\tfunction Rules(injector) {\n\t  this._commandStack = injector.get('commandStack', false);\n\t}\n\n\tRules.$inject = [ 'injector' ];\n\n\n\t/**\n\t * Returns whether or not a given modeling action can be executed\n\t * in the specified context.\n\t *\n\t * This implementation will respond with allow unless anyone\n\t * objects.\n\t *\n\t * @param {string} action the action to be checked\n\t * @param {Object} [context] the context to check the action in\n\t *\n\t * @return {boolean} returns true, false or null depending on whether the\n\t *                   operation is allowed, not allowed or should be ignored.\n\t */\n\tRules.prototype.allowed = function(action, context) {\n\t  var allowed = true;\n\n\t  var commandStack = this._commandStack;\n\n\t  if (commandStack) {\n\t    allowed = commandStack.canExecute(action, context);\n\t  }\n\n\t  // map undefined to true, i.e. no rules\n\t  return allowed === undefined ? true : allowed;\n\t};\n\n\tvar RulesModule = {\n\t  __init__: [ 'rules' ],\n\t  rules: [ 'type', Rules ]\n\t};\n\n\tvar round$2 = Math.round,\n\t    max = Math.max;\n\n\n\tfunction circlePath(center, r) {\n\t  var x = center.x,\n\t      y = center.y;\n\n\t  return [\n\t    ['M', x, y],\n\t    ['m', 0, -r],\n\t    ['a', r, r, 0, 1, 1, 0, 2 * r],\n\t    ['a', r, r, 0, 1, 1, 0, -2 * r],\n\t    ['z']\n\t  ];\n\t}\n\n\tfunction linePath(points) {\n\t  var segments = [];\n\n\t  points.forEach(function(p, idx) {\n\t    segments.push([ idx === 0 ? 'M' : 'L', p.x, p.y ]);\n\t  });\n\n\t  return segments;\n\t}\n\n\n\tvar INTERSECTION_THRESHOLD = 10;\n\n\tfunction getBendpointIntersection(waypoints, reference) {\n\n\t  var i, w;\n\n\t  for (i = 0; (w = waypoints[i]); i++) {\n\n\t    if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {\n\t      return {\n\t        point: waypoints[i],\n\t        bendpoint: true,\n\t        index: i\n\t      };\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getPathIntersection(waypoints, reference) {\n\n\t  var intersections = intersect(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));\n\n\t  var a = intersections[0],\n\t      b = intersections[intersections.length - 1],\n\t      idx;\n\n\t  if (!a) {\n\n\t    // no intersection\n\t    return null;\n\t  }\n\n\t  if (a !== b) {\n\n\t    if (a.segment2 !== b.segment2) {\n\n\t      // we use the bendpoint in between both segments\n\t      // as the intersection point\n\n\t      idx = max(a.segment2, b.segment2) - 1;\n\n\t      return {\n\t        point: waypoints[idx],\n\t        bendpoint: true,\n\t        index: idx\n\t      };\n\t    }\n\n\t    return {\n\t      point: {\n\t        x: (round$2(a.x + b.x) / 2),\n\t        y: (round$2(a.y + b.y) / 2)\n\t      },\n\t      index: a.segment2\n\t    };\n\t  }\n\n\t  return {\n\t    point: {\n\t      x: round$2(a.x),\n\t      y: round$2(a.y)\n\t    },\n\t    index: a.segment2\n\t  };\n\t}\n\n\t/**\n\t * Returns the closest point on the connection towards a given reference point.\n\t *\n\t * @param  {Array<Point>} waypoints\n\t * @param  {Point} reference\n\t *\n\t * @return {Object} intersection data (segment, point)\n\t */\n\tfunction getApproxIntersection(waypoints, reference) {\n\t  return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);\n\t}\n\n\tvar BENDPOINT_CLS = 'djs-bendpoint';\n\tvar SEGMENT_DRAGGER_CLS = 'djs-segment-dragger';\n\n\tfunction toCanvasCoordinates(canvas, event) {\n\n\t  var position = toPoint(event),\n\t      clientRect = canvas._container.getBoundingClientRect(),\n\t      offset;\n\n\t  // canvas relative position\n\n\t  offset = {\n\t    x: clientRect.left,\n\t    y: clientRect.top\n\t  };\n\n\t  // update actual event payload with canvas relative measures\n\n\t  var viewbox = canvas.viewbox();\n\n\t  return {\n\t    x: viewbox.x + (position.x - offset.x) / viewbox.scale,\n\t    y: viewbox.y + (position.y - offset.y) / viewbox.scale\n\t  };\n\t}\n\n\tfunction getConnectionIntersection(canvas, waypoints, event) {\n\t  var localPosition = toCanvasCoordinates(canvas, event),\n\t      intersection = getApproxIntersection(waypoints, localPosition);\n\n\t  return intersection;\n\t}\n\n\tfunction addBendpoint(parentGfx, cls) {\n\t  var groupGfx = create('g');\n\t  classes$1(groupGfx).add(BENDPOINT_CLS);\n\n\t  append(parentGfx, groupGfx);\n\n\t  var visual = create('circle');\n\t  attr$1(visual, {\n\t    cx: 0,\n\t    cy: 0,\n\t    r: 4\n\t  });\n\t  classes$1(visual).add('djs-visual');\n\n\t  append(groupGfx, visual);\n\n\t  var hit = create('circle');\n\t  attr$1(hit, {\n\t    cx: 0,\n\t    cy: 0,\n\t    r: 10\n\t  });\n\t  classes$1(hit).add('djs-hit');\n\n\t  append(groupGfx, hit);\n\n\t  if (cls) {\n\t    classes$1(groupGfx).add(cls);\n\t  }\n\n\t  return groupGfx;\n\t}\n\n\tfunction createParallelDragger(parentGfx, segmentStart, segmentEnd, alignment) {\n\t  var draggerGfx = create('g');\n\n\t  append(parentGfx, draggerGfx);\n\n\t  var width = 14,\n\t      height = 3,\n\t      padding = 11,\n\t      hitWidth = calculateHitWidth(segmentStart, segmentEnd, alignment),\n\t      hitHeight = height + padding;\n\n\t  var visual = create('rect');\n\t  attr$1(visual, {\n\t    x: -width / 2,\n\t    y: -height / 2,\n\t    width: width,\n\t    height: height\n\t  });\n\t  classes$1(visual).add('djs-visual');\n\n\t  append(draggerGfx, visual);\n\n\t  var hit = create('rect');\n\t  attr$1(hit, {\n\t    x: -hitWidth / 2,\n\t    y: -hitHeight / 2,\n\t    width: hitWidth,\n\t    height: hitHeight\n\t  });\n\t  classes$1(hit).add('djs-hit');\n\n\t  append(draggerGfx, hit);\n\n\t  rotate(draggerGfx, alignment === 'v' ? 90 : 0);\n\n\t  return draggerGfx;\n\t}\n\n\n\tfunction addSegmentDragger(parentGfx, segmentStart, segmentEnd) {\n\n\t  var groupGfx = create('g'),\n\t      mid = getMidPoint(segmentStart, segmentEnd),\n\t      alignment = pointsAligned(segmentStart, segmentEnd);\n\n\t  append(parentGfx, groupGfx);\n\n\t  createParallelDragger(groupGfx, segmentStart, segmentEnd, alignment);\n\n\t  classes$1(groupGfx).add(SEGMENT_DRAGGER_CLS);\n\t  classes$1(groupGfx).add(alignment === 'h' ? 'horizontal' : 'vertical');\n\n\t  translate(groupGfx, mid.x, mid.y);\n\n\t  return groupGfx;\n\t}\n\n\t/**\n\t * Calculates region for segment move which is 2/3 of the full segment length\n\t * @param {number} segmentLength\n\t *\n\t * @return {number}\n\t */\n\tfunction calculateSegmentMoveRegion(segmentLength) {\n\t  return Math.abs(Math.round(segmentLength * 2 / 3));\n\t}\n\n\t// helper //////////\n\n\tfunction calculateHitWidth(segmentStart, segmentEnd, alignment) {\n\t  var segmentLengthXAxis = segmentEnd.x - segmentStart.x,\n\t      segmentLengthYAxis = segmentEnd.y - segmentStart.y;\n\n\t  return alignment === 'h' ?\n\t    calculateSegmentMoveRegion(segmentLengthXAxis) :\n\t    calculateSegmentMoveRegion(segmentLengthYAxis);\n\t}\n\n\tvar css_escape = createCommonjsModule(function (module, exports) {\n\t(function(root, factory) {\n\t\t// https://github.com/umdjs/umd/blob/master/returnExports.js\n\t\t{\n\t\t\t// For Node.js.\n\t\t\tmodule.exports = factory(root);\n\t\t}\n\t}(typeof commonjsGlobal != 'undefined' ? commonjsGlobal : commonjsGlobal, function(root) {\n\n\t\tif (root.CSS && root.CSS.escape) {\n\t\t\treturn root.CSS.escape;\n\t\t}\n\n\t\t// https://drafts.csswg.org/cssom/#serialize-an-identifier\n\t\tvar cssEscape = function(value) {\n\t\t\tif (arguments.length == 0) {\n\t\t\t\tthrow new TypeError('`CSS.escape` requires an argument.');\n\t\t\t}\n\t\t\tvar string = String(value);\n\t\t\tvar length = string.length;\n\t\t\tvar index = -1;\n\t\t\tvar codeUnit;\n\t\t\tvar result = '';\n\t\t\tvar firstCodeUnit = string.charCodeAt(0);\n\t\t\twhile (++index < length) {\n\t\t\t\tcodeUnit = string.charCodeAt(index);\n\t\t\t\t// Note: there’s no need to special-case astral symbols, surrogate\n\t\t\t\t// pairs, or lone surrogates.\n\n\t\t\t\t// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER\n\t\t\t\t// (U+FFFD).\n\t\t\t\tif (codeUnit == 0x0000) {\n\t\t\t\t\tresult += '\\uFFFD';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t// If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n\t\t\t\t\t// U+007F, […]\n\t\t\t\t\t(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||\n\t\t\t\t\t// If the character is the first character and is in the range [0-9]\n\t\t\t\t\t// (U+0030 to U+0039), […]\n\t\t\t\t\t(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||\n\t\t\t\t\t// If the character is the second character and is in the range [0-9]\n\t\t\t\t\t// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n\t\t\t\t\t(\n\t\t\t\t\t\tindex == 1 &&\n\t\t\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 &&\n\t\t\t\t\t\tfirstCodeUnit == 0x002D\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n\t\t\t\t\tresult += '\\\\' + codeUnit.toString(16) + ' ';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t// If the character is the first character and is a `-` (U+002D), and\n\t\t\t\t\t// there is no second character, […]\n\t\t\t\t\tindex == 0 &&\n\t\t\t\t\tlength == 1 &&\n\t\t\t\t\tcodeUnit == 0x002D\n\t\t\t\t) {\n\t\t\t\t\tresult += '\\\\' + string.charAt(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If the character is not handled by one of the above rules and is\n\t\t\t\t// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n\t\t\t\t// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n\t\t\t\t// U+005A), or [a-z] (U+0061 to U+007A), […]\n\t\t\t\tif (\n\t\t\t\t\tcodeUnit >= 0x0080 ||\n\t\t\t\t\tcodeUnit == 0x002D ||\n\t\t\t\t\tcodeUnit == 0x005F ||\n\t\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 ||\n\t\t\t\t\tcodeUnit >= 0x0041 && codeUnit <= 0x005A ||\n\t\t\t\t\tcodeUnit >= 0x0061 && codeUnit <= 0x007A\n\t\t\t\t) {\n\t\t\t\t\t// the character itself\n\t\t\t\t\tresult += string.charAt(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, the escaped character.\n\t\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character\n\t\t\t\tresult += '\\\\' + string.charAt(index);\n\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tif (!root.CSS) {\n\t\t\troot.CSS = {};\n\t\t}\n\n\t\troot.CSS.escape = cssEscape;\n\t\treturn cssEscape;\n\n\t}));\n\t});\n\n\tvar HTML_ESCAPE_MAP = {\n\t  '&': '&amp;',\n\t  '<': '&lt;',\n\t  '>': '&gt;',\n\t  '\"': '&quot;',\n\t  '\\'': '&#39;'\n\t};\n\n\tfunction escapeHTML(str) {\n\t  str = '' + str;\n\n\t  return str && str.replace(/[&<>\"']/g, function(match) {\n\t    return HTML_ESCAPE_MAP[match];\n\t  });\n\t}\n\n\t/**\n\t * A service that adds editable bendpoints to connections.\n\t */\n\tfunction Bendpoints(\n\t    eventBus, canvas, interactionEvents,\n\t    bendpointMove, connectionSegmentMove) {\n\n\t  /**\n\t   * Returns true if intersection point is inside middle region of segment, adjusted by\n\t   * optional threshold\n\t   */\n\t  function isIntersectionMiddle(intersection, waypoints, treshold) {\n\t    var idx = intersection.index,\n\t        p = intersection.point,\n\t        p0, p1, mid, aligned, xDelta, yDelta;\n\n\t    if (idx <= 0 || intersection.bendpoint) {\n\t      return false;\n\t    }\n\n\t    p0 = waypoints[idx - 1];\n\t    p1 = waypoints[idx];\n\t    mid = getMidPoint(p0, p1),\n\t    aligned = pointsAligned(p0, p1);\n\t    xDelta = Math.abs(p.x - mid.x);\n\t    yDelta = Math.abs(p.y - mid.y);\n\n\t    return aligned && xDelta <= treshold && yDelta <= treshold;\n\t  }\n\n\t  /**\n\t   * Calculates the threshold from a connection's middle which fits the two-third-region\n\t   */\n\t  function calculateIntersectionThreshold(connection, intersection) {\n\t    var waypoints = connection.waypoints,\n\t        relevantSegment, alignment, segmentLength, threshold;\n\n\t    if (intersection.index <= 0 || intersection.bendpoint) {\n\t      return null;\n\t    }\n\n\t    // segment relative to connection intersection\n\t    relevantSegment = {\n\t      start: waypoints[intersection.index - 1],\n\t      end: waypoints[intersection.index]\n\t    };\n\n\t    alignment = pointsAligned(relevantSegment.start, relevantSegment.end);\n\n\t    if (!alignment) {\n\t      return null;\n\t    }\n\n\t    if (alignment === 'h') {\n\t      segmentLength = relevantSegment.end.x - relevantSegment.start.x;\n\t    } else {\n\t      segmentLength = relevantSegment.end.y - relevantSegment.start.y;\n\t    }\n\n\t    // calculate threshold relative to 2/3 of segment length\n\t    threshold = calculateSegmentMoveRegion(segmentLength) / 2;\n\n\t    return threshold;\n\t  }\n\n\t  function activateBendpointMove(event, connection) {\n\t    var waypoints = connection.waypoints,\n\t        intersection = getConnectionIntersection(canvas, waypoints, event),\n\t        threshold;\n\n\t    if (!intersection) {\n\t      return;\n\t    }\n\n\t    threshold = calculateIntersectionThreshold(connection, intersection);\n\n\t    if (isIntersectionMiddle(intersection, waypoints, threshold)) {\n\t      connectionSegmentMove.start(event, connection, intersection.index);\n\t    } else {\n\t      bendpointMove.start(event, connection, intersection.index, !intersection.bendpoint);\n\t    }\n\n\t    // we've handled the event\n\t    return true;\n\t  }\n\n\t  function bindInteractionEvents(node, eventName, element) {\n\n\t    componentEvent.bind(node, eventName, function(event) {\n\t      interactionEvents.triggerMouseEvent(eventName, event, element);\n\t      event.stopPropagation();\n\t    });\n\t  }\n\n\t  function getBendpointsContainer(element, create$1) {\n\n\t    var layer = canvas.getLayer('overlays'),\n\t        gfx = query('.djs-bendpoints[data-element-id=\"' + css_escape(element.id) + '\"]', layer);\n\n\t    if (!gfx && create$1) {\n\t      gfx = create('g');\n\t      attr$1(gfx, { 'data-element-id': element.id });\n\t      classes$1(gfx).add('djs-bendpoints');\n\n\t      append(layer, gfx);\n\n\t      bindInteractionEvents(gfx, 'mousedown', element);\n\t      bindInteractionEvents(gfx, 'click', element);\n\t      bindInteractionEvents(gfx, 'dblclick', element);\n\t    }\n\n\t    return gfx;\n\t  }\n\n\t  function getSegmentDragger(idx, parentGfx) {\n\t    return query(\n\t      '.djs-segment-dragger[data-segment-idx=\"' + idx + '\"]',\n\t      parentGfx\n\t    );\n\t  }\n\n\t  function createBendpoints(gfx, connection) {\n\t    connection.waypoints.forEach(function(p, idx) {\n\t      var bendpoint = addBendpoint(gfx);\n\n\t      append(gfx, bendpoint);\n\n\t      translate(bendpoint, p.x, p.y);\n\t    });\n\n\t    // add floating bendpoint\n\t    addBendpoint(gfx, 'floating');\n\t  }\n\n\t  function createSegmentDraggers(gfx, connection) {\n\n\t    var waypoints = connection.waypoints;\n\n\t    var segmentStart,\n\t        segmentEnd,\n\t        segmentDraggerGfx;\n\n\t    for (var i = 1; i < waypoints.length; i++) {\n\n\t      segmentStart = waypoints[i - 1];\n\t      segmentEnd = waypoints[i];\n\n\t      if (pointsAligned(segmentStart, segmentEnd)) {\n\t        segmentDraggerGfx = addSegmentDragger(gfx, segmentStart, segmentEnd);\n\n\t        attr$1(segmentDraggerGfx, { 'data-segment-idx': i });\n\n\t        bindInteractionEvents(segmentDraggerGfx, 'mousemove', connection);\n\t      }\n\t    }\n\t  }\n\n\t  function clearBendpoints(gfx) {\n\t    forEach(all('.' + BENDPOINT_CLS, gfx), function(node) {\n\t      remove$1(node);\n\t    });\n\t  }\n\n\t  function clearSegmentDraggers(gfx) {\n\t    forEach(all('.' + SEGMENT_DRAGGER_CLS, gfx), function(node) {\n\t      remove$1(node);\n\t    });\n\t  }\n\n\t  function addHandles(connection) {\n\n\t    var gfx = getBendpointsContainer(connection);\n\n\t    if (!gfx) {\n\t      gfx = getBendpointsContainer(connection, true);\n\n\t      createBendpoints(gfx, connection);\n\t      createSegmentDraggers(gfx, connection);\n\t    }\n\n\t    return gfx;\n\t  }\n\n\t  function updateHandles(connection) {\n\n\t    var gfx = getBendpointsContainer(connection);\n\n\t    if (gfx) {\n\t      clearSegmentDraggers(gfx);\n\t      clearBendpoints(gfx);\n\t      createSegmentDraggers(gfx, connection);\n\t      createBendpoints(gfx, connection);\n\t    }\n\t  }\n\n\t  function updateFloatingBendpointPosition(parentGfx, intersection) {\n\t    var floating = query('.floating', parentGfx),\n\t        point = intersection.point;\n\n\t    if (!floating) {\n\t      return;\n\t    }\n\n\t    translate(floating, point.x, point.y);\n\n\t  }\n\n\t  function updateSegmentDraggerPosition(parentGfx, intersection, waypoints) {\n\n\t    var draggerGfx = getSegmentDragger(intersection.index, parentGfx),\n\t        segmentStart = waypoints[intersection.index - 1],\n\t        segmentEnd = waypoints[intersection.index],\n\t        point = intersection.point,\n\t        mid = getMidPoint(segmentStart, segmentEnd),\n\t        alignment = pointsAligned(segmentStart, segmentEnd),\n\t        draggerVisual, relativePosition;\n\n\t    if (!draggerGfx) {\n\t      return;\n\t    }\n\n\t    draggerVisual = getDraggerVisual(draggerGfx);\n\n\t    relativePosition = {\n\t      x: point.x - mid.x,\n\t      y: point.y - mid.y\n\t    };\n\n\t    if (alignment === 'v') {\n\n\t      // rotate position\n\t      relativePosition = {\n\t        x: relativePosition.y,\n\t        y: relativePosition.x\n\t      };\n\t    }\n\n\t    translate(draggerVisual, relativePosition.x, relativePosition.y);\n\t  }\n\n\t  eventBus.on('connection.changed', function(event) {\n\t    updateHandles(event.element);\n\t  });\n\n\t  eventBus.on('connection.remove', function(event) {\n\t    var gfx = getBendpointsContainer(event.element);\n\n\t    if (gfx) {\n\t      remove$1(gfx);\n\t    }\n\t  });\n\n\t  eventBus.on('element.marker.update', function(event) {\n\n\t    var element = event.element,\n\t        bendpointsGfx;\n\n\t    if (!element.waypoints) {\n\t      return;\n\t    }\n\n\t    bendpointsGfx = addHandles(element);\n\n\t    if (event.add) {\n\t      classes$1(bendpointsGfx).add(event.marker);\n\t    } else {\n\t      classes$1(bendpointsGfx).remove(event.marker);\n\t    }\n\t  });\n\n\t  eventBus.on('element.mousemove', function(event) {\n\n\t    var element = event.element,\n\t        waypoints = element.waypoints,\n\t        bendpointsGfx,\n\t        intersection;\n\n\t    if (waypoints) {\n\t      bendpointsGfx = getBendpointsContainer(element, true);\n\n\t      intersection = getConnectionIntersection(canvas, waypoints, event.originalEvent);\n\n\t      if (!intersection) {\n\t        return;\n\t      }\n\n\t      updateFloatingBendpointPosition(bendpointsGfx, intersection);\n\n\t      if (!intersection.bendpoint) {\n\t        updateSegmentDraggerPosition(bendpointsGfx, intersection, waypoints);\n\t      }\n\n\t    }\n\t  });\n\n\t  eventBus.on('element.mousedown', function(event) {\n\n\t    var originalEvent = event.originalEvent,\n\t        element = event.element;\n\n\t    if (!element.waypoints) {\n\t      return;\n\t    }\n\n\t    return activateBendpointMove(originalEvent, element);\n\t  });\n\n\t  eventBus.on('selection.changed', function(event) {\n\t    var newSelection = event.newSelection,\n\t        primary = newSelection[0];\n\n\t    if (primary && primary.waypoints) {\n\t      addHandles(primary);\n\t    }\n\t  });\n\n\t  eventBus.on('element.hover', function(event) {\n\t    var element = event.element;\n\n\t    if (element.waypoints) {\n\t      addHandles(element);\n\t      interactionEvents.registerEvent(event.gfx, 'mousemove', 'element.mousemove');\n\t    }\n\t  });\n\n\t  eventBus.on('element.out', function(event) {\n\t    interactionEvents.unregisterEvent(event.gfx, 'mousemove', 'element.mousemove');\n\t  });\n\n\t  // update bendpoint container data attribute on element ID change\n\t  eventBus.on('element.updateId', function(context) {\n\t    var element = context.element,\n\t        newId = context.newId;\n\n\t    if (element.waypoints) {\n\t      var bendpointContainer = getBendpointsContainer(element);\n\n\t      if (bendpointContainer) {\n\t        attr$1(bendpointContainer, { 'data-element-id': newId });\n\t      }\n\t    }\n\t  });\n\n\t  // API\n\n\t  this.addHandles = addHandles;\n\t  this.updateHandles = updateHandles;\n\t  this.getBendpointsContainer = getBendpointsContainer;\n\t  this.getSegmentDragger = getSegmentDragger;\n\t}\n\n\tBendpoints.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'interactionEvents',\n\t  'bendpointMove',\n\t  'connectionSegmentMove'\n\t];\n\n\n\n\t// helper /////////////\n\n\tfunction getDraggerVisual(draggerGfx) {\n\t  return query('.djs-visual', draggerGfx);\n\t}\n\n\tvar round$3 = Math.round;\n\n\tvar RECONNECT_START = 'reconnectStart',\n\t    RECONNECT_END = 'reconnectEnd',\n\t    UPDATE_WAYPOINTS = 'updateWaypoints';\n\n\n\t/**\n\t * Move bendpoints through drag and drop to add/remove bendpoints or reconnect connection.\n\t */\n\tfunction BendpointMove(injector, eventBus, canvas, dragging, rules, modeling) {\n\t  this._injector = injector;\n\n\t  this.start = function(event, connection, bendpointIndex, insert) {\n\t    var gfx = canvas.getGraphics(connection),\n\t        source = connection.source,\n\t        target = connection.target,\n\t        waypoints = connection.waypoints,\n\t        type;\n\n\t    if (!insert && bendpointIndex === 0) {\n\t      type = RECONNECT_START;\n\t    } else\n\t    if (!insert && bendpointIndex === waypoints.length - 1) {\n\t      type = RECONNECT_END;\n\t    } else {\n\t      type = UPDATE_WAYPOINTS;\n\t    }\n\n\t    var command = type === UPDATE_WAYPOINTS ? 'connection.updateWaypoints' : 'connection.reconnect';\n\n\t    var allowed = rules.allowed(command, {\n\t      connection: connection,\n\t      source: source,\n\t      target: target\n\t    });\n\n\t    if (allowed === false) {\n\t      allowed = rules.allowed(command, {\n\t        connection: connection,\n\t        source: target,\n\t        target: source\n\t      });\n\t    }\n\n\t    if (allowed === false) {\n\t      return;\n\t    }\n\n\t    dragging.init(event, 'bendpoint.move', {\n\t      data: {\n\t        connection: connection,\n\t        connectionGfx: gfx,\n\t        context: {\n\t          allowed: allowed,\n\t          bendpointIndex: bendpointIndex,\n\t          connection: connection,\n\t          source: source,\n\t          target: target,\n\t          insert: insert,\n\t          type: type\n\t        }\n\t      }\n\t    });\n\t  };\n\n\t  eventBus.on('bendpoint.move.hover', function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        source = connection.source,\n\t        target = connection.target,\n\t        hover = event.hover,\n\t        type = context.type;\n\n\t    // cache hover state\n\t    context.hover = hover;\n\n\t    var allowed;\n\n\t    if (!hover) {\n\t      return;\n\t    }\n\n\t    var command = type === UPDATE_WAYPOINTS ? 'connection.updateWaypoints' : 'connection.reconnect';\n\n\t    allowed = context.allowed = rules.allowed(command, {\n\t      connection: connection,\n\t      source: type === RECONNECT_START ? hover : source,\n\t      target: type === RECONNECT_END ? hover : target\n\t    });\n\n\t    if (allowed) {\n\t      context.source = type === RECONNECT_START ? hover : source;\n\t      context.target = type === RECONNECT_END ? hover : target;\n\n\t      return;\n\t    }\n\n\t    if (allowed === false) {\n\t      allowed = context.allowed = rules.allowed(command, {\n\t        connection: connection,\n\t        source: type === RECONNECT_END ? hover : target,\n\t        target: type === RECONNECT_START ? hover : source\n\t      });\n\t    }\n\n\t    if (allowed) {\n\t      context.source = type === RECONNECT_END ? hover : target;\n\t      context.target = type === RECONNECT_START ? hover : source;\n\t    }\n\t  });\n\n\t  eventBus.on([ 'bendpoint.move.out', 'bendpoint.move.cleanup' ], function(event) {\n\t    var context = event.context;\n\n\t    context.hover = null;\n\t    context.source = null;\n\t    context.target = null;\n\n\t    context.allowed = false;\n\t  });\n\n\t  eventBus.on('bendpoint.move.end', function(event) {\n\t    var context = event.context,\n\t        allowed = context.allowed,\n\t        bendpointIndex = context.bendpointIndex,\n\t        connection = context.connection,\n\t        insert = context.insert,\n\t        newWaypoints = connection.waypoints.slice(),\n\t        source = context.source,\n\t        target = context.target,\n\t        type = context.type,\n\t        hints = context.hints || {};\n\n\t    // ensure integer values (important if zoom level was > 1 during move)\n\t    var docking = {\n\t      x: round$3(event.x),\n\t      y: round$3(event.y)\n\t    };\n\n\t    if (!allowed) {\n\t      return false;\n\t    }\n\n\t    if (type === UPDATE_WAYPOINTS) {\n\t      if (insert) {\n\n\t        // insert new bendpoint\n\t        newWaypoints.splice(bendpointIndex, 0, docking);\n\t      } else {\n\n\t        // swap previous waypoint with moved one\n\t        newWaypoints[bendpointIndex] = docking;\n\t      }\n\n\t      // pass hints about actual moved bendpoint\n\t      // useful for connection/label layout\n\t      hints.bendpointMove = {\n\t        insert: insert,\n\t        bendpointIndex: bendpointIndex\n\t      };\n\n\t      newWaypoints = this.cropWaypoints(connection, newWaypoints);\n\n\t      modeling.updateWaypoints(connection, filterRedundantWaypoints(newWaypoints), hints);\n\t    } else {\n\t      if (type === RECONNECT_START) {\n\t        hints.docking = 'source';\n\n\t        if (isReverse(context)) {\n\t          hints.docking = 'target';\n\n\t          hints.newWaypoints = newWaypoints.reverse();\n\t        }\n\t      } else if (type === RECONNECT_END) {\n\t        hints.docking = 'target';\n\n\t        if (isReverse(context)) {\n\t          hints.docking = 'source';\n\n\t          hints.newWaypoints = newWaypoints.reverse();\n\t        }\n\t      }\n\n\t      modeling.reconnect(connection, source, target, docking, hints);\n\t    }\n\t  }, this);\n\t}\n\n\tBendpointMove.$inject = [\n\t  'injector',\n\t  'eventBus',\n\t  'canvas',\n\t  'dragging',\n\t  'rules',\n\t  'modeling'\n\t];\n\n\tBendpointMove.prototype.cropWaypoints = function(connection, newWaypoints) {\n\t  var connectionDocking = this._injector.get('connectionDocking', false);\n\n\t  if (!connectionDocking) {\n\t    return newWaypoints;\n\t  }\n\n\t  var waypoints = connection.waypoints;\n\n\t  connection.waypoints = newWaypoints;\n\n\t  connection.waypoints = connectionDocking.getCroppedWaypoints(connection);\n\n\t  newWaypoints = connection.waypoints;\n\n\t  connection.waypoints = waypoints;\n\n\t  return newWaypoints;\n\t};\n\n\n\t// helpers //////////\n\n\tfunction isReverse(context) {\n\t  var hover = context.hover,\n\t      source = context.source,\n\t      target = context.target,\n\t      type = context.type;\n\n\t  if (type === RECONNECT_START) {\n\t    return hover && target && hover === target && source !== target;\n\t  }\n\n\t  if (type === RECONNECT_END) {\n\t    return hover && source && hover === source && source !== target;\n\t  }\n\t}\n\n\tvar RECONNECT_START$1 = 'reconnectStart',\n\t    RECONNECT_END$1 = 'reconnectEnd',\n\t    UPDATE_WAYPOINTS$1 = 'updateWaypoints';\n\n\tvar MARKER_OK = 'connect-ok',\n\t    MARKER_NOT_OK = 'connect-not-ok',\n\t    MARKER_CONNECT_HOVER = 'connect-hover',\n\t    MARKER_CONNECT_UPDATING = 'djs-updating',\n\t    MARKER_ELEMENT_HIDDEN = 'djs-element-hidden';\n\n\tvar HIGH_PRIORITY$1 = 1100;\n\n\t/**\n\t * Preview connection while moving bendpoints.\n\t */\n\tfunction BendpointMovePreview(bendpointMove, injector, eventBus, canvas) {\n\t  this._injector = injector;\n\n\t  var connectionPreview = injector.get('connectionPreview', false);\n\n\t  eventBus.on('bendpoint.move.start', function(event) {\n\t    var context = event.context,\n\t        bendpointIndex = context.bendpointIndex,\n\t        connection = context.connection,\n\t        insert = context.insert,\n\t        waypoints = connection.waypoints,\n\t        newWaypoints = waypoints.slice();\n\n\t    context.waypoints = waypoints;\n\n\t    if (insert) {\n\n\t      // insert placeholder for new bendpoint\n\t      newWaypoints.splice(bendpointIndex, 0, { x: event.x, y: event.y });\n\t    }\n\n\t    connection.waypoints = newWaypoints;\n\n\t    // add dragger gfx\n\t    var draggerGfx = context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));\n\n\t    classes$1(draggerGfx).add('djs-dragging');\n\n\t    canvas.addMarker(connection, MARKER_ELEMENT_HIDDEN);\n\t    canvas.addMarker(connection, MARKER_CONNECT_UPDATING);\n\t  });\n\n\t  eventBus.on('bendpoint.move.hover', function(event) {\n\t    var context = event.context,\n\t        allowed = context.allowed,\n\t        hover = context.hover,\n\t        type = context.type;\n\n\t    if (hover) {\n\t      canvas.addMarker(hover, MARKER_CONNECT_HOVER);\n\n\t      if (type === UPDATE_WAYPOINTS$1) {\n\t        return;\n\t      }\n\n\t      if (allowed) {\n\t        canvas.removeMarker(hover, MARKER_NOT_OK);\n\t        canvas.addMarker(hover, MARKER_OK);\n\t      } else if (allowed === false) {\n\t        canvas.removeMarker(hover, MARKER_OK);\n\t        canvas.addMarker(hover, MARKER_NOT_OK);\n\t      }\n\t    }\n\t  });\n\n\t  eventBus.on([\n\t    'bendpoint.move.out',\n\t    'bendpoint.move.cleanup'\n\t  ], HIGH_PRIORITY$1, function(event) {\n\t    var context = event.context,\n\t        hover = context.hover,\n\t        target = context.target;\n\n\t    if (hover) {\n\t      canvas.removeMarker(hover, MARKER_CONNECT_HOVER);\n\t      canvas.removeMarker(hover, target ? MARKER_OK : MARKER_NOT_OK);\n\t    }\n\t  });\n\n\t  eventBus.on('bendpoint.move.move', function(event) {\n\t    var context = event.context,\n\t        allowed = context.allowed,\n\t        bendpointIndex = context.bendpointIndex,\n\t        draggerGfx = context.draggerGfx,\n\t        hover = context.hover,\n\t        type = context.type,\n\t        connection = context.connection,\n\t        source = connection.source,\n\t        target = connection.target,\n\t        newWaypoints = connection.waypoints.slice(),\n\t        bendpoint = { x: event.x, y: event.y },\n\t        hints = context.hints || {},\n\t        drawPreviewHints = {};\n\n\t    if (connectionPreview) {\n\t      if (hints.connectionStart) {\n\t        drawPreviewHints.connectionStart = hints.connectionStart;\n\t      }\n\n\t      if (hints.connectionEnd) {\n\t        drawPreviewHints.connectionEnd = hints.connectionEnd;\n\t      }\n\n\n\t      if (type === RECONNECT_START$1) {\n\t        if (isReverse(context)) {\n\t          drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;\n\n\t          drawPreviewHints.source = target;\n\t          drawPreviewHints.target = hover || source;\n\n\t          newWaypoints = newWaypoints.reverse();\n\t        } else {\n\t          drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;\n\n\t          drawPreviewHints.source = hover || source;\n\t          drawPreviewHints.target = target;\n\t        }\n\t      } else if (type === RECONNECT_END$1) {\n\t        if (isReverse(context)) {\n\t          drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;\n\n\t          drawPreviewHints.source = hover || target;\n\t          drawPreviewHints.target = source;\n\n\t          newWaypoints = newWaypoints.reverse();\n\t        } else {\n\t          drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;\n\n\t          drawPreviewHints.source = source;\n\t          drawPreviewHints.target = hover || target;\n\t        }\n\n\t      } else {\n\t        drawPreviewHints.noCropping = true;\n\t        drawPreviewHints.noLayout = true;\n\t        newWaypoints[ bendpointIndex ] = bendpoint;\n\t      }\n\n\t      if (type === UPDATE_WAYPOINTS$1) {\n\t        newWaypoints = bendpointMove.cropWaypoints(connection, newWaypoints);\n\t      }\n\n\t      drawPreviewHints.waypoints = newWaypoints;\n\n\t      connectionPreview.drawPreview(context, allowed, drawPreviewHints);\n\t    }\n\n\t    translate(draggerGfx, event.x, event.y);\n\t  }, this);\n\n\t  eventBus.on([\n\t    'bendpoint.move.end',\n\t    'bendpoint.move.cancel'\n\t  ], HIGH_PRIORITY$1, function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        draggerGfx = context.draggerGfx,\n\t        hover = context.hover,\n\t        target = context.target,\n\t        waypoints = context.waypoints;\n\n\t    connection.waypoints = waypoints;\n\n\t    // remove dragger gfx\n\t    remove$1(draggerGfx);\n\n\t    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);\n\t    canvas.removeMarker(connection, MARKER_ELEMENT_HIDDEN);\n\n\t    if (hover) {\n\t      canvas.removeMarker(hover, MARKER_OK);\n\t      canvas.removeMarker(hover, target ? MARKER_OK : MARKER_NOT_OK);\n\t    }\n\n\t    if (connectionPreview) {\n\t      connectionPreview.cleanUp(context);\n\t    }\n\t  });\n\t}\n\n\tBendpointMovePreview.$inject = [\n\t  'bendpointMove',\n\t  'injector',\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\tvar MARKER_CONNECT_HOVER$1 = 'connect-hover',\n\t    MARKER_CONNECT_UPDATING$1 = 'djs-updating';\n\n\n\tfunction axisAdd(point, axis, delta) {\n\t  return axisSet(point, axis, point[axis] + delta);\n\t}\n\n\tfunction axisSet(point, axis, value) {\n\t  return {\n\t    x: (axis === 'x' ? value : point.x),\n\t    y: (axis === 'y' ? value : point.y)\n\t  };\n\t}\n\n\tfunction axisFenced(position, segmentStart, segmentEnd, axis) {\n\n\t  var maxValue = Math.max(segmentStart[axis], segmentEnd[axis]),\n\t      minValue = Math.min(segmentStart[axis], segmentEnd[axis]);\n\n\t  var padding = 20;\n\n\t  var fencedValue = Math.min(Math.max(minValue + padding, position[axis]), maxValue - padding);\n\n\t  return axisSet(segmentStart, axis, fencedValue);\n\t}\n\n\tfunction flipAxis(axis) {\n\t  return axis === 'x' ? 'y' : 'x';\n\t}\n\n\t/**\n\t * Get the docking point on the given element.\n\t *\n\t * Compute a reasonable docking, if non exists.\n\t *\n\t * @param  {Point} point\n\t * @param  {djs.model.Shape} referenceElement\n\t * @param  {string} moveAxis (x|y)\n\t *\n\t * @return {Point}\n\t */\n\tfunction getDocking(point, referenceElement, moveAxis) {\n\n\t  var referenceMid,\n\t      inverseAxis;\n\n\t  if (point.original) {\n\t    return point.original;\n\t  } else {\n\t    referenceMid = getMid(referenceElement);\n\t    inverseAxis = flipAxis(moveAxis);\n\n\t    return axisSet(point, inverseAxis, referenceMid[inverseAxis]);\n\t  }\n\t}\n\n\t/**\n\t * A component that implements moving of bendpoints\n\t */\n\tfunction ConnectionSegmentMove(\n\t    injector, eventBus, canvas,\n\t    dragging, graphicsFactory, modeling) {\n\n\t  // optional connection docking integration\n\t  var connectionDocking = injector.get('connectionDocking', false);\n\n\n\t  // API\n\n\t  this.start = function(event, connection, idx) {\n\n\t    var context,\n\t        gfx = canvas.getGraphics(connection),\n\t        segmentStartIndex = idx - 1,\n\t        segmentEndIndex = idx,\n\t        waypoints = connection.waypoints,\n\t        segmentStart = waypoints[segmentStartIndex],\n\t        segmentEnd = waypoints[segmentEndIndex],\n\t        intersection = getConnectionIntersection(canvas, waypoints, event),\n\t        direction, axis, dragPosition;\n\n\t    direction = pointsAligned(segmentStart, segmentEnd);\n\n\t    // do not move diagonal connection\n\t    if (!direction) {\n\t      return;\n\t    }\n\n\t    // the axis where we are going to move things\n\t    axis = direction === 'v' ? 'x' : 'y';\n\n\t    if (segmentStartIndex === 0) {\n\t      segmentStart = getDocking(segmentStart, connection.source, axis);\n\t    }\n\n\t    if (segmentEndIndex === waypoints.length - 1) {\n\t      segmentEnd = getDocking(segmentEnd, connection.target, axis);\n\t    }\n\n\t    if (intersection) {\n\t      dragPosition = intersection.point;\n\t    } else {\n\n\t      // set to segment center as default\n\t      dragPosition = {\n\t        x: (segmentStart.x + segmentEnd.x) / 2,\n\t        y: (segmentStart.y + segmentEnd.y) / 2\n\t      };\n\t    }\n\n\t    context = {\n\t      connection: connection,\n\t      segmentStartIndex: segmentStartIndex,\n\t      segmentEndIndex: segmentEndIndex,\n\t      segmentStart: segmentStart,\n\t      segmentEnd: segmentEnd,\n\t      axis: axis,\n\t      dragPosition: dragPosition\n\t    };\n\n\t    dragging.init(event, dragPosition, 'connectionSegment.move', {\n\t      cursor: axis === 'x' ? 'resize-ew' : 'resize-ns',\n\t      data: {\n\t        connection: connection,\n\t        connectionGfx: gfx,\n\t        context: context\n\t      }\n\t    });\n\t  };\n\n\t  /**\n\t   * Crop connection if connection cropping is provided.\n\t   *\n\t   * @param {Connection} connection\n\t   * @param {Array<Point>} newWaypoints\n\t   *\n\t   * @return {Array<Point>} cropped connection waypoints\n\t   */\n\t  function cropConnection(connection, newWaypoints) {\n\n\t    // crop connection, if docking service is provided only\n\t    if (!connectionDocking) {\n\t      return newWaypoints;\n\t    }\n\n\t    var oldWaypoints = connection.waypoints,\n\t        croppedWaypoints;\n\n\t    // temporary set new waypoints\n\t    connection.waypoints = newWaypoints;\n\n\t    croppedWaypoints = connectionDocking.getCroppedWaypoints(connection);\n\n\t    // restore old waypoints\n\t    connection.waypoints = oldWaypoints;\n\n\t    return croppedWaypoints;\n\t  }\n\n\t  // DRAGGING IMPLEMENTATION\n\n\t  function redrawConnection(data) {\n\t    graphicsFactory.update('connection', data.connection, data.connectionGfx);\n\t  }\n\n\t  function updateDragger(context, segmentOffset, event) {\n\n\t    var newWaypoints = context.newWaypoints,\n\t        segmentStartIndex = context.segmentStartIndex + segmentOffset,\n\t        segmentStart = newWaypoints[segmentStartIndex],\n\t        segmentEndIndex = context.segmentEndIndex + segmentOffset,\n\t        segmentEnd = newWaypoints[segmentEndIndex],\n\t        axis = flipAxis(context.axis);\n\n\t    // make sure the dragger does not move\n\t    // outside the connection\n\t    var draggerPosition = axisFenced(event, segmentStart, segmentEnd, axis);\n\n\t    // update dragger\n\t    translate(context.draggerGfx, draggerPosition.x, draggerPosition.y);\n\t  }\n\n\t  /**\n\t   * Filter waypoints for redundant ones (i.e. on the same axis).\n\t   * Returns the filtered waypoints and the offset related to the segment move.\n\t   *\n\t   * @param {Array<Point>} waypoints\n\t   * @param {Integer} segmentStartIndex of moved segment start\n\t   *\n\t   * @return {Object} { filteredWaypoints, segmentOffset }\n\t   */\n\t  function filterRedundantWaypoints(waypoints, segmentStartIndex) {\n\n\t    var segmentOffset = 0;\n\n\t    var filteredWaypoints = waypoints.filter(function(r, idx) {\n\t      if (pointsOnLine(waypoints[idx - 1], waypoints[idx + 1], r)) {\n\n\t        // remove point and increment offset\n\t        segmentOffset = idx <= segmentStartIndex ? segmentOffset - 1 : segmentOffset;\n\t        return false;\n\t      }\n\n\t      // dont remove point\n\t      return true;\n\t    });\n\n\t    return {\n\t      waypoints: filteredWaypoints,\n\t      segmentOffset: segmentOffset\n\t    };\n\t  }\n\n\t  eventBus.on('connectionSegment.move.start', function(event) {\n\n\t    var context = event.context,\n\t        connection = event.connection,\n\t        layer = canvas.getLayer('overlays');\n\n\t    context.originalWaypoints = connection.waypoints.slice();\n\n\t    // add dragger gfx\n\t    context.draggerGfx = addSegmentDragger(layer, context.segmentStart, context.segmentEnd);\n\t    classes$1(context.draggerGfx).add('djs-dragging');\n\n\t    canvas.addMarker(connection, MARKER_CONNECT_UPDATING$1);\n\t  });\n\n\t  eventBus.on('connectionSegment.move.move', function(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        segmentStartIndex = context.segmentStartIndex,\n\t        segmentEndIndex = context.segmentEndIndex,\n\t        segmentStart = context.segmentStart,\n\t        segmentEnd = context.segmentEnd,\n\t        axis = context.axis;\n\n\t    var newWaypoints = context.originalWaypoints.slice(),\n\t        newSegmentStart = axisAdd(segmentStart, axis, event['d' + axis]),\n\t        newSegmentEnd = axisAdd(segmentEnd, axis, event['d' + axis]);\n\n\t    // original waypoint count and added / removed\n\t    // from start waypoint delta. We use the later\n\t    // to retrieve the updated segmentStartIndex / segmentEndIndex\n\t    var waypointCount = newWaypoints.length,\n\t        segmentOffset = 0;\n\n\t    // move segment start / end by axis delta\n\t    newWaypoints[segmentStartIndex] = newSegmentStart;\n\t    newWaypoints[segmentEndIndex] = newSegmentEnd;\n\n\t    var sourceToSegmentOrientation,\n\t        targetToSegmentOrientation;\n\n\t    // handle first segment\n\t    if (segmentStartIndex < 2) {\n\t      sourceToSegmentOrientation = getOrientation(connection.source, newSegmentStart);\n\n\t      // first bendpoint, remove first segment if intersecting\n\t      if (segmentStartIndex === 1) {\n\n\t        if (sourceToSegmentOrientation === 'intersect') {\n\t          newWaypoints.shift();\n\t          newWaypoints[0] = newSegmentStart;\n\t          segmentOffset--;\n\t        }\n\t      }\n\n\t      // docking point, add segment if not intersecting anymore\n\t      else {\n\t        if (sourceToSegmentOrientation !== 'intersect') {\n\t          newWaypoints.unshift(segmentStart);\n\t          segmentOffset++;\n\t        }\n\t      }\n\t    }\n\n\t    // handle last segment\n\t    if (segmentEndIndex > waypointCount - 3) {\n\t      targetToSegmentOrientation = getOrientation(connection.target, newSegmentEnd);\n\n\t      // last bendpoint, remove last segment if intersecting\n\t      if (segmentEndIndex === waypointCount - 2) {\n\n\t        if (targetToSegmentOrientation === 'intersect') {\n\t          newWaypoints.pop();\n\t          newWaypoints[newWaypoints.length - 1] = newSegmentEnd;\n\t        }\n\t      }\n\n\t      // last bendpoint, remove last segment if intersecting\n\t      else {\n\t        if (targetToSegmentOrientation !== 'intersect') {\n\t          newWaypoints.push(segmentEnd);\n\t        }\n\t      }\n\t    }\n\n\t    // update connection waypoints\n\t    context.newWaypoints = connection.waypoints = cropConnection(connection, newWaypoints);\n\n\t    // update dragger position\n\t    updateDragger(context, segmentOffset, event);\n\n\t    // save segmentOffset in context\n\t    context.newSegmentStartIndex = segmentStartIndex + segmentOffset;\n\n\t    // redraw connection\n\t    redrawConnection(event);\n\t  });\n\n\t  eventBus.on('connectionSegment.move.hover', function(event) {\n\n\t    event.context.hover = event.hover;\n\t    canvas.addMarker(event.hover, MARKER_CONNECT_HOVER$1);\n\t  });\n\n\t  eventBus.on([\n\t    'connectionSegment.move.out',\n\t    'connectionSegment.move.cleanup'\n\t  ], function(event) {\n\n\t    // remove connect marker\n\t    // if it was added\n\t    var hover = event.context.hover;\n\n\t    if (hover) {\n\t      canvas.removeMarker(hover, MARKER_CONNECT_HOVER$1);\n\t    }\n\t  });\n\n\t  eventBus.on('connectionSegment.move.cleanup', function(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection;\n\n\t    // remove dragger gfx\n\t    if (context.draggerGfx) {\n\t      remove$1(context.draggerGfx);\n\t    }\n\n\t    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING$1);\n\t  });\n\n\t  eventBus.on([\n\t    'connectionSegment.move.cancel',\n\t    'connectionSegment.move.end'\n\t  ], function(event) {\n\t    var context = event.context,\n\t        connection = context.connection;\n\n\t    connection.waypoints = context.originalWaypoints;\n\n\t    redrawConnection(event);\n\t  });\n\n\t  eventBus.on('connectionSegment.move.end', function(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        newWaypoints = context.newWaypoints,\n\t        newSegmentStartIndex = context.newSegmentStartIndex;\n\n\t    // ensure we have actual pixel values bendpoint\n\t    // coordinates (important when zoom level was > 1 during move)\n\t    newWaypoints = newWaypoints.map(function(p) {\n\t      return {\n\t        original: p.original,\n\t        x: Math.round(p.x),\n\t        y: Math.round(p.y)\n\t      };\n\t    });\n\n\t    // apply filter redunant waypoints\n\t    var filtered = filterRedundantWaypoints(newWaypoints, newSegmentStartIndex);\n\n\t    // get filtered waypoints\n\t    var filteredWaypoints = filtered.waypoints,\n\t        croppedWaypoints = cropConnection(connection, filteredWaypoints),\n\t        segmentOffset = filtered.segmentOffset;\n\n\t    var hints = {\n\t      segmentMove: {\n\t        segmentStartIndex: context.segmentStartIndex,\n\t        newSegmentStartIndex: newSegmentStartIndex + segmentOffset\n\t      }\n\t    };\n\n\t    modeling.updateWaypoints(connection, croppedWaypoints, hints);\n\t  });\n\t}\n\n\tConnectionSegmentMove.$inject = [\n\t  'injector',\n\t  'eventBus',\n\t  'canvas',\n\t  'dragging',\n\t  'graphicsFactory',\n\t  'modeling'\n\t];\n\n\tvar abs$1 = Math.abs,\n\t    round$4 = Math.round;\n\n\n\t/**\n\t * Snap value to a collection of reference values.\n\t *\n\t * @param  {number} value\n\t * @param  {Array<number>} values\n\t * @param  {number} [tolerance=10]\n\t *\n\t * @return {number} the value we snapped to or null, if none snapped\n\t */\n\tfunction snapTo(value, values, tolerance) {\n\t  tolerance = tolerance === undefined ? 10 : tolerance;\n\n\t  var idx, snapValue;\n\n\t  for (idx = 0; idx < values.length; idx++) {\n\t    snapValue = values[idx];\n\n\t    if (abs$1(snapValue - value) <= tolerance) {\n\t      return snapValue;\n\t    }\n\t  }\n\t}\n\n\n\tfunction topLeft(bounds) {\n\t  return {\n\t    x: bounds.x,\n\t    y: bounds.y\n\t  };\n\t}\n\n\tfunction bottomRight(bounds) {\n\t  return {\n\t    x: bounds.x + bounds.width,\n\t    y: bounds.y + bounds.height\n\t  };\n\t}\n\n\tfunction mid(bounds, defaultValue) {\n\n\t  if (!bounds || isNaN(bounds.x) || isNaN(bounds.y)) {\n\t    return defaultValue;\n\t  }\n\n\t  return {\n\t    x: round$4(bounds.x + bounds.width / 2),\n\t    y: round$4(bounds.y + bounds.height / 2)\n\t  };\n\t}\n\n\n\t/**\n\t * Retrieve the snap state of the given event.\n\t *\n\t * @param  {Event} event\n\t * @param  {string} axis\n\t *\n\t * @return {boolean} the snapped state\n\t *\n\t */\n\tfunction isSnapped(event, axis) {\n\t  var snapped = event.snapped;\n\n\t  if (!snapped) {\n\t    return false;\n\t  }\n\n\t  if (typeof axis === 'string') {\n\t    return snapped[axis];\n\t  }\n\n\t  return snapped.x && snapped.y;\n\t}\n\n\n\t/**\n\t * Set the given event as snapped.\n\t *\n\t * This method may change the x and/or y position of the shape\n\t * from the given event!\n\t *\n\t * @param {Event} event\n\t * @param {string} axis\n\t * @param {number|boolean} value\n\t *\n\t * @return {number} old value\n\t */\n\tfunction setSnapped(event, axis, value) {\n\t  if (typeof axis !== 'string') {\n\t    throw new Error('axis must be in [x, y]');\n\t  }\n\n\t  if (typeof value !== 'number' && value !== false) {\n\t    throw new Error('value must be Number or false');\n\t  }\n\n\t  var delta,\n\t      previousValue = event[axis];\n\n\t  var snapped = event.snapped = (event.snapped || {});\n\n\n\t  if (value === false) {\n\t    snapped[axis] = false;\n\t  } else {\n\t    snapped[axis] = true;\n\n\t    delta = value - previousValue;\n\n\t    event[axis] += delta;\n\t    event['d' + axis] += delta;\n\t  }\n\n\t  return previousValue;\n\t}\n\n\t/**\n\t * Get children of a shape.\n\t *\n\t * @param {djs.model.Shape} parent\n\t *\n\t * @returns {Array<djs.model.Shape|djs.model.Connection>}\n\t */\n\tfunction getChildren$1(parent) {\n\t  return parent.children || [];\n\t}\n\n\tvar abs$2= Math.abs,\n\t    round$5 = Math.round;\n\n\tvar TOLERANCE = 10;\n\n\n\tfunction BendpointSnapping(eventBus) {\n\n\t  function snapTo(values, value) {\n\n\t    if (isArray(values)) {\n\t      var i = values.length;\n\n\t      while (i--) if (abs$2(values[i] - value) <= TOLERANCE) {\n\t        return values[i];\n\t      }\n\t    } else {\n\t      values = +values;\n\t      var rem = value % values;\n\n\t      if (rem < TOLERANCE) {\n\t        return value - rem;\n\t      }\n\n\t      if (rem > values - TOLERANCE) {\n\t        return value - rem + values;\n\t      }\n\t    }\n\n\t    return value;\n\t  }\n\n\t  function mid(element) {\n\t    if (element.width) {\n\t      return {\n\t        x: round$5(element.width / 2 + element.x),\n\t        y: round$5(element.height / 2 + element.y)\n\t      };\n\t    }\n\t  }\n\n\t  // connection segment snapping //////////////////////\n\n\t  function getConnectionSegmentSnaps(context) {\n\n\t    var snapPoints = context.snapPoints,\n\t        connection = context.connection,\n\t        waypoints = connection.waypoints,\n\t        segmentStart = context.segmentStart,\n\t        segmentStartIndex = context.segmentStartIndex,\n\t        segmentEnd = context.segmentEnd,\n\t        segmentEndIndex = context.segmentEndIndex,\n\t        axis = context.axis;\n\n\t    if (snapPoints) {\n\t      return snapPoints;\n\t    }\n\n\t    var referenceWaypoints = [\n\t      waypoints[segmentStartIndex - 1],\n\t      segmentStart,\n\t      segmentEnd,\n\t      waypoints[segmentEndIndex + 1]\n\t    ];\n\n\t    if (segmentStartIndex < 2) {\n\t      referenceWaypoints.unshift(mid(connection.source));\n\t    }\n\n\t    if (segmentEndIndex > waypoints.length - 3) {\n\t      referenceWaypoints.unshift(mid(connection.target));\n\t    }\n\n\t    context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };\n\n\t    forEach(referenceWaypoints, function(p) {\n\n\t      // we snap on existing bendpoints only,\n\t      // not placeholders that are inserted during add\n\t      if (p) {\n\t        p = p.original || p;\n\n\t        if (axis === 'y') {\n\t          snapPoints.horizontal.push(p.y);\n\t        }\n\n\t        if (axis === 'x') {\n\t          snapPoints.vertical.push(p.x);\n\t        }\n\t      }\n\t    });\n\n\t    return snapPoints;\n\t  }\n\n\t  eventBus.on('connectionSegment.move.move', 1500, function(event) {\n\t    var context = event.context,\n\t        snapPoints = getConnectionSegmentSnaps(context),\n\t        x = event.x,\n\t        y = event.y,\n\t        sx, sy;\n\n\t    if (!snapPoints) {\n\t      return;\n\t    }\n\n\t    // snap\n\t    sx = snapTo(snapPoints.vertical, x);\n\t    sy = snapTo(snapPoints.horizontal, y);\n\n\n\t    // correction x/y\n\t    var cx = (x - sx),\n\t        cy = (y - sy);\n\n\t    // update delta\n\t    assign(event, {\n\t      dx: event.dx - cx,\n\t      dy: event.dy - cy,\n\t      x: sx,\n\t      y: sy\n\t    });\n\n\t    // only set snapped if actually snapped\n\t    if (cx || snapPoints.vertical.indexOf(x) !== -1) {\n\t      setSnapped(event, 'x', sx);\n\t    }\n\n\t    if (cy || snapPoints.horizontal.indexOf(y) !== -1) {\n\t      setSnapped(event, 'y', sy);\n\t    }\n\t  });\n\n\n\t  // bendpoint snapping //////////////////////\n\n\t  function getBendpointSnaps(context) {\n\n\t    var snapPoints = context.snapPoints,\n\t        waypoints = context.connection.waypoints,\n\t        bendpointIndex = context.bendpointIndex;\n\n\t    if (snapPoints) {\n\t      return snapPoints;\n\t    }\n\n\t    var referenceWaypoints = [ waypoints[bendpointIndex - 1], waypoints[bendpointIndex + 1] ];\n\n\t    context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };\n\n\t    forEach(referenceWaypoints, function(p) {\n\n\t      // we snap on existing bendpoints only,\n\t      // not placeholders that are inserted during add\n\t      if (p) {\n\t        p = p.original || p;\n\n\t        snapPoints.horizontal.push(p.y);\n\t        snapPoints.vertical.push(p.x);\n\t      }\n\t    });\n\n\t    return snapPoints;\n\t  }\n\n\n\t  eventBus.on([ 'bendpoint.move.move', 'bendpoint.move.end' ], 1500, function(event) {\n\n\t    var context = event.context,\n\t        snapPoints = getBendpointSnaps(context),\n\t        hover = context.hover,\n\t        hoverMid = hover && mid(hover),\n\t        x = event.x,\n\t        y = event.y,\n\t        sx, sy;\n\n\t    if (!snapPoints) {\n\t      return;\n\t    }\n\n\t    // snap to hover mid\n\t    sx = snapTo(hoverMid ? snapPoints.vertical.concat([ hoverMid.x ]) : snapPoints.vertical, x);\n\t    sy = snapTo(hoverMid ? snapPoints.horizontal.concat([ hoverMid.y ]) : snapPoints.horizontal, y);\n\n\t    // correction x/y\n\t    var cx = (x - sx),\n\t        cy = (y - sy);\n\n\t    // update delta\n\t    assign(event, {\n\t      dx: event.dx - cx,\n\t      dy: event.dy - cy,\n\t      x: event.x - cx,\n\t      y: event.y - cy\n\t    });\n\n\t    // only set snapped if actually snapped\n\t    if (cx || snapPoints.vertical.indexOf(x) !== -1) {\n\t      setSnapped(event, 'x', sx);\n\t    }\n\n\t    if (cy || snapPoints.horizontal.indexOf(y) !== -1) {\n\t      setSnapped(event, 'y', sy);\n\t    }\n\t  });\n\t}\n\n\n\tBendpointSnapping.$inject = [ 'eventBus' ];\n\n\tvar BendpointsModule = {\n\t  __depends__: [\n\t    DraggingModule,\n\t    RulesModule\n\t  ],\n\t  __init__: [ 'bendpoints', 'bendpointSnapping', 'bendpointMovePreview' ],\n\t  bendpoints: [ 'type', Bendpoints ],\n\t  bendpointMove: [ 'type', BendpointMove ],\n\t  bendpointMovePreview: [ 'type', BendpointMovePreview ],\n\t  connectionSegmentMove: [ 'type', ConnectionSegmentMove ],\n\t  bendpointSnapping: [ 'type', BendpointSnapping ]\n\t};\n\n\tfunction Connect(eventBus, dragging, modeling, rules) {\n\n\t  // rules\n\n\t  function canConnect(source, target) {\n\t    return rules.allowed('connection.create', {\n\t      source: source,\n\t      target: target\n\t    });\n\t  }\n\n\t  function canConnectReverse(source, target) {\n\t    return canConnect(target, source);\n\t  }\n\n\n\t  // event handlers\n\n\t  eventBus.on('connect.hover', function(event) {\n\t    var context = event.context,\n\t        start = context.start,\n\t        hover = event.hover,\n\t        canExecute;\n\n\t    // cache hover state\n\t    context.hover = hover;\n\n\t    canExecute = context.canExecute = canConnect(start, hover);\n\n\t    // ignore hover\n\t    if (isNil(canExecute)) {\n\t      return;\n\t    }\n\n\t    if (canExecute !== false) {\n\t      context.source = start;\n\t      context.target = hover;\n\n\t      return;\n\t    }\n\n\t    canExecute = context.canExecute = canConnectReverse(start, hover);\n\n\t    // ignore hover\n\t    if (isNil(canExecute)) {\n\t      return;\n\t    }\n\n\t    if (canExecute !== false) {\n\t      context.source = hover;\n\t      context.target = start;\n\t    }\n\t  });\n\n\t  eventBus.on([ 'connect.out', 'connect.cleanup' ], function(event) {\n\t    var context = event.context;\n\n\t    context.hover = null;\n\t    context.source = null;\n\t    context.target = null;\n\n\t    context.canExecute = false;\n\t  });\n\n\t  eventBus.on('connect.end', function(event) {\n\t    var context = event.context,\n\t        canExecute = context.canExecute,\n\t        connectionStart = context.connectionStart,\n\t        connectionEnd = {\n\t          x: event.x,\n\t          y: event.y\n\t        },\n\t        source = context.source,\n\t        target = context.target;\n\n\t    if (!canExecute) {\n\t      return false;\n\t    }\n\n\t    var attrs = null,\n\t        hints = {\n\t          connectionStart: isReverse$1(context) ? connectionEnd : connectionStart,\n\t          connectionEnd: isReverse$1(context) ? connectionStart : connectionEnd\n\t        };\n\n\t    if (isObject(canExecute)) {\n\t      attrs = canExecute;\n\t    }\n\n\t    modeling.connect(source, target, attrs, hints);\n\t  });\n\n\n\t  // API\n\n\t  /**\n\t   * Start connect operation.\n\t   *\n\t   * @param {DOMEvent} event\n\t   * @param {djs.model.Base} start\n\t   * @param {Point} [connectionStart]\n\t   * @param {boolean} [autoActivate=false]\n\t   */\n\t  this.start = function(event, start, connectionStart, autoActivate) {\n\t    if (!isObject(connectionStart)) {\n\t      autoActivate = connectionStart;\n\t      connectionStart = getMid(start);\n\t    }\n\n\t    dragging.init(event, 'connect', {\n\t      autoActivate: autoActivate,\n\t      data: {\n\t        shape: start,\n\t        context: {\n\t          start: start,\n\t          connectionStart: connectionStart\n\t        }\n\t      }\n\t    });\n\t  };\n\t}\n\n\tConnect.$inject = [\n\t  'eventBus',\n\t  'dragging',\n\t  'modeling',\n\t  'rules'\n\t];\n\n\n\t// helpers //////////\n\n\tfunction isReverse$1(context) {\n\t  var hover = context.hover,\n\t      source = context.source,\n\t      target = context.target;\n\n\t  return hover && source && hover === source && source !== target;\n\t}\n\n\tvar HIGH_PRIORITY$2 = 1100,\n\t    LOW_PRIORITY$5 = 900;\n\n\tvar MARKER_OK$1 = 'connect-ok',\n\t    MARKER_NOT_OK$1 = 'connect-not-ok';\n\n\t/**\n\t * Shows connection preview during connect.\n\t *\n\t * @param {didi.Injector} injector\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t */\n\tfunction ConnectPreview(injector, eventBus, canvas) {\n\t  var connectionPreview = injector.get('connectionPreview', false);\n\n\t  connectionPreview && eventBus.on('connect.move', function(event) {\n\t    var context = event.context,\n\t        canConnect = context.canExecute,\n\t        hover = context.hover,\n\t        source = context.source,\n\t        start = context.start,\n\t        startPosition = context.startPosition,\n\t        connectionStart = context.connectionStart,\n\t        connectionEnd = context.connectionEnd,\n\t        target = context.target;\n\n\t    if (!connectionStart) {\n\t      connectionStart = isReverse$1(context) ? {\n\t        x: event.x,\n\t        y: event.y\n\t      } : startPosition;\n\t    }\n\n\t    if (!connectionEnd) {\n\t      connectionEnd = isReverse$1(context) ? startPosition : {\n\t        x: event.x,\n\t        y: event.y\n\t      };\n\t    }\n\n\t    connectionPreview.drawPreview(context, canConnect, {\n\t      source: source || start,\n\t      target: target || hover,\n\t      connectionStart: connectionStart,\n\t      connectionEnd: connectionEnd\n\t    });\n\t  });\n\n\t  eventBus.on('connect.hover', LOW_PRIORITY$5, function(event) {\n\t    var context = event.context,\n\t        hover = event.hover,\n\t        canExecute = context.canExecute;\n\n\t    // ignore hover\n\t    if (canExecute === null) {\n\t      return;\n\t    }\n\n\t    canvas.addMarker(hover, canExecute ? MARKER_OK$1 : MARKER_NOT_OK$1);\n\t  });\n\n\t  eventBus.on([\n\t    'connect.out',\n\t    'connect.cleanup'\n\t  ], HIGH_PRIORITY$2, function(event) {\n\t    var hover = event.hover;\n\n\t    if (hover) {\n\t      canvas.removeMarker(hover, MARKER_OK$1);\n\t      canvas.removeMarker(hover, MARKER_NOT_OK$1);\n\t    }\n\t  });\n\n\t  connectionPreview && eventBus.on('connect.cleanup', function(event) {\n\t    connectionPreview.cleanUp(event.context);\n\t  });\n\t}\n\n\tConnectPreview.$inject = [\n\t  'injector',\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\tvar ConnectModule = {\n\t  __depends__: [\n\t    SelectionModule,\n\t    RulesModule,\n\t    DraggingModule\n\t  ],\n\t  __init__: [\n\t    'connectPreview'\n\t  ],\n\t  connect: [ 'type', Connect ],\n\t  connectPreview: [ 'type', ConnectPreview ]\n\t};\n\n\tvar MARKER_CONNECTION_PREVIEW = 'djs-connection-preview';\n\n\t/**\n\t * Draws connection preview. Optionally, this can use layouter and connection docking to draw\n\t * better looking previews.\n\t *\n\t * @param {didi.Injector} injector\n\t * @param {Canvas} canvas\n\t * @param {GraphicsFactory} graphicsFactory\n\t * @param {ElementFactory} elementFactory\n\t */\n\tfunction ConnectionPreview(\n\t    injector,\n\t    canvas,\n\t    graphicsFactory,\n\t    elementFactory\n\t) {\n\t  this._canvas = canvas;\n\t  this._graphicsFactory = graphicsFactory;\n\t  this._elementFactory = elementFactory;\n\n\t  // optional components\n\t  this._connectionDocking = injector.get('connectionDocking', false);\n\t  this._layouter = injector.get('layouter', false);\n\t}\n\n\tConnectionPreview.$inject = [\n\t  'injector',\n\t  'canvas',\n\t  'graphicsFactory',\n\t  'elementFactory'\n\t];\n\n\t/**\n\t * Draw connection preview.\n\t *\n\t * Provide at least one of <source, connectionStart> and <target, connectionEnd> to create a preview.\n\t * In the clean up stage, call `connectionPreview#cleanUp` with the context to remove preview.\n\t *\n\t * @param {Object} context\n\t * @param {Object|boolean} canConnect\n\t * @param {Object} hints\n\t * @param {djs.model.shape} [hints.source] source element\n\t * @param {djs.model.shape} [hints.target] target element\n\t * @param {Point} [hints.connectionStart] connection preview start\n\t * @param {Point} [hints.connectionEnd] connection preview end\n\t * @param {Array<Point>} [hints.waypoints] provided waypoints for preview\n\t * @param {boolean} [hints.noLayout] true if preview should not be laid out\n\t * @param {boolean} [hints.noCropping] true if preview should not be cropped\n\t * @param {boolean} [hints.noNoop] true if simple connection should not be drawn\n\t */\n\tConnectionPreview.prototype.drawPreview = function(context, canConnect, hints) {\n\n\t  hints = hints || {};\n\n\t  var connectionPreviewGfx = context.connectionPreviewGfx,\n\t      getConnection = context.getConnection,\n\t      source = hints.source,\n\t      target = hints.target,\n\t      waypoints = hints.waypoints,\n\t      connectionStart = hints.connectionStart,\n\t      connectionEnd = hints.connectionEnd,\n\t      noLayout = hints.noLayout,\n\t      noCropping = hints.noCropping,\n\t      noNoop = hints.noNoop,\n\t      connection;\n\n\t  var self = this;\n\n\t  if (!connectionPreviewGfx) {\n\t    connectionPreviewGfx = context.connectionPreviewGfx = this.createConnectionPreviewGfx();\n\t  }\n\n\t  clear$1(connectionPreviewGfx);\n\n\t  if (!getConnection) {\n\t    getConnection = context.getConnection = cacheReturnValues(function(canConnect, source, target) {\n\t      return self.getConnection(canConnect, source, target);\n\t    });\n\t  }\n\n\t  if (canConnect) {\n\t    connection = getConnection(canConnect, source, target);\n\t  }\n\n\t  if (!connection) {\n\t    !noNoop && this.drawNoopPreview(connectionPreviewGfx, hints);\n\t    return;\n\t  }\n\n\t  connection.waypoints = waypoints || [];\n\n\t  // optional layout\n\t  if (this._layouter && !noLayout) {\n\t    connection.waypoints = this._layouter.layoutConnection(connection, {\n\t      source: source,\n\t      target: target,\n\t      connectionStart: connectionStart,\n\t      connectionEnd: connectionEnd,\n\t      waypoints: hints.waypoints || connection.waypoints\n\t    });\n\t  }\n\n\t  // fallback if no waypoints were provided nor created with layouter\n\t  if (!connection.waypoints || !connection.waypoints.length) {\n\t    connection.waypoints = [\n\t      source ? getMid(source) : connectionStart,\n\t      target ? getMid(target) : connectionEnd\n\t    ];\n\t  }\n\n\t  // optional cropping\n\t  if (this._connectionDocking && (source || target) && !noCropping) {\n\t    connection.waypoints = this._connectionDocking.getCroppedWaypoints(connection, source, target);\n\t  }\n\n\t  this._graphicsFactory.drawConnection(connectionPreviewGfx, connection);\n\t};\n\n\t/**\n\t * Draw simple connection between source and target or provided points.\n\t *\n\t * @param {SVGElement} connectionPreviewGfx container for the connection\n\t * @param {Object} hints\n\t * @param {djs.model.shape} [hints.source] source element\n\t * @param {djs.model.shape} [hints.target] target element\n\t * @param {Point} [hints.connectionStart] required if source is not provided\n\t * @param {Point} [hints.connectionEnd] required if target is not provided\n\t */\n\tConnectionPreview.prototype.drawNoopPreview = function(connectionPreviewGfx, hints) {\n\t  var source = hints.source,\n\t      target = hints.target,\n\t      start = hints.connectionStart || getMid(source),\n\t      end = hints.connectionEnd || getMid(target);\n\n\t  var waypoints = this.cropWaypoints(start, end, source, target);\n\n\t  var connection = this.createNoopConnection(waypoints[0], waypoints[1]);\n\n\t  append(connectionPreviewGfx, connection);\n\t};\n\n\t/**\n\t * Return cropped waypoints.\n\t *\n\t * @param {Point} start\n\t * @param {Point} end\n\t * @param {djs.model.shape} source\n\t * @param {djs.model.shape} target\n\t *\n\t * @returns {Array}\n\t */\n\tConnectionPreview.prototype.cropWaypoints = function(start, end, source, target) {\n\t  var graphicsFactory = this._graphicsFactory,\n\t      sourcePath = source && graphicsFactory.getShapePath(source),\n\t      targetPath = target && graphicsFactory.getShapePath(target),\n\t      connectionPath = graphicsFactory.getConnectionPath({ waypoints: [ start, end ] });\n\n\t  start = (source && getElementLineIntersection(sourcePath, connectionPath, true)) || start;\n\t  end = (target && getElementLineIntersection(targetPath, connectionPath, false)) || end;\n\n\t  return [ start, end ];\n\t};\n\n\t/**\n\t * Remove connection preview container if it exists.\n\t *\n\t * @param {Object} [context]\n\t * @param {SVGElement} [context.connectionPreviewGfx] preview container\n\t */\n\tConnectionPreview.prototype.cleanUp = function(context) {\n\t  if (context && context.connectionPreviewGfx) {\n\t    remove$1(context.connectionPreviewGfx);\n\t  }\n\t};\n\n\t/**\n\t * Get connection that connects source and target.\n\t *\n\t * @param {Object|boolean} canConnect\n\t *\n\t * @returns {djs.model.connection}\n\t */\n\tConnectionPreview.prototype.getConnection = function(canConnect) {\n\t  var attrs = ensureConnectionAttrs(canConnect);\n\n\t  return this._elementFactory.createConnection(attrs);\n\t};\n\n\n\t/**\n\t * Add and return preview graphics.\n\t *\n\t * @returns {SVGElement}\n\t */\n\tConnectionPreview.prototype.createConnectionPreviewGfx = function() {\n\t  var gfx = create('g');\n\n\t  attr$1(gfx, {\n\t    pointerEvents: 'none'\n\t  });\n\n\t  classes$1(gfx).add(MARKER_CONNECTION_PREVIEW);\n\n\t  append(this._canvas.getDefaultLayer(), gfx);\n\n\t  return gfx;\n\t};\n\n\t/**\n\t * Create and return simple connection.\n\t *\n\t * @param {Point} start\n\t * @param {Point} end\n\t *\n\t * @returns {SVGElement}\n\t */\n\tConnectionPreview.prototype.createNoopConnection = function(start, end) {\n\t  var connection = create('polyline');\n\n\t  attr$1(connection, {\n\t    'stroke': '#333',\n\t    'strokeDasharray': [ 1 ],\n\t    'strokeWidth': 2,\n\t    'pointer-events': 'none'\n\t  });\n\n\t  attr$1(connection, { 'points': [ start.x, start.y, end.x, end.y ] });\n\n\t  return connection;\n\t};\n\n\t// helpers //////////\n\n\t/**\n\t * Returns function that returns cached return values referenced by stringified first argument.\n\t *\n\t * @param {Function} fn\n\t *\n\t * @return {Function}\n\t */\n\tfunction cacheReturnValues(fn) {\n\t  var returnValues = {};\n\n\t  /**\n\t   * Return cached return value referenced by stringified first argument.\n\t   *\n\t   * @returns {*}\n\t   */\n\t  return function(firstArgument) {\n\t    var key = JSON.stringify(firstArgument);\n\n\t    var returnValue = returnValues[key];\n\n\t    if (!returnValue) {\n\t      returnValue = returnValues[key] = fn.apply(null, arguments);\n\t    }\n\n\t    return returnValue;\n\t  };\n\t}\n\n\t/**\n\t * Ensure connection attributes is object.\n\t *\n\t * @param {Object|boolean} canConnect\n\t *\n\t * @returns {Object}\n\t */\n\tfunction ensureConnectionAttrs(canConnect) {\n\t  if (isObject(canConnect)) {\n\t    return canConnect;\n\t  } else {\n\t    return {};\n\t  }\n\t}\n\n\tvar ConnectionPreviewModule = {\n\t  __init__: [ 'connectionPreview' ],\n\t  connectionPreview: [ 'type', ConnectionPreview ]\n\t};\n\n\tvar min = Math.min,\n\t    max$1 = Math.max;\n\n\tfunction preventDefault$1(e) {\n\t  e.preventDefault();\n\t}\n\n\tfunction stopPropagation$1(e) {\n\t  e.stopPropagation();\n\t}\n\n\tfunction isTextNode(node) {\n\t  return node.nodeType === Node.TEXT_NODE;\n\t}\n\n\tfunction toArray(nodeList) {\n\t  return [].slice.call(nodeList);\n\t}\n\n\t/**\n\t * Initializes a container for a content editable div.\n\t *\n\t * Structure:\n\t *\n\t * container\n\t *   parent\n\t *     content\n\t *     resize-handle\n\t *\n\t * @param {object} options\n\t * @param {DOMElement} options.container The DOM element to append the contentContainer to\n\t * @param {Function} options.keyHandler Handler for key events\n\t * @param {Function} options.resizeHandler Handler for resize events\n\t */\n\tfunction TextBox(options) {\n\t  this.container = options.container;\n\n\t  this.parent = domify(\n\t    '<div class=\"djs-direct-editing-parent\">' +\n\t      '<div class=\"djs-direct-editing-content\" contenteditable=\"true\"></div>' +\n\t    '</div>'\n\t  );\n\n\t  this.content = query('[contenteditable]', this.parent);\n\n\t  this.keyHandler = options.keyHandler || function() {};\n\t  this.resizeHandler = options.resizeHandler || function() {};\n\n\t  this.autoResize = bind(this.autoResize, this);\n\t  this.handlePaste = bind(this.handlePaste, this);\n\t}\n\n\n\t/**\n\t * Create a text box with the given position, size, style and text content\n\t *\n\t * @param {Object} bounds\n\t * @param {Number} bounds.x absolute x position\n\t * @param {Number} bounds.y absolute y position\n\t * @param {Number} [bounds.width] fixed width value\n\t * @param {Number} [bounds.height] fixed height value\n\t * @param {Number} [bounds.maxWidth] maximum width value\n\t * @param {Number} [bounds.maxHeight] maximum height value\n\t * @param {Number} [bounds.minWidth] minimum width value\n\t * @param {Number} [bounds.minHeight] minimum height value\n\t * @param {Object} [style]\n\t * @param {String} value text content\n\t *\n\t * @return {DOMElement} The created content DOM element\n\t */\n\tTextBox.prototype.create = function(bounds, style, value, options) {\n\t  var self = this;\n\n\t  var parent = this.parent,\n\t      content = this.content,\n\t      container = this.container;\n\n\t  options = this.options = options || {};\n\n\t  style = this.style = style || {};\n\n\t  var parentStyle = pick(style, [\n\t    'width',\n\t    'height',\n\t    'maxWidth',\n\t    'maxHeight',\n\t    'minWidth',\n\t    'minHeight',\n\t    'left',\n\t    'top',\n\t    'backgroundColor',\n\t    'position',\n\t    'overflow',\n\t    'border',\n\t    'wordWrap',\n\t    'textAlign',\n\t    'outline',\n\t    'transform'\n\t  ]);\n\n\t  assign(parent.style, {\n\t    width: bounds.width + 'px',\n\t    height: bounds.height + 'px',\n\t    maxWidth: bounds.maxWidth + 'px',\n\t    maxHeight: bounds.maxHeight + 'px',\n\t    minWidth: bounds.minWidth + 'px',\n\t    minHeight: bounds.minHeight + 'px',\n\t    left: bounds.x + 'px',\n\t    top: bounds.y + 'px',\n\t    backgroundColor: '#ffffff',\n\t    position: 'absolute',\n\t    overflow: 'visible',\n\t    border: '1px solid #ccc',\n\t    boxSizing: 'border-box',\n\t    wordWrap: 'normal',\n\t    textAlign: 'center',\n\t    outline: 'none'\n\t  }, parentStyle);\n\n\t  var contentStyle = pick(style, [\n\t    'fontFamily',\n\t    'fontSize',\n\t    'fontWeight',\n\t    'lineHeight',\n\t    'padding',\n\t    'paddingTop',\n\t    'paddingRight',\n\t    'paddingBottom',\n\t    'paddingLeft'\n\t  ]);\n\n\t  assign(content.style, {\n\t    boxSizing: 'border-box',\n\t    width: '100%',\n\t    outline: 'none',\n\t    wordWrap: 'break-word'\n\t  }, contentStyle);\n\n\t  if (options.centerVertically) {\n\t    assign(content.style, {\n\t      position: 'absolute',\n\t      top: '50%',\n\t      transform: 'translate(0, -50%)'\n\t    }, contentStyle);\n\t  }\n\n\t  content.innerText = value;\n\n\t  componentEvent.bind(content, 'keydown', this.keyHandler);\n\t  componentEvent.bind(content, 'mousedown', stopPropagation$1);\n\t  componentEvent.bind(content, 'paste', self.handlePaste);\n\n\t  if (options.autoResize) {\n\t    componentEvent.bind(content, 'input', this.autoResize);\n\t  }\n\n\t  if (options.resizable) {\n\t    this.resizable(style);\n\t  }\n\n\t  container.appendChild(parent);\n\n\t  // set selection to end of text\n\t  this.setSelection(content.lastChild, content.lastChild && content.lastChild.length);\n\n\t  return parent;\n\t};\n\n\t/**\n\t * Intercept paste events to remove formatting from pasted text.\n\t */\n\tTextBox.prototype.handlePaste = function(e) {\n\t  var options = this.options,\n\t      style = this.style;\n\n\t  e.preventDefault();\n\n\t  var text;\n\n\t  if (e.clipboardData) {\n\n\t    // Chrome, Firefox, Safari\n\t    text = e.clipboardData.getData('text/plain');\n\t  } else {\n\n\t    // Internet Explorer\n\t    text = window.clipboardData.getData('Text');\n\t  }\n\n\t  this.insertText(text);\n\n\t  if (options.autoResize) {\n\t    var hasResized = this.autoResize(style);\n\n\t    if (hasResized) {\n\t      this.resizeHandler(hasResized);\n\t    }\n\t  }\n\t};\n\n\tTextBox.prototype.insertText = function(text) {\n\n\t  // insertText command not supported by Internet Explorer\n\t  var success = document.execCommand('insertText', false, text);\n\n\t  if (success) {\n\t    return;\n\t  }\n\n\t  this._insertTextIE(text);\n\t};\n\n\tTextBox.prototype._insertTextIE = function(text) {\n\n\t  // Internet Explorer\n\t  var range = this.getSelection(),\n\t      startContainer = range.startContainer,\n\t      endContainer = range.endContainer,\n\t      startOffset = range.startOffset,\n\t      endOffset = range.endOffset,\n\t      commonAncestorContainer = range.commonAncestorContainer;\n\n\t  var childNodesArray = toArray(commonAncestorContainer.childNodes);\n\n\t  var container,\n\t      offset;\n\n\t  if (isTextNode(commonAncestorContainer)) {\n\t    var containerTextContent = startContainer.textContent;\n\n\t    startContainer.textContent =\n\t      containerTextContent.substring(0, startOffset)\n\t      + text\n\t      + containerTextContent.substring(endOffset);\n\n\t    container = startContainer;\n\t    offset = startOffset + text.length;\n\n\t  } else if (startContainer === this.content && endContainer === this.content) {\n\t    var textNode = document.createTextNode(text);\n\n\t    this.content.insertBefore(textNode, childNodesArray[startOffset]);\n\n\t    container = textNode;\n\t    offset = textNode.textContent.length;\n\t  } else {\n\t    var startContainerChildIndex = childNodesArray.indexOf(startContainer),\n\t        endContainerChildIndex = childNodesArray.indexOf(endContainer);\n\n\t    childNodesArray.forEach(function(childNode, index) {\n\n\t      if (index === startContainerChildIndex) {\n\t        childNode.textContent =\n\t          startContainer.textContent.substring(0, startOffset) +\n\t          text +\n\t          endContainer.textContent.substring(endOffset);\n\t      } else if (index > startContainerChildIndex && index <= endContainerChildIndex) {\n\t        remove(childNode);\n\t      }\n\t    });\n\n\t    container = startContainer;\n\t    offset = startOffset + text.length;\n\t  }\n\n\t  if (container && offset !== undefined) {\n\n\t    // is necessary in Internet Explorer\n\t    setTimeout(function() {\n\t      self.setSelection(container, offset);\n\t    });\n\t  }\n\t};\n\n\t/**\n\t * Automatically resize element vertically to fit its content.\n\t */\n\tTextBox.prototype.autoResize = function() {\n\t  var parent = this.parent,\n\t      content = this.content;\n\n\t  var fontSize = parseInt(this.style.fontSize) || 12;\n\n\t  if (content.scrollHeight > parent.offsetHeight ||\n\t      content.scrollHeight < parent.offsetHeight - fontSize) {\n\t    var bounds = parent.getBoundingClientRect();\n\n\t    var height = content.scrollHeight;\n\t    parent.style.height = height + 'px';\n\n\t    this.resizeHandler({\n\t      width: bounds.width,\n\t      height: bounds.height,\n\t      dx: 0,\n\t      dy: height - bounds.height\n\t    });\n\t  }\n\t};\n\n\t/**\n\t * Make an element resizable by adding a resize handle.\n\t */\n\tTextBox.prototype.resizable = function() {\n\t  var self = this;\n\n\t  var parent = this.parent,\n\t      resizeHandle = this.resizeHandle;\n\n\t  var minWidth = parseInt(this.style.minWidth) || 0,\n\t      minHeight = parseInt(this.style.minHeight) || 0,\n\t      maxWidth = parseInt(this.style.maxWidth) || Infinity,\n\t      maxHeight = parseInt(this.style.maxHeight) || Infinity;\n\n\t  if (!resizeHandle) {\n\t    resizeHandle = this.resizeHandle = domify(\n\t      '<div class=\"djs-direct-editing-resize-handle\"></div>'\n\t    );\n\n\t    var startX, startY, startWidth, startHeight;\n\n\t    var onMouseDown = function(e) {\n\t      preventDefault$1(e);\n\t      stopPropagation$1(e);\n\n\t      startX = e.clientX;\n\t      startY = e.clientY;\n\n\t      var bounds = parent.getBoundingClientRect();\n\n\t      startWidth = bounds.width;\n\t      startHeight = bounds.height;\n\n\t      componentEvent.bind(document, 'mousemove', onMouseMove);\n\t      componentEvent.bind(document, 'mouseup', onMouseUp);\n\t    };\n\n\t    var onMouseMove = function(e) {\n\t      preventDefault$1(e);\n\t      stopPropagation$1(e);\n\n\t      var newWidth = min(max$1(startWidth + e.clientX - startX, minWidth), maxWidth);\n\t      var newHeight = min(max$1(startHeight + e.clientY - startY, minHeight), maxHeight);\n\n\t      parent.style.width = newWidth + 'px';\n\t      parent.style.height = newHeight + 'px';\n\n\t      self.resizeHandler({\n\t        width: startWidth,\n\t        height: startHeight,\n\t        dx: e.clientX - startX,\n\t        dy: e.clientY - startY\n\t      });\n\t    };\n\n\t    var onMouseUp = function(e) {\n\t      preventDefault$1(e);\n\t      stopPropagation$1(e);\n\n\t      componentEvent.unbind(document,'mousemove', onMouseMove, false);\n\t      componentEvent.unbind(document, 'mouseup', onMouseUp, false);\n\t    };\n\n\t    componentEvent.bind(resizeHandle, 'mousedown', onMouseDown);\n\t  }\n\n\t  assign(resizeHandle.style, {\n\t    position: 'absolute',\n\t    bottom: '0px',\n\t    right: '0px',\n\t    cursor: 'nwse-resize',\n\t    width: '0',\n\t    height: '0',\n\t    borderTop: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent',\n\t    borderRight: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',\n\t    borderBottom: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',\n\t    borderLeft: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent'\n\t  });\n\n\t  parent.appendChild(resizeHandle);\n\t};\n\n\n\t/**\n\t * Clear content and style of the textbox, unbind listeners and\n\t * reset CSS style.\n\t */\n\tTextBox.prototype.destroy = function() {\n\t  var parent = this.parent,\n\t      content = this.content,\n\t      resizeHandle = this.resizeHandle;\n\n\t  // clear content\n\t  content.innerText = '';\n\n\t  // clear styles\n\t  parent.removeAttribute('style');\n\t  content.removeAttribute('style');\n\n\t  componentEvent.unbind(content, 'keydown', this.keyHandler);\n\t  componentEvent.unbind(content, 'mousedown', stopPropagation$1);\n\t  componentEvent.unbind(content, 'input', this.autoResize);\n\t  componentEvent.unbind(content, 'paste', this.handlePaste);\n\n\t  if (resizeHandle) {\n\t    resizeHandle.removeAttribute('style');\n\n\t    remove(resizeHandle);\n\t  }\n\n\t  remove(parent);\n\t};\n\n\n\tTextBox.prototype.getValue = function() {\n\t  return this.content.innerText.trim();\n\t};\n\n\n\tTextBox.prototype.getSelection = function() {\n\t  var selection = window.getSelection(),\n\t      range = selection.getRangeAt(0);\n\n\t  return range;\n\t};\n\n\n\tTextBox.prototype.setSelection = function(container, offset) {\n\t  var range = document.createRange();\n\n\t  if (container === null) {\n\t    range.selectNodeContents(this.content);\n\t  } else {\n\t    range.setStart(container, offset);\n\t    range.setEnd(container, offset);\n\t  }\n\n\t  var selection = window.getSelection();\n\n\t  selection.removeAllRanges();\n\t  selection.addRange(range);\n\t};\n\n\t/**\n\t * A direct editing component that allows users\n\t * to edit an elements text directly in the diagram\n\t *\n\t * @param {EventBus} eventBus the event bus\n\t */\n\tfunction DirectEditing(eventBus, canvas) {\n\n\t  this._eventBus = eventBus;\n\n\t  this._providers = [];\n\t  this._textbox = new TextBox({\n\t    container: canvas.getContainer(),\n\t    keyHandler: bind(this._handleKey, this),\n\t    resizeHandler: bind(this._handleResize, this)\n\t  });\n\t}\n\n\tDirectEditing.$inject = [ 'eventBus', 'canvas' ];\n\n\n\t/**\n\t * Register a direct editing provider\n\n\t * @param {Object} provider the provider, must expose an #activate(element) method that returns\n\t *                          an activation context ({ bounds: {x, y, width, height }, text }) if\n\t *                          direct editing is available for the given element.\n\t *                          Additionally the provider must expose a #update(element, value) method\n\t *                          to receive direct editing updates.\n\t */\n\tDirectEditing.prototype.registerProvider = function(provider) {\n\t  this._providers.push(provider);\n\t};\n\n\n\t/**\n\t * Returns true if direct editing is currently active\n\t *\n\t * @return {Boolean}\n\t */\n\tDirectEditing.prototype.isActive = function() {\n\t  return !!this._active;\n\t};\n\n\n\t/**\n\t * Cancel direct editing, if it is currently active\n\t */\n\tDirectEditing.prototype.cancel = function() {\n\t  if (!this._active) {\n\t    return;\n\t  }\n\n\t  this._fire('cancel');\n\t  this.close();\n\t};\n\n\n\tDirectEditing.prototype._fire = function(event, context) {\n\t  this._eventBus.fire('directEditing.' + event, context || { active: this._active });\n\t};\n\n\tDirectEditing.prototype.close = function() {\n\t  this._textbox.destroy();\n\n\t  this._fire('deactivate');\n\n\t  this._active = null;\n\n\t  this.resizable = undefined;\n\t};\n\n\n\tDirectEditing.prototype.complete = function() {\n\n\t  var active = this._active;\n\n\t  if (!active) {\n\t    return;\n\t  }\n\n\t  var containerBounds,\n\t      previousBounds = active.context.bounds,\n\t      newBounds = this.$textbox.getBoundingClientRect(),\n\t      newText = this.getValue(),\n\t      previousText = active.context.text;\n\n\t  if (\n\t    newText !== previousText ||\n\t    newBounds.height !== previousBounds.height ||\n\t    newBounds.width !== previousBounds.width\n\t  ) {\n\t    containerBounds = this._textbox.container.getBoundingClientRect();\n\n\t    active.provider.update(active.element, newText, active.context.text, {\n\t      x: newBounds.left - containerBounds.left,\n\t      y: newBounds.top - containerBounds.top,\n\t      width: newBounds.width,\n\t      height: newBounds.height\n\t    });\n\t  }\n\n\t  this._fire('complete');\n\n\t  this.close();\n\t};\n\n\n\tDirectEditing.prototype.getValue = function() {\n\t  return this._textbox.getValue();\n\t};\n\n\n\tDirectEditing.prototype._handleKey = function(e) {\n\n\t  // stop bubble\n\t  e.stopPropagation();\n\n\t  var key = e.keyCode || e.charCode;\n\n\t  // ESC\n\t  if (key === 27) {\n\t    e.preventDefault();\n\t    return this.cancel();\n\t  }\n\n\t  // Enter\n\t  if (key === 13 && !e.shiftKey) {\n\t    e.preventDefault();\n\t    return this.complete();\n\t  }\n\t};\n\n\n\tDirectEditing.prototype._handleResize = function(event) {\n\t  this._fire('resize', event);\n\t};\n\n\n\t/**\n\t * Activate direct editing on the given element\n\t *\n\t * @param {Object} ElementDescriptor the descriptor for a shape or connection\n\t * @return {Boolean} true if the activation was possible\n\t */\n\tDirectEditing.prototype.activate = function(element) {\n\t  if (this.isActive()) {\n\t    this.cancel();\n\t  }\n\n\t  // the direct editing context\n\t  var context;\n\n\t  var provider = find(this._providers, function(p) {\n\t    return (context = p.activate(element)) ? p : null;\n\t  });\n\n\t  // check if activation took place\n\t  if (context) {\n\t    this.$textbox = this._textbox.create(\n\t      context.bounds,\n\t      context.style,\n\t      context.text,\n\t      context.options\n\t    );\n\n\t    this._active = {\n\t      element: element,\n\t      context: context,\n\t      provider: provider\n\t    };\n\n\t    if (context.options && context.options.resizable) {\n\t      this.resizable = true;\n\t    }\n\n\t    this._fire('activate');\n\t  }\n\n\t  return !!context;\n\t};\n\n\tvar DirectEditingModule = {\n\t  __depends__: [\n\t    InteractionEventsModule\n\t  ],\n\t  __init__: [ 'directEditing' ],\n\t  directEditing: [ 'type', DirectEditing ]\n\t};\n\n\tvar entrySelector = '.entry';\n\n\tvar DEFAULT_PRIORITY$3 = 1000;\n\n\n\t/**\n\t * A context pad that displays element specific, contextual actions next\n\t * to a diagram element.\n\t *\n\t * @param {Object} config\n\t * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n\t * @param {number} [config.scale.min]\n\t * @param {number} [config.scale.max]\n\t * @param {EventBus} eventBus\n\t * @param {Overlays} overlays\n\t */\n\tfunction ContextPad(config, eventBus, overlays) {\n\n\t  this._eventBus = eventBus;\n\t  this._overlays = overlays;\n\n\t  var scale = isDefined(config && config.scale) ? config.scale : {\n\t    min: 1,\n\t    max: 1.5\n\t  };\n\n\t  this._overlaysConfig = {\n\t    position: {\n\t      right: -9,\n\t      top: -6\n\t    },\n\t    scale: scale\n\t  };\n\n\t  this._current = null;\n\n\t  this._init();\n\t}\n\n\tContextPad.$inject = [\n\t  'config.contextPad',\n\t  'eventBus',\n\t  'overlays'\n\t];\n\n\n\t/**\n\t * Registers events needed for interaction with other components\n\t */\n\tContextPad.prototype._init = function() {\n\n\t  var eventBus = this._eventBus;\n\n\t  var self = this;\n\n\t  eventBus.on('selection.changed', function(e) {\n\n\t    var selection = e.newSelection;\n\n\t    if (selection.length === 1) {\n\t      self.open(selection[0]);\n\t    } else {\n\t      self.close();\n\t    }\n\t  });\n\n\t  eventBus.on('elements.delete', function(event) {\n\t    var elements = event.elements;\n\n\t    forEach(elements, function(e) {\n\t      if (self.isOpen(e)) {\n\t        self.close();\n\t      }\n\t    });\n\t  });\n\n\t  eventBus.on('element.changed', function(event) {\n\t    var element = event.element,\n\t        current = self._current;\n\n\t    // force reopen if element for which we are currently opened changed\n\t    if (current && current.element === element) {\n\t      self.open(element, true);\n\t    }\n\t  });\n\t};\n\n\n\t/**\n\t * Register a provider with the context pad\n\t *\n\t * @param  {number} [priority=1000]\n\t * @param  {ContextPadProvider} provider\n\t *\n\t * @example\n\t * const contextPadProvider = {\n\t  *   getContextPadEntries: function(element) {\n\t  *     return function(entries) {\n\t  *       return {\n\t  *         ...entries,\n\t  *         'entry-1': {\n\t  *           label: 'My Entry',\n\t  *           action: function() { alert(\"I have been clicked!\"); }\n\t  *         }\n\t  *       };\n\t  *     }\n\t  *   }\n\t  * };\n\t  *\n\t * contextPad.registerProvider(800, contextPadProvider);\n\t */\n\tContextPad.prototype.registerProvider = function(priority, provider) {\n\t  if (!provider) {\n\t    provider = priority;\n\t    priority = DEFAULT_PRIORITY$3;\n\t  }\n\n\t  this._eventBus.on('contextPad.getProviders', priority, function(event) {\n\t    event.providers.push(provider);\n\t  });\n\t};\n\n\n\t/**\n\t * Returns the context pad entries for a given element\n\t *\n\t * @param {djs.element.Base} element\n\t *\n\t * @return {Array<ContextPadEntryDescriptor>} list of entries\n\t */\n\tContextPad.prototype.getEntries = function(element) {\n\t  var providers = this._getProviders();\n\n\t  var entries = {};\n\n\t  // loop through all providers and their entries.\n\t  // group entries by id so that overriding an entry is possible\n\t  forEach(providers, function(provider) {\n\t    var entriesOrUpdater = provider.getContextPadEntries(element);\n\n\t    if (isFunction(entriesOrUpdater)) {\n\t      entries = entriesOrUpdater(entries);\n\t    } else {\n\t      forEach(entriesOrUpdater, function(entry, id) {\n\t        entries[id] = entry;\n\t      });\n\t    }\n\t  });\n\n\t  return entries;\n\t};\n\n\n\t/**\n\t * Trigger an action available on the opened context pad\n\t *\n\t * @param  {string} action\n\t * @param  {Event} event\n\t * @param  {boolean} [autoActivate=false]\n\t */\n\tContextPad.prototype.trigger = function(action, event, autoActivate) {\n\n\t  var element = this._current.element,\n\t      entries = this._current.entries,\n\t      entry,\n\t      handler,\n\t      originalEvent,\n\t      button = event.delegateTarget || event.target;\n\n\t  if (!button) {\n\t    return event.preventDefault();\n\t  }\n\n\t  entry = entries[attr(button, 'data-action')];\n\t  handler = entry.action;\n\n\t  originalEvent = event.originalEvent || event;\n\n\t  // simple action (via callback function)\n\t  if (isFunction(handler)) {\n\t    if (action === 'click') {\n\t      return handler(originalEvent, element, autoActivate);\n\t    }\n\t  } else {\n\t    if (handler[action]) {\n\t      return handler[action](originalEvent, element, autoActivate);\n\t    }\n\t  }\n\n\t  // silence other actions\n\t  event.preventDefault();\n\t};\n\n\n\t/**\n\t * Open the context pad for the given element\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {boolean} force if true, force reopening the context pad\n\t */\n\tContextPad.prototype.open = function(element, force) {\n\t  if (!force && this.isOpen(element)) {\n\t    return;\n\t  }\n\n\t  this.close();\n\t  this._updateAndOpen(element);\n\t};\n\n\tContextPad.prototype._getProviders = function(id) {\n\n\t  var event = this._eventBus.createEvent({\n\t    type: 'contextPad.getProviders',\n\t    providers: []\n\t  });\n\n\t  this._eventBus.fire(event);\n\n\t  return event.providers;\n\t};\n\n\tContextPad.prototype._updateAndOpen = function(element) {\n\n\t  var entries = this.getEntries(element),\n\t      pad = this.getPad(element),\n\t      html = pad.html;\n\n\t  forEach(entries, function(entry, id) {\n\t    var grouping = entry.group || 'default',\n\t        control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n\t        container;\n\n\t    attr(control, 'data-action', id);\n\n\t    container = query('[data-group=' + grouping + ']', html);\n\t    if (!container) {\n\t      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n\t      html.appendChild(container);\n\t    }\n\n\t    container.appendChild(control);\n\n\t    if (entry.className) {\n\t      addClasses(control, entry.className);\n\t    }\n\n\t    if (entry.title) {\n\t      attr(control, 'title', entry.title);\n\t    }\n\n\t    if (entry.imageUrl) {\n\t      control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n\t    }\n\t  });\n\n\t  classes(html).add('open');\n\n\t  this._current = {\n\t    element: element,\n\t    pad: pad,\n\t    entries: entries\n\t  };\n\n\t  this._eventBus.fire('contextPad.open', { current: this._current });\n\t};\n\n\n\tContextPad.prototype.getPad = function(element) {\n\t  if (this.isOpen()) {\n\t    return this._current.pad;\n\t  }\n\n\t  var self = this;\n\n\t  var overlays = this._overlays;\n\n\t  var html = domify('<div class=\"djs-context-pad\"></div>');\n\n\t  var overlaysConfig = assign({\n\t    html: html\n\t  }, this._overlaysConfig);\n\n\t  delegateEvents.bind(html, entrySelector, 'click', function(event) {\n\t    self.trigger('click', event);\n\t  });\n\n\t  delegateEvents.bind(html, entrySelector, 'dragstart', function(event) {\n\t    self.trigger('dragstart', event);\n\t  });\n\n\t  // stop propagation of mouse events\n\t  componentEvent.bind(html, 'mousedown', function(event) {\n\t    event.stopPropagation();\n\t  });\n\n\t  this._overlayId = overlays.add(element, 'context-pad', overlaysConfig);\n\n\t  var pad = overlays.get(this._overlayId);\n\n\t  this._eventBus.fire('contextPad.create', { element: element, pad: pad });\n\n\t  return pad;\n\t};\n\n\n\t/**\n\t * Close the context pad\n\t */\n\tContextPad.prototype.close = function() {\n\t  if (!this.isOpen()) {\n\t    return;\n\t  }\n\n\t  this._overlays.remove(this._overlayId);\n\n\t  this._overlayId = null;\n\n\t  this._eventBus.fire('contextPad.close', { current: this._current });\n\n\t  this._current = null;\n\t};\n\n\t/**\n\t * Check if pad is open. If element is given, will check\n\t * if pad is opened with given element.\n\t *\n\t * @param {Element} element\n\t * @return {boolean}\n\t */\n\tContextPad.prototype.isOpen = function(element) {\n\t  return !!this._current && (!element ? true : this._current.element === element);\n\t};\n\n\n\n\n\t// helpers //////////////////////\n\n\tfunction addClasses(element, classNames) {\n\n\t  var classes$1 = classes(element);\n\n\t  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n\t  actualClassNames.forEach(function(cls) {\n\t    classes$1.add(cls);\n\t  });\n\t}\n\n\tvar ContextPadModule = {\n\t  __depends__: [\n\t    InteractionEventsModule,\n\t    OverlaysModule\n\t  ],\n\t  contextPad: [ 'type', ContextPad ]\n\t};\n\n\tvar MARKER_TYPES = [\r\n\t  'marker-start',\r\n\t  'marker-mid',\r\n\t  'marker-end'\r\n\t];\r\n\r\n\tvar NODES_CAN_HAVE_MARKER = [\r\n\t  'circle',\r\n\t  'ellipse',\r\n\t  'line',\r\n\t  'path',\r\n\t  'polygon',\r\n\t  'polyline',\r\n\t  'rect'\r\n\t];\r\n\r\n\r\n\t/**\r\n\t * Adds support for previews of moving/resizing elements.\r\n\t */\r\n\tfunction PreviewSupport(elementRegistry, eventBus, canvas, styles) {\r\n\t  this._elementRegistry = elementRegistry;\r\n\t  this._canvas = canvas;\r\n\t  this._styles = styles;\r\n\r\n\t  this._clonedMarkers = {};\r\n\r\n\t  var self = this;\r\n\r\n\t  eventBus.on('drag.cleanup', function() {\r\n\t    forEach(self._clonedMarkers, function(clonedMarker) {\r\n\t      remove$1(clonedMarker);\r\n\t    });\r\n\r\n\t    self._clonedMarkers = {};\r\n\t  });\r\n\t}\r\n\r\n\tPreviewSupport.$inject = [\r\n\t  'elementRegistry',\r\n\t  'eventBus',\r\n\t  'canvas',\r\n\t  'styles'\r\n\t];\r\n\r\n\r\n\t/**\r\n\t * Returns graphics of an element.\r\n\t *\r\n\t * @param {djs.model.Base} element\r\n\t *\r\n\t * @return {SVGElement}\r\n\t */\r\n\tPreviewSupport.prototype.getGfx = function(element) {\r\n\t  return this._elementRegistry.getGraphics(element);\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a move preview of a given shape to a given svg group.\r\n\t *\r\n\t * @param {djs.model.Base} element\r\n\t * @param {SVGElement} group\r\n\t * @param {SVGElement} [gfx]\r\n\t *\r\n\t * @return {SVGElement} dragger\r\n\t */\r\n\tPreviewSupport.prototype.addDragger = function(element, group, gfx) {\r\n\t  gfx = gfx || this.getGfx(element);\r\n\r\n\t  var dragger = clone(gfx);\r\n\t  var bbox = gfx.getBoundingClientRect();\r\n\r\n\t  this._cloneMarkers(getVisual(dragger));\r\n\r\n\t  attr$1(dragger, this._styles.cls('djs-dragger', [], {\r\n\t    x: bbox.top,\r\n\t    y: bbox.left\r\n\t  }));\r\n\r\n\t  append(group, dragger);\r\n\r\n\t  return dragger;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a resize preview of a given shape to a given svg group.\r\n\t *\r\n\t * @param {djs.model.Base} element\r\n\t * @param {SVGElement} group\r\n\t *\r\n\t * @return {SVGElement} frame\r\n\t */\r\n\tPreviewSupport.prototype.addFrame = function(shape, group) {\r\n\r\n\t  var frame = create('rect', {\r\n\t    class: 'djs-resize-overlay',\r\n\t    width:  shape.width,\r\n\t    height: shape.height,\r\n\t    x: shape.x,\r\n\t    y: shape.y\r\n\t  });\r\n\r\n\t  append(group, frame);\r\n\r\n\t  return frame;\r\n\t};\r\n\r\n\t/**\r\n\t * Clone all markers referenced by a node and its child nodes.\r\n\t *\r\n\t * @param {SVGElement} gfx\r\n\t */\r\n\tPreviewSupport.prototype._cloneMarkers = function(gfx) {\r\n\t  var self = this;\r\n\r\n\t  if (gfx.childNodes) {\r\n\r\n\t    // TODO: use forEach once we drop PhantomJS\r\n\t    for (var i = 0; i < gfx.childNodes.length; i++) {\r\n\r\n\t      // recursively clone markers of child nodes\r\n\t      self._cloneMarkers(gfx.childNodes[ i ]);\r\n\t    }\r\n\t  }\r\n\r\n\t  if (!canHaveMarker(gfx)) {\r\n\t    return;\r\n\t  }\r\n\r\n\t  MARKER_TYPES.forEach(function(markerType) {\r\n\t    if (attr$1(gfx, markerType)) {\r\n\t      var marker = getMarker(gfx, markerType, self._canvas.getContainer());\r\n\r\n\t      self._cloneMarker(gfx, marker, markerType);\r\n\t    }\r\n\t  });\r\n\t};\r\n\r\n\t/**\r\n\t * Clone marker referenced by an element.\r\n\t *\r\n\t * @param {SVGElement} gfx\r\n\t * @param {SVGElement} marker\r\n\t * @param {string} markerType\r\n\t */\r\n\tPreviewSupport.prototype._cloneMarker = function(gfx, marker, markerType) {\r\n\t  var markerId = marker.id;\r\n\r\n\t  var clonedMarker = this._clonedMarkers[ markerId ];\r\n\r\n\t  if (!clonedMarker) {\r\n\t    clonedMarker = clone(marker);\r\n\r\n\t    var clonedMarkerId = markerId + '-clone';\r\n\r\n\t    clonedMarker.id = clonedMarkerId;\r\n\r\n\t    classes$1(clonedMarker)\r\n\t      .add('djs-dragger')\r\n\t      .add('djs-dragger-marker');\r\n\r\n\t    this._clonedMarkers[ markerId ] = clonedMarker;\r\n\r\n\t    var defs = query('defs', this._canvas._svg);\r\n\r\n\t    if (!defs) {\r\n\t      defs = create('defs');\r\n\r\n\t      append(this._canvas._svg, defs);\r\n\t    }\r\n\r\n\t    append(defs, clonedMarker);\r\n\t  }\r\n\r\n\t  var reference = idToReference(this._clonedMarkers[ markerId ].id);\r\n\r\n\t  attr$1(gfx, markerType, reference);\r\n\t};\r\n\r\n\t// helpers //////////\r\n\r\n\t/**\r\n\t * Get marker of given type referenced by node.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {string} markerType\r\n\t * @param {Node} [parentNode]\r\n\t *\r\n\t * @param {Node}\r\n\t */\r\n\tfunction getMarker(node, markerType, parentNode) {\r\n\t  var id = referenceToId(attr$1(node, markerType));\r\n\r\n\t  return query('marker#' + id, parentNode || document);\r\n\t}\r\n\r\n\t/**\r\n\t * Get ID of fragment within current document from its functional IRI reference.\r\n\t * References may use single or double quotes.\r\n\t *\r\n\t * @param {string} reference\r\n\t *\r\n\t * @returns {string}\r\n\t */\r\n\tfunction referenceToId(reference) {\r\n\t  return reference.match(/url\\(['\"]?#([^'\"]*)['\"]?\\)/)[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Get functional IRI reference for given ID of fragment within current document.\r\n\t *\r\n\t * @param {string} id\r\n\t *\r\n\t * @returns {string}\r\n\t */\r\n\tfunction idToReference(id) {\r\n\t  return 'url(#' + id + ')';\r\n\t}\r\n\r\n\t/**\r\n\t * Check wether node type can have marker attributes.\r\n\t *\r\n\t * @param {Node} node\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction canHaveMarker(node) {\r\n\t  return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;\r\n\t}\n\n\tvar PreviewSupportModule = {\n\t  __init__: [ 'previewSupport' ],\n\t  previewSupport: [ 'type', PreviewSupport ]\n\t};\n\n\tvar MARKER_OK$2 = 'drop-ok',\n\t    MARKER_NOT_OK$2 = 'drop-not-ok',\n\t    MARKER_ATTACH = 'attach-ok',\n\t    MARKER_NEW_PARENT = 'new-parent';\n\n\tvar PREFIX = 'create';\n\n\tvar HIGH_PRIORITY$3 = 2000;\n\n\n\t/**\n\t * Create new elements through drag and drop.\n\t *\n\t * @param {Canvas} canvas\n\t * @param {Dragging} dragging\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t * @param {Rules} rules\n\t */\n\tfunction Create(\n\t    canvas,\n\t    dragging,\n\t    eventBus,\n\t    modeling,\n\t    rules\n\t) {\n\n\t  // rules //////////\n\n\t  /**\n\t   * Check wether elements can be created.\n\t   *\n\t   * @param {Array<djs.model.Base>} elements\n\t   * @param {djs.model.Base} target\n\t   * @param {Point} position\n\t   * @param {djs.model.Base} [source]\n\t   *\n\t   * @returns {boolean|null|Object}\n\t   */\n\t  function canCreate(elements, target, position, source, hints) {\n\t    if (!target) {\n\t      return false;\n\t    }\n\n\t    // ignore child elements and external labels\n\t    elements = filter(elements, function(element) {\n\t      var labelTarget = element.labelTarget;\n\n\t      return !element.parent && !(isLabel$1(element) && elements.indexOf(labelTarget) !== -1);\n\t    });\n\n\t    var shape = find(elements, function(element) {\n\t      return !isConnection(element);\n\t    });\n\n\t    var attach = false,\n\t        connect = false,\n\t        create = false;\n\n\t    // (1) attaching single shapes\n\t    if (isSingleShape(elements)) {\n\t      attach = rules.allowed('shape.attach', {\n\t        position: position,\n\t        shape: shape,\n\t        target: target\n\t      });\n\t    }\n\n\t    if (!attach) {\n\n\t      // (2) creating elements\n\t      if (isSingleShape(elements)) {\n\t        create = rules.allowed('shape.create', {\n\t          position: position,\n\t          shape: shape,\n\t          source: source,\n\t          target: target\n\t        });\n\t      } else {\n\t        create = rules.allowed('elements.create', {\n\t          elements: elements,\n\t          position: position,\n\t          target: target\n\t        });\n\t      }\n\n\t    }\n\n\t    var connectionTarget = hints.connectionTarget;\n\n\t    // (3) appending single shapes\n\t    if (create || attach) {\n\t      if (shape && source) {\n\t        connect = rules.allowed('connection.create', {\n\t          source: connectionTarget === source ? shape : source,\n\t          target: connectionTarget === source ? source : shape,\n\t          hints: {\n\t            targetParent: target,\n\t            targetAttach: attach\n\t          }\n\t        });\n\t      }\n\n\t      return {\n\t        attach: attach,\n\t        connect: connect\n\t      };\n\t    }\n\n\t    // ignore wether or not elements can be created\n\t    if (create === null || attach === null) {\n\t      return null;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  function setMarker(element, marker) {\n\t    [ MARKER_ATTACH, MARKER_OK$2, MARKER_NOT_OK$2, MARKER_NEW_PARENT ].forEach(function(m) {\n\n\t      if (m === marker) {\n\t        canvas.addMarker(element, m);\n\t      } else {\n\t        canvas.removeMarker(element, m);\n\t      }\n\t    });\n\t  }\n\n\t  // event handling //////////\n\n\t  eventBus.on([ 'create.move', 'create.hover' ], function(event) {\n\t    var context = event.context,\n\t        elements = context.elements,\n\t        hover = event.hover,\n\t        source = context.source,\n\t        hints = context.hints || {};\n\n\t    if (!hover) {\n\t      context.canExecute = false;\n\t      context.target = null;\n\n\t      return;\n\t    }\n\n\t    ensureConstraints(event);\n\n\t    var position = {\n\t      x: event.x,\n\t      y: event.y\n\t    };\n\n\t    var canExecute = context.canExecute = hover && canCreate(elements, hover, position, source, hints);\n\n\t    if (hover && canExecute !== null) {\n\t      context.target = hover;\n\n\t      if (canExecute && canExecute.attach) {\n\t        setMarker(hover, MARKER_ATTACH);\n\t      } else {\n\t        setMarker(hover, canExecute ? MARKER_NEW_PARENT : MARKER_NOT_OK$2);\n\t      }\n\t    }\n\t  });\n\n\t  eventBus.on([ 'create.end', 'create.out', 'create.cleanup' ], function(event) {\n\t    var hover = event.hover;\n\n\t    if (hover) {\n\t      setMarker(hover, null);\n\t    }\n\t  });\n\n\t  eventBus.on('create.end', function(event) {\n\t    var context = event.context,\n\t        source = context.source,\n\t        shape = context.shape,\n\t        elements = context.elements,\n\t        target = context.target,\n\t        canExecute = context.canExecute,\n\t        attach = canExecute && canExecute.attach,\n\t        connect = canExecute && canExecute.connect,\n\t        hints = context.hints || {};\n\n\t    if (canExecute === false || !target) {\n\t      return false;\n\t    }\n\n\t    ensureConstraints(event);\n\n\t    var position = {\n\t      x: event.x,\n\t      y: event.y\n\t    };\n\n\t    if (connect) {\n\t      shape = modeling.appendShape(source, shape, position, target, {\n\t        attach: attach,\n\t        connection: connect === true ? {} : connect,\n\t        connectionTarget: hints.connectionTarget\n\t      });\n\t    } else {\n\t      elements = modeling.createElements(elements, position, target, assign({}, hints, {\n\t        attach: attach\n\t      }));\n\n\t      // update shape\n\t      shape = find(elements, function(element) {\n\t        return !isConnection(element);\n\t      });\n\t    }\n\n\t    // update elements and shape\n\t    assign(context, {\n\t      elements: elements,\n\t      shape: shape\n\t    });\n\n\t    assign(event, {\n\t      elements: elements,\n\t      shape: shape\n\t    });\n\t  });\n\n\t  function cancel() {\n\t    var context = dragging.context();\n\n\t    if (context && context.prefix === PREFIX) {\n\t      dragging.cancel();\n\t    }\n\t  }\n\n\t  // cancel on <elements.changed> that is not result of <drag.end>\n\t  eventBus.on('create.init', function() {\n\t    eventBus.on('elements.changed', cancel);\n\n\t    eventBus.once([ 'create.cancel', 'create.end' ], HIGH_PRIORITY$3, function() {\n\t      eventBus.off('elements.changed', cancel);\n\t    });\n\t  });\n\n\t  // API //////////\n\n\t  this.start = function(event, elements, context) {\n\t    if (!isArray(elements)) {\n\t      elements = [ elements ];\n\t    }\n\n\t    var shape = find(elements, function(element) {\n\t      return !isConnection(element);\n\t    });\n\n\t    if (!shape) {\n\n\t      // at least one shape is required\n\t      return;\n\t    }\n\n\t    context = assign({\n\t      elements: elements,\n\t      hints: {},\n\t      shape: shape\n\t    }, context || {});\n\n\t    // make sure each element has x and y\n\t    forEach(elements, function(element) {\n\t      if (!isNumber(element.x)) {\n\t        element.x = 0;\n\t      }\n\n\t      if (!isNumber(element.y)) {\n\t        element.y = 0;\n\t      }\n\t    });\n\n\t    var bbox = getBBox(elements);\n\n\t    // center elements around cursor\n\t    forEach(elements, function(element) {\n\t      if (isConnection(element)) {\n\t        element.waypoints = map(element.waypoints, function(waypoint) {\n\t          return {\n\t            x: waypoint.x - bbox.x - bbox.width / 2,\n\t            y: waypoint.y - bbox.y - bbox.height / 2\n\t          };\n\t        });\n\t      }\n\n\t      assign(element, {\n\t        x: element.x - bbox.x - bbox.width / 2,\n\t        y: element.y - bbox.y - bbox.height / 2\n\t      });\n\t    });\n\n\t    dragging.init(event, PREFIX, {\n\t      cursor: 'grabbing',\n\t      autoActivate: true,\n\t      data: {\n\t        shape: shape,\n\t        elements: elements,\n\t        context: context\n\t      }\n\t    });\n\t  };\n\t}\n\n\tCreate.$inject = [\n\t  'canvas',\n\t  'dragging',\n\t  'eventBus',\n\t  'modeling',\n\t  'rules'\n\t];\n\n\t// helpers //////////\n\n\tfunction ensureConstraints(event) {\n\t  var context = event.context,\n\t      createConstraints = context.createConstraints;\n\n\t  if (!createConstraints) {\n\t    return;\n\t  }\n\n\t  if (createConstraints.left) {\n\t    event.x = Math.max(event.x, createConstraints.left);\n\t  }\n\n\t  if (createConstraints.right) {\n\t    event.x = Math.min(event.x, createConstraints.right);\n\t  }\n\n\t  if (createConstraints.top) {\n\t    event.y = Math.max(event.y, createConstraints.top);\n\t  }\n\n\t  if (createConstraints.bottom) {\n\t    event.y = Math.min(event.y, createConstraints.bottom);\n\t  }\n\t}\n\n\tfunction isConnection(element) {\n\t  return !!element.waypoints;\n\t}\n\n\tfunction isSingleShape(elements) {\n\t  return elements && elements.length === 1 && !isConnection(elements[0]);\n\t}\n\n\tfunction isLabel$1(element) {\n\t  return !!element.labelTarget;\n\t}\n\n\tvar LOW_PRIORITY$6 = 750;\r\n\r\n\r\n\tfunction CreatePreview(\r\n\t    canvas,\r\n\t    eventBus,\r\n\t    graphicsFactory,\r\n\t    previewSupport,\r\n\t    styles\r\n\t) {\r\n\t  function createDragGroup(elements) {\r\n\t    var dragGroup = create('g');\r\n\r\n\t    attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));\r\n\r\n\t    var childrenGfx = create('g');\r\n\r\n\t    elements.forEach(function(element) {\r\n\r\n\t      // create graphics\r\n\t      var gfx;\r\n\r\n\t      if (element.hidden) {\r\n\t        return;\r\n\t      }\r\n\r\n\t      if (element.waypoints) {\r\n\t        gfx = graphicsFactory._createContainer('connection', childrenGfx);\r\n\r\n\t        graphicsFactory.drawConnection(getVisual(gfx), element);\r\n\t      } else {\r\n\t        gfx = graphicsFactory._createContainer('shape', childrenGfx);\r\n\r\n\t        graphicsFactory.drawShape(getVisual(gfx), element);\r\n\r\n\t        translate(gfx, element.x, element.y);\r\n\t      }\r\n\r\n\t      // add preview\r\n\t      previewSupport.addDragger(element, dragGroup, gfx);\r\n\t    });\r\n\r\n\t    return dragGroup;\r\n\t  }\r\n\r\n\t  eventBus.on('create.move', LOW_PRIORITY$6, function(event) {\r\n\r\n\t    var hover = event.hover,\r\n\t        context = event.context,\r\n\t        elements = context.elements,\r\n\t        dragGroup = context.dragGroup;\r\n\r\n\t    // lazily create previews\r\n\t    if (!dragGroup) {\r\n\t      dragGroup = context.dragGroup = createDragGroup(elements);\r\n\t    }\r\n\r\n\t    var defaultLayer;\r\n\r\n\t    if (hover) {\r\n\t      if (!dragGroup.parentNode) {\r\n\t        defaultLayer = canvas.getDefaultLayer();\r\n\r\n\t        append(defaultLayer, dragGroup);\r\n\t      }\r\n\r\n\t      translate(dragGroup, event.x, event.y);\r\n\t    } else {\r\n\t      remove$1(dragGroup);\r\n\t    }\r\n\t  });\r\n\r\n\t  eventBus.on('create.cleanup', function(event) {\r\n\t    var context = event.context,\r\n\t        dragGroup = context.dragGroup;\r\n\r\n\t    if (dragGroup) {\r\n\t      remove$1(dragGroup);\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tCreatePreview.$inject = [\r\n\t  'canvas',\r\n\t  'eventBus',\r\n\t  'graphicsFactory',\r\n\t  'previewSupport',\r\n\t  'styles'\r\n\t];\n\n\tvar CreateModule = {\n\t  __depends__: [\n\t    DraggingModule,\n\t    PreviewSupportModule,\n\t    RulesModule,\n\t    SelectionModule\n\t  ],\n\t  __init__: [\n\t    'create',\n\t    'createPreview'\n\t  ],\n\t  create: [ 'type', Create ],\n\t  createPreview: [ 'type', CreatePreview ]\n\t};\n\n\tvar DATA_REF = 'data-id';\n\n\tvar CLOSE_EVENTS = [\n\t  'contextPad.close',\n\t  'canvas.viewbox.changing',\n\t  'commandStack.changed'\n\t];\n\n\tvar DEFAULT_PRIORITY$4 = 1000;\n\n\n\t/**\n\t * A popup menu that can be used to display a list of actions anywhere in the canvas.\n\t *\n\t * @param {Object} config\n\t * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n\t * @param {number} [config.scale.min]\n\t * @param {number} [config.scale.max]\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t *\n\t * @class\n\t * @constructor\n\t */\n\tfunction PopupMenu(config, eventBus, canvas) {\n\n\t  var scale = isDefined(config && config.scale) ? config.scale : {\n\t    min: 1,\n\t    max: 1.5\n\t  };\n\n\t  this._config = {\n\t    scale: scale\n\t  };\n\n\t  this._eventBus = eventBus;\n\t  this._canvas = canvas;\n\t  this._providers = {};\n\t  this._current = {};\n\t}\n\n\tPopupMenu.$inject = [\n\t  'config.popupMenu',\n\t  'eventBus',\n\t  'canvas'\n\t];\n\n\t/**\n\t * Registers a popup menu provider\n\t *\n\t * @param  {string} id\n\t * @param {number} [priority=1000]\n\t * @param  {Object} provider\n\t *\n\t * @example\n\t * const popupMenuProvider = {\n\t *   getPopupMenuEntries: function(element) {\n\t *     return {\n\t *       'entry-1': {\n\t *         label: 'My Entry',\n\t *         action: function() { alert(\"I have been clicked!\"); }\n\t *       }\n\t *     }\n\t *   }\n\t * };\n\t *\n\t * popupMenu.registerProvider('myMenuID', popupMenuProvider);\n\t */\n\tPopupMenu.prototype.registerProvider = function(id, priority, provider) {\n\t  if (!provider) {\n\t    provider = priority;\n\t    priority = DEFAULT_PRIORITY$4;\n\t  }\n\n\t  this._eventBus.on('popupMenu.getProviders.' + id, priority, function(event) {\n\t    event.providers.push(provider);\n\t  });\n\t};\n\n\t/**\n\t * Determine if the popup menu has entries.\n\t *\n\t * @return {boolean} true if empty\n\t */\n\tPopupMenu.prototype.isEmpty = function(element, providerId) {\n\t  if (!element) {\n\t    throw new Error('element parameter is missing');\n\t  }\n\n\t  if (!providerId) {\n\t    throw new Error('providerId parameter is missing');\n\t  }\n\n\t  var providers = this._getProviders(providerId);\n\n\t  if (!providers) {\n\t    return true;\n\t  }\n\n\t  var entries = this._getEntries(element, providers),\n\t      headerEntries = this._getHeaderEntries(element, providers);\n\n\t  var hasEntries = size(entries) > 0,\n\t      hasHeaderEntries = headerEntries && size(headerEntries) > 0;\n\n\t  return !hasEntries && !hasHeaderEntries;\n\t};\n\n\n\t/**\n\t * Create entries and open popup menu at given position\n\t *\n\t * @param  {Object} element\n\t * @param  {string} id provider id\n\t * @param  {Object} position\n\t *\n\t * @return {Object} popup menu instance\n\t */\n\tPopupMenu.prototype.open = function(element, id, position) {\n\n\t  var providers = this._getProviders(id);\n\n\t  if (!element) {\n\t    throw new Error('Element is missing');\n\t  }\n\n\t  if (!providers || !providers.length) {\n\t    throw new Error('No registered providers for: ' + id);\n\t  }\n\n\t  if (!position) {\n\t    throw new Error('the position argument is missing');\n\t  }\n\n\t  if (this.isOpen()) {\n\t    this.close();\n\t  }\n\n\t  this._emit('open');\n\n\t  var current = this._current = {\n\t    className: id,\n\t    element: element,\n\t    position: position\n\t  };\n\n\t  var entries = this._getEntries(element, providers),\n\t      headerEntries = this._getHeaderEntries(element, providers);\n\n\t  current.entries = assign({}, entries, headerEntries);\n\n\t  current.container = this._createContainer();\n\n\t  if (size(headerEntries)) {\n\t    current.container.appendChild(\n\t      this._createEntries(headerEntries, 'djs-popup-header')\n\t    );\n\t  }\n\n\t  if (size(entries)) {\n\t    current.container.appendChild(\n\t      this._createEntries(entries, 'djs-popup-body')\n\t    );\n\t  }\n\n\t  var canvas = this._canvas,\n\t      parent = canvas.getContainer();\n\n\t  this._attachContainer(current.container, parent, position.cursor);\n\t  this._bindAutoClose();\n\t};\n\n\n\t/**\n\t * Removes the popup menu and unbinds the event handlers.\n\t */\n\tPopupMenu.prototype.close = function() {\n\n\t  if (!this.isOpen()) {\n\t    return;\n\t  }\n\n\t  this._emit('close');\n\n\t  this._unbindAutoClose();\n\t  remove(this._current.container);\n\t  this._current.container = null;\n\t};\n\n\n\t/**\n\t * Determine if an open popup menu exist.\n\t *\n\t * @return {boolean} true if open\n\t */\n\tPopupMenu.prototype.isOpen = function() {\n\t  return !!this._current.container;\n\t};\n\n\n\t/**\n\t * Trigger an action associated with an entry.\n\t *\n\t * @param {Object} event\n\t *\n\t * @return the result of the action callback, if any\n\t */\n\tPopupMenu.prototype.trigger = function(event) {\n\n\t  // silence other actions\n\t  event.preventDefault();\n\n\t  var element = event.delegateTarget || event.target,\n\t      entryId = attr(element, DATA_REF);\n\n\t  var entry = this._getEntry(entryId);\n\n\t  if (entry.action) {\n\t    return entry.action.call(null, event, entry);\n\t  }\n\t};\n\n\tPopupMenu.prototype._getProviders = function(id) {\n\n\t  var event = this._eventBus.createEvent({\n\t    type: 'popupMenu.getProviders.' + id,\n\t    providers: []\n\t  });\n\n\t  this._eventBus.fire(event);\n\n\t  return event.providers;\n\t};\n\n\tPopupMenu.prototype._getEntries = function(element, providers) {\n\n\t  var entries = {};\n\n\t  forEach(providers, function(provider) {\n\n\t    // handle legacy method\n\t    if (!provider.getPopupMenuEntries) {\n\t      forEach(provider.getEntries(element), function(entry) {\n\t        var id = entry.id;\n\n\t        if (!id) {\n\t          throw new Error('every entry must have the id property set');\n\t        }\n\n\t        entries[id] = omit(entry, [ 'id' ]);\n\t      });\n\n\t      return;\n\t    }\n\n\t    var entriesOrUpdater = provider.getPopupMenuEntries(element);\n\n\t    if (isFunction(entriesOrUpdater)) {\n\t      entries = entriesOrUpdater(entries);\n\t    } else {\n\t      forEach(entriesOrUpdater, function(entry, id) {\n\t        entries[id] = entry;\n\t      });\n\t    }\n\t  });\n\n\t  return entries;\n\t};\n\n\tPopupMenu.prototype._getHeaderEntries = function(element, providers) {\n\n\t  var entries = {};\n\n\t  forEach(providers, function(provider) {\n\n\t    // handle legacy method\n\t    if (!provider.getPopupMenuHeaderEntries) {\n\t      if (!provider.getHeaderEntries) {\n\t        return;\n\t      }\n\n\t      forEach(provider.getHeaderEntries(element), function(entry) {\n\t        var id = entry.id;\n\n\t        if (!id) {\n\t          throw new Error('every entry must have the id property set');\n\t        }\n\n\t        entries[id] = omit(entry, [ 'id' ]);\n\t      });\n\n\t      return;\n\t    }\n\n\t    var entriesOrUpdater = provider.getPopupMenuHeaderEntries(element);\n\n\t    if (isFunction(entriesOrUpdater)) {\n\t      entries = entriesOrUpdater(entries);\n\t    } else {\n\t      forEach(entriesOrUpdater, function(entry, id) {\n\t        entries[id] = entry;\n\t      });\n\t    }\n\t  });\n\n\t  return entries;\n\n\n\t};\n\n\t/**\n\t * Gets an entry instance (either entry or headerEntry) by id.\n\t *\n\t * @param  {string} entryId\n\t *\n\t * @return {Object} entry instance\n\t */\n\tPopupMenu.prototype._getEntry = function(entryId) {\n\n\t  var entry = this._current.entries[entryId];\n\n\t  if (!entry) {\n\t    throw new Error('entry not found');\n\t  }\n\n\t  return entry;\n\t};\n\n\tPopupMenu.prototype._emit = function(eventName) {\n\t  this._eventBus.fire('popupMenu.' + eventName);\n\t};\n\n\t/**\n\t * Creates the popup menu container.\n\t *\n\t * @return {Object} a DOM container\n\t */\n\tPopupMenu.prototype._createContainer = function() {\n\t  var container = domify('<div class=\"djs-popup\">'),\n\t      position = this._current.position,\n\t      className = this._current.className;\n\n\t  assign(container.style, {\n\t    position: 'absolute',\n\t    left: position.x + 'px',\n\t    top: position.y + 'px',\n\t    visibility: 'hidden'\n\t  });\n\n\t  classes(container).add(className);\n\n\t  return container;\n\t};\n\n\n\t/**\n\t * Attaches the container to the DOM.\n\t *\n\t * @param {Object} container\n\t * @param {Object} parent\n\t */\n\tPopupMenu.prototype._attachContainer = function(container, parent, cursor) {\n\t  var self = this;\n\n\t  // Event handler\n\t  delegateEvents.bind(container, '.entry' ,'click', function(event) {\n\t    self.trigger(event);\n\t  });\n\n\t  this._updateScale(container);\n\n\t  // Attach to DOM\n\t  parent.appendChild(container);\n\n\t  if (cursor) {\n\t    this._assureIsInbounds(container, cursor);\n\t  }\n\t};\n\n\n\t/**\n\t * Updates popup style.transform with respect to the config and zoom level.\n\t *\n\t * @method _updateScale\n\t *\n\t * @param {Object} container\n\t */\n\tPopupMenu.prototype._updateScale = function(container) {\n\t  var zoom = this._canvas.zoom();\n\n\t  var scaleConfig = this._config.scale,\n\t      minScale,\n\t      maxScale,\n\t      scale = zoom;\n\n\t  if (scaleConfig !== true) {\n\n\t    if (scaleConfig === false) {\n\t      minScale = 1;\n\t      maxScale = 1;\n\t    } else {\n\t      minScale = scaleConfig.min;\n\t      maxScale = scaleConfig.max;\n\t    }\n\n\t    if (isDefined(minScale) && zoom < minScale) {\n\t      scale = minScale;\n\t    }\n\n\t    if (isDefined(maxScale) && zoom > maxScale) {\n\t      scale = maxScale;\n\t    }\n\n\t  }\n\n\t  setTransform$1(container, 'scale(' + scale + ')');\n\t};\n\n\n\t/**\n\t * Make sure that the menu is always fully shown\n\t *\n\t * @method function\n\t *\n\t * @param  {Object} container\n\t * @param  {Position} cursor {x, y}\n\t */\n\tPopupMenu.prototype._assureIsInbounds = function(container, cursor) {\n\t  var canvas = this._canvas,\n\t      clientRect = canvas._container.getBoundingClientRect();\n\n\t  var containerX = container.offsetLeft,\n\t      containerY = container.offsetTop,\n\t      containerWidth = container.scrollWidth,\n\t      containerHeight = container.scrollHeight,\n\t      overAxis = {},\n\t      left, top;\n\n\t  var cursorPosition = {\n\t    x: cursor.x - clientRect.left,\n\t    y: cursor.y - clientRect.top\n\t  };\n\n\t  if (containerX + containerWidth > clientRect.width) {\n\t    overAxis.x = true;\n\t  }\n\n\t  if (containerY + containerHeight > clientRect.height) {\n\t    overAxis.y = true;\n\t  }\n\n\t  if (overAxis.x && overAxis.y) {\n\t    left = cursorPosition.x - containerWidth + 'px';\n\t    top = cursorPosition.y - containerHeight + 'px';\n\t  } else if (overAxis.x) {\n\t    left = cursorPosition.x - containerWidth + 'px';\n\t    top = cursorPosition.y + 'px';\n\t  } else if (overAxis.y && cursorPosition.y < containerHeight) {\n\t    left = cursorPosition.x + 'px';\n\t    top = 10 + 'px';\n\t  } else if (overAxis.y) {\n\t    left = cursorPosition.x + 'px';\n\t    top = cursorPosition.y - containerHeight + 'px';\n\t  }\n\n\t  assign(container.style, { left: left, top: top }, { visibility: 'visible', 'z-index': 1000 });\n\t};\n\n\n\t/**\n\t * Creates a list of entries and returns them as a DOM container.\n\t *\n\t * @param {Array<Object>} entries an array of entry objects\n\t * @param {string} className the class name of the entry container\n\t *\n\t * @return {Object} a DOM container\n\t */\n\tPopupMenu.prototype._createEntries = function(entries, className) {\n\n\t  var entriesContainer = domify('<div>'),\n\t      self = this;\n\n\t  classes(entriesContainer).add(className);\n\n\t  forEach(entries, function(entry, id) {\n\t    var entryContainer = self._createEntry(entry, id);\n\t    entriesContainer.appendChild(entryContainer);\n\t  });\n\n\t  return entriesContainer;\n\t};\n\n\n\t/**\n\t * Creates a single entry and returns it as a DOM container.\n\t *\n\t * @param  {Object} entry\n\t *\n\t * @return {Object} a DOM container\n\t */\n\tPopupMenu.prototype._createEntry = function(entry, id) {\n\n\t  var entryContainer = domify('<div>'),\n\t      entryClasses = classes(entryContainer);\n\n\t  entryClasses.add('entry');\n\n\t  if (entry.className) {\n\t    entry.className.split(' ').forEach(function(className) {\n\t      entryClasses.add(className);\n\t    });\n\t  }\n\n\t  attr(entryContainer, DATA_REF, id);\n\n\t  if (entry.label) {\n\t    var label = domify('<span>');\n\t    label.textContent = entry.label;\n\t    entryContainer.appendChild(label);\n\t  }\n\n\t  if (entry.imageUrl) {\n\t    entryContainer.appendChild(domify('<img src=\"' + entry.imageUrl + '\" />'));\n\t  }\n\n\t  if (entry.active === true) {\n\t    entryClasses.add('active');\n\t  }\n\n\t  if (entry.disabled === true) {\n\t    entryClasses.add('disabled');\n\t  }\n\n\t  if (entry.title) {\n\t    entryContainer.title = entry.title;\n\t  }\n\n\t  return entryContainer;\n\t};\n\n\n\t/**\n\t * Set up listener to close popup automatically on certain events.\n\t */\n\tPopupMenu.prototype._bindAutoClose = function() {\n\t  this._eventBus.once(CLOSE_EVENTS, this.close, this);\n\t};\n\n\n\t/**\n\t * Remove the auto-closing listener.\n\t */\n\tPopupMenu.prototype._unbindAutoClose = function() {\n\t  this._eventBus.off(CLOSE_EVENTS, this.close, this);\n\t};\n\n\n\n\t// helpers /////////////////////////////\n\n\tfunction setTransform$1(element, transform) {\n\t  element.style['transform-origin'] = 'top left';\n\n\t  [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {\n\t    element.style[prefix + 'transform'] = transform;\n\t  });\n\t}\n\n\tvar PopupMenuModule = {\n\t  __init__: [ 'popupMenu' ],\n\t  popupMenu: [ 'type', PopupMenu ]\n\t};\n\n\t/**\n\t * A clip board stub\n\t */\n\tfunction Clipboard() {}\n\n\n\tClipboard.prototype.get = function() {\n\t  return this._data;\n\t};\n\n\tClipboard.prototype.set = function(data) {\n\t  this._data = data;\n\t};\n\n\tClipboard.prototype.clear = function() {\n\t  var data = this._data;\n\n\t  delete this._data;\n\n\t  return data;\n\t};\n\n\tClipboard.prototype.isEmpty = function() {\n\t  return !this._data;\n\t};\n\n\tvar ClipboardModule = {\n\t  clipboard: [ 'type', Clipboard ]\n\t};\n\n\tfunction Mouse(eventBus) {\r\n\t  var self = this;\r\n\r\n\t  this._lastMoveEvent = null;\r\n\r\n\t  function setLastMoveEvent(mousemoveEvent) {\r\n\t    self._lastMoveEvent = mousemoveEvent;\r\n\t  }\r\n\r\n\t  eventBus.on('canvas.init', function(context) {\r\n\t    var svg = self._svg = context.svg;\r\n\r\n\t    svg.addEventListener('mousemove', setLastMoveEvent);\r\n\t  });\r\n\r\n\t  eventBus.on('canvas.destroy', function() {\r\n\t    self._lastMouseEvent = null;\r\n\r\n\t    self._svg.removeEventListener('mousemove', setLastMoveEvent);\r\n\t  });\r\n\t}\r\n\r\n\tMouse.$inject = [ 'eventBus' ];\r\n\r\n\tMouse.prototype.getLastMoveEvent = function() {\r\n\t  return this._lastMoveEvent || createMoveEvent(0, 0);\r\n\t};\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction createMoveEvent(x, y) {\r\n\t  var event = document.createEvent('MouseEvent');\r\n\r\n\t  var screenX = x,\r\n\t      screenY = y,\r\n\t      clientX = x,\r\n\t      clientY = y;\r\n\r\n\t  if (event.initMouseEvent) {\r\n\t    event.initMouseEvent(\r\n\t      'mousemove',\r\n\t      true,\r\n\t      true,\r\n\t      window,\r\n\t      0,\r\n\t      screenX,\r\n\t      screenY,\r\n\t      clientX,\r\n\t      clientY,\r\n\t      false,\r\n\t      false,\r\n\t      false,\r\n\t      false,\r\n\t      0,\r\n\t      null\r\n\t    );\r\n\t  }\r\n\r\n\t  return event;\r\n\t}\n\n\tvar MouseModule = {\n\t  __init__: [ 'mouse' ],\n\t  mouse: [ 'type', Mouse ]\n\t};\n\n\t/**\n\t * @typedef {Function} <copyPaste.canCopyElements> listener\n\t *\n\t * @param {Object} context\n\t * @param {Array<djs.model.Base>} context.elements\n\t *\n\t * @returns {Array<djs.model.Base>|boolean} - Return elements to be copied or false to disallow\n\t * copying.\n\t */\n\n\t/**\n\t * @typedef {Function} <copyPaste.copyElement> listener\n\t *\n\t * @param {Object} context\n\t * @param {Object} context.descriptor\n\t * @param {djs.model.Base} context.element\n\t * @param {Array<djs.model.Base>} context.elements\n\t */\n\n\t/**\n\t * @typedef {Function} <copyPaste.elementsCopied> listener\n\t *\n\t * @param {Object} context\n\t * @param {Object} context.elements\n\t * @param {Object} context.tree\n\t */\n\n\t/**\n\t * @typedef {Function} <copyPaste.pasteElement> listener\n\t *\n\t * @param {Object} context\n\t * @param {Object} context.cache - Already created elements.\n\t * @param {Object} context.descriptor\n\t */\n\n\t/**\n\t * @typedef {Function} <copyPaste.pasteElements> listener\n\t *\n\t * @param {Object} context\n\t * @param {Object} context.hints - Add hints before pasting.\n\t */\n\n\t/**\n\t * Copy and paste elements.\n\t *\n\t * @param {Canvas} canvas\n\t * @param {Create} create\n\t * @param {Clipboard} clipboard\n\t * @param {ElementFactory} elementFactory\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t * @param {Mouse} mouse\n\t * @param {Rules} rules\n\t */\n\tfunction CopyPaste(\n\t    canvas,\n\t    create,\n\t    clipboard,\n\t    elementFactory,\n\t    eventBus,\n\t    modeling,\n\t    mouse,\n\t    rules\n\t) {\n\n\t  this._canvas = canvas;\n\t  this._create = create;\n\t  this._clipboard = clipboard;\n\t  this._elementFactory = elementFactory;\n\t  this._eventBus = eventBus;\n\t  this._modeling = modeling;\n\t  this._mouse = mouse;\n\t  this._rules = rules;\n\n\t  eventBus.on('copyPaste.copyElement', function(context) {\n\t    var descriptor = context.descriptor,\n\t        element = context.element,\n\t        elements = context.elements;\n\n\t    // default priority (priority = 1)\n\t    descriptor.priority = 1;\n\n\t    descriptor.id = element.id;\n\n\t    var parentCopied = find(elements, function(e) {\n\t      return e === element.parent;\n\t    });\n\n\t    // do NOT reference parent if parent wasn't copied\n\t    if (parentCopied) {\n\t      descriptor.parent = element.parent.id;\n\t    }\n\n\t    // attachers (priority = 2)\n\t    if (isAttacher(element)) {\n\t      descriptor.priority = 2;\n\n\t      descriptor.host = element.host.id;\n\t    }\n\n\t    // connections (priority = 3)\n\t    if (isConnection$1(element)) {\n\t      descriptor.priority = 3;\n\n\t      descriptor.source = element.source.id;\n\t      descriptor.target = element.target.id;\n\n\t      descriptor.waypoints = copyWaypoints(element);\n\t    }\n\n\t    // labels (priority = 4)\n\t    if (isLabel$2(element)) {\n\t      descriptor.priority = 4;\n\n\t      descriptor.labelTarget = element.labelTarget.id;\n\t    }\n\n\t    forEach([ 'x', 'y', 'width', 'height' ], function(property) {\n\t      if (isNumber(element[ property ])) {\n\t        descriptor[ property ] = element[ property ];\n\t      }\n\t    });\n\n\t    descriptor.hidden = element.hidden;\n\t    descriptor.collapsed = element.collapsed;\n\n\t  });\n\n\t  eventBus.on('copyPaste.pasteElements', function(context) {\n\t    var hints = context.hints;\n\n\t    assign(hints, {\n\t      createElementsBehavior: false\n\t    });\n\t  });\n\t}\n\n\tCopyPaste.$inject = [\n\t  'canvas',\n\t  'create',\n\t  'clipboard',\n\t  'elementFactory',\n\t  'eventBus',\n\t  'modeling',\n\t  'mouse',\n\t  'rules'\n\t];\n\n\n\t/**\n\t * Copy elements.\n\t *\n\t * @param {Array<djs.model.Base>} elements\n\t *\n\t * @returns {Object}\n\t */\n\tCopyPaste.prototype.copy = function(elements) {\n\t  var allowed,\n\t      tree;\n\n\t  if (!isArray(elements)) {\n\t    elements = elements ? [ elements ] : [];\n\t  }\n\n\t  allowed = this._eventBus.fire('copyPaste.canCopyElements', {\n\t    elements: elements\n\t  });\n\n\t  if (allowed === false) {\n\t    tree = {};\n\t  } else {\n\t    tree = this.createTree(isArray(allowed) ? allowed : elements);\n\t  }\n\n\t  // we set an empty tree, selection of elements\n\t  // to copy was empty.\n\t  this._clipboard.set(tree);\n\n\t  this._eventBus.fire('copyPaste.elementsCopied', {\n\t    elements: elements,\n\t    tree: tree\n\t  });\n\n\t  return tree;\n\t};\n\n\t/**\n\t * Paste elements.\n\t *\n\t * @param {Object} [context]\n\t * @param {djs.model.base} [context.element] - Parent.\n\t * @param {Point} [context.point] - Position.\n\t * @param {Object} [context.hints] - Hints.\n\t */\n\tCopyPaste.prototype.paste = function(context) {\n\t  var tree = this._clipboard.get();\n\n\t  if (this._clipboard.isEmpty()) {\n\t    return;\n\t  }\n\n\t  var hints = context && context.hints || {};\n\n\t  this._eventBus.fire('copyPaste.pasteElements', {\n\t    hints: hints\n\t  });\n\n\t  var elements = this._createElements(tree);\n\n\t  // paste directly\n\t  if (context && context.element && context.point) {\n\t    return this._paste(elements, context.element, context.point, hints);\n\t  }\n\n\t  this._create.start(this._mouse.getLastMoveEvent(), elements, {\n\t    hints: hints || {}\n\t  });\n\t};\n\n\t/**\n\t * Paste elements directly.\n\t *\n\t * @param {Array<djs.model.Base>} elements\n\t * @param {djs.model.base} target\n\t * @param {Point} position\n\t * @param {Object} [hints]\n\t */\n\tCopyPaste.prototype._paste = function(elements, target, position, hints) {\n\n\t  // make sure each element has x and y\n\t  forEach(elements, function(element) {\n\t    if (!isNumber(element.x)) {\n\t      element.x = 0;\n\t    }\n\n\t    if (!isNumber(element.y)) {\n\t      element.y = 0;\n\t    }\n\t  });\n\n\t  var bbox = getBBox(elements);\n\n\t  // center elements around cursor\n\t  forEach(elements, function(element) {\n\t    if (isConnection$1(element)) {\n\t      element.waypoints = map(element.waypoints, function(waypoint) {\n\t        return {\n\t          x: waypoint.x - bbox.x - bbox.width / 2,\n\t          y: waypoint.y - bbox.y - bbox.height / 2\n\t        };\n\t      });\n\t    }\n\n\t    assign(element, {\n\t      x: element.x - bbox.x - bbox.width / 2,\n\t      y: element.y - bbox.y - bbox.height / 2\n\t    });\n\t  });\n\n\t  return this._modeling.createElements(elements, position, target, assign({}, hints));\n\t};\n\n\t/**\n\t * Create elements from tree.\n\t */\n\tCopyPaste.prototype._createElements = function(tree) {\n\t  var self = this;\n\n\t  var eventBus = this._eventBus;\n\n\t  var cache = {};\n\n\t  var elements = [];\n\n\t  forEach(tree, function(branch, depth) {\n\n\t    // sort by priority\n\t    branch = sortBy(branch, 'priority');\n\n\t    forEach(branch, function(descriptor) {\n\n\t      // remove priority\n\t      var attrs = assign({}, omit(descriptor, [ 'priority' ]));\n\n\t      if (cache[ descriptor.parent ]) {\n\t        attrs.parent = cache[ descriptor.parent ];\n\t      } else {\n\t        delete attrs.parent;\n\t      }\n\n\t      eventBus.fire('copyPaste.pasteElement', {\n\t        cache: cache,\n\t        descriptor: attrs\n\t      });\n\n\t      var element;\n\n\t      if (isConnection$1(attrs)) {\n\t        attrs.source = cache[ descriptor.source ];\n\t        attrs.target = cache[ descriptor.target ];\n\n\t        element = cache[ descriptor.id ] = self.createConnection(attrs);\n\n\t        elements.push(element);\n\n\t        return;\n\t      }\n\n\t      if (isLabel$2(attrs)) {\n\t        attrs.labelTarget = cache[ attrs.labelTarget ];\n\n\t        element = cache[ descriptor.id ] = self.createLabel(attrs);\n\n\t        elements.push(element);\n\n\t        return;\n\t      }\n\n\t      if (attrs.host) {\n\t        attrs.host = cache[ attrs.host ];\n\t      }\n\n\t      element = cache[ descriptor.id ] = self.createShape(attrs);\n\n\t      elements.push(element);\n\t    });\n\n\t  });\n\n\t  return elements;\n\t};\n\n\tCopyPaste.prototype.createConnection = function(attrs) {\n\t  var connection = this._elementFactory.createConnection(omit(attrs, [ 'id' ]));\n\n\t  return connection;\n\t};\n\n\tCopyPaste.prototype.createLabel = function(attrs) {\n\t  var label = this._elementFactory.createLabel(omit(attrs, [ 'id' ]));\n\n\t  return label;\n\t};\n\n\tCopyPaste.prototype.createShape = function(attrs) {\n\t  var shape = this._elementFactory.createShape(omit(attrs, [ 'id' ]));\n\n\t  return shape;\n\t};\n\n\t/**\n\t * Check wether element has relations to other elements e.g. attachers, labels and connections.\n\t *\n\t * @param  {Object} element\n\t * @param  {Array<djs.model.Base>} elements\n\t *\n\t * @returns {boolean}\n\t */\n\tCopyPaste.prototype.hasRelations = function(element, elements) {\n\t  var labelTarget,\n\t      source,\n\t      target;\n\n\t  if (isConnection$1(element)) {\n\t    source = find(elements, matchPattern({ id: element.source.id }));\n\t    target = find(elements, matchPattern({ id: element.target.id }));\n\n\t    if (!source || !target) {\n\t      return false;\n\t    }\n\t  }\n\n\t  if (isLabel$2(element)) {\n\t    labelTarget = find(elements, matchPattern({ id: element.labelTarget.id }));\n\n\t    if (!labelTarget) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t};\n\n\t/**\n\t * Create a tree-like structure from elements.\n\t *\n\t * @example\n\t * tree: {\n\t  *  0: [\n\t  *    { id: 'Shape_1', priority: 1, ... },\n\t  *    { id: 'Shape_2', priority: 1, ... },\n\t  *    { id: 'Connection_1', source: 'Shape_1', target: 'Shape_2', priority: 3, ... },\n\t  *    ...\n\t  *  ],\n\t  *  1: [\n\t  *    { id: 'Shape_3', parent: 'Shape1', priority: 1, ... },\n\t  *    ...\n\t  *  ]\n\t  * };\n\t  *\n\t  * @param  {Array<djs.model.base>} elements\n\t  *\n\t  * @return {Object}\n\t  */\n\tCopyPaste.prototype.createTree = function(elements) {\n\t  var rules = this._rules,\n\t      self = this;\n\n\t  var tree = {},\n\t      elementsData = [];\n\n\t  var parents = getParents(elements);\n\n\t  function canCopy(element, elements) {\n\t    return rules.allowed('element.copy', {\n\t      element: element,\n\t      elements: elements\n\t    });\n\t  }\n\n\t  function addElementData(element, depth) {\n\n\t    // (1) check wether element has already been added\n\t    var foundElementData = find(elementsData, function(elementsData) {\n\t      return element === elementsData.element;\n\t    });\n\n\t    // (2) add element if not already added\n\t    if (!foundElementData) {\n\t      elementsData.push({\n\t        element: element,\n\t        depth: depth\n\t      });\n\n\t      return;\n\t    }\n\n\t    // (3) update depth\n\t    if (foundElementData.depth < depth) {\n\t      elementsData = removeElementData(foundElementData, elementsData);\n\n\t      elementsData.push({\n\t        element: foundElementData.element,\n\t        depth: depth\n\t      });\n\t    }\n\t  }\n\n\t  function removeElementData(elementData, elementsData) {\n\t    var index = elementsData.indexOf(elementData);\n\n\t    if (index !== -1) {\n\t      elementsData.splice(index, 1);\n\t    }\n\n\t    return elementsData;\n\t  }\n\n\t  // (1) add elements\n\t  eachElement(parents, function(element, _index, depth) {\n\n\t    // do NOT add external labels directly\n\t    if (isLabel$2(element)) {\n\t      return;\n\t    }\n\n\t    // always copy external labels\n\t    forEach(element.labels, function(label) {\n\t      addElementData(label, depth);\n\t    });\n\n\t    function addRelatedElements(elements) {\n\t      elements && elements.length && forEach(elements, function(element) {\n\n\t        // add external labels\n\t        forEach(element.labels, function(label) {\n\t          addElementData(label, depth);\n\t        });\n\n\t        addElementData(element, depth);\n\t      });\n\t    }\n\n\t    forEach([ element.attachers, element.incoming, element.outgoing ], addRelatedElements);\n\n\t    addElementData(element, depth);\n\n\t    return element.children;\n\t  });\n\n\t  elements = map(elementsData, function(elementData) {\n\t    return elementData.element;\n\t  });\n\n\t  // (2) copy elements\n\t  elementsData = map(elementsData, function(elementData) {\n\t    elementData.descriptor = {};\n\n\t    self._eventBus.fire('copyPaste.copyElement', {\n\t      descriptor: elementData.descriptor,\n\t      element: elementData.element,\n\t      elements: elements\n\t    });\n\n\t    return elementData;\n\t  });\n\n\t  // (3) sort elements by priority\n\t  elementsData = sortBy(elementsData, function(elementData) {\n\t    return elementData.descriptor.priority;\n\t  });\n\n\t  elements = map(elementsData, function(elementData) {\n\t    return elementData.element;\n\t  });\n\n\t  // (4) create tree\n\t  forEach(elementsData, function(elementData) {\n\t    var depth = elementData.depth;\n\n\t    if (!self.hasRelations(elementData.element, elements)) {\n\t      removeElement(elementData.element, elements);\n\n\t      return;\n\t    }\n\n\t    if (!canCopy(elementData.element, elements)) {\n\t      removeElement(elementData.element, elements);\n\n\t      return;\n\t    }\n\n\t    if (!tree[depth]) {\n\t      tree[depth] = [];\n\t    }\n\n\t    tree[depth].push(elementData.descriptor);\n\t  });\n\n\t  return tree;\n\t};\n\n\t// helpers //////////\n\n\tfunction isAttacher(element) {\n\t  return !!element.host;\n\t}\n\n\tfunction isConnection$1(element) {\n\t  return !!element.waypoints;\n\t}\n\n\tfunction isLabel$2(element) {\n\t  return !!element.labelTarget;\n\t}\n\n\tfunction copyWaypoints(element) {\n\t  return map(element.waypoints, function(waypoint) {\n\n\t    waypoint = copyWaypoint(waypoint);\n\n\t    if (waypoint.original) {\n\t      waypoint.original = copyWaypoint(waypoint.original);\n\t    }\n\n\t    return waypoint;\n\t  });\n\t}\n\n\tfunction copyWaypoint(waypoint) {\n\t  return assign({}, waypoint);\n\t}\n\n\tfunction removeElement(element, elements) {\n\t  var index = elements.indexOf(element);\n\n\t  if (index === -1) {\n\t    return elements;\n\t  }\n\n\t  return elements.splice(index, 1);\n\t}\n\n\tvar CopyPasteModule = {\n\t  __depends__: [\n\t    ClipboardModule,\n\t    CreateModule,\n\t    MouseModule,\n\t    RulesModule\n\t  ],\n\t  __init__: [ 'copyPaste' ],\n\t  copyPaste: [ 'type', CopyPaste ]\n\t};\n\n\tfunction copyProperties(source, target, properties) {\n\t  if (!isArray(properties)) {\n\t    properties = [ properties ];\n\t  }\n\n\t  forEach(properties, function(property) {\n\t    if (!isUndefined(source[property])) {\n\t      target[property] = source[property];\n\t    }\n\t  });\n\t}\n\n\tfunction removeProperties(element, properties) {\n\t  if (!isArray(properties)) {\n\t    properties = [ properties ];\n\t  }\n\n\t  forEach(properties, function(property) {\n\t    if (element[property]) {\n\t      delete element[property];\n\t    }\n\t  });\n\t}\n\n\tvar LOW_PRIORITY$7 = 750;\n\n\n\tfunction BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n\n\t  eventBus.on('copyPaste.copyElement', LOW_PRIORITY$7, function(context) {\n\t    var descriptor = context.descriptor,\n\t        element = context.element;\n\n\t    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n\n\t    descriptor.type = element.type;\n\n\t    copyProperties(businessObject, descriptor, 'name');\n\n\t    descriptor.di = {};\n\n\t    // fill and stroke will be set to DI\n\t    copyProperties(businessObject.di, descriptor.di, [\n\t      'fill',\n\t      'stroke'\n\t    ]);\n\n\t    copyProperties(businessObject.di, descriptor, 'isExpanded');\n\n\t    if (isLabel$3(descriptor)) {\n\t      return descriptor;\n\t    }\n\n\t    // default sequence flow\n\t    if (businessObject.default) {\n\t      descriptor.default = businessObject.default.id;\n\t    }\n\t  });\n\n\t  eventBus.on('moddleCopy.canCopyProperty', function(context) {\n\t    var parent = context.parent,\n\t        property = context.property,\n\t        propertyName = context.propertyName,\n\t        bpmnProcess;\n\n\t    if (\n\t      propertyName === 'processRef' &&\n\t      is$1(parent, 'bpmn:Participant') &&\n\t      is$1(property, 'bpmn:Process')\n\t    ) {\n\t      bpmnProcess = bpmnFactory.create('bpmn:Process');\n\n\t      // return copy of process\n\t      return moddleCopy.copyElement(property, bpmnProcess);\n\t    }\n\t  });\n\n\t  var references;\n\n\t  function resolveReferences(descriptor, cache) {\n\t    var businessObject = getBusinessObject(descriptor);\n\n\t    // default sequence flows\n\t    if (descriptor.default) {\n\n\t      // relationship cannot be resolved immediately\n\t      references[ descriptor.default ] = {\n\t        element: businessObject,\n\t        property: 'default'\n\t      };\n\t    }\n\n\t    // boundary events\n\t    if (descriptor.host) {\n\n\t      // relationship can be resolved immediately\n\t      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);\n\t    }\n\n\t    references = omit(references, reduce(references, function(array, reference, key) {\n\t      var element = reference.element,\n\t          property = reference.property;\n\n\t      if (key === descriptor.id) {\n\t        element[ property ] = businessObject;\n\n\t        array.push(descriptor.id);\n\t      }\n\n\t      return array;\n\t    }, []));\n\t  }\n\n\t  eventBus.on('copyPaste.pasteElements', function() {\n\t    references = {};\n\t  });\n\n\t  eventBus.on('copyPaste.pasteElement', function(context) {\n\t    var cache = context.cache,\n\t        descriptor = context.descriptor,\n\t        oldBusinessObject = descriptor.oldBusinessObject,\n\t        newBusinessObject;\n\n\t    // do NOT copy business object if external label\n\t    if (isLabel$3(descriptor)) {\n\t      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);\n\n\t      return;\n\t    }\n\n\t    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n\n\t    descriptor.businessObject = moddleCopy.copyElement(\n\t      oldBusinessObject,\n\t      newBusinessObject\n\t    );\n\n\t    // resolve references e.g. default sequence flow\n\t    resolveReferences(descriptor, cache);\n\n\t    copyProperties(descriptor, newBusinessObject, [\n\t      'isExpanded',\n\t      'name'\n\t    ]);\n\n\t    removeProperties(descriptor, 'oldBusinessObject');\n\t  });\n\n\t}\n\n\n\tBpmnCopyPaste.$inject = [\n\t  'bpmnFactory',\n\t  'eventBus',\n\t  'moddleCopy'\n\t];\n\n\t// helpers //////////\n\n\tfunction isLabel$3(element) {\n\t  return !!element.labelTarget;\n\t}\n\n\tvar DISALLOWED_PROPERTIES = [\n\t  'artifacts',\n\t  'dataInputAssociations',\n\t  'dataOutputAssociations',\n\t  'default',\n\t  'flowElements',\n\t  'lanes',\n\t  'incoming',\n\t  'outgoing'\n\t];\n\n\t/**\n\t * @typedef {Function} <moddleCopy.canCopyProperties> listener\n\t *\n\t * @param {Object} context\n\t * @param {Array<string>} context.propertyNames\n\t * @param {ModdleElement} context.sourceElement\n\t * @param {ModdleElement} context.targetElement\n\t *\n\t * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow\n\t * copying.\n\t */\n\n\t/**\n\t * @typedef {Function} <moddleCopy.canCopyProperty> listener\n\t *\n\t * @param {Object} context\n\t * @param {ModdleElement} context.parent\n\t * @param {*} context.property\n\t * @param {string} context.propertyName\n\t *\n\t * @returns {*|boolean} - Return copied property or false to disallow\n\t * copying.\n\t */\n\n\t/**\n\t * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener\n\t *\n\t * @param {Object} context\n\t * @param {ModdleElement} context.parent\n\t * @param {*} context.property\n\t * @param {string} context.propertyName\n\t *\n\t * @returns {boolean} - Return false to disallow\n\t * setting copied property.\n\t */\n\n\t/**\n\t * Utility for copying model properties from source element to target element.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {BpmnFactory} bpmnFactory\n\t * @param {BpmnModdle} moddle\n\t */\n\tfunction ModdleCopy(eventBus, bpmnFactory, moddle) {\n\t  this._bpmnFactory = bpmnFactory;\n\t  this._eventBus = eventBus;\n\t  this._moddle = moddle;\n\n\t  // copy extension elements last\n\t  eventBus.on('moddleCopy.canCopyProperties', function(context) {\n\t    var propertyNames = context.propertyNames;\n\n\t    if (!propertyNames || !propertyNames.length) {\n\t      return;\n\t    }\n\n\t    return sortBy(propertyNames, function(propertyName) {\n\t      return propertyName === 'extensionElements';\n\t    });\n\t  });\n\n\t  // default check whether property can be copied\n\t  eventBus.on('moddleCopy.canCopyProperty', function(context) {\n\t    var parent = context.parent,\n\t        parentDescriptor = isObject(parent) && parent.$descriptor,\n\t        propertyName = context.propertyName;\n\n\t    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {\n\n\t      // disallow copying property\n\t      return false;\n\t    }\n\n\t    if (propertyName &&\n\t      parentDescriptor &&\n\t      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {\n\n\t      // disallow copying property\n\t      return false;\n\t    }\n\t  });\n\n\t  // do NOT allow to copy empty extension elements\n\t  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {\n\t    var property = context.property;\n\n\t    if (is$2(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {\n\n\t      // disallow setting copied property\n\t      return false;\n\t    }\n\t  });\n\t}\n\n\tModdleCopy.$inject = [\n\t  'eventBus',\n\t  'bpmnFactory',\n\t  'moddle'\n\t];\n\n\t/**\n\t * Copy model properties of source element to target element.\n\t *\n\t * @param {ModdleElement} sourceElement\n\t * @param {ModdleElement} targetElement\n\t * @param {Array<string>} [propertyNames]\n\t *\n\t * @param {ModdleElement}\n\t */\n\tModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {\n\t  var self = this;\n\n\t  if (propertyNames && !isArray(propertyNames)) {\n\t    propertyNames = [ propertyNames ];\n\t  }\n\n\t  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);\n\n\t  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {\n\t    propertyNames: propertyNames,\n\t    sourceElement: sourceElement,\n\t    targetElement: targetElement\n\t  });\n\n\t  if (canCopyProperties === false) {\n\t    return targetElement;\n\t  }\n\n\t  if (isArray(canCopyProperties)) {\n\t    propertyNames = canCopyProperties;\n\t  }\n\n\t  // copy properties\n\t  forEach(propertyNames, function(propertyName) {\n\t    var sourceProperty;\n\n\t    if (has(sourceElement, propertyName)) {\n\t      sourceProperty = sourceElement.get(propertyName);\n\t    }\n\n\t    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);\n\n\t    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {\n\t      parent: targetElement,\n\t      property: copiedProperty,\n\t      propertyName: propertyName\n\t    });\n\n\t    if (canSetProperty === false) {\n\t      return;\n\t    }\n\n\t    if (isDefined(copiedProperty)) {\n\t      targetElement.set(propertyName, copiedProperty);\n\t    }\n\t  });\n\n\t  return targetElement;\n\t};\n\n\t/**\n\t * Copy model property.\n\t *\n\t * @param {*} property\n\t * @param {ModdleElement} parent\n\t * @param {string} propertyName\n\t *\n\t * @returns {*}\n\t */\n\tModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {\n\t  var self = this;\n\n\t  // allow others to copy property\n\t  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {\n\t    parent: parent,\n\t    property: property,\n\t    propertyName: propertyName\n\t  });\n\n\t  // return if copying is NOT allowed\n\t  if (copiedProperty === false) {\n\t    return;\n\t  }\n\n\t  if (copiedProperty) {\n\t    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {\n\t      copiedProperty.$parent = parent;\n\t    }\n\n\t    return copiedProperty;\n\t  }\n\n\t  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);\n\n\t  // do NOT copy Ids and references\n\t  if (propertyDescriptor.isId || propertyDescriptor.isReference) {\n\t    return;\n\t  }\n\n\t  // copy arrays\n\t  if (isArray(property)) {\n\t    return reduce(property, function(childProperties, childProperty) {\n\n\t      // recursion\n\t      copiedProperty = self.copyProperty(childProperty, parent, propertyName);\n\n\t      // copying might NOT be allowed\n\t      if (copiedProperty) {\n\t        copiedProperty.$parent = parent;\n\n\t        return childProperties.concat(copiedProperty);\n\t      }\n\n\t      return childProperties;\n\t    }, []);\n\t  }\n\n\t  // copy model elements\n\t  if (isObject(property) && property.$type) {\n\t    if (this._moddle.getElementDescriptor(property).isGeneric) {\n\t      return;\n\t    }\n\n\t    copiedProperty = self._bpmnFactory.create(property.$type);\n\n\t    copiedProperty.$parent = parent;\n\n\t    // recursion\n\t    copiedProperty = self.copyElement(property, copiedProperty);\n\n\t    return copiedProperty;\n\t  }\n\n\t  // copy primitive properties\n\t  return property;\n\t};\n\n\t// helpers //////////\n\n\tfunction getPropertyNames(descriptor, keepDefaultProperties) {\n\t  return reduce(descriptor.properties, function(properties, property) {\n\n\t    if (keepDefaultProperties && property.default) {\n\t      return properties;\n\t    }\n\n\t    return properties.concat(property.name);\n\t  }, []);\n\t}\n\n\tfunction is$2(element, type) {\n\t  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);\n\t}\n\n\tvar CopyPasteModule$1 = {\n\t  __depends__: [\n\t    CopyPasteModule\n\t  ],\n\t  __init__: [ 'bpmnCopyPaste', 'moddleCopy' ],\n\t  bpmnCopyPaste: [ 'type', BpmnCopyPaste ],\n\t  moddleCopy: [ 'type', ModdleCopy ]\n\t};\n\n\tvar round$6 = Math.round;\n\n\t/**\n\t * Service that allow replacing of elements.\n\t */\n\tfunction Replace(modeling) {\n\n\t  this._modeling = modeling;\n\t}\n\n\tReplace.$inject = [ 'modeling' ];\n\n\t/**\n\t * @param {Element} oldElement - Element to be replaced\n\t * @param {Object}  newElementData - Containing information about the new element,\n\t *                                   for example the new bounds and type.\n\t * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n\t *                            that is needed in the command chain. For example it could be used in\n\t *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n\t *                            shape creation.\n\t */\n\tReplace.prototype.replaceElement = function(oldElement, newElementData, options) {\n\n\t  if (oldElement.waypoints) {\n\n\t    // TODO(nikku): we do not replace connections, yet\n\t    return null;\n\t  }\n\n\t  var modeling = this._modeling;\n\n\t  var width = newElementData.width || oldElement.width,\n\t      height = newElementData.height || oldElement.height,\n\t      x = newElementData.x || oldElement.x,\n\t      y = newElementData.y || oldElement.y,\n\t      centerX = round$6(x + width / 2),\n\t      centerY = round$6(y + height / 2);\n\n\t  // modeling API requires center coordinates,\n\t  // account for that when handling shape bounds\n\n\t  return modeling.replaceShape(\n\t    oldElement,\n\t    assign(\n\t      {},\n\t      newElementData,\n\t      {\n\t        x: centerX,\n\t        y: centerY,\n\t        width: width,\n\t        height: height\n\t      }\n\t    ),\n\t    options\n\t  );\n\t};\n\n\tvar ReplaceModule = {\n\t  __init__: [ 'replace' ],\n\t  replace: [ 'type', Replace ]\n\t};\n\n\tfunction copyProperties$1(source, target, properties) {\n\t  if (!isArray(properties)) {\n\t    properties = [ properties ];\n\t  }\n\n\t  forEach(properties, function(property) {\n\t    if (!isUndefined(source[property])) {\n\t      target[property] = source[property];\n\t    }\n\t  });\n\t}\n\n\tvar CUSTOM_PROPERTIES = [\n\t  'cancelActivity',\n\t  'instantiate',\n\t  'eventGatewayType',\n\t  'triggeredByEvent',\n\t  'isInterrupting'\n\t];\n\n\n\tfunction toggeling(element, target) {\n\n\t  var oldCollapsed = (\n\t    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)\n\t  );\n\n\t  var targetCollapsed;\n\n\t  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {\n\n\t    // property is explicitly set so use it\n\t    targetCollapsed = (\n\t      has(target, 'collapsed') ? target.collapsed : !target.isExpanded\n\t    );\n\t  } else {\n\n\t    // keep old state\n\t    targetCollapsed = oldCollapsed;\n\t  }\n\n\t  if (oldCollapsed !== targetCollapsed) {\n\t    element.collapsed = oldCollapsed;\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\n\n\t/**\n\t * This module takes care of replacing BPMN elements\n\t */\n\tfunction BpmnReplace(\n\t    bpmnFactory,\n\t    elementFactory,\n\t    moddleCopy,\n\t    modeling,\n\t    replace,\n\t    selection\n\t) {\n\n\t  /**\n\t   * Prepares a new business object for the replacement element\n\t   * and triggers the replace operation.\n\t   *\n\t   * @param  {djs.model.Base} element\n\t   * @param  {Object} target\n\t   * @param  {Object} [hints]\n\t   *\n\t   * @return {djs.model.Base} the newly created element\n\t   */\n\t  function replaceElement(element, target, hints) {\n\n\t    hints = hints || {};\n\n\t    var type = target.type,\n\t        oldBusinessObject = element.businessObject;\n\n\t    if (isSubProcess(oldBusinessObject)) {\n\t      if (type === 'bpmn:SubProcess') {\n\t        if (toggeling(element, target)) {\n\n\t          // expanding or collapsing process\n\t          modeling.toggleCollapse(element);\n\n\t          return element;\n\t        }\n\t      }\n\t    }\n\n\t    var newBusinessObject = bpmnFactory.create(type);\n\n\t    var newElement = {\n\t      type: type,\n\t      businessObject: newBusinessObject\n\t    };\n\n\t    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n\t        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n\t        copyProps = intersection(elementProps, newElementProps);\n\n\t    // initialize special properties defined in target definition\n\t    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n\n\t    var properties = filter(copyProps, function(propertyName) {\n\n\t      // copying event definitions, unless we replace\n\t      if (propertyName === 'eventDefinitions') {\n\t        return hasEventDefinition$1(element, target.eventDefinitionType);\n\t      }\n\n\t      // retain loop characteristics if the target element\n\t      // is not an event sub process\n\t      if (propertyName === 'loopCharacteristics') {\n\t        return !isEventSubProcess(newBusinessObject);\n\t      }\n\n\t      // so the applied properties from 'target' don't get lost\n\t      if (newBusinessObject.hasOwnProperty(propertyName)) {\n\t        return false;\n\t      }\n\n\t      if (propertyName === 'processRef' && target.isExpanded === false) {\n\t        return false;\n\t      }\n\n\t      if (propertyName === 'triggeredByEvent') {\n\t        return false;\n\t      }\n\n\t      return true;\n\t    });\n\n\t    newBusinessObject = moddleCopy.copyElement(\n\t      oldBusinessObject,\n\t      newBusinessObject,\n\t      properties\n\t    );\n\n\t    // initialize custom BPMN extensions\n\t    if (target.eventDefinitionType) {\n\n\t      // only initialize with new eventDefinition\n\t      // if we did not set an event definition yet,\n\t      // i.e. because we copied it\n\t      if (!hasEventDefinition$1(newBusinessObject, target.eventDefinitionType)) {\n\t        newElement.eventDefinitionType = target.eventDefinitionType;\n\t        newElement.eventDefinitionAttrs = target.eventDefinitionAttrs;\n\t      }\n\t    }\n\n\t    if (is$1(oldBusinessObject, 'bpmn:Activity')) {\n\n\t      if (isSubProcess(oldBusinessObject)) {\n\n\t        // no toggeling, so keep old state\n\t        newElement.isExpanded = isExpanded(oldBusinessObject);\n\t      }\n\n\t      // else if property is explicitly set, use it\n\t      else if (target && has(target, 'isExpanded')) {\n\t        newElement.isExpanded = target.isExpanded;\n\t      }\n\n\t      // TODO: need also to respect min/max Size\n\t      // copy size, from an expanded subprocess to an expanded alternative subprocess\n\t      // except bpmn:Task, because Task is always expanded\n\t      if ((isExpanded(oldBusinessObject) && !is$1(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {\n\t        newElement.width = element.width;\n\t        newElement.height = element.height;\n\t      }\n\t    }\n\n\t    // remove children if not expanding sub process\n\t    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n\t      hints.moveChildren = false;\n\t    }\n\n\t    // transform collapsed/expanded pools\n\t    if (is$1(oldBusinessObject, 'bpmn:Participant')) {\n\n\t      // create expanded pool\n\t      if (target.isExpanded === true) {\n\t        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n\t      } else {\n\n\t        // remove children when transforming to collapsed pool\n\t        hints.moveChildren = false;\n\t      }\n\n\t      // apply same width and default height\n\t      newElement.width = element.width;\n\t      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;\n\t    }\n\n\t    newBusinessObject.name = oldBusinessObject.name;\n\n\t    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n\t    if (\n\t      isAny(oldBusinessObject, [\n\t        'bpmn:ExclusiveGateway',\n\t        'bpmn:InclusiveGateway',\n\t        'bpmn:Activity'\n\t      ]) &&\n\t      isAny(newBusinessObject, [\n\t        'bpmn:ExclusiveGateway',\n\t        'bpmn:InclusiveGateway',\n\t        'bpmn:Activity'\n\t      ])\n\t    ) {\n\t      newBusinessObject.default = oldBusinessObject.default;\n\t    }\n\n\t    if (\n\t      target.host &&\n\t      !is$1(oldBusinessObject, 'bpmn:BoundaryEvent') &&\n\t      is$1(newBusinessObject, 'bpmn:BoundaryEvent')\n\t    ) {\n\t      newElement.host = target.host;\n\t    }\n\n\t    newElement.di = {};\n\n\t    // fill and stroke will be set to DI\n\t    copyProperties$1(oldBusinessObject.di, newElement.di, [\n\t      'fill',\n\t      'stroke'\n\t    ]);\n\n\t    newElement = replace.replaceElement(element, newElement, hints);\n\n\t    if (hints.select !== false) {\n\t      selection.select(newElement);\n\t    }\n\n\t    return newElement;\n\t  }\n\n\t  this.replaceElement = replaceElement;\n\t}\n\n\tBpmnReplace.$inject = [\n\t  'bpmnFactory',\n\t  'elementFactory',\n\t  'moddleCopy',\n\t  'modeling',\n\t  'replace',\n\t  'selection'\n\t];\n\n\n\tfunction isSubProcess(bo) {\n\t  return is$1(bo, 'bpmn:SubProcess');\n\t}\n\n\tfunction hasEventDefinition$1(element, type) {\n\n\t  var bo = getBusinessObject(element);\n\n\t  return type && bo.get('eventDefinitions').some(function(definition) {\n\t    return is$1(definition, type);\n\t  });\n\t}\n\n\t/**\n\t * Compute intersection between two arrays.\n\t */\n\tfunction intersection(a1, a2) {\n\t  return a1.filter(function(el) {\n\t    return a2.indexOf(el) !== -1;\n\t  });\n\t}\n\n\tvar ReplaceModule$1 = {\n\t  __depends__: [\n\t    CopyPasteModule$1,\n\t    ReplaceModule,\n\t    SelectionModule\n\t  ],\n\t  bpmnReplace: [ 'type', BpmnReplace ]\n\t};\n\n\t/**\n\t * Returns true, if an element is from a different type\n\t * than a target definition. Takes into account the type,\n\t * event definition type and triggeredByEvent property.\n\t *\n\t * @param {djs.model.Base} element\n\t *\n\t * @return {boolean}\n\t */\n\tfunction isDifferentType(element) {\n\n\t  return function(entry) {\n\t    var target = entry.target;\n\n\t    var businessObject = getBusinessObject(element),\n\t        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n\n\t    var isTypeEqual = businessObject.$type === target.type;\n\n\t    var isEventDefinitionEqual = (\n\t      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType\n\t    );\n\n\t    var isTriggeredByEventEqual = (\n\t      businessObject.triggeredByEvent === target.triggeredByEvent\n\t    );\n\n\t    var isExpandedEqual = (\n\t      target.isExpanded === undefined ||\n\t      target.isExpanded === isExpanded(businessObject)\n\t    );\n\n\t    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n\t  };\n\t}\n\n\tvar START_EVENT = [\n\t  {\n\t    label: 'Start Event',\n\t    actionName: 'replace-with-none-start',\n\t    className: 'bpmn-icon-start-event-none',\n\t    target: {\n\t      type: 'bpmn:StartEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Intermediate Throw Event',\n\t    actionName: 'replace-with-none-intermediate-throwing',\n\t    className: 'bpmn-icon-intermediate-event-none',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'End Event',\n\t    actionName: 'replace-with-none-end',\n\t    className: 'bpmn-icon-end-event-none',\n\t    target: {\n\t      type: 'bpmn:EndEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message Start Event',\n\t    actionName: 'replace-with-message-start',\n\t    className: 'bpmn-icon-start-event-message',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Start Event',\n\t    actionName: 'replace-with-timer-start',\n\t    className: 'bpmn-icon-start-event-timer',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Start Event',\n\t    actionName: 'replace-with-conditional-start',\n\t    className: 'bpmn-icon-start-event-condition',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Start Event',\n\t    actionName: 'replace-with-signal-start',\n\t    className: 'bpmn-icon-start-event-signal',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  }\n\t];\n\n\tvar START_EVENT_SUB_PROCESS = [\n\t  {\n\t    label: 'Start Event',\n\t    actionName: 'replace-with-none-start',\n\t    className: 'bpmn-icon-start-event-none',\n\t    target: {\n\t      type: 'bpmn:StartEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Intermediate Throw Event',\n\t    actionName: 'replace-with-none-intermediate-throwing',\n\t    className: 'bpmn-icon-intermediate-event-none',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'End Event',\n\t    actionName: 'replace-with-none-end',\n\t    className: 'bpmn-icon-end-event-none',\n\t    target: {\n\t      type: 'bpmn:EndEvent'\n\t    }\n\t  }\n\t];\n\n\tvar INTERMEDIATE_EVENT = [\n\t  {\n\t    label: 'Start Event',\n\t    actionName: 'replace-with-none-start',\n\t    className: 'bpmn-icon-start-event-none',\n\t    target: {\n\t      type: 'bpmn:StartEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Intermediate Throw Event',\n\t    actionName: 'replace-with-none-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-none',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'End Event',\n\t    actionName: 'replace-with-none-end',\n\t    className: 'bpmn-icon-end-event-none',\n\t    target: {\n\t      type: 'bpmn:EndEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message Intermediate Catch Event',\n\t    actionName: 'replace-with-message-intermediate-catch',\n\t    className: 'bpmn-icon-intermediate-event-catch-message',\n\t    target: {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message Intermediate Throw Event',\n\t    actionName: 'replace-with-message-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-throw-message',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Intermediate Catch Event',\n\t    actionName: 'replace-with-timer-intermediate-catch',\n\t    className: 'bpmn-icon-intermediate-event-catch-timer',\n\t    target: {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation Intermediate Throw Event',\n\t    actionName: 'replace-with-escalation-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-throw-escalation',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Intermediate Catch Event',\n\t    actionName: 'replace-with-conditional-intermediate-catch',\n\t    className: 'bpmn-icon-intermediate-event-catch-condition',\n\t    target: {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Link Intermediate Catch Event',\n\t    actionName: 'replace-with-link-intermediate-catch',\n\t    className: 'bpmn-icon-intermediate-event-catch-link',\n\t    target: {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: 'bpmn:LinkEventDefinition',\n\t      eventDefinitionAttrs: {\n\t        name: ''\n\t      }\n\t    }\n\t  },\n\t  {\n\t    label: 'Link Intermediate Throw Event',\n\t    actionName: 'replace-with-link-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-throw-link',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent',\n\t      eventDefinitionType: 'bpmn:LinkEventDefinition',\n\t      eventDefinitionAttrs: {\n\t        name: ''\n\t      }\n\t    }\n\t  },\n\t  {\n\t    label: 'Compensation Intermediate Throw Event',\n\t    actionName: 'replace-with-compensation-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-throw-compensation',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent',\n\t      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Intermediate Catch Event',\n\t    actionName: 'replace-with-signal-intermediate-catch',\n\t    className: 'bpmn-icon-intermediate-event-catch-signal',\n\t    target: {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Intermediate Throw Event',\n\t    actionName: 'replace-with-signal-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-throw-signal',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  }\n\t];\n\n\tvar END_EVENT = [\n\t  {\n\t    label: 'Start Event',\n\t    actionName: 'replace-with-none-start',\n\t    className: 'bpmn-icon-start-event-none',\n\t    target: {\n\t      type: 'bpmn:StartEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Intermediate Throw Event',\n\t    actionName: 'replace-with-none-intermediate-throw',\n\t    className: 'bpmn-icon-intermediate-event-none',\n\t    target: {\n\t      type: 'bpmn:IntermediateThrowEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'End Event',\n\t    actionName: 'replace-with-none-end',\n\t    className: 'bpmn-icon-end-event-none',\n\t    target: {\n\t      type: 'bpmn:EndEvent'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message End Event',\n\t    actionName: 'replace-with-message-end',\n\t    className: 'bpmn-icon-end-event-message',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation End Event',\n\t    actionName: 'replace-with-escalation-end',\n\t    className: 'bpmn-icon-end-event-escalation',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Error End Event',\n\t    actionName: 'replace-with-error-end',\n\t    className: 'bpmn-icon-end-event-error',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Cancel End Event',\n\t    actionName: 'replace-with-cancel-end',\n\t    className: 'bpmn-icon-end-event-cancel',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:CancelEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Compensation End Event',\n\t    actionName: 'replace-with-compensation-end',\n\t    className: 'bpmn-icon-end-event-compensation',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal End Event',\n\t    actionName: 'replace-with-signal-end',\n\t    className: 'bpmn-icon-end-event-signal',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Terminate End Event',\n\t    actionName: 'replace-with-terminate-end',\n\t    className: 'bpmn-icon-end-event-terminate',\n\t    target: {\n\t      type: 'bpmn:EndEvent',\n\t      eventDefinitionType: 'bpmn:TerminateEventDefinition'\n\t    }\n\t  }\n\t];\n\n\tvar GATEWAY = [\n\t  {\n\t    label: 'Exclusive Gateway',\n\t    actionName: 'replace-with-exclusive-gateway',\n\t    className: 'bpmn-icon-gateway-xor',\n\t    target: {\n\t      type: 'bpmn:ExclusiveGateway'\n\t    }\n\t  },\n\t  {\n\t    label: 'Parallel Gateway',\n\t    actionName: 'replace-with-parallel-gateway',\n\t    className: 'bpmn-icon-gateway-parallel',\n\t    target: {\n\t      type: 'bpmn:ParallelGateway'\n\t    }\n\t  },\n\t  {\n\t    label: 'Inclusive Gateway',\n\t    actionName: 'replace-with-inclusive-gateway',\n\t    className: 'bpmn-icon-gateway-or',\n\t    target: {\n\t      type: 'bpmn:InclusiveGateway'\n\t    }\n\t  },\n\t  {\n\t    label: 'Complex Gateway',\n\t    actionName: 'replace-with-complex-gateway',\n\t    className: 'bpmn-icon-gateway-complex',\n\t    target: {\n\t      type: 'bpmn:ComplexGateway'\n\t    }\n\t  },\n\t  {\n\t    label: 'Event based Gateway',\n\t    actionName: 'replace-with-event-based-gateway',\n\t    className: 'bpmn-icon-gateway-eventbased',\n\t    target: {\n\t      type: 'bpmn:EventBasedGateway',\n\t      instantiate: false,\n\t      eventGatewayType: 'Exclusive'\n\t    }\n\t  }\n\n\t  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194\n\t  // {\n\t  //   label: 'Event based instantiating Gateway',\n\t  //   actionName: 'replace-with-exclusive-event-based-gateway',\n\t  //   className: 'bpmn-icon-exclusive-event-based',\n\t  //   target: {\n\t  //     type: 'bpmn:EventBasedGateway'\n\t  //   },\n\t  //   options: {\n\t  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }\n\t  //   }\n\t  // },\n\t  // {\n\t  //   label: 'Parallel Event based instantiating Gateway',\n\t  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',\n\t  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',\n\t  //   target: {\n\t  //     type: 'bpmn:EventBasedGateway'\n\t  //   },\n\t  //   options: {\n\t  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }\n\t  //   }\n\t  // }\n\t];\n\n\tvar SUBPROCESS_EXPANDED = [\n\t  {\n\t    label: 'Transaction',\n\t    actionName: 'replace-with-transaction',\n\t    className: 'bpmn-icon-transaction',\n\t    target: {\n\t      type: 'bpmn:Transaction',\n\t      isExpanded: true\n\t    }\n\t  },\n\t  {\n\t    label: 'Event Sub Process',\n\t    actionName: 'replace-with-event-subprocess',\n\t    className: 'bpmn-icon-event-subprocess-expanded',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      triggeredByEvent: true,\n\t      isExpanded: true\n\t    }\n\t  },\n\t  {\n\t    label: 'Sub Process (collapsed)',\n\t    actionName: 'replace-with-collapsed-subprocess',\n\t    className: 'bpmn-icon-subprocess-collapsed',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      isExpanded: false\n\t    }\n\t  }\n\t];\n\n\tvar TRANSACTION = [\n\t  {\n\t    label: 'Sub Process',\n\t    actionName: 'replace-with-subprocess',\n\t    className: 'bpmn-icon-subprocess-expanded',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      isExpanded: true\n\t    }\n\t  },\n\t  {\n\t    label: 'Event Sub Process',\n\t    actionName: 'replace-with-event-subprocess',\n\t    className: 'bpmn-icon-event-subprocess-expanded',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      triggeredByEvent: true,\n\t      isExpanded: true\n\t    }\n\t  }\n\t];\n\n\tvar EVENT_SUB_PROCESS = [\n\t  {\n\t    label: 'Sub Process',\n\t    actionName: 'replace-with-subprocess',\n\t    className: 'bpmn-icon-subprocess-expanded',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      isExpanded: true\n\t    }\n\t  },\n\t  {\n\t    label: 'Transaction',\n\t    actionName: 'replace-with-transaction',\n\t    className: 'bpmn-icon-transaction',\n\t    target: {\n\t      type: 'bpmn:Transaction',\n\t      isExpanded: true\n\t    }\n\t  }\n\t];\n\n\tvar TASK = [\n\t  {\n\t    label: 'Task',\n\t    actionName: 'replace-with-task',\n\t    className: 'bpmn-icon-task',\n\t    target: {\n\t      type: 'bpmn:Task'\n\t    }\n\t  },\n\t  {\n\t    label: 'Send Task',\n\t    actionName: 'replace-with-send-task',\n\t    className: 'bpmn-icon-send',\n\t    target: {\n\t      type: 'bpmn:SendTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Receive Task',\n\t    actionName: 'replace-with-receive-task',\n\t    className: 'bpmn-icon-receive',\n\t    target: {\n\t      type: 'bpmn:ReceiveTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'User Task',\n\t    actionName: 'replace-with-user-task',\n\t    className: 'bpmn-icon-user',\n\t    target: {\n\t      type: 'bpmn:UserTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Manual Task',\n\t    actionName: 'replace-with-manual-task',\n\t    className: 'bpmn-icon-manual',\n\t    target: {\n\t      type: 'bpmn:ManualTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Business Rule Task',\n\t    actionName: 'replace-with-rule-task',\n\t    className: 'bpmn-icon-business-rule',\n\t    target: {\n\t      type: 'bpmn:BusinessRuleTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Service Task',\n\t    actionName: 'replace-with-service-task',\n\t    className: 'bpmn-icon-service',\n\t    target: {\n\t      type: 'bpmn:ServiceTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Script Task',\n\t    actionName: 'replace-with-script-task',\n\t    className: 'bpmn-icon-script',\n\t    target: {\n\t      type: 'bpmn:ScriptTask'\n\t    }\n\t  },\n\t  {\n\t    label: 'Call Activity',\n\t    actionName: 'replace-with-call-activity',\n\t    className: 'bpmn-icon-call-activity',\n\t    target: {\n\t      type: 'bpmn:CallActivity'\n\t    }\n\t  },\n\t  {\n\t    label: 'Sub Process (collapsed)',\n\t    actionName: 'replace-with-collapsed-subprocess',\n\t    className: 'bpmn-icon-subprocess-collapsed',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      isExpanded: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Sub Process (expanded)',\n\t    actionName: 'replace-with-expanded-subprocess',\n\t    className: 'bpmn-icon-subprocess-expanded',\n\t    target: {\n\t      type: 'bpmn:SubProcess',\n\t      isExpanded: true\n\t    }\n\t  }\n\t];\n\n\tvar BOUNDARY_EVENT = [\n\t  {\n\t    label: 'Message Boundary Event',\n\t    actionName: 'replace-with-message-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-message',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Boundary Event',\n\t    actionName: 'replace-with-timer-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-timer',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation Boundary Event',\n\t    actionName: 'replace-with-escalation-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-escalation',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Boundary Event',\n\t    actionName: 'replace-with-conditional-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-condition',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Error Boundary Event',\n\t    actionName: 'replace-with-error-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-error',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Cancel Boundary Event',\n\t    actionName: 'replace-with-cancel-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-cancel',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:CancelEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Boundary Event',\n\t    actionName: 'replace-with-signal-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-signal',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Compensation Boundary Event',\n\t    actionName: 'replace-with-compensation-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-compensation',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message Boundary Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-message-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition',\n\t      cancelActivity: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Boundary Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-timer-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition',\n\t      cancelActivity: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation Boundary Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-escalation-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition',\n\t      cancelActivity: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Boundary Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-conditional-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n\t      cancelActivity: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Boundary Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-signal-boundary',\n\t    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',\n\t    target: {\n\t      type: 'bpmn:BoundaryEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition',\n\t      cancelActivity: false\n\t    }\n\t  }\n\t];\n\n\tvar EVENT_SUB_PROCESS_START_EVENT = [\n\t  {\n\t    label: 'Message Start Event',\n\t    actionName: 'replace-with-message-start',\n\t    className: 'bpmn-icon-start-event-message',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Start Event',\n\t    actionName: 'replace-with-timer-start',\n\t    className: 'bpmn-icon-start-event-timer',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Start Event',\n\t    actionName: 'replace-with-conditional-start',\n\t    className: 'bpmn-icon-start-event-condition',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Start Event',\n\t    actionName: 'replace-with-signal-start',\n\t    className: 'bpmn-icon-start-event-signal',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Error Start Event',\n\t    actionName: 'replace-with-error-start',\n\t    className: 'bpmn-icon-start-event-error',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation Start Event',\n\t    actionName: 'replace-with-escalation-start',\n\t    className: 'bpmn-icon-start-event-escalation',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Compensation Start Event',\n\t    actionName: 'replace-with-compensation-start',\n\t    className: 'bpmn-icon-start-event-compensation',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n\t    }\n\t  },\n\t  {\n\t    label: 'Message Start Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-message-start',\n\t    className: 'bpmn-icon-start-event-non-interrupting-message',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:MessageEventDefinition',\n\t      isInterrupting: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Timer Start Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-timer-start',\n\t    className: 'bpmn-icon-start-event-non-interrupting-timer',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:TimerEventDefinition',\n\t      isInterrupting: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Conditional Start Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-conditional-start',\n\t    className: 'bpmn-icon-start-event-non-interrupting-condition',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n\t      isInterrupting: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Signal Start Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-signal-start',\n\t    className: 'bpmn-icon-start-event-non-interrupting-signal',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:SignalEventDefinition',\n\t      isInterrupting: false\n\t    }\n\t  },\n\t  {\n\t    label: 'Escalation Start Event (non-interrupting)',\n\t    actionName: 'replace-with-non-interrupting-escalation-start',\n\t    className: 'bpmn-icon-start-event-non-interrupting-escalation',\n\t    target: {\n\t      type: 'bpmn:StartEvent',\n\t      eventDefinitionType: 'bpmn:EscalationEventDefinition',\n\t      isInterrupting: false\n\t    }\n\t  }\n\t];\n\n\tvar SEQUENCE_FLOW = [\n\t  {\n\t    label: 'Sequence Flow',\n\t    actionName: 'replace-with-sequence-flow',\n\t    className: 'bpmn-icon-connection'\n\t  },\n\t  {\n\t    label: 'Default Flow',\n\t    actionName: 'replace-with-default-flow',\n\t    className: 'bpmn-icon-default-flow'\n\t  },\n\t  {\n\t    label: 'Conditional Flow',\n\t    actionName: 'replace-with-conditional-flow',\n\t    className: 'bpmn-icon-conditional-flow'\n\t  }\n\t];\n\n\tvar PARTICIPANT = [\n\t  {\n\t    label: 'Expanded Pool',\n\t    actionName: 'replace-with-expanded-pool',\n\t    className: 'bpmn-icon-participant',\n\t    target: {\n\t      type: 'bpmn:Participant',\n\t      isExpanded: true\n\t    }\n\t  },\n\t  {\n\t    label: 'Collapsed Pool',\n\t    actionName: 'replace-with-collapsed-pool',\n\n\t    // TODO(@janstuemmel): maybe design new icon\n\t    className: 'bpmn-icon-lane',\n\t    target: {\n\t      type: 'bpmn:Participant',\n\t      isExpanded: false\n\t    }\n\t  }\n\t];\n\n\t/**\n\t * This module is an element agnostic replace menu provider for the popup menu.\n\t */\n\tfunction ReplaceMenuProvider(\n\t    popupMenu, modeling, moddle,\n\t    bpmnReplace, rules, translate) {\n\n\t  this._popupMenu = popupMenu;\n\t  this._modeling = modeling;\n\t  this._moddle = moddle;\n\t  this._bpmnReplace = bpmnReplace;\n\t  this._rules = rules;\n\t  this._translate = translate;\n\n\t  this.register();\n\t}\n\n\tReplaceMenuProvider.$inject = [\n\t  'popupMenu',\n\t  'modeling',\n\t  'moddle',\n\t  'bpmnReplace',\n\t  'rules',\n\t  'translate'\n\t];\n\n\n\t/**\n\t * Register replace menu provider in the popup menu\n\t */\n\tReplaceMenuProvider.prototype.register = function() {\n\t  this._popupMenu.registerProvider('bpmn-replace', this);\n\t};\n\n\n\t/**\n\t * Get all entries from replaceOptions for the given element and apply filters\n\t * on them. Get for example only elements, which are different from the current one.\n\t *\n\t * @param {djs.model.Base} element\n\t *\n\t * @return {Array<Object>} a list of menu entry items\n\t */\n\tReplaceMenuProvider.prototype.getEntries = function(element) {\n\n\t  var businessObject = element.businessObject;\n\n\t  var rules = this._rules;\n\n\t  var entries;\n\n\t  if (!rules.allowed('shape.replace', { element: element })) {\n\t    return [];\n\t  }\n\n\t  var differentType = isDifferentType(element);\n\n\t  // start events outside sub processes\n\t  if (is$1(businessObject, 'bpmn:StartEvent') && !is$1(businessObject.$parent, 'bpmn:SubProcess')) {\n\n\t    entries = filter(START_EVENT, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // expanded/collapsed pools\n\t  if (is$1(businessObject, 'bpmn:Participant')) {\n\n\t    entries = filter(PARTICIPANT, function(entry) {\n\t      return isExpanded(businessObject) !== entry.target.isExpanded;\n\t    });\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // start events inside event sub processes\n\t  if (is$1(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {\n\t    entries = filter(EVENT_SUB_PROCESS_START_EVENT, function(entry) {\n\n\t      var target = entry.target;\n\n\t      var isInterrupting = target.isInterrupting !== false;\n\n\t      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;\n\n\t      // filters elements which types and event definition are equal but have have different interrupting types\n\t      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;\n\n\t    });\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // start events inside sub processes\n\t  if (is$1(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)\n\t      && is$1(businessObject.$parent, 'bpmn:SubProcess')) {\n\t    entries = filter(START_EVENT_SUB_PROCESS, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // end events\n\t  if (is$1(businessObject, 'bpmn:EndEvent')) {\n\n\t    entries = filter(END_EVENT, function(entry) {\n\t      var target = entry.target;\n\n\t      // hide cancel end events outside transactions\n\t      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is$1(businessObject.$parent, 'bpmn:Transaction')) {\n\t        return false;\n\t      }\n\n\t      return differentType(entry);\n\t    });\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // boundary events\n\t  if (is$1(businessObject, 'bpmn:BoundaryEvent')) {\n\n\t    entries = filter(BOUNDARY_EVENT, function(entry) {\n\n\t      var target = entry.target;\n\n\t      if (target.eventDefinition == 'bpmn:CancelEventDefinition' &&\n\t         !is$1(businessObject.attachedToRef, 'bpmn:Transaction')) {\n\t        return false;\n\t      }\n\t      var cancelActivity = target.cancelActivity !== false;\n\n\t      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;\n\n\t      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;\n\t    });\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // intermediate events\n\t  if (is$1(businessObject, 'bpmn:IntermediateCatchEvent') ||\n\t      is$1(businessObject, 'bpmn:IntermediateThrowEvent')) {\n\n\t    entries = filter(INTERMEDIATE_EVENT, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // gateways\n\t  if (is$1(businessObject, 'bpmn:Gateway')) {\n\n\t    entries = filter(GATEWAY, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // transactions\n\t  if (is$1(businessObject, 'bpmn:Transaction')) {\n\n\t    entries = filter(TRANSACTION, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // expanded event sub processes\n\t  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {\n\n\t    entries = filter(EVENT_SUB_PROCESS, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // expanded sub processes\n\t  if (is$1(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {\n\n\t    entries = filter(SUBPROCESS_EXPANDED, differentType);\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // collapsed ad hoc sub processes\n\t  if (is$1(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {\n\n\t    entries = filter(TASK, function(entry) {\n\n\t      var target = entry.target;\n\n\t      var isTargetSubProcess = target.type === 'bpmn:SubProcess';\n\n\t      var isTargetExpanded = target.isExpanded === true;\n\n\t      return isDifferentType(element) && (!isTargetSubProcess || isTargetExpanded);\n\t    });\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  // sequence flows\n\t  if (is$1(businessObject, 'bpmn:SequenceFlow')) {\n\t    return this._createSequenceFlowEntries(element, SEQUENCE_FLOW);\n\t  }\n\n\t  // flow nodes\n\t  if (is$1(businessObject, 'bpmn:FlowNode')) {\n\t    entries = filter(TASK, differentType);\n\n\t    // collapsed SubProcess can not be replaced with itself\n\t    if (is$1(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {\n\t      entries = filter(entries, function(entry) {\n\t        return entry.label !== 'Sub Process (collapsed)';\n\t      });\n\t    }\n\n\t    return this._createEntries(element, entries);\n\t  }\n\n\t  return [];\n\t};\n\n\n\t/**\n\t * Get a list of header items for the given element. This includes buttons\n\t * for multi instance markers and for the ad hoc marker.\n\t *\n\t * @param {djs.model.Base} element\n\t *\n\t * @return {Array<Object>} a list of menu entry items\n\t */\n\tReplaceMenuProvider.prototype.getHeaderEntries = function(element) {\n\n\t  var headerEntries = [];\n\n\t  if (is$1(element, 'bpmn:Activity') && !isEventSubProcess(element)) {\n\t    headerEntries = headerEntries.concat(this._getLoopEntries(element));\n\t  }\n\n\t  if (is$1(element, 'bpmn:SubProcess') &&\n\t      !is$1(element, 'bpmn:Transaction') &&\n\t      !isEventSubProcess(element)) {\n\t    headerEntries.push(this._getAdHocEntry(element));\n\t  }\n\n\t  return headerEntries;\n\t};\n\n\n\t/**\n\t * Creates an array of menu entry objects for a given element and filters the replaceOptions\n\t * according to a filter function.\n\t *\n\t * @param  {djs.model.Base} element\n\t * @param  {Object} replaceOptions\n\t *\n\t * @return {Array<Object>} a list of menu items\n\t */\n\tReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {\n\t  var menuEntries = [];\n\n\t  var self = this;\n\n\t  forEach(replaceOptions, function(definition) {\n\t    var entry = self._createMenuEntry(definition, element);\n\n\t    menuEntries.push(entry);\n\t  });\n\n\t  return menuEntries;\n\t};\n\n\t/**\n\t * Creates an array of menu entry objects for a given sequence flow.\n\t *\n\t * @param  {djs.model.Base} element\n\t * @param  {Object} replaceOptions\n\n\t * @return {Array<Object>} a list of menu items\n\t */\n\tReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {\n\n\t  var businessObject = getBusinessObject(element);\n\n\t  var menuEntries = [];\n\n\t  var modeling = this._modeling,\n\t      moddle = this._moddle;\n\n\t  var self = this;\n\n\t  forEach(replaceOptions, function(entry) {\n\n\t    switch (entry.actionName) {\n\t    case 'replace-with-default-flow':\n\t      if (businessObject.sourceRef.default !== businessObject &&\n\t            (is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||\n\t             is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||\n\t             is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||\n\t             is$1(businessObject.sourceRef, 'bpmn:Activity'))) {\n\n\t        menuEntries.push(self._createMenuEntry(entry, element, function() {\n\t          modeling.updateProperties(element.source, { default: businessObject });\n\t        }));\n\t      }\n\t      break;\n\t    case 'replace-with-conditional-flow':\n\t      if (!businessObject.conditionExpression && is$1(businessObject.sourceRef, 'bpmn:Activity')) {\n\n\t        menuEntries.push(self._createMenuEntry(entry, element, function() {\n\t          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });\n\n\t          modeling.updateProperties(element, { conditionExpression: conditionExpression });\n\t        }));\n\t      }\n\t      break;\n\t    default:\n\n\t      // default flows\n\t      if (is$1(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {\n\t        return menuEntries.push(self._createMenuEntry(entry, element, function() {\n\t          modeling.updateProperties(element, { conditionExpression: undefined });\n\t        }));\n\t      }\n\n\t      // conditional flows\n\t      if ((is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||\n\t           is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||\n\t           is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||\n\t           is$1(businessObject.sourceRef, 'bpmn:Activity')) &&\n\t           businessObject.sourceRef.default === businessObject) {\n\n\t        return menuEntries.push(self._createMenuEntry(entry, element, function() {\n\t          modeling.updateProperties(element.source, { default: undefined });\n\t        }));\n\t      }\n\t    }\n\t  });\n\n\t  return menuEntries;\n\t};\n\n\n\t/**\n\t * Creates and returns a single menu entry item.\n\t *\n\t * @param  {Object} definition a single replace options definition object\n\t * @param  {djs.model.Base} element\n\t * @param  {Function} [action] an action callback function which gets called when\n\t *                             the menu entry is being triggered.\n\t *\n\t * @return {Object} menu entry item\n\t */\n\tReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {\n\t  var translate = this._translate;\n\t  var replaceElement = this._bpmnReplace.replaceElement;\n\n\t  var replaceAction = function() {\n\t    return replaceElement(element, definition.target);\n\t  };\n\n\t  action = action || replaceAction;\n\n\t  var menuEntry = {\n\t    label: translate(definition.label),\n\t    className: definition.className,\n\t    id: definition.actionName,\n\t    action: action\n\t  };\n\n\t  return menuEntry;\n\t};\n\n\t/**\n\t * Get a list of menu items containing buttons for multi instance markers\n\t *\n\t * @param  {djs.model.Base} element\n\t *\n\t * @return {Array<Object>} a list of menu items\n\t */\n\tReplaceMenuProvider.prototype._getLoopEntries = function(element) {\n\n\t  var self = this;\n\t  var translate = this._translate;\n\n\t  function toggleLoopEntry(event, entry) {\n\t    var loopCharacteristics;\n\n\t    if (entry.active) {\n\t      loopCharacteristics = undefined;\n\t    } else {\n\t      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);\n\n\t      if (entry.options.isSequential) {\n\t        loopCharacteristics.isSequential = entry.options.isSequential;\n\t      }\n\t    }\n\t    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });\n\t  }\n\n\t  var businessObject = getBusinessObject(element),\n\t      loopCharacteristics = businessObject.loopCharacteristics;\n\n\t  var isSequential,\n\t      isLoop,\n\t      isParallel;\n\n\t  if (loopCharacteristics) {\n\t    isSequential = loopCharacteristics.isSequential;\n\t    isLoop = loopCharacteristics.isSequential === undefined;\n\t    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;\n\t  }\n\n\n\t  var loopEntries = [\n\t    {\n\t      id: 'toggle-parallel-mi',\n\t      className: 'bpmn-icon-parallel-mi-marker',\n\t      title: translate('Parallel Multi Instance'),\n\t      active: isParallel,\n\t      action: toggleLoopEntry,\n\t      options: {\n\t        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n\t        isSequential: false\n\t      }\n\t    },\n\t    {\n\t      id: 'toggle-sequential-mi',\n\t      className: 'bpmn-icon-sequential-mi-marker',\n\t      title: translate('Sequential Multi Instance'),\n\t      active: isSequential,\n\t      action: toggleLoopEntry,\n\t      options: {\n\t        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n\t        isSequential: true\n\t      }\n\t    },\n\t    {\n\t      id: 'toggle-loop',\n\t      className: 'bpmn-icon-loop-marker',\n\t      title: translate('Loop'),\n\t      active: isLoop,\n\t      action: toggleLoopEntry,\n\t      options: {\n\t        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'\n\t      }\n\t    }\n\t  ];\n\t  return loopEntries;\n\t};\n\n\n\t/**\n\t * Get the menu items containing a button for the ad hoc marker\n\t *\n\t * @param  {djs.model.Base} element\n\t *\n\t * @return {Object} a menu item\n\t */\n\tReplaceMenuProvider.prototype._getAdHocEntry = function(element) {\n\t  var translate = this._translate;\n\t  var businessObject = getBusinessObject(element);\n\n\t  var isAdHoc = is$1(businessObject, 'bpmn:AdHocSubProcess');\n\n\t  var replaceElement = this._bpmnReplace.replaceElement;\n\n\t  var adHocEntry = {\n\t    id: 'toggle-adhoc',\n\t    className: 'bpmn-icon-ad-hoc-marker',\n\t    title: translate('Ad-hoc'),\n\t    active: isAdHoc,\n\t    action: function(event, entry) {\n\t      if (isAdHoc) {\n\t        return replaceElement(element, { type: 'bpmn:SubProcess' }, {\n\t          autoResize: false,\n\t          layoutConnection: false\n\t        });\n\t      } else {\n\t        return replaceElement(element, { type: 'bpmn:AdHocSubProcess' }, {\n\t          autoResize: false,\n\t          layoutConnection: false\n\t        });\n\t      }\n\t    }\n\t  };\n\n\t  return adHocEntry;\n\t};\n\n\tvar PopupMenuModule$1 = {\n\t  __depends__: [\n\t    PopupMenuModule,\n\t    ReplaceModule$1\n\t  ],\n\t  __init__: [ 'replaceMenuProvider' ],\n\t  replaceMenuProvider: [ 'type', ReplaceMenuProvider ]\n\t};\n\n\tvar max$2 = Math.max,\n\t    min$1 = Math.min;\n\n\tvar DEFAULT_CHILD_BOX_PADDING = 20;\n\n\n\t/**\n\t * Substract a TRBL from another\n\t *\n\t * @param  {TRBL} trblA\n\t * @param  {TRBL} trblB\n\t *\n\t * @return {TRBL}\n\t */\n\tfunction substractTRBL(trblA, trblB) {\n\t  return {\n\t    top: trblA.top - trblB.top,\n\t    right: trblA.right - trblB.right,\n\t    bottom: trblA.bottom - trblB.bottom,\n\t    left: trblA.left - trblB.left\n\t  };\n\t}\n\n\t/**\n\t * Resize the given bounds by the specified delta from a given anchor point.\n\t *\n\t * @param {Bounds} bounds the bounding box that should be resized\n\t * @param {string} direction in which the element is resized (nw, ne, se, sw)\n\t * @param {Point} delta of the resize operation\n\t *\n\t * @return {Bounds} resized bounding box\n\t */\n\tfunction resizeBounds(bounds, direction, delta) {\n\t  var dx = delta.x,\n\t      dy = delta.y;\n\n\t  var newBounds = {\n\t    x: bounds.x,\n\t    y: bounds.y,\n\t    width: bounds.width,\n\t    height: bounds.height\n\t  };\n\n\t  if (direction.indexOf('n') !== -1) {\n\t    newBounds.y = bounds.y + dy;\n\t    newBounds.height = bounds.height - dy;\n\t  } else if (direction.indexOf('s') !== -1) {\n\t    newBounds.height = bounds.height + dy;\n\t  }\n\n\t  if (direction.indexOf('e') !== -1) {\n\t    newBounds.width = bounds.width + dx;\n\t  } else if (direction.indexOf('w') !== -1) {\n\t    newBounds.x = bounds.x + dx;\n\t    newBounds.width = bounds.width - dx;\n\t  }\n\n\t  return newBounds;\n\t}\n\n\n\t/**\n\t * Resize the given bounds by applying the passed\n\t * { top, right, bottom, left } delta.\n\t *\n\t * @param {Bounds} bounds\n\t * @param {TRBL} trblResize\n\t *\n\t * @return {Bounds}\n\t */\n\tfunction resizeTRBL(bounds, resize) {\n\t  return {\n\t    x: bounds.x + (resize.left || 0),\n\t    y: bounds.y + (resize.top || 0),\n\t    width: bounds.width - (resize.left || 0) + (resize.right || 0),\n\t    height: bounds.height - (resize.top || 0) + (resize.bottom || 0)\n\t  };\n\t}\n\n\n\tfunction applyConstraints(attr, trbl, resizeConstraints) {\n\n\t  var value = trbl[attr],\n\t      minValue = resizeConstraints.min && resizeConstraints.min[attr],\n\t      maxValue = resizeConstraints.max && resizeConstraints.max[attr];\n\n\t  if (isNumber(minValue)) {\n\t    value = (/top|left/.test(attr) ? min$1 : max$2)(value, minValue);\n\t  }\n\n\t  if (isNumber(maxValue)) {\n\t    value = (/top|left/.test(attr) ? max$2 : min$1)(value, maxValue);\n\t  }\n\n\t  return value;\n\t}\n\n\tfunction ensureConstraints$1(currentBounds, resizeConstraints) {\n\n\t  if (!resizeConstraints) {\n\t    return currentBounds;\n\t  }\n\n\t  var currentTrbl = asTRBL(currentBounds);\n\n\t  return asBounds({\n\t    top: applyConstraints('top', currentTrbl, resizeConstraints),\n\t    right: applyConstraints('right', currentTrbl, resizeConstraints),\n\t    bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),\n\t    left: applyConstraints('left', currentTrbl, resizeConstraints)\n\t  });\n\t}\n\n\n\tfunction getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {\n\n\t  var currentBox = asTRBL(currentBounds);\n\n\t  var minBox = {\n\t    top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,\n\t    left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,\n\t    bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,\n\t    right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right\n\t  };\n\n\t  var childrenBox = childrenBounds ? asTRBL(childrenBounds) : minBox;\n\n\t  var combinedBox = {\n\t    top: min$1(minBox.top, childrenBox.top),\n\t    left: min$1(minBox.left, childrenBox.left),\n\t    bottom: max$2(minBox.bottom, childrenBox.bottom),\n\t    right: max$2(minBox.right, childrenBox.right)\n\t  };\n\n\t  return asBounds(combinedBox);\n\t}\n\n\tfunction asPadding(mayBePadding, defaultValue) {\n\t  if (typeof mayBePadding !== 'undefined') {\n\t    return mayBePadding;\n\t  } else {\n\t    return DEFAULT_CHILD_BOX_PADDING;\n\t  }\n\t}\n\n\tfunction addPadding(bbox, padding) {\n\t  var left, right, top, bottom;\n\n\t  if (typeof padding === 'object') {\n\t    left = asPadding(padding.left);\n\t    right = asPadding(padding.right);\n\t    top = asPadding(padding.top);\n\t    bottom = asPadding(padding.bottom);\n\t  } else {\n\t    left = right = top = bottom = asPadding(padding);\n\t  }\n\n\t  return {\n\t    x: bbox.x - left,\n\t    y: bbox.y - top,\n\t    width: bbox.width + left + right,\n\t    height: bbox.height + top + bottom\n\t  };\n\t}\n\n\n\t/**\n\t * Is the given element part of the resize\n\t * targets min boundary box?\n\t *\n\t * This is the default implementation which excludes\n\t * connections and labels.\n\t *\n\t * @param {djs.model.Base} element\n\t */\n\tfunction isBBoxChild(element) {\n\n\t  // exclude connections\n\t  if (element.waypoints) {\n\t    return false;\n\t  }\n\n\t  // exclude labels\n\t  if (element.type === 'label') {\n\t    return false;\n\t  }\n\n\t  return true;\n\t}\n\n\t/**\n\t * Return children bounding computed from a shapes children\n\t * or a list of prefiltered children.\n\t *\n\t * @param  {djs.model.Shape|Array<djs.model.Shape>} shapeOrChildren\n\t * @param  {number|Object} padding\n\t *\n\t * @return {Bounds}\n\t */\n\tfunction computeChildrenBBox(shapeOrChildren, padding) {\n\n\t  var elements;\n\n\t  // compute based on shape\n\t  if (shapeOrChildren.length === undefined) {\n\n\t    // grab all the children that are part of the\n\t    // parents children box\n\t    elements = filter(shapeOrChildren.children, isBBoxChild);\n\n\t  } else {\n\t    elements = shapeOrChildren;\n\t  }\n\n\t  if (elements.length) {\n\t    return addPadding(getBBox(elements), padding);\n\t  }\n\t}\n\n\tvar abs$3 = Math.abs;\n\n\n\tfunction getTRBLResize(oldBounds, newBounds) {\n\t  return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));\n\t}\n\n\n\tvar LANE_PARENTS = [\n\t  'bpmn:Participant',\n\t  'bpmn:Process',\n\t  'bpmn:SubProcess'\n\t];\n\n\tvar LANE_INDENTATION = 30;\n\n\n\t/**\n\t * Collect all lane shapes in the given paren\n\t *\n\t * @param  {djs.model.Shape} shape\n\t * @param  {Array<djs.model.Base>} [collectedShapes]\n\t *\n\t * @return {Array<djs.model.Base>}\n\t */\n\tfunction collectLanes(shape, collectedShapes) {\n\n\t  collectedShapes = collectedShapes || [];\n\n\t  shape.children.filter(function(s) {\n\t    if (is$1(s, 'bpmn:Lane')) {\n\t      collectLanes(s, collectedShapes);\n\n\t      collectedShapes.push(s);\n\t    }\n\t  });\n\n\t  return collectedShapes;\n\t}\n\n\n\t/**\n\t * Return the lane children of the given element.\n\t *\n\t * @param {djs.model.Shape} shape\n\t *\n\t * @return {Array<djs.model.Shape>}\n\t */\n\tfunction getChildLanes(shape) {\n\t  return shape.children.filter(function(c) {\n\t    return is$1(c, 'bpmn:Lane');\n\t  });\n\t}\n\n\n\t/**\n\t * Return the root element containing the given lane shape\n\t *\n\t * @param {djs.model.Shape} shape\n\t *\n\t * @return {djs.model.Shape}\n\t */\n\tfunction getLanesRoot(shape) {\n\t  return getParent$1(shape, LANE_PARENTS) || shape;\n\t}\n\n\n\t/**\n\t * Compute the required resize operations for lanes\n\t * adjacent to the given shape, assuming it will be\n\t * resized to the given new bounds.\n\t *\n\t * @param {djs.model.Shape} shape\n\t * @param {Bounds} newBounds\n\t *\n\t * @return {Array<Object>}\n\t */\n\tfunction computeLanesResize(shape, newBounds) {\n\n\t  var rootElement = getLanesRoot(shape);\n\n\t  var initialShapes = is$1(rootElement, 'bpmn:Process') ? [] : [ rootElement ];\n\n\t  var allLanes = collectLanes(rootElement, initialShapes),\n\t      shapeTrbl = asTRBL(shape),\n\t      shapeNewTrbl = asTRBL(newBounds),\n\t      trblResize = getTRBLResize(shape, newBounds),\n\t      resizeNeeded = [];\n\n\t  allLanes.forEach(function(other) {\n\n\t    if (other === shape) {\n\t      return;\n\t    }\n\n\t    var topResize = 0,\n\t        rightResize = trblResize.right,\n\t        bottomResize = 0,\n\t        leftResize = trblResize.left;\n\n\t    var otherTrbl = asTRBL(other);\n\n\t    if (trblResize.top) {\n\t      if (abs$3(otherTrbl.bottom - shapeTrbl.top) < 10) {\n\t        bottomResize = shapeNewTrbl.top - otherTrbl.bottom;\n\t      }\n\n\t      if (abs$3(otherTrbl.top - shapeTrbl.top) < 5) {\n\t        topResize = shapeNewTrbl.top - otherTrbl.top;\n\t      }\n\t    }\n\n\t    if (trblResize.bottom) {\n\t      if (abs$3(otherTrbl.top - shapeTrbl.bottom) < 10) {\n\t        topResize = shapeNewTrbl.bottom - otherTrbl.top;\n\t      }\n\n\t      if (abs$3(otherTrbl.bottom - shapeTrbl.bottom) < 5) {\n\t        bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;\n\t      }\n\t    }\n\n\t    if (topResize || rightResize || bottomResize || leftResize) {\n\n\t      resizeNeeded.push({\n\t        shape: other,\n\t        newBounds: resizeTRBL(other, {\n\t          top: topResize,\n\t          right: rightResize,\n\t          bottom: bottomResize,\n\t          left: leftResize\n\t        })\n\t      });\n\t    }\n\n\t  });\n\n\t  return resizeNeeded;\n\t}\n\n\t/**\n\t * A provider for BPMN 2.0 elements context pad\n\t */\n\tfunction ContextPadProvider(\n\t    config, injector, eventBus,\n\t    contextPad, modeling, elementFactory,\n\t    connect, create, popupMenu,\n\t    canvas, rules, translate) {\n\n\t  config = config || {};\n\n\t  contextPad.registerProvider(this);\n\n\t  this._contextPad = contextPad;\n\n\t  this._modeling = modeling;\n\n\t  this._elementFactory = elementFactory;\n\t  this._connect = connect;\n\t  this._create = create;\n\t  this._popupMenu = popupMenu;\n\t  this._canvas = canvas;\n\t  this._rules = rules;\n\t  this._translate = translate;\n\n\t  if (config.autoPlace !== false) {\n\t    this._autoPlace = injector.get('autoPlace', false);\n\t  }\n\n\t  eventBus.on('create.end', 250, function(event) {\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (!hasPrimaryModifier(event) || !contextPad.isOpen(shape)) {\n\t      return;\n\t    }\n\n\t    var entries = contextPad.getEntries(shape);\n\n\t    if (entries.replace) {\n\t      entries.replace.action.click(event, shape);\n\t    }\n\t  });\n\t}\n\n\tContextPadProvider.$inject = [\n\t  'config.contextPad',\n\t  'injector',\n\t  'eventBus',\n\t  'contextPad',\n\t  'modeling',\n\t  'elementFactory',\n\t  'connect',\n\t  'create',\n\t  'popupMenu',\n\t  'canvas',\n\t  'rules',\n\t  'translate'\n\t];\n\n\n\tContextPadProvider.prototype.getContextPadEntries = function(element) {\n\n\t  var contextPad = this._contextPad,\n\t      modeling = this._modeling,\n\n\t      elementFactory = this._elementFactory,\n\t      connect = this._connect,\n\t      create = this._create,\n\t      popupMenu = this._popupMenu,\n\t      canvas = this._canvas,\n\t      rules = this._rules,\n\t      autoPlace = this._autoPlace,\n\t      translate = this._translate;\n\n\t  var actions = {};\n\n\t  if (element.type === 'label') {\n\t    return actions;\n\t  }\n\n\t  var businessObject = element.businessObject;\n\n\t  function startConnect(event, element) {\n\t    connect.start(event, element);\n\t  }\n\n\t  function removeElement(e) {\n\t    modeling.removeElements([ element ]);\n\t  }\n\n\t  function getReplaceMenuPosition(element) {\n\n\t    var Y_OFFSET = 5;\n\n\t    var diagramContainer = canvas.getContainer(),\n\t        pad = contextPad.getPad(element).html;\n\n\t    var diagramRect = diagramContainer.getBoundingClientRect(),\n\t        padRect = pad.getBoundingClientRect();\n\n\t    var top = padRect.top - diagramRect.top;\n\t    var left = padRect.left - diagramRect.left;\n\n\t    var pos = {\n\t      x: left,\n\t      y: top + padRect.height + Y_OFFSET\n\t    };\n\n\t    return pos;\n\t  }\n\n\n\t  /**\n\t   * Create an append action\n\t   *\n\t   * @param {string} type\n\t   * @param {string} className\n\t   * @param {string} [title]\n\t   * @param {Object} [options]\n\t   *\n\t   * @return {Object} descriptor\n\t   */\n\t  function appendAction(type, className, title, options) {\n\n\t    if (typeof title !== 'string') {\n\t      options = title;\n\t      title = translate('Append {type}', { type: type.replace(/^bpmn:/, '') });\n\t    }\n\n\t    function appendStart(event, element) {\n\n\t      var shape = elementFactory.createShape(assign({ type: type }, options));\n\t      create.start(event, shape, {\n\t        source: element\n\t      });\n\t    }\n\n\n\t    var append = autoPlace ? function(event, element) {\n\t      var shape = elementFactory.createShape(assign({ type: type }, options));\n\n\t      autoPlace.append(element, shape);\n\t    } : appendStart;\n\n\n\t    return {\n\t      group: 'model',\n\t      className: className,\n\t      title: title,\n\t      action: {\n\t        dragstart: appendStart,\n\t        click: append\n\t      }\n\t    };\n\t  }\n\n\t  function splitLaneHandler(count) {\n\n\t    return function(event, element) {\n\n\t      // actual split\n\t      modeling.splitLane(element, count);\n\n\t      // refresh context pad after split to\n\t      // get rid of split icons\n\t      contextPad.open(element, true);\n\t    };\n\t  }\n\n\n\t  if (isAny(businessObject, [ 'bpmn:Lane', 'bpmn:Participant' ]) && isExpanded(businessObject)) {\n\n\t    var childLanes = getChildLanes(element);\n\n\t    assign(actions, {\n\t      'lane-insert-above': {\n\t        group: 'lane-insert-above',\n\t        className: 'bpmn-icon-lane-insert-above',\n\t        title: translate('Add Lane above'),\n\t        action: {\n\t          click: function(event, element) {\n\t            modeling.addLane(element, 'top');\n\t          }\n\t        }\n\t      }\n\t    });\n\n\t    if (childLanes.length < 2) {\n\n\t      if (element.height >= 120) {\n\t        assign(actions, {\n\t          'lane-divide-two': {\n\t            group: 'lane-divide',\n\t            className: 'bpmn-icon-lane-divide-two',\n\t            title: translate('Divide into two Lanes'),\n\t            action: {\n\t              click: splitLaneHandler(2)\n\t            }\n\t          }\n\t        });\n\t      }\n\n\t      if (element.height >= 180) {\n\t        assign(actions, {\n\t          'lane-divide-three': {\n\t            group: 'lane-divide',\n\t            className: 'bpmn-icon-lane-divide-three',\n\t            title: translate('Divide into three Lanes'),\n\t            action: {\n\t              click: splitLaneHandler(3)\n\t            }\n\t          }\n\t        });\n\t      }\n\t    }\n\n\t    assign(actions, {\n\t      'lane-insert-below': {\n\t        group: 'lane-insert-below',\n\t        className: 'bpmn-icon-lane-insert-below',\n\t        title: translate('Add Lane below'),\n\t        action: {\n\t          click: function(event, element) {\n\t            modeling.addLane(element, 'bottom');\n\t          }\n\t        }\n\t      }\n\t    });\n\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:FlowNode')) {\n\n\t    if (is$1(businessObject, 'bpmn:EventBasedGateway')) {\n\n\t      assign(actions, {\n\t        'append.receive-task': appendAction(\n\t          'bpmn:ReceiveTask',\n\t          'bpmn-icon-receive-task',\n\t          translate('Append ReceiveTask')\n\t        ),\n\t        'append.message-intermediate-event': appendAction(\n\t          'bpmn:IntermediateCatchEvent',\n\t          'bpmn-icon-intermediate-event-catch-message',\n\t          translate('Append MessageIntermediateCatchEvent'),\n\t          { eventDefinitionType: 'bpmn:MessageEventDefinition' }\n\t        ),\n\t        'append.timer-intermediate-event': appendAction(\n\t          'bpmn:IntermediateCatchEvent',\n\t          'bpmn-icon-intermediate-event-catch-timer',\n\t          translate('Append TimerIntermediateCatchEvent'),\n\t          { eventDefinitionType: 'bpmn:TimerEventDefinition' }\n\t        ),\n\t        'append.condition-intermediate-event': appendAction(\n\t          'bpmn:IntermediateCatchEvent',\n\t          'bpmn-icon-intermediate-event-catch-condition',\n\t          translate('Append ConditionIntermediateCatchEvent'),\n\t          { eventDefinitionType: 'bpmn:ConditionalEventDefinition' }\n\t        ),\n\t        'append.signal-intermediate-event': appendAction(\n\t          'bpmn:IntermediateCatchEvent',\n\t          'bpmn-icon-intermediate-event-catch-signal',\n\t          translate('Append SignalIntermediateCatchEvent'),\n\t          { eventDefinitionType: 'bpmn:SignalEventDefinition' }\n\t        )\n\t      });\n\t    } else\n\n\t    if (isEventType(businessObject, 'bpmn:BoundaryEvent', 'bpmn:CompensateEventDefinition')) {\n\n\t      assign(actions, {\n\t        'append.compensation-activity':\n\t            appendAction(\n\t              'bpmn:Task',\n\t              'bpmn-icon-task',\n\t              translate('Append compensation activity'),\n\t              {\n\t                isForCompensation: true\n\t              }\n\t            )\n\t      });\n\t    } else\n\n\t    if (!is$1(businessObject, 'bpmn:EndEvent') &&\n\t        !businessObject.isForCompensation &&\n\t        !isEventType(businessObject, 'bpmn:IntermediateThrowEvent', 'bpmn:LinkEventDefinition') &&\n\t        !isEventSubProcess(businessObject)) {\n\n\t      assign(actions, {\n\t        'append.end-event': appendAction(\n\t          'bpmn:EndEvent',\n\t          'bpmn-icon-end-event-none',\n\t          translate('Append EndEvent')\n\t        ),\n\t        'append.gateway': appendAction(\n\t          'bpmn:ExclusiveGateway',\n\t          'bpmn-icon-gateway-none',\n\t          translate('Append Gateway')\n\t        ),\n\t        'append.append-task': appendAction(\n\t          'bpmn:Task',\n\t          'bpmn-icon-task',\n\t          translate('Append Task')\n\t        ),\n\t        'append.intermediate-event': appendAction(\n\t          'bpmn:IntermediateThrowEvent',\n\t          'bpmn-icon-intermediate-event-none',\n\t          translate('Append Intermediate/Boundary Event')\n\t        )\n\t      });\n\t    }\n\t  }\n\n\t  if (!popupMenu.isEmpty(element, 'bpmn-replace')) {\n\n\t    // Replace menu entry\n\t    assign(actions, {\n\t      'replace': {\n\t        group: 'edit',\n\t        className: 'bpmn-icon-screw-wrench',\n\t        title: translate('Change type'),\n\t        action: {\n\t          click: function(event, element) {\n\n\t            var position = assign(getReplaceMenuPosition(element), {\n\t              cursor: { x: event.x, y: event.y }\n\t            });\n\n\t            popupMenu.open(element, 'bpmn-replace', position);\n\t          }\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  if (isAny(businessObject, [\n\t    'bpmn:FlowNode',\n\t    'bpmn:InteractionNode',\n\t    'bpmn:DataObjectReference',\n\t    'bpmn:DataStoreReference'\n\t  ])) {\n\n\t    assign(actions, {\n\t      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation'),\n\n\t      'connect': {\n\t        group: 'connect',\n\t        className: 'bpmn-icon-connection-multi',\n\t        title: translate('Connect using ' +\n\t                  (businessObject.isForCompensation ? '' : 'Sequence/MessageFlow or ') +\n\t                  'Association'),\n\t        action: {\n\t          click: startConnect,\n\t          dragstart: startConnect\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  if (isAny(businessObject, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {\n\t    assign(actions, {\n\t      'connect': {\n\t        group: 'connect',\n\t        className: 'bpmn-icon-connection-multi',\n\t        title: translate('Connect using DataInputAssociation'),\n\t        action: {\n\t          click: startConnect,\n\t          dragstart: startConnect\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:Group')) {\n\t    assign(actions, {\n\t      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation')\n\t    });\n\t  }\n\n\t  // delete element entry, only show if allowed by rules\n\t  var deleteAllowed = rules.allowed('elements.delete', { elements: [ element ] });\n\n\t  if (isArray(deleteAllowed)) {\n\n\t    // was the element returned as a deletion candidate?\n\t    deleteAllowed = deleteAllowed[0] === element;\n\t  }\n\n\t  if (deleteAllowed) {\n\t    assign(actions, {\n\t      'delete': {\n\t        group: 'edit',\n\t        className: 'bpmn-icon-trash',\n\t        title: translate('Remove'),\n\t        action: {\n\t          click: removeElement\n\t        }\n\t      }\n\t    });\n\t  }\n\n\t  return actions;\n\t};\n\n\n\t// helpers /////////\n\n\tfunction isEventType(eventBo, type, definition) {\n\n\t  var isType = eventBo.$instanceOf(type);\n\t  var isDefinition = false;\n\n\t  var definitions = eventBo.eventDefinitions || [];\n\t  forEach(definitions, function(def) {\n\t    if (def.$type === definition) {\n\t      isDefinition = true;\n\t    }\n\t  });\n\n\t  return isType && isDefinition;\n\t}\n\n\tvar ContextPadModule$1 = {\n\t  __depends__: [\n\t    DirectEditingModule,\n\t    ContextPadModule,\n\t    SelectionModule,\n\t    ConnectModule,\n\t    CreateModule,\n\t    PopupMenuModule$1\n\t  ],\n\t  __init__: [ 'contextPadProvider' ],\n\t  contextPadProvider: [ 'type', ContextPadProvider ]\n\t};\n\n\tvar AXIS_DIMENSIONS = {\n\t  horizontal: [ 'x', 'width' ],\n\t  vertical: [ 'y', 'height' ]\n\t};\n\n\tvar THRESHOLD$1 = 5;\n\n\n\t/**\n\t * Groups and filters elements and then trigger even distribution.\n\t */\n\tfunction DistributeElements(modeling) {\n\t  this._modeling = modeling;\n\n\t  this._filters = [];\n\n\t  // register filter for filtering big elements\n\t  this.registerFilter(function(elements, axis, dimension) {\n\t    var elementsSize = 0,\n\t        numOfShapes = 0,\n\t        avgDimension;\n\n\t    forEach(elements, function(element) {\n\t      if (element.waypoints || element.labelTarget) {\n\t        return;\n\t      }\n\n\t      elementsSize += element[dimension];\n\n\t      numOfShapes += 1;\n\t    });\n\n\t    avgDimension = Math.round(elementsSize / numOfShapes);\n\n\t    return filter(elements, function(element) {\n\t      return element[dimension] < (avgDimension + 50);\n\t    });\n\t  });\n\n\t}\n\n\tDistributeElements.$inject = [ 'modeling' ];\n\n\n\t/**\n\t * Registers filter functions that allow external parties to filter\n\t * out certain elements.\n\t *\n\t * @param  {Function} filterFn\n\t */\n\tDistributeElements.prototype.registerFilter = function(filterFn) {\n\t  if (typeof filterFn !== 'function') {\n\t    throw new Error('the filter has to be a function');\n\t  }\n\n\t  this._filters.push(filterFn);\n\t};\n\n\t/**\n\t * Distributes the elements with a given orientation\n\t *\n\t * @param  {Array} elements    [description]\n\t * @param  {string} orientation [description]\n\t */\n\tDistributeElements.prototype.trigger = function(elements, orientation) {\n\t  var modeling = this._modeling;\n\n\t  var groups,\n\t      distributableElements;\n\n\t  if (elements.length < 3) {\n\t    return;\n\t  }\n\n\t  this._setOrientation(orientation);\n\n\t  distributableElements = this._filterElements(elements);\n\n\t  groups = this._createGroups(distributableElements);\n\n\t  // nothing to distribute\n\t  if (groups.length <= 2) {\n\t    return;\n\t  }\n\n\t  modeling.distributeElements(groups, this._axis, this._dimension);\n\n\t  return groups;\n\t};\n\n\t/**\n\t * Filters the elements with provided filters by external parties\n\t *\n\t * @param  {Array[Elements]} elements\n\t *\n\t * @return {Array[Elements]}\n\t */\n\tDistributeElements.prototype._filterElements = function(elements) {\n\t  var filters = this._filters,\n\t      axis = this._axis,\n\t      dimension = this._dimension,\n\t      distributableElements = [].concat(elements);\n\n\t  if (!filters.length) {\n\t    return elements;\n\t  }\n\n\t  forEach(filters, function(filterFn) {\n\t    distributableElements = filterFn(distributableElements, axis, dimension);\n\t  });\n\n\t  return distributableElements;\n\t};\n\n\n\t/**\n\t * Create range (min, max) groups. Also tries to group elements\n\t * together that share the same range.\n\t *\n\t * @example\n\t * \tvar distributableElements = [\n\t * \t\t{\n\t * \t\t\trange: {\n\t * \t\t\t\tmin: 100,\n\t * \t\t\t\tmax: 200\n\t * \t\t\t},\n\t * \t\t\telements: [ { id: 'shape1', .. }]\n\t * \t\t}\n\t * \t]\n\t *\n\t * @param  {Array} elements\n\t *\n\t * @return {Array[Objects]}\n\t */\n\tDistributeElements.prototype._createGroups = function(elements) {\n\t  var rangeGroups = [],\n\t      self = this,\n\t      axis = this._axis,\n\t      dimension = this._dimension;\n\n\t  if (!axis) {\n\t    throw new Error('must have a defined \"axis\" and \"dimension\"');\n\t  }\n\n\t  // sort by 'left->right' or 'top->bottom'\n\t  var sortedElements = sortBy(elements, axis);\n\n\t  forEach(sortedElements, function(element, idx) {\n\t    var elementRange = self._findRange(element, axis, dimension),\n\t        range;\n\n\t    var previous = rangeGroups[rangeGroups.length - 1];\n\n\t    if (previous && self._hasIntersection(previous.range, elementRange)) {\n\t      rangeGroups[rangeGroups.length - 1].elements.push(element);\n\t    } else {\n\t      range = { range: elementRange, elements: [ element ] };\n\n\t      rangeGroups.push(range);\n\t    }\n\t  });\n\n\t  return rangeGroups;\n\t};\n\n\n\t/**\n\t * Maps a direction to the according axis and dimension\n\t *\n\t * @param  {string} direction 'horizontal' or 'vertical'\n\t */\n\tDistributeElements.prototype._setOrientation = function(direction) {\n\t  var orientation = AXIS_DIMENSIONS[direction];\n\n\t  this._axis = orientation[0];\n\t  this._dimension = orientation[1];\n\t};\n\n\n\t/**\n\t * Checks if the two ranges intercept each other\n\t *\n\t * @param  {Object} rangeA {min, max}\n\t * @param  {Object} rangeB {min, max}\n\t *\n\t * @return {boolean}\n\t */\n\tDistributeElements.prototype._hasIntersection = function(rangeA, rangeB) {\n\t  return Math.max(rangeA.min, rangeA.max) >= Math.min(rangeB.min, rangeB.max) &&\n\t         Math.min(rangeA.min, rangeA.max) <= Math.max(rangeB.min, rangeB.max);\n\t};\n\n\n\t/**\n\t * Returns the min and max values for an element\n\t *\n\t * @param  {[type]} element   [description]\n\t * @param  {[type]} axis      [description]\n\t * @param  {[type]} dimension [description]\n\t *\n\t * @return {[type]}           [description]\n\t */\n\tDistributeElements.prototype._findRange = function(element) {\n\t  var axis = element[this._axis],\n\t      dimension = element[this._dimension];\n\n\t  return {\n\t    min: axis + THRESHOLD$1,\n\t    max: axis + dimension - THRESHOLD$1\n\t  };\n\t};\n\n\tvar DistributeElementsModule = {\n\t  __init__: [ 'distributeElements' ],\n\t  distributeElements: [ 'type', DistributeElements ]\n\t};\n\n\t/**\n\t * Registers element exclude filters for elements that\n\t * currently do not support distribution.\n\t */\n\tfunction BpmnDistributeElements(distributeElements) {\n\n\t  distributeElements.registerFilter(function(elements) {\n\t    return filter(elements, function(element) {\n\t      var cannotDistribute = isAny(element, [\n\t        'bpmn:Association',\n\t        'bpmn:BoundaryEvent',\n\t        'bpmn:DataInputAssociation',\n\t        'bpmn:DataOutputAssociation',\n\t        'bpmn:Lane',\n\t        'bpmn:MessageFlow',\n\t        'bpmn:Participant',\n\t        'bpmn:SequenceFlow',\n\t        'bpmn:TextAnnotation'\n\t      ]);\n\n\t      return !(element.labelTarget || cannotDistribute);\n\t    });\n\t  });\n\t}\n\n\tBpmnDistributeElements.$inject = [ 'distributeElements' ];\n\n\tvar DistributeElementsModule$1 = {\n\t  __depends__: [\n\t    DistributeElementsModule\n\t  ],\n\t  __init__: [ 'bpmnDistributeElements' ],\n\t  bpmnDistributeElements: [ 'type', BpmnDistributeElements ]\n\t};\n\n\tvar NOT_REGISTERED_ERROR = 'is not a registered action',\n\t    IS_REGISTERED_ERROR = 'is already registered';\n\n\n\t/**\n\t * An interface that provides access to modeling actions by decoupling\n\t * the one who requests the action to be triggered and the trigger itself.\n\t *\n\t * It's possible to add new actions by registering them with ´registerAction´\n\t * and likewise unregister existing ones with ´unregisterAction´.\n\t *\n\t *\n\t * ## Life-Cycle and configuration\n\t *\n\t * The editor actions will wait for diagram initialization before\n\t * registering default actions _and_ firing an `editorActions.init` event.\n\t *\n\t * Interested parties may listen to the `editorActions.init` event with\n\t * low priority to check, which actions got registered. Other components\n\t * may use the event to register their own actions via `registerAction`.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Injector} injector\n\t */\n\tfunction EditorActions(eventBus, injector) {\n\n\t  // initialize actions\n\t  this._actions = {};\n\n\t  var self = this;\n\n\t  eventBus.on('diagram.init', function() {\n\n\t    // all diagram modules got loaded; check which ones\n\t    // are available and register the respective default actions\n\t    self._registerDefaultActions(injector);\n\n\t    // ask interested parties to register available editor\n\t    // actions on diagram initialization\n\t    eventBus.fire('editorActions.init', {\n\t      editorActions: self\n\t    });\n\t  });\n\n\t}\n\n\tEditorActions.$inject = [\n\t  'eventBus',\n\t  'injector'\n\t];\n\n\t/**\n\t * Register default actions.\n\t *\n\t * @param {Injector} injector\n\t */\n\tEditorActions.prototype._registerDefaultActions = function(injector) {\n\n\t  // (1) retrieve optional components to integrate with\n\n\t  var commandStack = injector.get('commandStack', false);\n\t  var modeling = injector.get('modeling', false);\n\t  var selection = injector.get('selection', false);\n\t  var zoomScroll = injector.get('zoomScroll', false);\n\t  var copyPaste = injector.get('copyPaste', false);\n\t  var canvas = injector.get('canvas', false);\n\t  var rules = injector.get('rules', false);\n\t  var keyboardMove = injector.get('keyboardMove', false);\n\t  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);\n\n\t  // (2) check components and register actions\n\n\t  if (commandStack) {\n\t    this.register('undo', function() {\n\t      commandStack.undo();\n\t    });\n\n\t    this.register('redo', function() {\n\t      commandStack.redo();\n\t    });\n\t  }\n\n\t  if (copyPaste && selection) {\n\t    this.register('copy', function() {\n\t      var selectedElements = selection.get();\n\n\t      copyPaste.copy(selectedElements);\n\t    });\n\t  }\n\n\t  if (copyPaste) {\n\t    this.register('paste', function() {\n\t      copyPaste.paste();\n\t    });\n\t  }\n\n\t  if (zoomScroll) {\n\t    this.register('stepZoom', function(opts) {\n\t      zoomScroll.stepZoom(opts.value);\n\t    });\n\t  }\n\n\t  if (canvas) {\n\t    this.register('zoom', function(opts) {\n\t      canvas.zoom(opts.value);\n\t    });\n\t  }\n\n\t  if (modeling && selection && rules) {\n\t    this.register('removeSelection', function() {\n\n\t      var selectedElements = selection.get();\n\n\t      if (!selectedElements.length) {\n\t        return;\n\t      }\n\n\t      var allowed = rules.allowed('elements.delete', { elements: selectedElements }),\n\t          removableElements;\n\n\t      if (allowed === false) {\n\t        return;\n\t      }\n\t      else if (isArray(allowed)) {\n\t        removableElements = allowed;\n\t      }\n\t      else {\n\t        removableElements = selectedElements;\n\t      }\n\n\t      if (removableElements.length) {\n\t        modeling.removeElements(removableElements.slice());\n\t      }\n\t    });\n\t  }\n\n\t  if (keyboardMove) {\n\t    this.register('moveCanvas', function(opts) {\n\t      keyboardMove.moveCanvas(opts);\n\t    });\n\t  }\n\n\t  if (keyboardMoveSelection) {\n\t    this.register('moveSelection', function(opts) {\n\t      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n\t    });\n\t  }\n\n\t};\n\n\n\t/**\n\t * Triggers a registered action\n\t *\n\t * @param  {string} action\n\t * @param  {Object} opts\n\t *\n\t * @return {Unknown} Returns what the registered listener returns\n\t */\n\tEditorActions.prototype.trigger = function(action, opts) {\n\t  if (!this._actions[action]) {\n\t    throw error$2(action, NOT_REGISTERED_ERROR);\n\t  }\n\n\t  return this._actions[action](opts);\n\t};\n\n\n\t/**\n\t * Registers a collections of actions.\n\t * The key of the object will be the name of the action.\n\t *\n\t * @example\n\t * ´´´\n\t * var actions = {\n\t *   spaceTool: function() {\n\t *     spaceTool.activateSelection();\n\t *   },\n\t *   lassoTool: function() {\n\t *     lassoTool.activateSelection();\n\t *   }\n\t * ];\n\t *\n\t * editorActions.register(actions);\n\t *\n\t * editorActions.isRegistered('spaceTool'); // true\n\t * ´´´\n\t *\n\t * @param  {Object} actions\n\t */\n\tEditorActions.prototype.register = function(actions, listener) {\n\t  var self = this;\n\n\t  if (typeof actions === 'string') {\n\t    return this._registerAction(actions, listener);\n\t  }\n\n\t  forEach(actions, function(listener, action) {\n\t    self._registerAction(action, listener);\n\t  });\n\t};\n\n\t/**\n\t * Registers a listener to an action key\n\t *\n\t * @param  {string} action\n\t * @param  {Function} listener\n\t */\n\tEditorActions.prototype._registerAction = function(action, listener) {\n\t  if (this.isRegistered(action)) {\n\t    throw error$2(action, IS_REGISTERED_ERROR);\n\t  }\n\n\t  this._actions[action] = listener;\n\t};\n\n\t/**\n\t * Unregister an existing action\n\t *\n\t * @param {string} action\n\t */\n\tEditorActions.prototype.unregister = function(action) {\n\t  if (!this.isRegistered(action)) {\n\t    throw error$2(action, NOT_REGISTERED_ERROR);\n\t  }\n\n\t  this._actions[action] = undefined;\n\t};\n\n\t/**\n\t * Returns the number of actions that are currently registered\n\t *\n\t * @return {number}\n\t */\n\tEditorActions.prototype.getActions = function() {\n\t  return Object.keys(this._actions);\n\t};\n\n\t/**\n\t * Checks wether the given action is registered\n\t *\n\t * @param {string} action\n\t *\n\t * @return {boolean}\n\t */\n\tEditorActions.prototype.isRegistered = function(action) {\n\t  return !!this._actions[action];\n\t};\n\n\n\tfunction error$2(action, message) {\n\t  return new Error(action + ' ' + message);\n\t}\n\n\tvar EditorActionsModule = {\n\t  __init__: [ 'editorActions' ],\n\t  editorActions: [ 'type', EditorActions ]\n\t};\n\n\t/**\n\t * Registers and executes BPMN specific editor actions.\n\t *\n\t * @param {Injector} injector\n\t */\n\tfunction BpmnEditorActions(injector) {\n\t  injector.invoke(EditorActions, this);\n\t}\n\n\tinherits_browser(BpmnEditorActions, EditorActions);\n\n\tBpmnEditorActions.$inject = [\n\t  'injector'\n\t];\n\n\t/**\n\t * Register default actions.\n\t *\n\t * @param {Injector} injector\n\t */\n\tBpmnEditorActions.prototype._registerDefaultActions = function(injector) {\n\n\t  // (0) invoke super method\n\n\t  EditorActions.prototype._registerDefaultActions.call(this, injector);\n\n\t  // (1) retrieve optional components to integrate with\n\n\t  var canvas = injector.get('canvas', false);\n\t  var elementRegistry = injector.get('elementRegistry', false);\n\t  var selection = injector.get('selection', false);\n\t  var spaceTool = injector.get('spaceTool', false);\n\t  var lassoTool = injector.get('lassoTool', false);\n\t  var handTool = injector.get('handTool', false);\n\t  var globalConnect = injector.get('globalConnect', false);\n\t  var distributeElements = injector.get('distributeElements', false);\n\t  var alignElements = injector.get('alignElements', false);\n\t  var directEditing = injector.get('directEditing', false);\n\t  var searchPad = injector.get('searchPad', false);\n\t  var modeling = injector.get('modeling', false);\n\n\t  // (2) check components and register actions\n\n\t  if (canvas && elementRegistry && selection) {\n\t    this._registerAction('selectElements', function() {\n\n\t      // select all elements except for the invisible\n\t      // root element\n\t      var rootElement = canvas.getRootElement();\n\n\t      var elements = elementRegistry.filter(function(element) {\n\t        return element !== rootElement;\n\t      });\n\n\t      selection.select(elements);\n\n\t      return elements;\n\t    });\n\t  }\n\n\t  if (spaceTool) {\n\t    this._registerAction('spaceTool', function() {\n\t      spaceTool.toggle();\n\t    });\n\t  }\n\n\t  if (lassoTool) {\n\t    this._registerAction('lassoTool', function() {\n\t      lassoTool.toggle();\n\t    });\n\t  }\n\n\t  if (handTool) {\n\t    this._registerAction('handTool', function() {\n\t      handTool.toggle();\n\t    });\n\t  }\n\n\t  if (globalConnect) {\n\t    this._registerAction('globalConnectTool', function() {\n\t      globalConnect.toggle();\n\t    });\n\t  }\n\n\t  if (selection && distributeElements) {\n\t    this._registerAction('distributeElements', function(opts) {\n\t      var currentSelection = selection.get(),\n\t          type = opts.type;\n\n\t      if (currentSelection.length) {\n\t        distributeElements.trigger(currentSelection, type);\n\t      }\n\t    });\n\t  }\n\n\t  if (selection && alignElements) {\n\t    this._registerAction('alignElements', function(opts) {\n\t      var currentSelection = selection.get(),\n\t          aligneableElements = [],\n\t          type = opts.type;\n\n\t      if (currentSelection.length) {\n\t        aligneableElements = filter(currentSelection, function(element) {\n\t          return !is$1(element, 'bpmn:Lane');\n\t        });\n\n\t        alignElements.trigger(aligneableElements, type);\n\t      }\n\t    });\n\t  }\n\n\t  if (selection && modeling) {\n\t    this._registerAction('setColor', function(opts) {\n\t      var currentSelection = selection.get();\n\n\t      if (currentSelection.length) {\n\t        modeling.setColor(currentSelection, opts);\n\t      }\n\t    });\n\t  }\n\n\t  if (selection && directEditing) {\n\t    this._registerAction('directEditing', function() {\n\t      var currentSelection = selection.get();\n\n\t      if (currentSelection.length) {\n\t        directEditing.activate(currentSelection[0]);\n\t      }\n\t    });\n\t  }\n\n\t  if (searchPad) {\n\t    this._registerAction('find', function() {\n\t      searchPad.toggle();\n\t    });\n\t  }\n\n\t  if (canvas && modeling) {\n\t    this._registerAction('moveToOrigin', function() {\n\t      var rootElement = canvas.getRootElement(),\n\t          boundingBox,\n\t          elements;\n\n\t      if (is$1(rootElement, 'bpmn:Collaboration')) {\n\t        elements = elementRegistry.filter(function(element) {\n\t          return is$1(element.parent, 'bpmn:Collaboration');\n\t        });\n\t      } else {\n\t        elements = elementRegistry.filter(function(element) {\n\t          return element !== rootElement && !is$1(element.parent, 'bpmn:SubProcess');\n\t        });\n\t      }\n\n\t      boundingBox = getBBox(elements);\n\n\t      modeling.moveElements(\n\t        elements,\n\t        { x: -boundingBox.x, y: -boundingBox.y },\n\t        rootElement\n\t      );\n\t    });\n\t  }\n\n\t};\n\n\tvar EditorActionsModule$1 = {\n\t  __depends__: [\n\t    EditorActionsModule\n\t  ],\n\t  editorActions: [ 'type', BpmnEditorActions ]\n\t};\n\n\tfunction BpmnGridSnapping(eventBus) {\r\n\t  eventBus.on([\r\n\t    'create.init',\r\n\t    'shape.move.init'\r\n\t  ], function(event) {\r\n\t    var context = event.context,\r\n\t        shape = event.shape;\r\n\r\n\t    if (isAny(shape, [\r\n\t      'bpmn:Participant',\r\n\t      'bpmn:SubProcess',\r\n\t      'bpmn:TextAnnotation'\r\n\t    ])) {\r\n\t      if (!context.gridSnappingContext) {\r\n\t        context.gridSnappingContext = {};\r\n\t      }\r\n\r\n\t      context.gridSnappingContext.snapLocation = 'top-left';\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tBpmnGridSnapping.$inject = [ 'eventBus' ];\n\n\tvar SPACING = 10;\n\n\tfunction quantize(value, quantum, fn) {\n\t  if (!fn) {\n\t    fn = 'round';\n\t  }\n\n\t  return Math[ fn ](value / quantum) * quantum;\n\t}\n\n\tvar LOWER_PRIORITY = 1200;\r\n\tvar LOW_PRIORITY$8 = 800;\r\n\r\n\t/**\r\n\t * Basic grid snapping that covers connecting, creating, moving, resizing shapes, moving bendpoints\r\n\t * and connection segments.\r\n\t */\r\n\tfunction GridSnapping(elementRegistry, eventBus, config) {\r\n\r\n\t  var active = !config || config.active !== false;\r\n\r\n\t  this._eventBus = eventBus;\r\n\r\n\t  var self = this;\r\n\r\n\t  eventBus.on('diagram.init', LOW_PRIORITY$8, function() {\r\n\t    self.setActive(active);\r\n\t  });\r\n\r\n\t  eventBus.on([\r\n\t    'create.move',\r\n\t    'create.end',\r\n\t    'bendpoint.move.move',\r\n\t    'bendpoint.move.end',\r\n\t    'connect.move',\r\n\t    'connect.end',\r\n\t    'connectionSegment.move.move',\r\n\t    'connectionSegment.move.end',\r\n\t    'resize.move',\r\n\t    'resize.end',\r\n\t    'shape.move.move',\r\n\t    'shape.move.end'\r\n\t  ], LOWER_PRIORITY, function(event) {\r\n\t    var originalEvent = event.originalEvent;\r\n\r\n\t    if (!self.active || (originalEvent && isCmd(originalEvent))) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var context = event.context,\r\n\t        gridSnappingContext = context.gridSnappingContext;\r\n\r\n\t    if (!gridSnappingContext) {\r\n\t      gridSnappingContext = context.gridSnappingContext = {};\r\n\t    }\r\n\r\n\t    [ 'x', 'y' ].forEach(function(axis) {\r\n\t      var options = {};\r\n\r\n\t      // allow snapping with offset\r\n\t      var snapOffset = getSnapOffset(event, axis, elementRegistry);\r\n\r\n\t      if (snapOffset) {\r\n\t        options.offset = snapOffset;\r\n\t      }\r\n\r\n\t      // allow snapping with min and max\r\n\t      var snapConstraints = getSnapConstraints(event, axis);\r\n\r\n\t      if (snapConstraints) {\r\n\t        assign(options, snapConstraints);\r\n\t      }\r\n\r\n\t      if (!isSnapped(event, axis)) {\r\n\t        self.snapEvent(event, axis, options);\r\n\t      }\r\n\t    });\r\n\t  });\r\n\t}\r\n\r\n\t/**\r\n\t * Snap an events x or y with optional min, max and offset.\r\n\t *\r\n\t * @param {Object} event\r\n\t * @param {string} axis\r\n\t * @param {number} [options.min]\r\n\t * @param {number} [options.max]\r\n\t * @param {number} [options.offset]\r\n\t */\r\n\tGridSnapping.prototype.snapEvent = function(event, axis, options) {\r\n\t  var snappedValue = this.snapValue(event[ axis ], options);\r\n\r\n\t  setSnapped(event, axis, snappedValue);\r\n\t};\r\n\r\n\t/**\r\n\t * Expose grid spacing for third parties (i.e. extensions).\r\n\t *\r\n\t * @return {number} spacing of grid dots\r\n\t */\r\n\tGridSnapping.prototype.getGridSpacing = function() {\r\n\t  return SPACING;\r\n\t};\r\n\r\n\t/**\r\n\t * Snap value with optional min, max and offset.\r\n\t *\r\n\t * @param {number} value\r\n\t * @param {Object} options\r\n\t * @param {number} [options.min]\r\n\t * @param {number} [options.max]\r\n\t * @param {number} [options.offset]\r\n\t */\r\n\tGridSnapping.prototype.snapValue = function(value, options) {\r\n\t  var offset = 0;\r\n\r\n\t  if (options && options.offset) {\r\n\t    offset = options.offset;\r\n\t  }\r\n\r\n\t  value += offset;\r\n\r\n\t  value = quantize(value, SPACING);\r\n\r\n\t  var min, max;\r\n\r\n\t  if (options && options.min) {\r\n\t    min = options.min;\r\n\r\n\t    if (isNumber(min)) {\r\n\t      min = quantize(min + offset, SPACING, 'ceil');\r\n\r\n\t      value = Math.max(value, min);\r\n\t    }\r\n\t  }\r\n\r\n\t  if (options && options.max) {\r\n\t    max = options.max;\r\n\r\n\t    if (isNumber(max)) {\r\n\t      max = quantize(max + offset, SPACING, 'floor');\r\n\r\n\t      value = Math.min(value, max);\r\n\t    }\r\n\t  }\r\n\r\n\t  value -= offset;\r\n\r\n\t  return value;\r\n\t};\r\n\r\n\tGridSnapping.prototype.isActive = function() {\r\n\t  return this.active;\r\n\t};\r\n\r\n\tGridSnapping.prototype.setActive = function(active) {\r\n\t  this.active = active;\r\n\r\n\t  this._eventBus.fire('gridSnapping.toggle', { active: active });\r\n\t};\r\n\r\n\tGridSnapping.prototype.toggleActive = function() {\r\n\t  this.setActive(!this.active);\r\n\t};\r\n\r\n\tGridSnapping.$inject = [\r\n\t  'elementRegistry',\r\n\t  'eventBus',\r\n\t  'config.gridSnapping'\r\n\t];\r\n\r\n\t// helpers //////////\r\n\r\n\t/**\r\n\t * Get minimum and maximum snap constraints.\r\n\t * Constraints are cached.\r\n\t *\r\n\t * @param {Object} event\r\n\t * @param {Object} event.context\r\n\t * @param {string} axis\r\n\t *\r\n\t * @returns {boolean|Object}\r\n\t */\r\n\tfunction getSnapConstraints(event, axis) {\r\n\t  var context = event.context,\r\n\t      createConstraints = context.createConstraints,\r\n\t      resizeConstraints = context.resizeConstraints || {},\r\n\t      gridSnappingContext = context.gridSnappingContext,\r\n\t      snapConstraints = gridSnappingContext.snapConstraints;\r\n\r\n\t  // cache snap constraints\r\n\t  if (snapConstraints && snapConstraints[ axis ]) {\r\n\t    return snapConstraints[ axis ];\r\n\t  }\r\n\r\n\t  if (!snapConstraints) {\r\n\t    snapConstraints = gridSnappingContext.snapConstraints = {};\r\n\t  }\r\n\r\n\t  if (!snapConstraints[ axis ]) {\r\n\t    snapConstraints[ axis ] = {};\r\n\t  }\r\n\r\n\t  var direction = context.direction;\r\n\r\n\t  // create\r\n\t  if (createConstraints) {\r\n\t    if (isHorizontal(axis)) {\r\n\t      snapConstraints.x.min = createConstraints.left;\r\n\t      snapConstraints.x.max = createConstraints.right;\r\n\t    } else {\r\n\t      snapConstraints.y.min = createConstraints.top;\r\n\t      snapConstraints.y.max = createConstraints.bottom;\r\n\t    }\r\n\t  }\r\n\r\n\t  // resize\r\n\t  var minResizeConstraints = resizeConstraints.min,\r\n\t      maxResizeConstraints = resizeConstraints.max;\r\n\r\n\t  if (minResizeConstraints) {\r\n\t    if (isHorizontal(axis)) {\r\n\r\n\t      if (isWest(direction)) {\r\n\t        snapConstraints.x.max = minResizeConstraints.left;\r\n\t      } else {\r\n\t        snapConstraints.x.min = minResizeConstraints.right;\r\n\t      }\r\n\r\n\t    } else {\r\n\r\n\t      if (isNorth(direction)) {\r\n\t        snapConstraints.y.max = minResizeConstraints.top;\r\n\t      } else {\r\n\t        snapConstraints.y.min = minResizeConstraints.bottom;\r\n\t      }\r\n\r\n\t    }\r\n\t  }\r\n\r\n\t  if (maxResizeConstraints) {\r\n\t    if (isHorizontal(axis)) {\r\n\r\n\t      if (isWest(direction)) {\r\n\t        snapConstraints.x.min = maxResizeConstraints.left;\r\n\t      } else {\r\n\t        snapConstraints.x.max = maxResizeConstraints.right;\r\n\t      }\r\n\r\n\t    } else {\r\n\r\n\t      if (isNorth(direction)) {\r\n\t        snapConstraints.y.min = maxResizeConstraints.top;\r\n\t      } else {\r\n\t        snapConstraints.y.max = maxResizeConstraints.bottom;\r\n\t      }\r\n\r\n\t    }\r\n\t  }\r\n\r\n\t  return snapConstraints[ axis ];\r\n\t}\r\n\r\n\t/**\r\n\t * Get snap offset.\r\n\t * Offset is cached.\r\n\t *\r\n\t * @param {Object} event\r\n\t * @param {string} axis\r\n\t * @param {ElementRegistry} elementRegistry\r\n\t *\r\n\t * @returns {number}\r\n\t */\r\n\tfunction getSnapOffset(event, axis, elementRegistry) {\r\n\t  var context = event.context,\r\n\t      shape = event.shape,\r\n\t      gridSnappingContext = context.gridSnappingContext,\r\n\t      snapLocation = gridSnappingContext.snapLocation,\r\n\t      snapOffset = gridSnappingContext.snapOffset;\r\n\r\n\t  // cache snap offset\r\n\t  if (snapOffset && isNumber(snapOffset[ axis ])) {\r\n\t    return snapOffset[ axis ];\r\n\t  }\r\n\r\n\t  if (!snapOffset) {\r\n\t    snapOffset = gridSnappingContext.snapOffset = {};\r\n\t  }\r\n\r\n\t  if (!isNumber(snapOffset[ axis ])) {\r\n\t    snapOffset[ axis ] = 0;\r\n\t  }\r\n\r\n\t  if (!shape) {\r\n\t    return snapOffset[ axis ];\r\n\t  }\r\n\r\n\t  if (!elementRegistry.get(shape.id)) {\r\n\r\n\t    if (isHorizontal(axis)) {\r\n\t      snapOffset[ axis ] += shape[ axis ] + shape.width / 2;\r\n\t    } else {\r\n\t      snapOffset[ axis ] += shape[ axis ] + shape.height / 2;\r\n\t    }\r\n\t  }\r\n\r\n\t  if (!snapLocation) {\r\n\t    return snapOffset[ axis ];\r\n\t  }\r\n\r\n\t  if (axis === 'x') {\r\n\t    if (/left/.test(snapLocation)) {\r\n\t      snapOffset[ axis ] -= shape.width / 2;\r\n\t    } else if (/right/.test(snapLocation)) {\r\n\t      snapOffset[ axis ] += shape.width / 2;\r\n\t    }\r\n\t  } else {\r\n\t    if (/top/.test(snapLocation)) {\r\n\t      snapOffset[ axis ] -= shape.height / 2;\r\n\t    } else if (/bottom/.test(snapLocation)) {\r\n\t      snapOffset[ axis ] += shape.height / 2;\r\n\t    }\r\n\t  }\r\n\r\n\t  return snapOffset[ axis ];\r\n\t}\r\n\r\n\tfunction isHorizontal(axis) {\r\n\t  return axis === 'x';\r\n\t}\r\n\r\n\tfunction isNorth(direction) {\r\n\t  return direction.indexOf('n') !== -1;\r\n\t}\r\n\r\n\tfunction isWest(direction) {\r\n\t  return direction.indexOf('w') !== -1;\r\n\t}\n\n\t/**\r\n\t * Integrates resizing with grid snapping.\r\n\t */\r\n\tfunction ResizeBehavior(eventBus, gridSnapping) {\r\n\t  CommandInterceptor.call(this, eventBus);\r\n\r\n\t  this._gridSnapping = gridSnapping;\r\n\r\n\t  var self = this;\r\n\r\n\t  this.preExecute('shape.resize', function(event) {\r\n\t    var context = event.context,\r\n\t        hints = context.hints || {},\r\n\t        autoResize = hints.autoResize;\r\n\r\n\t    if (!autoResize) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var shape = context.shape,\r\n\t        newBounds = context.newBounds;\r\n\r\n\t    if (isString(autoResize)) {\r\n\t      context.newBounds = self.snapComplex(newBounds, autoResize);\r\n\t    } else {\r\n\t      context.newBounds = self.snapSimple(shape, newBounds);\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tResizeBehavior.$inject = [\r\n\t  'eventBus',\r\n\t  'gridSnapping',\r\n\t  'modeling'\r\n\t];\r\n\r\n\tinherits_browser(ResizeBehavior, CommandInterceptor);\r\n\r\n\t/**\r\n\t * Snap width and height in relation to center.\r\n\t *\r\n\t * @param {djs.model.shape} shape\r\n\t * @param {Bounds} newBounds\r\n\t *\r\n\t * @returns {Bounds} Snapped bounds.\r\n\t */\r\n\tResizeBehavior.prototype.snapSimple = function(shape, newBounds) {\r\n\t  var gridSnapping = this._gridSnapping;\r\n\r\n\t  newBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n\t    min: newBounds.width\r\n\t  });\r\n\r\n\t  newBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n\t    min: newBounds.height\r\n\t  });\r\n\r\n\t  newBounds.x = shape.x + (shape.width / 2) - (newBounds.width / 2);\r\n\t  newBounds.y = shape.y + (shape.height / 2) - (newBounds.height / 2);\r\n\r\n\t  return newBounds;\r\n\t};\r\n\r\n\t/**\r\n\t * Snap x, y, width and height according to given directions.\r\n\t *\r\n\t * @param {Bounds} newBounds\r\n\t * @param {string} directions - Directions as {n|w|s|e}.\r\n\t *\r\n\t * @returns {Bounds} Snapped bounds.\r\n\t */\r\n\tResizeBehavior.prototype.snapComplex = function(newBounds, directions) {\r\n\t  if (/w|e/.test(directions)) {\r\n\t    newBounds = this.snapHorizontally(newBounds, directions);\r\n\t  }\r\n\r\n\t  if (/n|s/.test(directions)) {\r\n\t    newBounds = this.snapVertically(newBounds, directions);\r\n\t  }\r\n\r\n\t  return newBounds;\r\n\t};\r\n\r\n\t/**\r\n\t * Snap in one or both directions horizontally.\r\n\t *\r\n\t * @param {Bounds} newBounds\r\n\t * @param {string} directions - Directions as {n|w|s|e}.\r\n\t *\r\n\t * @returns {Bounds} Snapped bounds.\r\n\t */\r\n\tResizeBehavior.prototype.snapHorizontally = function(newBounds, directions) {\r\n\t  var gridSnapping = this._gridSnapping,\r\n\t      west = /w/.test(directions),\r\n\t      east = /e/.test(directions);\r\n\r\n\t  var snappedNewBounds = {};\r\n\r\n\t  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n\t    min: newBounds.width\r\n\t  });\r\n\r\n\t  if (east) {\r\n\r\n\t    // handle <we>\r\n\t    if (west) {\r\n\t      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {\r\n\t        max: newBounds.x\r\n\t      });\r\n\r\n\t      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {\r\n\t        min: newBounds.x - snappedNewBounds.x\r\n\t      });\r\n\t    }\r\n\r\n\t    // handle <e>\r\n\t    else {\r\n\t      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;\r\n\t    }\r\n\t  }\r\n\r\n\t  // assign snapped x and width\r\n\t  assign(newBounds, snappedNewBounds);\r\n\r\n\t  return newBounds;\r\n\t};\r\n\r\n\t/**\r\n\t * Snap in one or both directions vertically.\r\n\t *\r\n\t * @param {Bounds} newBounds\r\n\t * @param {string} directions - Directions as {n|w|s|e}.\r\n\t *\r\n\t * @returns {Bounds} Snapped bounds.\r\n\t */\r\n\tResizeBehavior.prototype.snapVertically = function(newBounds, directions) {\r\n\t  var gridSnapping = this._gridSnapping,\r\n\t      north = /n/.test(directions),\r\n\t      south = /s/.test(directions);\r\n\r\n\t  var snappedNewBounds = {};\r\n\r\n\t  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n\t    min: newBounds.height\r\n\t  });\r\n\r\n\t  if (north) {\r\n\r\n\t    // handle <ns>\r\n\t    if (south) {\r\n\t      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {\r\n\t        max: newBounds.y\r\n\t      });\r\n\r\n\t      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {\r\n\t        min: newBounds.y - snappedNewBounds.y\r\n\t      });\r\n\t    }\r\n\r\n\t    // handle <n>\r\n\t    else {\r\n\t      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;\r\n\t    }\r\n\t  }\r\n\r\n\t  // assign snapped y and height\r\n\t  assign(newBounds, snappedNewBounds);\r\n\r\n\t  return newBounds;\r\n\t};\n\n\tvar HIGH_PRIORITY$4 = 2000;\r\n\r\n\t/**\r\n\t * Integrates space tool with grid snapping.\r\n\t */\r\n\tfunction SpaceToolBehavior(eventBus, gridSnapping) {\r\n\t  eventBus.on([\r\n\t    'spaceTool.move',\r\n\t    'spaceTool.end'\r\n\t  ], HIGH_PRIORITY$4, function(event) {\r\n\t    var context = event.context;\r\n\r\n\t    if (!context.initialized) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var axis = context.axis;\r\n\r\n\t    var snapped;\r\n\r\n\t    if (axis === 'x') {\r\n\r\n\t      // snap delta x to multiple of 10\r\n\t      snapped = gridSnapping.snapValue(event.dx);\r\n\r\n\t      event.x = event.x + snapped - event.dx;\r\n\t      event.dx = snapped;\r\n\t    } else {\r\n\r\n\t      // snap delta y to multiple of 10\r\n\t      snapped = gridSnapping.snapValue(event.dy);\r\n\r\n\t      event.y = event.y + snapped - event.dy;\r\n\t      event.dy = snapped;\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tSpaceToolBehavior.$inject = [\r\n\t  'eventBus',\r\n\t  'gridSnapping'\r\n\t];\n\n\tvar GridSnappingBehaviorModule = {\r\n\t  __init__: [\r\n\t    'gridSnappingResizeBehavior',\r\n\t    'gridSnappingSpaceToolBehavior'\r\n\t  ],\r\n\t  gridSnappingResizeBehavior: [ 'type', ResizeBehavior ],\r\n\t  gridSnappingSpaceToolBehavior: [ 'type', SpaceToolBehavior ]\r\n\t};\n\n\tvar GridSnappingModule = {\r\n\t  __depends__: [ GridSnappingBehaviorModule ],\r\n\t  __init__: [ 'gridSnapping' ],\r\n\t  gridSnapping: [ 'type', GridSnapping ]\r\n\t};\n\n\tvar HIGH_PRIORITY$5 = 2000;\r\n\r\n\r\n\tfunction AutoPlaceBehavior(eventBus, gridSnapping) {\r\n\t  eventBus.on('autoPlace', HIGH_PRIORITY$5, function(context) {\r\n\t    var source = context.source,\r\n\t        sourceMid = getMid(source),\r\n\t        shape = context.shape;\r\n\r\n\t    var position = getNewShapePosition$1(source, shape);\r\n\r\n\t    [ 'x', 'y' ].forEach(function(axis) {\r\n\t      var options = {};\r\n\r\n\t      // do not snap if x/y equal\r\n\t      if (position[ axis ] === sourceMid[ axis ]) {\r\n\t        return;\r\n\t      }\r\n\r\n\t      if (position[ axis ] > sourceMid[ axis ]) {\r\n\t        options.min = position[ axis ];\r\n\t      } else {\r\n\t        options.max = position[ axis ];\r\n\t      }\r\n\r\n\t      if (is$1(shape, 'bpmn:TextAnnotation')) {\r\n\r\n\t        if (isHorizontal$1(axis)) {\r\n\t          options.offset = -shape.width / 2;\r\n\t        } else {\r\n\t          options.offset = -shape.height / 2;\r\n\t        }\r\n\r\n\t      }\r\n\r\n\t      position[ axis ] = gridSnapping.snapValue(position[ axis ], options);\r\n\r\n\t    });\r\n\r\n\t    // must be returned to be considered by auto place\r\n\t    return position;\r\n\t  });\r\n\t}\r\n\r\n\tAutoPlaceBehavior.$inject = [\r\n\t  'eventBus',\r\n\t  'gridSnapping'\r\n\t];\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction isHorizontal$1(axis) {\r\n\t  return axis === 'x';\r\n\t}\n\n\tvar HIGHER_PRIORITY = 1750;\r\n\r\n\r\n\tfunction CreateParticipantBehavior(canvas, eventBus, gridSnapping) {\r\n\t  eventBus.on([\r\n\t    'create.start',\r\n\t    'shape.move.start'\r\n\t  ], HIGHER_PRIORITY, function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        rootElement = canvas.getRootElement();\r\n\r\n\t    if (!is$1(shape, 'bpmn:Participant') ||\r\n\t      !is$1(rootElement, 'bpmn:Process') ||\r\n\t      !rootElement.children.length) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var createConstraints = context.createConstraints;\r\n\r\n\t    if (!createConstraints) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    shape.width = gridSnapping.snapValue(shape.width, { min: shape.width });\r\n\t    shape.height = gridSnapping.snapValue(shape.height, { min: shape.height });\r\n\t  });\r\n\t}\r\n\r\n\tCreateParticipantBehavior.$inject = [\r\n\t  'canvas',\r\n\t  'eventBus',\r\n\t  'gridSnapping'\r\n\t];\n\n\tvar HIGH_PRIORITY$6 = 3000;\n\n\n\t/**\n\t * Snaps connections with Manhattan layout.\n\t */\n\tfunction LayoutConnectionBehavior(eventBus, gridSnapping, modeling) {\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this._gridSnapping = gridSnapping;\n\n\t  var self = this;\n\n\t  this.postExecuted([\n\t    'connection.create',\n\t    'connection.layout'\n\t  ], HIGH_PRIORITY$6, function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        hints = context.hints || {},\n\t        waypoints = connection.waypoints;\n\n\t    if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {\n\t      return;\n\t    }\n\n\t    if (!hasMiddleSegments(waypoints)) {\n\t      return;\n\t    }\n\n\t    modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));\n\t  });\n\t}\n\n\tLayoutConnectionBehavior.$inject = [\n\t  'eventBus',\n\t  'gridSnapping',\n\t  'modeling'\n\t];\n\n\tinherits_browser(LayoutConnectionBehavior, CommandInterceptor);\n\n\t/**\n\t * Snap middle segments of a given connection.\n\t *\n\t * @param {Array<Point>} waypoints\n\t *\n\t * @returns {Array<Point>}\n\t */\n\tLayoutConnectionBehavior.prototype.snapMiddleSegments = function(waypoints) {\n\t  var gridSnapping = this._gridSnapping,\n\t      snapped;\n\n\t  waypoints = waypoints.slice();\n\n\t  for (var i = 1; i < waypoints.length - 2; i++) {\n\n\t    snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);\n\n\t    waypoints[i] = snapped[0];\n\t    waypoints[i + 1] = snapped[1];\n\t  }\n\n\t  return waypoints;\n\t};\n\n\n\t// helpers //////////\n\n\t/**\n\t * Check whether a connection has a middle segments.\n\t *\n\t * @param {Array} waypoints\n\t *\n\t * @returns {boolean}\n\t */\n\tfunction hasMiddleSegments(waypoints) {\n\t  return waypoints.length > 3;\n\t}\n\n\t/**\n\t * Check whether an alignment is horizontal.\n\t *\n\t * @param {string} aligned\n\t *\n\t * @returns {boolean}\n\t */\n\tfunction horizontallyAligned(aligned) {\n\t  return aligned === 'h';\n\t}\n\n\t/**\n\t * Check whether an alignment is vertical.\n\t *\n\t * @param {string} aligned\n\t *\n\t * @returns {boolean}\n\t */\n\tfunction verticallyAligned(aligned) {\n\t  return aligned === 'v';\n\t}\n\n\t/**\n\t * Get middle segments from a given connection.\n\t *\n\t * @param {Array} waypoints\n\t *\n\t * @returns {Array}\n\t */\n\tfunction snapSegment(gridSnapping, segmentStart, segmentEnd) {\n\n\t  var aligned = pointsAligned(segmentStart, segmentEnd);\n\n\t  var snapped = {};\n\n\t  if (horizontallyAligned(aligned)) {\n\n\t    // snap horizontally\n\t    snapped.y = gridSnapping.snapValue(segmentStart.y);\n\t  }\n\n\t  if (verticallyAligned(aligned)) {\n\n\t    // snap vertically\n\t    snapped.x = gridSnapping.snapValue(segmentStart.x);\n\t  }\n\n\t  if ('x' in snapped || 'y' in snapped) {\n\t    segmentStart = assign({}, segmentStart, snapped);\n\t    segmentEnd = assign({}, segmentEnd, snapped);\n\t  }\n\n\t  return [ segmentStart, segmentEnd ];\n\t}\n\n\tvar GridSnappingBehaviorModule$1 = {\r\n\t  __init__: [\r\n\t    'gridSnappingAutoPlaceBehavior',\r\n\t    'gridSnappingCreateParticipantBehavior',\r\n\t    'gridSnappingLayoutConnectionBehavior',\r\n\t  ],\r\n\t  gridSnappingAutoPlaceBehavior: [ 'type', AutoPlaceBehavior ],\r\n\t  gridSnappingCreateParticipantBehavior: [ 'type', CreateParticipantBehavior ],\r\n\t  gridSnappingLayoutConnectionBehavior: [ 'type', LayoutConnectionBehavior ]\r\n\t};\n\n\tvar GridSnappingModule$1 = {\r\n\t  __depends__: [\r\n\t    GridSnappingModule,\r\n\t    GridSnappingBehaviorModule$1\r\n\t  ],\r\n\t  __init__: [ 'bpmnGridSnapping' ],\r\n\t  bpmnGridSnapping: [ 'type', BpmnGridSnapping ]\r\n\t};\n\n\tvar LABEL_WIDTH = 30,\n\t    LABEL_HEIGHT = 30;\n\n\n\t/**\n\t * BPMN-specific hit zones and interaction fixes.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {InteractionEvents} interactionEvents\n\t */\n\tfunction BpmnInteractionEvents(eventBus, interactionEvents) {\n\n\t  this._interactionEvents = interactionEvents;\n\n\t  var self = this;\n\n\t  eventBus.on([\n\t    'interactionEvents.createHit',\n\t    'interactionEvents.updateHit'\n\t  ], function(context) {\n\t    var element = context.element,\n\t        gfx = context.gfx;\n\n\t    if (is$1(element, 'bpmn:Lane')) {\n\t      return self.createParticipantHit(element, gfx);\n\t    } else\n\n\t    if (is$1(element, 'bpmn:Participant')) {\n\t      if (isExpanded(element)) {\n\t        return self.createParticipantHit(element, gfx);\n\t      } else {\n\t        return self.createDefaultHit(element, gfx);\n\t      }\n\t    } else\n\n\t    if (is$1(element, 'bpmn:SubProcess')) {\n\t      if (isExpanded(element)) {\n\t        return self.createSubProcessHit(element, gfx);\n\t      } else {\n\t        return self.createDefaultHit(element, gfx);\n\t      }\n\t    }\n\t  });\n\n\t}\n\n\tBpmnInteractionEvents.$inject = [\n\t  'eventBus',\n\t  'interactionEvents'\n\t];\n\n\n\tBpmnInteractionEvents.prototype.createDefaultHit = function(element, gfx) {\n\t  this._interactionEvents.removeHits(gfx);\n\n\t  this._interactionEvents.createDefaultHit(element, gfx);\n\n\t  // indicate that we created a hit\n\t  return true;\n\t};\n\n\tBpmnInteractionEvents.prototype.createParticipantHit = function(element, gfx) {\n\n\t  // remove existing hits\n\t  this._interactionEvents.removeHits(gfx);\n\n\t  // add outline hit\n\t  this._interactionEvents.createBoxHit(gfx, 'click-stroke', {\n\t    width: element.width,\n\t    height: element.height\n\t  });\n\n\t  // add label hit\n\t  this._interactionEvents.createBoxHit(gfx, 'all', {\n\t    width: LABEL_WIDTH,\n\t    height: element.height\n\t  });\n\n\t  // indicate that we created a hit\n\t  return true;\n\t};\n\n\tBpmnInteractionEvents.prototype.createSubProcessHit = function(element, gfx) {\n\n\t  // remove existing hits\n\t  this._interactionEvents.removeHits(gfx);\n\n\t  // add outline hit\n\t  this._interactionEvents.createBoxHit(gfx, 'click-stroke', {\n\t    width: element.width,\n\t    height: element.height\n\t  });\n\n\t  // add label hit\n\t  this._interactionEvents.createBoxHit(gfx, 'all', {\n\t    width: element.width,\n\t    height: LABEL_HEIGHT\n\t  });\n\n\t  // indicate that we created a hit\n\t  return true;\n\t};\n\n\tvar InteractionEventsModule$1 = {\n\t  __init__: [ 'bpmnInteractionEvents' ],\n\t  bpmnInteractionEvents: [ 'type', BpmnInteractionEvents ]\n\t};\n\n\t/**\n\t * BPMN 2.0 specific keyboard bindings.\n\t *\n\t * @param {Injector} injector\n\t */\n\tfunction BpmnKeyboardBindings(injector) {\n\t  injector.invoke(KeyboardBindings, this);\n\t}\n\n\tinherits_browser(BpmnKeyboardBindings, KeyboardBindings);\n\n\tBpmnKeyboardBindings.$inject = [\n\t  'injector'\n\t];\n\n\n\t/**\n\t * Register available keyboard bindings.\n\t *\n\t * @param {Keyboard} keyboard\n\t * @param {EditorActions} editorActions\n\t */\n\tBpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n\t  // inherit default bindings\n\t  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n\t  /**\n\t   * Add keyboard binding if respective editor action\n\t   * is registered.\n\t   *\n\t   * @param {string} action name\n\t   * @param {Function} fn that implements the key binding\n\t   */\n\t  function addListener(action, fn) {\n\n\t    if (editorActions.isRegistered(action)) {\n\t      keyboard.addListener(fn);\n\t    }\n\t  }\n\n\t  // select all elements\n\t  // CTRL + A\n\t  addListener('selectElements', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n\t      editorActions.trigger('selectElements');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // search labels\n\t  // CTRL + F\n\t  addListener('find', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.isKey(['f', 'F'], event) && keyboard.isCmd(event)) {\n\t      editorActions.trigger('find');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // activate space tool\n\t  // S\n\t  addListener('spaceTool', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.hasModifier(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey(['s', 'S'], event)) {\n\t      editorActions.trigger('spaceTool');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // activate lasso tool\n\t  // L\n\t  addListener('lassoTool', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.hasModifier(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey(['l', 'L'], event)) {\n\t      editorActions.trigger('lassoTool');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // activate hand tool\n\t  // H\n\t  addListener('handTool', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.hasModifier(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey(['h', 'H'], event)) {\n\t      editorActions.trigger('handTool');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // activate global connect tool\n\t  // C\n\t  addListener('globalConnectTool', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.hasModifier(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey(['c', 'C'], event)) {\n\t      editorActions.trigger('globalConnectTool');\n\n\t      return true;\n\t    }\n\t  });\n\n\t  // activate direct editing\n\t  // E\n\t  addListener('directEditing', function(context) {\n\n\t    var event = context.keyEvent;\n\n\t    if (keyboard.hasModifier(event)) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isKey(['e', 'E'], event)) {\n\t      editorActions.trigger('directEditing');\n\n\t      return true;\n\t    }\n\t  });\n\n\t};\n\n\tvar KeyboardModule$1 = {\n\t  __depends__: [\n\t    KeyboardModule\n\t  ],\n\t  __init__: [ 'keyboardBindings' ],\n\t  keyboardBindings: [ 'type', BpmnKeyboardBindings ]\n\t};\n\n\tvar DEFAULT_CONFIG$1 = {\n\t  moveSpeed: 1,\n\t  moveSpeedAccelerated: 10\n\t};\n\n\tvar HIGHER_PRIORITY$1 = 1500;\n\n\tvar LEFT = 'left';\n\tvar UP = 'up';\n\tvar RIGHT = 'right';\n\tvar DOWN = 'down';\n\n\tvar KEY_TO_DIRECTION = {\n\t  ArrowLeft: LEFT,\n\t  Left: LEFT,\n\t  ArrowUp: UP,\n\t  Up: UP,\n\t  ArrowRight: RIGHT,\n\t  Right: RIGHT,\n\t  ArrowDown: DOWN,\n\t  Down: DOWN\n\t};\n\n\tvar DIRECTIONS_DELTA = {\n\t  left: function(speed) {\n\t    return {\n\t      x: -speed,\n\t      y: 0\n\t    };\n\t  },\n\t  up: function(speed) {\n\t    return {\n\t      x: 0,\n\t      y: -speed\n\t    };\n\t  },\n\t  right: function(speed) {\n\t    return {\n\t      x: speed,\n\t      y: 0\n\t    };\n\t  },\n\t  down: function(speed) {\n\t    return {\n\t      x: 0,\n\t      y: speed\n\t    };\n\t  }\n\t};\n\n\n\t/**\n\t * Enables to move selection with keyboard arrows.\n\t * Use with Shift for modified speed (default=1, with Shift=10).\n\t * Pressed Cmd/Ctrl turns the feature off.\n\t *\n\t * @param {Object} config\n\t * @param {number} [config.moveSpeed=1]\n\t * @param {number} [config.moveSpeedAccelerated=10]\n\t * @param {Keyboard} keyboard\n\t * @param {Modeling} modeling\n\t * @param {Selection} selection\n\t */\n\tfunction KeyboardMoveSelection(\n\t    config,\n\t    keyboard,\n\t    modeling,\n\t    rules,\n\t    selection\n\t) {\n\n\t  var self = this;\n\n\t  this._config = assign({}, DEFAULT_CONFIG$1, config || {});\n\n\t  keyboard.addListener(HIGHER_PRIORITY$1, function(event) {\n\n\t    var keyEvent = event.keyEvent;\n\n\t    var direction = KEY_TO_DIRECTION[keyEvent.key];\n\n\t    if (!direction) {\n\t      return;\n\t    }\n\n\t    if (keyboard.isCmd(keyEvent)) {\n\t      return;\n\t    }\n\n\t    var accelerated = keyboard.isShift(keyEvent);\n\n\t    self.moveSelection(direction, accelerated);\n\n\t    return true;\n\t  });\n\n\n\t  /**\n\t   * Move selected elements in the given direction,\n\t   * optionally specifying accelerated movement.\n\t   *\n\t   * @param {string} direction\n\t   * @param {boolean} [accelerated=false]\n\t   */\n\t  this.moveSelection = function(direction, accelerated) {\n\n\t    var selectedElements = selection.get();\n\n\t    if (!selectedElements.length) {\n\t      return;\n\t    }\n\n\t    var speed = this._config[\n\t      accelerated ?\n\t        'moveSpeedAccelerated' :\n\t        'moveSpeed'\n\t    ];\n\n\t    var delta = DIRECTIONS_DELTA[direction](speed);\n\n\t    var canMove = rules.allowed('elements.move', {\n\t      shapes: selectedElements\n\t    });\n\n\t    if (canMove) {\n\t      modeling.moveElements(selectedElements, delta);\n\t    }\n\t  };\n\n\t}\n\n\tKeyboardMoveSelection.$inject = [\n\t  'config.keyboardMoveSelection',\n\t  'keyboard',\n\t  'modeling',\n\t  'rules',\n\t  'selection'\n\t];\n\n\tvar KeyboardMoveSelectionModule = {\n\t  __depends__: [\n\t    KeyboardModule,\n\t    SelectionModule\n\t  ],\n\t  __init__: [\n\t    'keyboardMoveSelection'\n\t  ],\n\t  keyboardMoveSelection: [ 'type', KeyboardMoveSelection ]\n\t};\n\n\t/**\n\t * Adds change support to the diagram, including\n\t *\n\t * <ul>\n\t *   <li>redrawing shapes and connections on change</li>\n\t * </ul>\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {ElementRegistry} elementRegistry\n\t * @param {GraphicsFactory} graphicsFactory\n\t */\n\tfunction ChangeSupport(\n\t    eventBus, canvas, elementRegistry,\n\t    graphicsFactory) {\n\n\n\t  // redraw shapes / connections on change\n\n\t  eventBus.on('element.changed', function(event) {\n\n\t    var element = event.element;\n\n\t    // element might have been deleted and replaced by new element with same ID\n\t    // thus check for parent of element except for root element\n\t    if (element.parent || element === canvas.getRootElement()) {\n\t      event.gfx = elementRegistry.getGraphics(element);\n\t    }\n\n\t    // shape + gfx may have been deleted\n\t    if (!event.gfx) {\n\t      return;\n\t    }\n\n\t    eventBus.fire(getType(element) + '.changed', event);\n\t  });\n\n\t  eventBus.on('elements.changed', function(event) {\n\n\t    var elements = event.elements;\n\n\t    elements.forEach(function(e) {\n\t      eventBus.fire('element.changed', { element: e });\n\t    });\n\n\t    graphicsFactory.updateContainments(elements);\n\t  });\n\n\t  eventBus.on('shape.changed', function(event) {\n\t    graphicsFactory.update('shape', event.element, event.gfx);\n\t  });\n\n\t  eventBus.on('connection.changed', function(event) {\n\t    graphicsFactory.update('connection', event.element, event.gfx);\n\t  });\n\t}\n\n\tChangeSupport.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'elementRegistry',\n\t  'graphicsFactory'\n\t];\n\n\tvar ChangeSupportModule = {\n\t  __init__: [ 'changeSupport'],\n\t  changeSupport: [ 'type', ChangeSupport ]\n\t};\n\n\tvar DEFAULT_MIN_WIDTH = 10;\n\n\n\t/**\n\t * A component that provides resizing of shapes on the canvas.\n\t *\n\t * The following components are part of shape resize:\n\t *\n\t *  * adding resize handles,\n\t *  * creating a visual during resize\n\t *  * checking resize rules\n\t *  * committing a change once finished\n\t *\n\t *\n\t * ## Customizing\n\t *\n\t * It's possible to customize the resizing behaviour by intercepting 'resize.start'\n\t * and providing the following parameters through the 'context':\n\t *\n\t *   * minDimensions ({ width, height }): minimum shape dimensions\n\t *\n\t *   * childrenBoxPadding ({ left, top, bottom, right } || number):\n\t *     gap between the minimum bounding box and the container\n\t *\n\t * f.ex:\n\t *\n\t * ```javascript\n\t * eventBus.on('resize.start', 1500, function(event) {\n\t *   var context = event.context,\n\t *\n\t *  context.minDimensions = { width: 140, height: 120 };\n\t *\n\t *  // Passing general padding\n\t *  context.childrenBoxPadding = 30;\n\t *\n\t *  // Passing padding to a specific side\n\t *  context.childrenBoxPadding.left = 20;\n\t * });\n\t * ```\n\t */\n\tfunction Resize(eventBus, rules, modeling, dragging) {\n\n\t  this._dragging = dragging;\n\t  this._rules = rules;\n\n\t  var self = this;\n\n\n\t  /**\n\t   * Handle resize move by specified delta.\n\t   *\n\t   * @param {Object} context\n\t   * @param {Point} delta\n\t   */\n\t  function handleMove(context, delta) {\n\n\t    var shape = context.shape,\n\t        direction = context.direction,\n\t        resizeConstraints = context.resizeConstraints,\n\t        newBounds;\n\n\t    context.delta = delta;\n\n\t    newBounds = resizeBounds(shape, direction, delta);\n\n\t    // ensure constraints during resize\n\t    context.newBounds = ensureConstraints$1(newBounds, resizeConstraints);\n\n\t    // update + cache executable state\n\t    context.canExecute = self.canResize(context);\n\t  }\n\n\t  /**\n\t   * Handle resize start.\n\t   *\n\t   * @param  {Object} context\n\t   */\n\t  function handleStart(context) {\n\n\t    var resizeConstraints = context.resizeConstraints,\n\n\t        // evaluate minBounds for backwards compatibility\n\t        minBounds = context.minBounds;\n\n\t    if (resizeConstraints !== undefined) {\n\t      return;\n\t    }\n\n\t    if (minBounds === undefined) {\n\t      minBounds = self.computeMinResizeBox(context);\n\t    }\n\n\t    context.resizeConstraints = {\n\t      min: asTRBL(minBounds)\n\t    };\n\t  }\n\n\t  /**\n\t   * Handle resize end.\n\t   *\n\t   * @param  {Object} context\n\t   */\n\t  function handleEnd(context) {\n\t    var shape = context.shape,\n\t        canExecute = context.canExecute,\n\t        newBounds = context.newBounds;\n\n\t    if (canExecute) {\n\n\t      // ensure we have actual pixel values for new bounds\n\t      // (important when zoom level was > 1 during move)\n\t      newBounds = roundBounds(newBounds);\n\n\t      if (!boundsChanged$1(shape, newBounds)) {\n\n\t        // no resize necessary\n\t        return;\n\t      }\n\n\t      // perform the actual resize\n\t      modeling.resizeShape(shape, newBounds);\n\t    }\n\t  }\n\n\n\t  eventBus.on('resize.start', function(event) {\n\t    handleStart(event.context);\n\t  });\n\n\t  eventBus.on('resize.move', function(event) {\n\t    var delta = {\n\t      x: event.dx,\n\t      y: event.dy\n\t    };\n\n\t    handleMove(event.context, delta);\n\t  });\n\n\t  eventBus.on('resize.end', function(event) {\n\t    handleEnd(event.context);\n\t  });\n\n\t}\n\n\n\tResize.prototype.canResize = function(context) {\n\t  var rules = this._rules;\n\n\t  var ctx = pick(context, [ 'newBounds', 'shape', 'delta', 'direction' ]);\n\n\t  return rules.allowed('shape.resize', ctx);\n\t};\n\n\t/**\n\t * Activate a resize operation.\n\t *\n\t * You may specify additional contextual information and must specify a\n\t * resize direction during activation of the resize event.\n\t *\n\t * @param {MouseEvent} event\n\t * @param {djs.model.Shape} shape\n\t * @param {Object|string} contextOrDirection\n\t */\n\tResize.prototype.activate = function(event, shape, contextOrDirection) {\n\t  var dragging = this._dragging,\n\t      context,\n\t      direction;\n\n\t  if (typeof contextOrDirection === 'string') {\n\t    contextOrDirection = {\n\t      direction: contextOrDirection\n\t    };\n\t  }\n\n\t  context = assign({ shape: shape }, contextOrDirection);\n\n\t  direction = context.direction;\n\n\t  if (!direction) {\n\t    throw new Error('must provide a direction (n|w|s|e|nw|se|ne|sw)');\n\t  }\n\n\t  dragging.init(event, getReferencePoint(shape, direction), 'resize', {\n\t    autoActivate: true,\n\t    cursor: getCursor(direction),\n\t    data: {\n\t      shape: shape,\n\t      context: context\n\t    }\n\t  });\n\t};\n\n\tResize.prototype.computeMinResizeBox = function(context) {\n\t  var shape = context.shape,\n\t      direction = context.direction,\n\t      minDimensions,\n\t      childrenBounds;\n\n\t  minDimensions = context.minDimensions || {\n\t    width: DEFAULT_MIN_WIDTH,\n\t    height: DEFAULT_MIN_WIDTH\n\t  };\n\n\t  // get children bounds\n\t  childrenBounds = computeChildrenBBox(shape, context.childrenBoxPadding);\n\n\t  // get correct minimum bounds from given resize direction\n\t  // basically ensures that the minBounds is max(childrenBounds, minDimensions)\n\t  return getMinResizeBounds(direction, shape, minDimensions, childrenBounds);\n\t};\n\n\n\tResize.$inject = [\n\t  'eventBus',\n\t  'rules',\n\t  'modeling',\n\t  'dragging'\n\t];\n\n\t// helpers //////////\n\n\tfunction boundsChanged$1(shape, newBounds) {\n\t  return shape.x !== newBounds.x ||\n\t    shape.y !== newBounds.y ||\n\t    shape.width !== newBounds.width ||\n\t    shape.height !== newBounds.height;\n\t}\n\n\tfunction getReferencePoint(shape, direction) {\n\t  var mid = getMid(shape),\n\t      trbl = asTRBL(shape);\n\n\t  var referencePoint = {\n\t    x: mid.x,\n\t    y: mid.y\n\t  };\n\n\t  if (direction.indexOf('n') !== -1) {\n\t    referencePoint.y = trbl.top;\n\t  } else if (direction.indexOf('s') !== -1) {\n\t    referencePoint.y = trbl.bottom;\n\t  }\n\n\t  if (direction.indexOf('e') !== -1) {\n\t    referencePoint.x = trbl.right;\n\t  } else if (direction.indexOf('w') !== -1) {\n\t    referencePoint.x = trbl.left;\n\t  }\n\n\t  return referencePoint;\n\t}\n\n\tfunction getCursor(direction) {\n\t  var prefix = 'resize-';\n\n\t  if (direction === 'n' || direction === 's') {\n\t    return prefix + 'ns';\n\t  } else if (direction === 'e' || direction === 'w') {\n\t    return prefix + 'ew';\n\t  } else if (direction === 'nw' || direction === 'se') {\n\t    return prefix + 'nwse';\n\t  } else {\n\t    return prefix + 'nesw';\n\t  }\n\t}\n\n\tvar MARKER_RESIZING = 'djs-resizing',\n\t    MARKER_RESIZE_NOT_OK = 'resize-not-ok';\n\n\tvar LOW_PRIORITY$9 = 500;\n\n\n\t/**\n\t * Provides previews for resizing shapes when resizing.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {PreviewSupport} previewSupport\n\t */\n\tfunction ResizePreview(eventBus, canvas, previewSupport) {\n\n\t  /**\n\t   * Update resizer frame.\n\t   *\n\t   * @param {Object} context\n\t   */\n\t  function updateFrame(context) {\n\n\t    var shape = context.shape,\n\t        bounds = context.newBounds,\n\t        frame = context.frame;\n\n\t    if (!frame) {\n\t      frame = context.frame = previewSupport.addFrame(shape, canvas.getDefaultLayer());\n\n\t      canvas.addMarker(shape, MARKER_RESIZING);\n\t    }\n\n\t    if (bounds.width > 5) {\n\t      attr$1(frame, { x: bounds.x, width: bounds.width });\n\t    }\n\n\t    if (bounds.height > 5) {\n\t      attr$1(frame, { y: bounds.y, height: bounds.height });\n\t    }\n\n\t    if (context.canExecute) {\n\t      classes$1(frame).remove(MARKER_RESIZE_NOT_OK);\n\t    } else {\n\t      classes$1(frame).add(MARKER_RESIZE_NOT_OK);\n\t    }\n\t  }\n\n\t  /**\n\t   * Remove resizer frame.\n\t   *\n\t   * @param {Object} context\n\t   */\n\t  function removeFrame(context) {\n\t    var shape = context.shape,\n\t        frame = context.frame;\n\n\t    if (frame) {\n\t      remove$1(context.frame);\n\t    }\n\n\t    canvas.removeMarker(shape, MARKER_RESIZING);\n\t  }\n\n\t  // add and update previews\n\t  eventBus.on('resize.move', LOW_PRIORITY$9, function(event) {\n\t    updateFrame(event.context);\n\t  });\n\n\t  // remove previews\n\t  eventBus.on('resize.cleanup', function(event) {\n\t    removeFrame(event.context);\n\t  });\n\n\t}\n\n\tResizePreview.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'previewSupport'\n\t];\n\n\tvar HANDLE_OFFSET = -6,\n\t    HANDLE_SIZE = 4,\n\t    HANDLE_HIT_SIZE = 20;\n\n\tvar CLS_RESIZER = 'djs-resizer';\n\n\tvar directions = [ 'n', 'w', 's', 'e', 'nw', 'ne', 'se', 'sw' ];\n\n\n\t/**\n\t * This component is responsible for adding resize handles.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {Selection} selection\n\t * @param {Resize} resize\n\t */\n\tfunction ResizeHandles(eventBus, canvas, selection, resize) {\n\n\t  this._resize = resize;\n\t  this._canvas = canvas;\n\n\t  var self = this;\n\n\t  eventBus.on('selection.changed', function(e) {\n\t    var newSelection = e.newSelection;\n\n\t    // remove old selection markers\n\t    self.removeResizers();\n\n\t    // add new selection markers ONLY if single selection\n\t    if (newSelection.length === 1) {\n\t      forEach(newSelection, bind(self.addResizer, self));\n\t    }\n\t  });\n\n\t  eventBus.on('shape.changed', function(e) {\n\t    var shape = e.element;\n\n\t    if (selection.isSelected(shape)) {\n\t      self.removeResizers();\n\n\t      self.addResizer(shape);\n\t    }\n\t  });\n\t}\n\n\n\tResizeHandles.prototype.makeDraggable = function(element, gfx, direction) {\n\t  var resize = this._resize;\n\n\t  function startResize(event) {\n\n\t    // only trigger on left mouse button\n\t    if (isPrimaryButton(event)) {\n\t      resize.activate(event, element, direction);\n\t    }\n\t  }\n\n\t  componentEvent.bind(gfx, 'mousedown', startResize);\n\t  componentEvent.bind(gfx, 'touchstart', startResize);\n\t};\n\n\n\tResizeHandles.prototype._createResizer = function(element, x, y, direction) {\n\t  var resizersParent = this._getResizersParent();\n\n\t  var offset = getHandleOffset(direction);\n\n\t  var group = create('g');\n\n\t  classes$1(group).add(CLS_RESIZER);\n\t  classes$1(group).add(CLS_RESIZER + '-' + element.id);\n\t  classes$1(group).add(CLS_RESIZER + '-' + direction);\n\n\t  append(resizersParent, group);\n\n\t  var visual = create('rect');\n\n\t  attr$1(visual, {\n\t    x: -HANDLE_SIZE / 2 + offset.x,\n\t    y: -HANDLE_SIZE / 2 + offset.y,\n\t    width: HANDLE_SIZE,\n\t    height: HANDLE_SIZE\n\t  });\n\n\t  classes$1(visual).add(CLS_RESIZER + '-visual');\n\n\t  append(group, visual);\n\n\t  var hit = create('rect');\n\n\t  attr$1(hit, {\n\t    x: -HANDLE_HIT_SIZE / 2 + offset.x,\n\t    y: -HANDLE_HIT_SIZE / 2 + offset.y,\n\t    width: HANDLE_HIT_SIZE,\n\t    height: HANDLE_HIT_SIZE\n\t  });\n\n\t  classes$1(hit).add(CLS_RESIZER + '-hit');\n\n\t  append(group, hit);\n\n\t  transform$1(group, x, y);\n\n\t  return group;\n\t};\n\n\tResizeHandles.prototype.createResizer = function(element, direction) {\n\t  var point = getReferencePoint(element, direction);\n\n\t  var resizer = this._createResizer(element, point.x, point.y, direction);\n\n\t  this.makeDraggable(element, resizer, direction);\n\t};\n\n\t// resize handles implementation ///////////////////////////////\n\n\t/**\n\t * Add resizers for a given element.\n\t *\n\t * @param {djs.model.Shape} shape\n\t */\n\tResizeHandles.prototype.addResizer = function(shape) {\n\t  var self = this;\n\n\t  var resize = this._resize;\n\n\t  if (!resize.canResize({ shape: shape })) {\n\t    return;\n\t  }\n\n\t  forEach(directions, function(direction) {\n\t    self.createResizer(shape, direction);\n\t  });\n\t};\n\n\t/**\n\t * Remove all resizers\n\t */\n\tResizeHandles.prototype.removeResizers = function() {\n\t  var resizersParent = this._getResizersParent();\n\n\t  clear$1(resizersParent);\n\t};\n\n\tResizeHandles.prototype._getResizersParent = function() {\n\t  return this._canvas.getLayer('resizers');\n\t};\n\n\tResizeHandles.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'selection',\n\t  'resize'\n\t];\n\n\t// helpers //////////\n\n\tfunction getHandleOffset(direction) {\n\t  var offset = {\n\t    x: 0,\n\t    y: 0\n\t  };\n\n\t  if (direction.indexOf('e') !== -1) {\n\t    offset.x = -HANDLE_OFFSET;\n\t  } else if (direction.indexOf('w') !== -1) {\n\t    offset.x = HANDLE_OFFSET;\n\t  }\n\n\t  if (direction.indexOf('s') !== -1) {\n\t    offset.y = -HANDLE_OFFSET;\n\t  } else if (direction.indexOf('n') !== -1) {\n\t    offset.y = HANDLE_OFFSET;\n\t  }\n\n\t  return offset;\n\t}\n\n\tvar ResizeModule = {\n\t  __depends__: [\n\t    RulesModule,\n\t    DraggingModule,\n\t    PreviewSupportModule\n\t  ],\n\t  __init__: [\n\t    'resize',\n\t    'resizePreview',\n\t    'resizeHandles'\n\t  ],\n\t  resize: [ 'type', Resize ],\n\t  resizePreview: [ 'type', ResizePreview ],\n\t  resizeHandles: [ 'type', ResizeHandles ]\n\t};\n\n\t/**\n\t * Creates a new bpmn:CategoryValue inside a new bpmn:Category\n\t *\n\t * @param {ModdleElement} definitions\n\t * @param {BpmnFactory} bpmnFactory\n\t *\n\t * @return {ModdleElement} categoryValue.\n\t */\n\tfunction createCategoryValue(definitions, bpmnFactory) {\n\t  var categoryValue = bpmnFactory.create('bpmn:CategoryValue'),\n\t      category = bpmnFactory.create('bpmn:Category', {\n\t        categoryValue: [ categoryValue ]\n\t      });\n\n\t  // add to correct place\n\t  add$1(definitions.get('rootElements'), category);\n\t  getBusinessObject(category).$parent = definitions;\n\t  getBusinessObject(categoryValue).$parent = category;\n\n\t  return categoryValue;\n\n\t}\n\n\tfunction LabelEditingProvider(\n\t    eventBus, bpmnFactory, canvas, directEditing,\n\t    modeling, resizeHandles, textRenderer) {\n\n\t  this._bpmnFactory = bpmnFactory;\n\t  this._canvas = canvas;\n\t  this._modeling = modeling;\n\t  this._textRenderer = textRenderer;\n\n\t  directEditing.registerProvider(this);\n\n\t  // listen to dblclick on non-root elements\n\t  eventBus.on('element.dblclick', function(event) {\n\t    activateDirectEdit(event.element, true);\n\t  });\n\n\t  // complete on followup canvas operation\n\t  eventBus.on([\n\t    'autoPlace.start',\n\t    'canvas.viewbox.changing',\n\t    'drag.init',\n\t    'element.mousedown',\n\t    'popupMenu.open'\n\t  ], function(event) {\n\n\t    if (directEditing.isActive()) {\n\t      directEditing.complete();\n\t    }\n\t  });\n\n\t  // cancel on command stack changes\n\t  eventBus.on([ 'commandStack.changed' ], function(e) {\n\t    if (directEditing.isActive()) {\n\t      directEditing.cancel();\n\t    }\n\t  });\n\n\n\t  eventBus.on('directEditing.activate', function(event) {\n\t    resizeHandles.removeResizers();\n\t  });\n\n\t  eventBus.on('create.end', 500, function(event) {\n\n\t    var context = event.context,\n\t        element = context.shape,\n\t        canExecute = event.context.canExecute,\n\t        isTouch = event.isTouch;\n\n\t    // TODO(nikku): we need to find a way to support the\n\t    // direct editing on mobile devices; right now this will\n\t    // break for desworkflowediting on mobile devices\n\t    // as it breaks the user interaction workflow\n\n\t    // TODO(nre): we should temporarily focus the edited element\n\t    // here and release the focused viewport after the direct edit\n\t    // operation is finished\n\t    if (isTouch) {\n\t      return;\n\t    }\n\n\t    if (!canExecute) {\n\t      return;\n\t    }\n\n\t    if (context.hints && context.hints.createElementsBehavior === false) {\n\t      return;\n\t    }\n\n\t    activateDirectEdit(element);\n\t  });\n\n\t  eventBus.on('autoPlace.end', 500, function(event) {\n\t    activateDirectEdit(event.shape);\n\t  });\n\n\n\t  function activateDirectEdit(element, force) {\n\t    if (force ||\n\t        isAny(element, [ 'bpmn:Task', 'bpmn:TextAnnotation', 'bpmn:Group' ]) ||\n\t        isCollapsedSubProcess(element)) {\n\n\t      directEditing.activate(element);\n\t    }\n\t  }\n\n\t}\n\n\tLabelEditingProvider.$inject = [\n\t  'eventBus',\n\t  'bpmnFactory',\n\t  'canvas',\n\t  'directEditing',\n\t  'modeling',\n\t  'resizeHandles',\n\t  'textRenderer'\n\t];\n\n\n\t/**\n\t * Activate direct editing for activities and text annotations.\n\t *\n\t * @param  {djs.model.Base} element\n\t *\n\t * @return {Object} an object with properties bounds (position and size), text and options\n\t */\n\tLabelEditingProvider.prototype.activate = function(element) {\n\n\t  // text\n\t  var text = getLabel(element);\n\n\t  if (text === undefined) {\n\t    return;\n\t  }\n\n\t  var context = {\n\t    text: text\n\t  };\n\n\t  // bounds\n\t  var bounds = this.getEditingBBox(element);\n\n\t  assign(context, bounds);\n\n\t  var options = {};\n\n\t  // tasks\n\t  if (\n\t    isAny(element, [\n\t      'bpmn:Task',\n\t      'bpmn:Participant',\n\t      'bpmn:Lane',\n\t      'bpmn:CallActivity'\n\t    ]) ||\n\t    isCollapsedSubProcess(element)\n\t  ) {\n\t    assign(options, {\n\t      centerVertically: true\n\t    });\n\t  }\n\n\t  // external labels\n\t  if (isLabelExternal(element)) {\n\t    assign(options, {\n\t      autoResize: true\n\t    });\n\t  }\n\n\t  // text annotations\n\t  if (is$1(element, 'bpmn:TextAnnotation')) {\n\t    assign(options, {\n\t      resizable: true,\n\t      autoResize: true\n\t    });\n\t  }\n\n\t  assign(context, {\n\t    options: options\n\t  });\n\n\t  return context;\n\t};\n\n\n\t/**\n\t * Get the editing bounding box based on the element's size and position\n\t *\n\t * @param  {djs.model.Base} element\n\t *\n\t * @return {Object} an object containing information about position\n\t *                  and size (fixed or minimum and/or maximum)\n\t */\n\tLabelEditingProvider.prototype.getEditingBBox = function(element) {\n\t  var canvas = this._canvas;\n\n\t  var target = element.label || element;\n\n\t  var bbox = canvas.getAbsoluteBBox(target);\n\n\t  var mid = {\n\t    x: bbox.x + bbox.width / 2,\n\t    y: bbox.y + bbox.height / 2\n\t  };\n\n\t  // default position\n\t  var bounds = { x: bbox.x, y: bbox.y };\n\n\t  var zoom = canvas.zoom();\n\n\t  var defaultStyle = this._textRenderer.getDefaultStyle(),\n\t      externalStyle = this._textRenderer.getExternalStyle();\n\n\t  // take zoom into account\n\t  var externalFontSize = externalStyle.fontSize * zoom,\n\t      externalLineHeight = externalStyle.lineHeight,\n\t      defaultFontSize = defaultStyle.fontSize * zoom,\n\t      defaultLineHeight = defaultStyle.lineHeight;\n\n\t  var style = {\n\t    fontFamily: this._textRenderer.getDefaultStyle().fontFamily,\n\t    fontWeight: this._textRenderer.getDefaultStyle().fontWeight\n\t  };\n\n\t  // adjust for expanded pools AND lanes\n\t  if (is$1(element, 'bpmn:Lane') || isExpandedPool(element)) {\n\n\t    assign(bounds, {\n\t      width: bbox.height,\n\t      height: 30 * zoom,\n\t      x: bbox.x - bbox.height / 2 + (15 * zoom),\n\t      y: mid.y - (30 * zoom) / 2\n\t    });\n\n\t    assign(style, {\n\t      fontSize: defaultFontSize + 'px',\n\t      lineHeight: defaultLineHeight,\n\t      paddingTop: (7 * zoom) + 'px',\n\t      paddingBottom: (7 * zoom) + 'px',\n\t      paddingLeft: (5 * zoom) + 'px',\n\t      paddingRight: (5 * zoom) + 'px',\n\t      transform: 'rotate(-90deg)'\n\t    });\n\t  }\n\n\n\t  // internal labels for tasks and collapsed call activities,\n\t  // sub processes and participants\n\t  if (isAny(element, [ 'bpmn:Task', 'bpmn:CallActivity']) ||\n\t      isCollapsedPool(element) ||\n\t      isCollapsedSubProcess(element)) {\n\n\t    assign(bounds, {\n\t      width: bbox.width,\n\t      height: bbox.height\n\t    });\n\n\t    assign(style, {\n\t      fontSize: defaultFontSize + 'px',\n\t      lineHeight: defaultLineHeight,\n\t      paddingTop: (7 * zoom) + 'px',\n\t      paddingBottom: (7 * zoom) + 'px',\n\t      paddingLeft: (5 * zoom) + 'px',\n\t      paddingRight: (5 * zoom) + 'px'\n\t    });\n\t  }\n\n\n\t  // internal labels for expanded sub processes\n\t  if (isExpandedSubProcess(element)) {\n\t    assign(bounds, {\n\t      width: bbox.width,\n\t      x: bbox.x\n\t    });\n\n\t    assign(style, {\n\t      fontSize: defaultFontSize + 'px',\n\t      lineHeight: defaultLineHeight,\n\t      paddingTop: (7 * zoom) + 'px',\n\t      paddingBottom: (7 * zoom) + 'px',\n\t      paddingLeft: (5 * zoom) + 'px',\n\t      paddingRight: (5 * zoom) + 'px'\n\t    });\n\t  }\n\n\t  var width = 90 * zoom,\n\t      paddingTop = 7 * zoom,\n\t      paddingBottom = 4 * zoom;\n\n\t  // external labels for events, data elements, gateways, groups and connections\n\t  if (target.labelTarget) {\n\t    assign(bounds, {\n\t      width: width,\n\t      height: bbox.height + paddingTop + paddingBottom,\n\t      x: mid.x - width / 2,\n\t      y: bbox.y - paddingTop\n\t    });\n\n\t    assign(style, {\n\t      fontSize: externalFontSize + 'px',\n\t      lineHeight: externalLineHeight,\n\t      paddingTop: paddingTop + 'px',\n\t      paddingBottom: paddingBottom + 'px'\n\t    });\n\t  }\n\n\t  // external label not yet created\n\t  if (isLabelExternal(target)\n\t      && !hasExternalLabel(target)\n\t      && !isLabel(target)) {\n\n\t    var externalLabelMid = getExternalLabelMid(element);\n\n\t    var absoluteBBox = canvas.getAbsoluteBBox({\n\t      x: externalLabelMid.x,\n\t      y: externalLabelMid.y,\n\t      width: 0,\n\t      height: 0\n\t    });\n\n\t    var height = externalFontSize + paddingTop + paddingBottom;\n\n\t    assign(bounds, {\n\t      width: width,\n\t      height: height,\n\t      x: absoluteBBox.x - width / 2,\n\t      y: absoluteBBox.y - height / 2\n\t    });\n\n\t    assign(style, {\n\t      fontSize: externalFontSize + 'px',\n\t      lineHeight: externalLineHeight,\n\t      paddingTop: paddingTop + 'px',\n\t      paddingBottom: paddingBottom + 'px'\n\t    });\n\t  }\n\n\t  // text annotations\n\t  if (is$1(element, 'bpmn:TextAnnotation')) {\n\t    assign(bounds, {\n\t      width: bbox.width,\n\t      height: bbox.height,\n\t      minWidth: 30 * zoom,\n\t      minHeight: 10 * zoom\n\t    });\n\n\t    assign(style, {\n\t      textAlign: 'left',\n\t      paddingTop: (5 * zoom) + 'px',\n\t      paddingBottom: (7 * zoom) + 'px',\n\t      paddingLeft: (7 * zoom) + 'px',\n\t      paddingRight: (5 * zoom) + 'px',\n\t      fontSize: defaultFontSize + 'px',\n\t      lineHeight: defaultLineHeight\n\t    });\n\t  }\n\n\t  return { bounds: bounds, style: style };\n\t};\n\n\n\tLabelEditingProvider.prototype.update = function(\n\t    element, newLabel,\n\t    activeContextText, bounds) {\n\n\t  var newBounds,\n\t      bbox;\n\n\t  if (is$1(element, 'bpmn:TextAnnotation')) {\n\n\t    bbox = this._canvas.getAbsoluteBBox(element);\n\n\t    newBounds = {\n\t      x: element.x,\n\t      y: element.y,\n\t      width: element.width / bbox.width * bounds.width,\n\t      height: element.height / bbox.height * bounds.height\n\t    };\n\t  }\n\n\t  if (is$1(element, 'bpmn:Group')) {\n\n\t    var businessObject = getBusinessObject(element);\n\n\t    // initialize categoryValue if not existing\n\t    if (!businessObject.categoryValueRef) {\n\n\t      var rootElement = this._canvas.getRootElement(),\n\t          definitions = getBusinessObject(rootElement).$parent;\n\n\t      var categoryValue = createCategoryValue(definitions, this._bpmnFactory);\n\n\t      getBusinessObject(element).categoryValueRef = categoryValue;\n\t    }\n\n\t  }\n\n\t  if (isEmptyText(newLabel)) {\n\t    newLabel = null;\n\t  }\n\n\t  this._modeling.updateLabel(element, newLabel, newBounds);\n\t};\n\n\n\n\t// helpers //////////////////////\n\n\tfunction isCollapsedSubProcess(element) {\n\t  return is$1(element, 'bpmn:SubProcess') && !isExpanded(element);\n\t}\n\n\tfunction isExpandedSubProcess(element) {\n\t  return is$1(element, 'bpmn:SubProcess') && isExpanded(element);\n\t}\n\n\tfunction isCollapsedPool(element) {\n\t  return is$1(element, 'bpmn:Participant') && !isExpanded(element);\n\t}\n\n\tfunction isExpandedPool(element) {\n\t  return is$1(element, 'bpmn:Participant') && isExpanded(element);\n\t}\n\n\tfunction isEmptyText(label) {\n\t  return !label || !label.trim();\n\t}\n\n\tvar MARKER_HIDDEN = 'djs-element-hidden',\n\t    MARKER_LABEL_HIDDEN = 'djs-label-hidden';\n\n\n\tfunction LabelEditingPreview(\n\t    eventBus, canvas, elementRegistry,\n\t    pathMap) {\n\n\t  var self = this;\n\n\t  var defaultLayer = canvas.getDefaultLayer();\n\n\t  var element, absoluteElementBBox, gfx;\n\n\t  eventBus.on('directEditing.activate', function(context) {\n\t    var activeProvider = context.active;\n\n\t    element = activeProvider.element.label || activeProvider.element;\n\n\t    // text annotation\n\t    if (is$1(element, 'bpmn:TextAnnotation')) {\n\t      absoluteElementBBox = canvas.getAbsoluteBBox(element);\n\n\t      gfx = create('g');\n\n\t      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: element.height,\n\t        position: {\n\t          mx: 0.0,\n\t          my: 0.0\n\t        }\n\t      });\n\n\t      var path = self.path = create('path');\n\n\t      attr$1(path, {\n\t        d: textPathData,\n\t        strokeWidth: 2,\n\t        stroke: getStrokeColor$1(element)\n\t      });\n\n\t      append(gfx, path);\n\n\t      append(defaultLayer, gfx);\n\n\t      translate(gfx, element.x, element.y);\n\t    }\n\n\t    if (is$1(element, 'bpmn:TextAnnotation') ||\n\t        element.labelTarget) {\n\t      canvas.addMarker(element, MARKER_HIDDEN);\n\t    } else if (is$1(element, 'bpmn:Task') ||\n\t               is$1(element, 'bpmn:CallActivity') ||\n\t               is$1(element, 'bpmn:SubProcess') ||\n\t               is$1(element, 'bpmn:Participant')) {\n\t      canvas.addMarker(element, MARKER_LABEL_HIDDEN);\n\t    }\n\t  });\n\n\t  eventBus.on('directEditing.resize', function(context) {\n\n\t    // text annotation\n\t    if (is$1(element, 'bpmn:TextAnnotation')) {\n\t      var height = context.height,\n\t          dy = context.dy;\n\n\t      var newElementHeight = Math.max(element.height / absoluteElementBBox.height * (height + dy), 0);\n\n\t      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {\n\t        xScaleFactor: 1,\n\t        yScaleFactor: 1,\n\t        containerWidth: element.width,\n\t        containerHeight: newElementHeight,\n\t        position: {\n\t          mx: 0.0,\n\t          my: 0.0\n\t        }\n\t      });\n\n\t      attr$1(self.path, {\n\t        d: textPathData\n\t      });\n\t    }\n\t  });\n\n\t  eventBus.on([ 'directEditing.complete', 'directEditing.cancel' ], function(context) {\n\t    var activeProvider = context.active;\n\n\t    if (activeProvider) {\n\t      canvas.removeMarker(activeProvider.element.label || activeProvider.element, MARKER_HIDDEN);\n\t      canvas.removeMarker(element, MARKER_LABEL_HIDDEN);\n\t    }\n\n\t    element = undefined;\n\t    absoluteElementBBox = undefined;\n\n\t    if (gfx) {\n\t      remove$1(gfx);\n\n\t      gfx = undefined;\n\t    }\n\t  });\n\t}\n\n\tLabelEditingPreview.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'elementRegistry',\n\t  'pathMap'\n\t];\n\n\n\t// helpers ///////////////////\n\n\tfunction getStrokeColor$1(element, defaultColor) {\n\t  var bo = getBusinessObject(element);\n\n\t  return bo.di.get('stroke') || defaultColor || 'black';\n\t}\n\n\tvar LabelEditingModule = {\n\t  __depends__: [\n\t    ChangeSupportModule,\n\t    ResizeModule,\n\t    DirectEditingModule\n\t  ],\n\t  __init__: [\n\t    'labelEditingProvider',\n\t    'labelEditingPreview'\n\t  ],\n\t  labelEditingProvider: [ 'type', LabelEditingProvider ],\n\t  labelEditingPreview: [ 'type', LabelEditingPreview ]\n\t};\n\n\tvar ALIGNMENTS = [\n\t  'top',\n\t  'bottom',\n\t  'left',\n\t  'right'\n\t];\n\n\tvar ELEMENT_LABEL_DISTANCE = 10;\n\n\t/**\n\t * A component that makes sure that external labels are added\n\t * together with respective elements and properly updated (DI wise)\n\t * during move.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t */\n\tfunction AdaptiveLabelPositioningBehavior(eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this.postExecuted([\n\t    'connection.create',\n\t    'connection.layout',\n\t    'connection.updateWaypoints'\n\t  ], function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        source = connection.source,\n\t        target = connection.target,\n\t        hints = context.hints || {};\n\n\t    if (hints.createElementsBehavior !== false) {\n\t      checkLabelAdjustment(source);\n\t      checkLabelAdjustment(target);\n\t    }\n\t  });\n\n\n\t  this.postExecuted([\n\t    'label.create'\n\t  ], function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        hints = context.hints || {};\n\n\t    if (hints.createElementsBehavior !== false) {\n\t      checkLabelAdjustment(shape.labelTarget);\n\t    }\n\t  });\n\n\n\t  this.postExecuted([\n\t    'elements.create'\n\t  ], function(event) {\n\t    var context = event.context,\n\t        elements = context.elements,\n\t        hints = context.hints || {};\n\n\t    if (hints.createElementsBehavior !== false) {\n\t      elements.forEach(function(element) {\n\t        checkLabelAdjustment(element);\n\t      });\n\t    }\n\t  });\n\n\t  function checkLabelAdjustment(element) {\n\n\t    // skip non-existing labels\n\t    if (!hasExternalLabel(element)) {\n\t      return;\n\t    }\n\n\t    var optimalPosition = getOptimalPosition(element);\n\n\t    // no optimal position found\n\t    if (!optimalPosition) {\n\t      return;\n\t    }\n\n\t    adjustLabelPosition(element, optimalPosition);\n\t  }\n\n\t  function adjustLabelPosition(element, orientation) {\n\n\t    var elementMid = getMid(element),\n\t        label = element.label,\n\t        labelMid = getMid(label);\n\n\t    // ignore labels that are being created\n\t    if (!label.parent) {\n\t      return;\n\t    }\n\n\t    var elementTrbl = asTRBL(element);\n\n\t    var newLabelMid;\n\n\t    switch (orientation) {\n\t    case 'top':\n\t      newLabelMid = {\n\t        x: elementMid.x,\n\t        y: elementTrbl.top - ELEMENT_LABEL_DISTANCE - label.height / 2\n\t      };\n\n\t      break;\n\n\t    case 'left':\n\n\t      newLabelMid = {\n\t        x: elementTrbl.left - ELEMENT_LABEL_DISTANCE - label.width / 2,\n\t        y: elementMid.y\n\t      };\n\n\t      break;\n\n\t    case 'bottom':\n\n\t      newLabelMid = {\n\t        x: elementMid.x,\n\t        y: elementTrbl.bottom + ELEMENT_LABEL_DISTANCE + label.height / 2\n\t      };\n\n\t      break;\n\n\t    case 'right':\n\n\t      newLabelMid = {\n\t        x: elementTrbl.right + ELEMENT_LABEL_DISTANCE + label.width / 2,\n\t        y: elementMid.y\n\t      };\n\n\t      break;\n\t    }\n\n\t    var delta$1 = delta(newLabelMid, labelMid);\n\n\t    modeling.moveShape(label, delta$1);\n\t  }\n\n\t}\n\n\tinherits_browser(AdaptiveLabelPositioningBehavior, CommandInterceptor);\n\n\tAdaptiveLabelPositioningBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\n\t// helpers //////////////////////\n\n\t/**\n\t * Return alignments which are taken by a boundary's host element\n\t *\n\t * @param {Shape} element\n\t *\n\t * @return {Array<string>}\n\t */\n\tfunction getTakenHostAlignments(element) {\n\n\t  var hostElement = element.host,\n\t      elementMid = getMid(element),\n\t      hostOrientation = getOrientation(elementMid, hostElement);\n\n\t  var freeAlignments;\n\n\t  // check whether there is a multi-orientation, e.g. 'top-left'\n\t  if (hostOrientation.indexOf('-') >= 0) {\n\t    freeAlignments = hostOrientation.split('-');\n\t  } else {\n\t    freeAlignments = [ hostOrientation ];\n\t  }\n\n\t  var takenAlignments = ALIGNMENTS.filter(function(alignment) {\n\n\t    return freeAlignments.indexOf(alignment) === -1;\n\t  });\n\n\t  return takenAlignments;\n\n\t}\n\n\t/**\n\t * Return alignments which are taken by related connections\n\t *\n\t * @param {Shape} element\n\t *\n\t * @return {Array<string>}\n\t */\n\tfunction getTakenConnectionAlignments(element) {\n\n\t  var elementMid = getMid(element);\n\n\t  var takenAlignments = [].concat(\n\t    element.incoming.map(function(c) {\n\t      return c.waypoints[c.waypoints.length - 2 ];\n\t    }),\n\t    element.outgoing.map(function(c) {\n\t      return c.waypoints[1];\n\t    })\n\t  ).map(function(point) {\n\t    return getApproximateOrientation(elementMid, point);\n\t  });\n\n\t  return takenAlignments;\n\t}\n\n\t/**\n\t * Return the optimal label position around an element\n\t * or _undefined_, if none was found.\n\t *\n\t * @param  {Shape} element\n\t *\n\t * @return {string} positioning identifier\n\t */\n\tfunction getOptimalPosition(element) {\n\n\t  var labelMid = getMid(element.label);\n\n\t  var elementMid = getMid(element);\n\n\t  var labelOrientation = getApproximateOrientation(elementMid, labelMid);\n\n\t  if (!isAligned(labelOrientation)) {\n\t    return;\n\t  }\n\n\t  var takenAlignments = getTakenConnectionAlignments(element);\n\n\t  if (element.host) {\n\t    var takenHostAlignments = getTakenHostAlignments(element);\n\n\t    takenAlignments = takenAlignments.concat(takenHostAlignments);\n\t  }\n\n\t  var freeAlignments = ALIGNMENTS.filter(function(alignment) {\n\n\t    return takenAlignments.indexOf(alignment) === -1;\n\t  });\n\n\t  // NOTHING TO DO; label already aligned a.O.K.\n\t  if (freeAlignments.indexOf(labelOrientation) !== -1) {\n\t    return;\n\t  }\n\n\t  return freeAlignments[0];\n\t}\n\n\tfunction getApproximateOrientation(p0, p1) {\n\t  return getOrientation(p1, p0, 5);\n\t}\n\n\tfunction isAligned(orientation) {\n\t  return ALIGNMENTS.indexOf(orientation) !== -1;\n\t}\n\n\tfunction AppendBehavior(eventBus, elementFactory, bpmnRules) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  // assign correct shape position unless already set\n\n\t  this.preExecute('shape.append', function(context) {\n\n\t    var source = context.source,\n\t        shape = context.shape;\n\n\t    if (!context.position) {\n\n\t      if (is$1(shape, 'bpmn:TextAnnotation')) {\n\t        context.position = {\n\t          x: source.x + source.width / 2 + 75,\n\t          y: source.y - (50) - shape.height / 2\n\t        };\n\t      } else {\n\t        context.position = {\n\t          x: source.x + source.width + 80 + shape.width / 2,\n\t          y: source.y + source.height / 2\n\t        };\n\t      }\n\t    }\n\t  }, true);\n\t}\n\n\tinherits_browser(AppendBehavior, CommandInterceptor);\n\n\tAppendBehavior.$inject = [\n\t  'eventBus',\n\t  'elementFactory',\n\t  'bpmnRules'\n\t];\n\n\tfunction AssociationBehavior(injector, modeling) {\r\n\t  injector.invoke(CommandInterceptor, this);\r\n\r\n\t  this.postExecute('shape.move', function(context) {\r\n\t    var newParent = context.newParent,\r\n\t        shape = context.shape;\r\n\r\n\t    var associations = filter(shape.incoming.concat(shape.outgoing), function(connection) {\r\n\t      return is$1(connection, 'bpmn:Association');\r\n\t    });\r\n\r\n\t    forEach(associations, function(association) {\r\n\t      modeling.moveConnection(association, { x: 0, y: 0 }, newParent);\r\n\t    });\r\n\t  }, true);\r\n\t}\r\n\r\n\tinherits_browser(AssociationBehavior, CommandInterceptor);\r\n\r\n\tAssociationBehavior.$inject = [\r\n\t  'injector',\r\n\t  'modeling'\r\n\t];\n\n\tvar LOW_PRIORITY$a = 500;\n\n\n\t/**\n\t * Replace intermediate event with boundary event when creating or moving results in attached event.\n\t */\n\tfunction AttachEventBehavior(bpmnReplace, injector) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this._bpmnReplace = bpmnReplace;\n\n\t  var self = this;\n\n\t  this.postExecuted('elements.create', LOW_PRIORITY$a, function(context) {\n\t    var elements = context.elements;\n\n\t    elements = elements.filter(function(shape) {\n\t      var host = shape.host;\n\n\t      return shouldReplace(shape, host);\n\t    });\n\n\t    if (elements.length !== 1) {\n\t      return;\n\t    }\n\n\t    elements.map(function(element) {\n\t      return elements.indexOf(element);\n\t    }).forEach(function(index) {\n\t      var host = elements[ index ];\n\n\t      context.elements[ index ] = self.replaceShape(elements[ index ], host);\n\t    });\n\t  }, true);\n\n\n\t  this.preExecute('elements.move', LOW_PRIORITY$a, function(context) {\n\t    var shapes = context.shapes,\n\t        host = context.newHost;\n\n\t    if (shapes.length !== 1) {\n\t      return;\n\t    }\n\n\t    var shape = shapes[0];\n\n\t    if (shouldReplace(shape, host)) {\n\t      context.shapes = [ self.replaceShape(shape, host) ];\n\t    }\n\t  }, true);\n\t}\n\n\tAttachEventBehavior.$inject = [\n\t  'bpmnReplace',\n\t  'injector'\n\t];\n\n\tinherits_browser(AttachEventBehavior, CommandInterceptor);\n\n\tAttachEventBehavior.prototype.replaceShape = function(shape, host) {\n\t  var eventDefinition = getEventDefinition(shape);\n\n\t  var boundaryEvent = {\n\t    type: 'bpmn:BoundaryEvent',\n\t    host: host\n\t  };\n\n\t  if (eventDefinition) {\n\t    boundaryEvent.eventDefinitionType = eventDefinition.$type;\n\t  }\n\n\t  return this._bpmnReplace.replaceElement(shape, boundaryEvent, { layoutConnection: false });\n\t};\n\n\n\t// helpers //////////\n\n\tfunction getEventDefinition(element) {\n\t  var businessObject = getBusinessObject(element),\n\t      eventDefinitions = businessObject.eventDefinitions;\n\n\t  return eventDefinitions && eventDefinitions[0];\n\t}\n\n\tfunction shouldReplace(shape, host) {\n\t  return !isLabel(shape) &&\n\t    isAny(shape, [ 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent' ]) && !!host;\n\t}\n\n\t/**\n\t * BPMN specific boundary event behavior\n\t */\n\tfunction BoundaryEventBehavior(eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  function getBoundaryEvents(element) {\n\t    return filter(element.attachers, function(attacher) {\n\t      return is$1(attacher, 'bpmn:BoundaryEvent');\n\t    });\n\t  }\n\n\t  // remove after connecting to event-based gateway\n\t  this.postExecute('connection.create', function(event) {\n\t    var source = event.context.source,\n\t        target = event.context.target,\n\t        boundaryEvents = getBoundaryEvents(target);\n\n\t    if (\n\t      is$1(source, 'bpmn:EventBasedGateway') &&\n\t      is$1(target, 'bpmn:ReceiveTask') &&\n\t      boundaryEvents.length > 0\n\t    ) {\n\t      modeling.removeElements(boundaryEvents);\n\t    }\n\n\t  });\n\n\t  // remove after replacing connected gateway with event-based gateway\n\t  this.postExecute('connection.reconnect', function(event) {\n\t    var oldSource = event.context.oldSource,\n\t        newSource = event.context.newSource;\n\n\t    if (is$1(oldSource, 'bpmn:Gateway') &&\n\t        is$1(newSource, 'bpmn:EventBasedGateway')) {\n\t      forEach(newSource.outgoing, function(connection) {\n\t        var target = connection.target,\n\t            attachedboundaryEvents = getBoundaryEvents(target);\n\n\t        if (is$1(target, 'bpmn:ReceiveTask') &&\n\t            attachedboundaryEvents.length > 0) {\n\t          modeling.removeElements(attachedboundaryEvents);\n\t        }\n\t      });\n\t    }\n\t  });\n\t}\n\n\tBoundaryEventBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\tinherits_browser(BoundaryEventBehavior, CommandInterceptor);\n\n\tvar LOW_PRIORITY$b = 500;\r\n\r\n\r\n\t/**\r\n\t * Add referenced root elements (error, escalation, message, signal) if they don't exist.\r\n\t * Copy referenced root elements on copy & paste.\r\n\t */\r\n\tfunction RootElementReferenceBehavior(\r\n\t    bpmnjs, eventBus, injector, moddleCopy, bpmnFactory\r\n\t) {\r\n\t  injector.invoke(CommandInterceptor, this);\r\n\r\n\t  function canHaveRootElementReference(element) {\r\n\t    return isAny(element, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ]) ||\r\n\t      hasAnyEventDefinition(element, [\r\n\t        'bpmn:ErrorEventDefinition',\r\n\t        'bpmn:EscalationEventDefinition',\r\n\t        'bpmn:MessageEventDefinition',\r\n\t        'bpmn:SignalEventDefinition'\r\n\t      ]);\r\n\t  }\r\n\r\n\t  function hasRootElement(rootElement) {\r\n\t    var definitions = bpmnjs.getDefinitions(),\r\n\t        rootElements = definitions.get('rootElements');\r\n\r\n\t    return !!find(rootElements, matchPattern({ id: rootElement.id }));\r\n\t  }\r\n\r\n\t  function getRootElementReferencePropertyName(eventDefinition) {\r\n\t    if (is$1(eventDefinition, 'bpmn:ErrorEventDefinition')) {\r\n\t      return 'errorRef';\r\n\t    } else if (is$1(eventDefinition, 'bpmn:EscalationEventDefinition')) {\r\n\t      return 'escalationRef';\r\n\t    } else if (is$1(eventDefinition, 'bpmn:MessageEventDefinition')) {\r\n\t      return 'messageRef';\r\n\t    } else if (is$1(eventDefinition, 'bpmn:SignalEventDefinition')) {\r\n\t      return 'signalRef';\r\n\t    }\r\n\t  }\r\n\r\n\t  function getRootElement(businessObject) {\r\n\t    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {\r\n\t      return businessObject.get('messageRef');\r\n\t    }\r\n\r\n\t    var eventDefinitions = businessObject.get('eventDefinitions'),\r\n\t        eventDefinition = eventDefinitions[ 0 ];\r\n\r\n\t    return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));\r\n\t  }\r\n\r\n\t  function setRootElement(businessObject, rootElement) {\r\n\t    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {\r\n\t      return businessObject.set('messageRef', rootElement);\r\n\t    }\r\n\r\n\t    var eventDefinitions = businessObject.get('eventDefinitions'),\r\n\t        eventDefinition = eventDefinitions[ 0 ];\r\n\r\n\t    return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);\r\n\t  }\r\n\r\n\t  // create shape\r\n\t  this.executed('shape.create', function(context) {\r\n\t    var shape = context.shape;\r\n\r\n\t    if (!canHaveRootElementReference(shape)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var businessObject = getBusinessObject(shape),\r\n\t        rootElement = getRootElement(businessObject),\r\n\t        rootElements;\r\n\r\n\t    if (rootElement && !hasRootElement(rootElement)) {\r\n\t      rootElements = bpmnjs.getDefinitions().get('rootElements');\r\n\r\n\t      // add root element\r\n\t      add$1(rootElements, rootElement);\r\n\r\n\t      context.addedRootElement = rootElement;\r\n\t    }\r\n\t  }, true);\r\n\r\n\t  this.reverted('shape.create', function(context) {\r\n\t    var addedRootElement = context.addedRootElement;\r\n\r\n\t    if (!addedRootElement) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var rootElements = bpmnjs.getDefinitions().get('rootElements');\r\n\r\n\t    // remove root element\r\n\t    remove$2(rootElements, addedRootElement);\r\n\t  }, true);\r\n\r\n\t  eventBus.on('copyPaste.copyElement', function(context) {\r\n\t    var descriptor = context.descriptor,\r\n\t        element = context.element;\r\n\r\n\t    if (!canHaveRootElementReference(element)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var businessObject = getBusinessObject(element),\r\n\t        rootElement = getRootElement(businessObject);\r\n\r\n\t    if (rootElement) {\r\n\t      descriptor.referencedRootElement = rootElement;\r\n\t    }\r\n\t  });\r\n\r\n\t  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$b, function(context) {\r\n\t    var descriptor = context.descriptor,\r\n\t        businessObject = descriptor.businessObject;\r\n\r\n\t    if (!canHaveRootElementReference(businessObject)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var referencedRootElement = descriptor.referencedRootElement;\r\n\r\n\t    if (!referencedRootElement) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (!hasRootElement(referencedRootElement)) {\r\n\t      referencedRootElement = moddleCopy.copyElement(\r\n\t        referencedRootElement,\r\n\t        bpmnFactory.create(referencedRootElement.$type)\r\n\t      );\r\n\t    }\r\n\r\n\t    setRootElement(businessObject, referencedRootElement);\r\n\t  });\r\n\t}\r\n\r\n\tRootElementReferenceBehavior.$inject = [\r\n\t  'bpmnjs',\r\n\t  'eventBus',\r\n\t  'injector',\r\n\t  'moddleCopy',\r\n\t  'bpmnFactory'\r\n\t];\r\n\r\n\tinherits_browser(RootElementReferenceBehavior, CommandInterceptor);\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction hasAnyEventDefinition(element, types) {\r\n\t  if (!isArray(types)) {\r\n\t    types = [ types ];\r\n\t  }\r\n\r\n\t  return some(types, function(type) {\r\n\t    return hasEventDefinition(element, type);\r\n\t  });\r\n\t}\n\n\tfunction CreateBehavior(injector) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this.preExecute('shape.create', 1500, function(event) {\n\t    var context = event.context,\n\t        parent = context.parent,\n\t        shape = context.shape;\n\n\t    if (is$1(parent, 'bpmn:Lane') && !is$1(shape, 'bpmn:Lane')) {\n\t      context.parent = getParent$1(parent, 'bpmn:Participant');\n\t    }\n\t  });\n\n\t}\n\n\n\tCreateBehavior.$inject = [ 'injector' ];\n\n\tinherits_browser(CreateBehavior, CommandInterceptor);\n\n\tvar HIGH_PRIORITY$7 = 1500;\r\n\tvar HIGHEST_PRIORITY = 2000;\r\n\r\n\r\n\t/**\r\n\t * Correct hover targets in certain situations to improve diagram interaction.\r\n\t *\r\n\t * @param {ElementRegistry} elementRegistry\r\n\t * @param {EventBus} eventBus\r\n\t * @param {Canvas} canvas\r\n\t */\r\n\tfunction FixHoverBehavior(elementRegistry, eventBus, canvas) {\r\n\r\n\t  eventBus.on([\r\n\t    'create.hover',\r\n\t    'create.move',\r\n\t    'create.end',\r\n\t    'shape.move.hover',\r\n\t    'shape.move.move',\r\n\t    'shape.move.end'\r\n\t  ], HIGH_PRIORITY$7, function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape || event.shape,\r\n\t        hover = event.hover;\r\n\r\n\t    // ensure elements are not dropped onto a bpmn:Lane but onto\r\n\t    // the underlying bpmn:Participant\r\n\t    if (is$1(hover, 'bpmn:Lane') && !isAny(shape, [ 'bpmn:Lane', 'bpmn:Participant' ])) {\r\n\t      event.hover = getLanesRoot(hover);\r\n\t      event.hoverGfx = elementRegistry.getGraphics(event.hover);\r\n\t    }\r\n\r\n\t    var rootElement = canvas.getRootElement();\r\n\r\n\t    // ensure bpmn:Group and label elements are dropped\r\n\t    // always onto the root\r\n\t    if (hover !== rootElement && (shape.labelTarget || is$1(shape, 'bpmn:Group'))) {\r\n\t      event.hover = rootElement;\r\n\t      event.hoverGfx = elementRegistry.getGraphics(event.hover);\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  eventBus.on([\r\n\t    'connect.hover',\r\n\t    'connect.out',\r\n\t    'connect.end',\r\n\t    'connect.cleanup',\r\n\t    'global-connect.hover',\r\n\t    'global-connect.out',\r\n\t    'global-connect.end',\r\n\t    'global-connect.cleanup'\r\n\t  ], HIGH_PRIORITY$7, function(event) {\r\n\t    var hover = event.hover;\r\n\r\n\t    // ensure connections start/end on bpmn:Participant,\r\n\t    // not the underlying bpmn:Lane\r\n\t    if (is$1(hover, 'bpmn:Lane')) {\r\n\t      event.hover = getLanesRoot(hover) || hover;\r\n\t      event.hoverGfx = elementRegistry.getGraphics(event.hover);\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  eventBus.on([\r\n\t    'bendpoint.move.hover'\r\n\t  ], HIGH_PRIORITY$7, function(event) {\r\n\t    var context = event.context,\r\n\t        hover = event.hover,\r\n\t        type = context.type;\r\n\r\n\t    // ensure reconnect start/end on bpmn:Participant,\r\n\t    // not the underlying bpmn:Lane\r\n\t    if (is$1(hover, 'bpmn:Lane') && /reconnect/.test(type)) {\r\n\t      event.hover = getLanesRoot(hover) || hover;\r\n\t      event.hoverGfx = elementRegistry.getGraphics(event.hover);\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  eventBus.on([\r\n\t    'connect.start'\r\n\t  ], HIGH_PRIORITY$7, function(event) {\r\n\t    var context = event.context,\r\n\t        start = context.start;\r\n\r\n\t    // ensure connect start on bpmn:Participant,\r\n\t    // not the underlying bpmn:Lane\r\n\t    if (is$1(start, 'bpmn:Lane')) {\r\n\t      context.start = getLanesRoot(start) || start;\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  // allow movement of participants from lanes\r\n\t  eventBus.on('shape.move.start', HIGHEST_PRIORITY, function(event) {\r\n\t    var shape = event.shape;\r\n\r\n\t    if (is$1(shape, 'bpmn:Lane')) {\r\n\t      event.shape = getLanesRoot(shape) || shape;\r\n\t    }\r\n\t  });\r\n\r\n\t}\r\n\r\n\tFixHoverBehavior.$inject = [\r\n\t  'elementRegistry',\r\n\t  'eventBus',\r\n\t  'canvas'\r\n\t];\n\n\t/**\n\t * BPMN specific create data object behavior\n\t */\n\tfunction CreateDataObjectBehavior(eventBus, bpmnFactory, moddle) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this.preExecute('shape.create', function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:DataObjectReference') && shape.type !== 'label') {\n\n\t      // create a DataObject every time a DataObjectReference is created\n\t      var dataObject = bpmnFactory.create('bpmn:DataObject');\n\n\t      // set the reference to the DataObject\n\t      shape.businessObject.dataObjectRef = dataObject;\n\t    }\n\t  });\n\n\t}\n\n\tCreateDataObjectBehavior.$inject = [\n\t  'eventBus',\n\t  'bpmnFactory',\n\t  'moddle'\n\t];\n\n\tinherits_browser(CreateDataObjectBehavior, CommandInterceptor);\n\n\tvar HORIZONTAL_PARTICIPANT_PADDING = 20,\n\t    VERTICAL_PARTICIPANT_PADDING = 20;\n\n\tvar PARTICIPANT_BORDER_WIDTH = 30;\n\n\tvar HIGH_PRIORITY$8 = 2000;\n\n\n\t/**\n\t * BPMN-specific behavior for creating participants.\n\t */\n\tfunction CreateParticipantBehavior$1(canvas, eventBus, modeling) {\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  // fit participant\n\t  eventBus.on([\n\t    'create.start',\n\t    'shape.move.start'\n\t  ], HIGH_PRIORITY$8, function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        rootElement = canvas.getRootElement();\n\n\t    if (!is$1(shape, 'bpmn:Participant') ||\n\t      !is$1(rootElement, 'bpmn:Process') ||\n\t      !rootElement.children.length) {\n\t      return;\n\t    }\n\n\t    // ignore connections, groups and labels\n\t    var children = rootElement.children.filter(function(element) {\n\t      return !is$1(element, 'bpmn:Group') &&\n\t        !isLabel(element) &&\n\t        !isConnection$2(element);\n\t    });\n\n\t    // ensure for available children to calculate bounds\n\t    if (!children.length) {\n\t      return;\n\t    }\n\n\t    var childrenBBox = getBBox(children);\n\n\t    var participantBounds = getParticipantBounds(shape, childrenBBox);\n\n\t    // assign width and height\n\t    assign(shape, participantBounds);\n\n\t    // assign create constraints\n\t    context.createConstraints = getParticipantCreateConstraints(shape, childrenBBox);\n\t  });\n\n\t  // force hovering process when creating first participant\n\t  eventBus.on('create.start', HIGH_PRIORITY$8, function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        rootElement = canvas.getRootElement(),\n\t        rootElementGfx = canvas.getGraphics(rootElement);\n\n\t    function ensureHoveringProcess(event) {\n\t      event.element = rootElement;\n\t      event.gfx = rootElementGfx;\n\t    }\n\n\t    if (is$1(shape, 'bpmn:Participant') && is$1(rootElement, 'bpmn:Process')) {\n\t      eventBus.on('element.hover', HIGH_PRIORITY$8, ensureHoveringProcess);\n\n\t      eventBus.once('create.cleanup', function() {\n\t        eventBus.off('element.hover', ensureHoveringProcess);\n\t      });\n\t    }\n\t  });\n\n\t  function ensureCollaboration(context) {\n\t    var parent = context.parent,\n\t        collaboration;\n\n\t    var rootElement = canvas.getRootElement();\n\n\t    if (is$1(rootElement, 'bpmn:Collaboration')) {\n\t      collaboration = rootElement;\n\t    } else {\n\n\t      // update root element by making collaboration\n\t      collaboration = modeling.makeCollaboration();\n\n\t      // re-use process when creating first participant\n\t      context.process = parent;\n\t    }\n\n\t    context.parent = collaboration;\n\t  }\n\n\t  // turn process into collaboration before adding participant\n\t  this.preExecute('shape.create', function(context) {\n\t    var parent = context.parent,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:Participant') && is$1(parent, 'bpmn:Process')) {\n\t      ensureCollaboration(context);\n\t    }\n\t  }, true);\n\n\t  this.execute('shape.create', function(context) {\n\t    var process = context.process,\n\t        shape = context.shape;\n\n\t    if (process) {\n\t      context.oldProcessRef = shape.businessObject.processRef;\n\n\t      // re-use process when creating first participant\n\t      shape.businessObject.processRef = process.businessObject;\n\t    }\n\t  }, true);\n\n\t  this.revert('shape.create', function(context) {\n\t    var process = context.process,\n\t        shape = context.shape;\n\n\t    if (process) {\n\n\t      // re-use process when creating first participant\n\t      shape.businessObject.processRef = context.oldProcessRef;\n\t    }\n\t  }, true);\n\n\t  this.postExecute('shape.create', function(context) {\n\t    var process = context.process,\n\t        shape = context.shape;\n\n\t    if (process) {\n\n\t      // move children from process to participant\n\t      var processChildren = process.children.slice();\n\n\t      modeling.moveElements(processChildren, { x: 0, y: 0 }, shape);\n\t    }\n\n\t  }, true);\n\n\t  // turn process into collaboration when creating participants\n\t  this.preExecute('elements.create', HIGH_PRIORITY$8, function(context) {\n\t    var elements = context.elements,\n\t        parent = context.parent,\n\t        participant;\n\n\t    var hasParticipants = findParticipant(elements);\n\n\t    if (hasParticipants && is$1(parent, 'bpmn:Process')) {\n\t      ensureCollaboration(context);\n\n\t      participant = findParticipant(elements);\n\n\t      context.oldProcessRef = participant.businessObject.processRef;\n\n\t      // re-use process when creating first participant\n\t      participant.businessObject.processRef = parent.businessObject;\n\t    }\n\t  }, true);\n\n\t  this.revert('elements.create', function(context) {\n\t    var elements = context.elements,\n\t        process = context.process,\n\t        participant;\n\n\t    if (process) {\n\t      participant = findParticipant(elements);\n\n\t      // re-use process when creating first participant\n\t      participant.businessObject.processRef = context.oldProcessRef;\n\t    }\n\t  }, true);\n\n\t  this.postExecute('elements.create', function(context) {\n\t    var elements = context.elements,\n\t        process = context.process,\n\t        participant;\n\n\t    if (process) {\n\t      participant = findParticipant(elements);\n\n\t      // move children from process to first participant\n\t      var processChildren = process.children.slice();\n\n\t      modeling.moveElements(processChildren, { x: 0, y: 0 }, participant);\n\t    }\n\n\t  }, true);\n\n\t}\n\n\tCreateParticipantBehavior$1.$inject = [\n\t  'canvas',\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\tinherits_browser(CreateParticipantBehavior$1, CommandInterceptor);\n\n\t// helpers //////////\n\n\tfunction getParticipantBounds(shape, childrenBBox) {\n\t  childrenBBox = {\n\t    width: childrenBBox.width + HORIZONTAL_PARTICIPANT_PADDING * 2 + PARTICIPANT_BORDER_WIDTH,\n\t    height: childrenBBox.height + VERTICAL_PARTICIPANT_PADDING * 2\n\t  };\n\n\t  var width = Math.max(shape.width, childrenBBox.width),\n\t      height = Math.max(shape.height, childrenBBox.height);\n\n\t  return {\n\t    x: -width / 2,\n\t    y: -height / 2,\n\t    width: width,\n\t    height: height\n\t  };\n\t}\n\n\tfunction getParticipantCreateConstraints(shape, childrenBBox) {\n\t  childrenBBox = asTRBL(childrenBBox);\n\n\t  return {\n\t    bottom: childrenBBox.top + shape.height / 2 - VERTICAL_PARTICIPANT_PADDING,\n\t    left: childrenBBox.right - shape.width / 2 + HORIZONTAL_PARTICIPANT_PADDING,\n\t    top: childrenBBox.bottom - shape.height / 2 + VERTICAL_PARTICIPANT_PADDING,\n\t    right: childrenBBox.left + shape.width / 2 - HORIZONTAL_PARTICIPANT_PADDING - PARTICIPANT_BORDER_WIDTH\n\t  };\n\t}\n\n\tfunction isConnection$2(element) {\n\t  return !!element.waypoints;\n\t}\n\n\tfunction findParticipant(elements) {\n\t  return find(elements, function(element) {\n\t    return is$1(element, 'bpmn:Participant');\n\t  });\n\t}\n\n\tvar TARGET_REF_PLACEHOLDER_NAME = '__targetRef_placeholder';\n\n\n\t/**\n\t * This behavior makes sure we always set a fake\n\t * DataInputAssociation#targetRef as demanded by the BPMN 2.0\n\t * XSD schema.\n\t *\n\t * The reference is set to a bpmn:Property{ name: '__targetRef_placeholder' }\n\t * which is created on the fly and cleaned up afterwards if not needed\n\t * anymore.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {BpmnFactory} bpmnFactory\n\t */\n\tfunction DataInputAssociationBehavior(eventBus, bpmnFactory) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  this.executed([\n\t    'connection.create',\n\t    'connection.delete',\n\t    'connection.move',\n\t    'connection.reconnect'\n\t  ], ifDataInputAssociation(fixTargetRef));\n\n\t  this.reverted([\n\t    'connection.create',\n\t    'connection.delete',\n\t    'connection.move',\n\t    'connection.reconnect'\n\t  ], ifDataInputAssociation(fixTargetRef));\n\n\n\t  function usesTargetRef(element, targetRef, removedConnection) {\n\n\t    var inputAssociations = element.get('dataInputAssociations');\n\n\t    return find(inputAssociations, function(association) {\n\t      return association !== removedConnection &&\n\t             association.targetRef === targetRef;\n\t    });\n\t  }\n\n\t  function getTargetRef(element, create) {\n\n\t    var properties = element.get('properties');\n\n\t    var targetRefProp = find(properties, function(p) {\n\t      return p.name === TARGET_REF_PLACEHOLDER_NAME;\n\t    });\n\n\t    if (!targetRefProp && create) {\n\t      targetRefProp = bpmnFactory.create('bpmn:Property', {\n\t        name: TARGET_REF_PLACEHOLDER_NAME\n\t      });\n\n\t      add$1(properties, targetRefProp);\n\t    }\n\n\t    return targetRefProp;\n\t  }\n\n\t  function cleanupTargetRef(element, connection) {\n\n\t    var targetRefProp = getTargetRef(element);\n\n\t    if (!targetRefProp) {\n\t      return;\n\t    }\n\n\t    if (!usesTargetRef(element, targetRefProp, connection)) {\n\t      remove$2(element.get('properties'), targetRefProp);\n\t    }\n\t  }\n\n\t  /**\n\t   * Make sure targetRef is set to a valid property or\n\t   * `null` if the connection is detached.\n\t   *\n\t   * @param {Event} event\n\t   */\n\t  function fixTargetRef(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        connectionBo = connection.businessObject,\n\t        target = connection.target,\n\t        targetBo = target && target.businessObject,\n\t        newTarget = context.newTarget,\n\t        newTargetBo = newTarget && newTarget.businessObject,\n\t        oldTarget = context.oldTarget || context.target,\n\t        oldTargetBo = oldTarget && oldTarget.businessObject;\n\n\t    var dataAssociation = connection.businessObject,\n\t        targetRefProp;\n\n\t    if (oldTargetBo && oldTargetBo !== targetBo) {\n\t      cleanupTargetRef(oldTargetBo, connectionBo);\n\t    }\n\n\t    if (newTargetBo && newTargetBo !== targetBo) {\n\t      cleanupTargetRef(newTargetBo, connectionBo);\n\t    }\n\n\t    if (targetBo) {\n\t      targetRefProp = getTargetRef(targetBo, true);\n\t      dataAssociation.targetRef = targetRefProp;\n\t    } else {\n\t      dataAssociation.targetRef = null;\n\t    }\n\t  }\n\t}\n\n\tDataInputAssociationBehavior.$inject = [\n\t  'eventBus',\n\t  'bpmnFactory'\n\t];\n\n\tinherits_browser(DataInputAssociationBehavior, CommandInterceptor);\n\n\n\t/**\n\t * Only call the given function when the event\n\t * touches a bpmn:DataInputAssociation.\n\t *\n\t * @param {Function} fn\n\t * @return {Function}\n\t */\n\tfunction ifDataInputAssociation(fn) {\n\n\t  return function(event) {\n\t    var context = event.context,\n\t        connection = context.connection;\n\n\t    if (is$1(connection, 'bpmn:DataInputAssociation')) {\n\t      return fn(event);\n\t    }\n\t  };\n\t}\n\n\tfunction UpdateSemanticParentHandler(bpmnUpdater) {\r\n\t  this._bpmnUpdater = bpmnUpdater;\r\n\t}\r\n\r\n\tUpdateSemanticParentHandler.$inject = [ 'bpmnUpdater' ];\r\n\r\n\r\n\tUpdateSemanticParentHandler.prototype.execute = function(context) {\r\n\t  var dataStoreBo = context.dataStoreBo,\r\n\t      newSemanticParent = context.newSemanticParent,\r\n\t      newDiParent = context.newDiParent;\r\n\r\n\t  context.oldSemanticParent = dataStoreBo.$parent;\r\n\t  context.oldDiParent = dataStoreBo.di.$parent;\r\n\r\n\t  // update semantic parent\r\n\t  this._bpmnUpdater.updateSemanticParent(dataStoreBo, newSemanticParent);\r\n\r\n\t  // update DI parent\r\n\t  this._bpmnUpdater.updateDiParent(dataStoreBo.di, newDiParent);\r\n\t};\r\n\r\n\tUpdateSemanticParentHandler.prototype.revert = function(context) {\r\n\t  var dataStoreBo = context.dataStoreBo,\r\n\t      oldSemanticParent = context.oldSemanticParent,\r\n\t      oldDiParent = context.oldDiParent;\r\n\r\n\t  // update semantic parent\r\n\t  this._bpmnUpdater.updateSemanticParent(dataStoreBo, oldSemanticParent);\r\n\r\n\t  // update DI parent\r\n\t  this._bpmnUpdater.updateDiParent(dataStoreBo.di, oldDiParent);\r\n\t};\n\n\t/**\r\n\t * BPMN specific data store behavior\r\n\t */\r\n\tfunction DataStoreBehavior(\r\n\t    canvas, commandStack, elementRegistry,\r\n\t    eventBus) {\r\n\r\n\t  CommandInterceptor.call(this, eventBus);\r\n\r\n\t  commandStack.registerHandler('dataStore.updateContainment', UpdateSemanticParentHandler);\r\n\r\n\t  function getFirstParticipant() {\r\n\t    return elementRegistry.filter(function(element) {\r\n\t      return is$1(element, 'bpmn:Participant');\r\n\t    })[0];\r\n\t  }\r\n\r\n\t  function getDataStores(element) {\r\n\t    return element.children.filter(function(child) {\r\n\t      return is$1(child, 'bpmn:DataStoreReference') && !child.labelTarget;\r\n\t    });\r\n\t  }\r\n\r\n\t  function updateDataStoreParent(dataStore, newDataStoreParent) {\r\n\t    var dataStoreBo = dataStore.businessObject || dataStore;\r\n\r\n\t    newDataStoreParent = newDataStoreParent || getFirstParticipant();\r\n\r\n\t    if (newDataStoreParent) {\r\n\t      var newDataStoreParentBo = newDataStoreParent.businessObject || newDataStoreParent;\r\n\r\n\t      commandStack.execute('dataStore.updateContainment', {\r\n\t        dataStoreBo: dataStoreBo,\r\n\t        newSemanticParent: newDataStoreParentBo.processRef || newDataStoreParentBo,\r\n\t        newDiParent: newDataStoreParentBo.di\r\n\t      });\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  // disable auto-resize for data stores\r\n\t  this.preExecute('shape.create', function(event) {\r\n\r\n\t    var context = event.context,\r\n\t        shape = context.shape;\r\n\r\n\t    if (is$1(shape, 'bpmn:DataStoreReference') &&\r\n\t        shape.type !== 'label') {\r\n\r\n\t      if (!context.hints) {\r\n\t        context.hints = {};\r\n\t      }\r\n\r\n\t      // prevent auto resizing\r\n\t      context.hints.autoResize = false;\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  // disable auto-resize for data stores\r\n\t  this.preExecute('elements.move', function(event) {\r\n\t    var context = event.context,\r\n\t        shapes = context.shapes;\r\n\r\n\t    var dataStoreReferences = shapes.filter(function(shape) {\r\n\t      return is$1(shape, 'bpmn:DataStoreReference');\r\n\t    });\r\n\r\n\t    if (dataStoreReferences.length) {\r\n\t      if (!context.hints) {\r\n\t        context.hints = {};\r\n\t      }\r\n\r\n\t      // prevent auto resizing for data store references\r\n\t      context.hints.autoResize = shapes.filter(function(shape) {\r\n\t        return !is$1(shape, 'bpmn:DataStoreReference');\r\n\t      });\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  // update parent on data store created\r\n\t  this.postExecute('shape.create', function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        parent = shape.parent;\r\n\r\n\r\n\t    if (is$1(shape, 'bpmn:DataStoreReference') &&\r\n\t        shape.type !== 'label' &&\r\n\t        is$1(parent, 'bpmn:Collaboration')) {\r\n\r\n\t      updateDataStoreParent(shape);\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  // update parent on data store moved\r\n\t  this.postExecute('shape.move', function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        oldParent = context.oldParent,\r\n\t        parent = shape.parent;\r\n\r\n\t    if (is$1(oldParent, 'bpmn:Collaboration')) {\r\n\r\n\t      // do nothing if not necessary\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (is$1(shape, 'bpmn:DataStoreReference') &&\r\n\t        shape.type !== 'label' &&\r\n\t        is$1(parent, 'bpmn:Collaboration')) {\r\n\r\n\t      var participant = is$1(oldParent, 'bpmn:Participant') ?\r\n\t        oldParent :\r\n\t        getAncestor(oldParent, 'bpmn:Participant');\r\n\r\n\t      updateDataStoreParent(shape, participant);\r\n\t    }\r\n\t  });\r\n\r\n\r\n\t  // update data store parents on participant or subprocess deleted\r\n\t  this.postExecute('shape.delete', function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        rootElement = canvas.getRootElement();\r\n\r\n\t    if (isAny(shape, [ 'bpmn:Participant', 'bpmn:SubProcess' ])\r\n\t        && is$1(rootElement, 'bpmn:Collaboration')) {\r\n\t      getDataStores(rootElement)\r\n\t        .filter(function(dataStore) {\r\n\t          return isDescendant(dataStore, shape);\r\n\t        })\r\n\t        .forEach(function(dataStore) {\r\n\t          updateDataStoreParent(dataStore);\r\n\t        });\r\n\t    }\r\n\t  });\r\n\r\n\t  // update data store parents on collaboration -> process\r\n\t  this.postExecute('canvas.updateRoot', function(event) {\r\n\t    var context = event.context,\r\n\t        oldRoot = context.oldRoot,\r\n\t        newRoot = context.newRoot;\r\n\r\n\t    var dataStores = getDataStores(oldRoot);\r\n\r\n\t    dataStores.forEach(function(dataStore) {\r\n\r\n\t      if (is$1(newRoot, 'bpmn:Process')) {\r\n\t        updateDataStoreParent(dataStore, newRoot);\r\n\t      }\r\n\r\n\t    });\r\n\t  });\r\n\t}\r\n\r\n\tDataStoreBehavior.$inject = [\r\n\t  'canvas',\r\n\t  'commandStack',\r\n\t  'elementRegistry',\r\n\t  'eventBus',\r\n\t];\r\n\r\n\tinherits_browser(DataStoreBehavior, CommandInterceptor);\r\n\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction isDescendant(descendant, ancestor) {\r\n\t  var descendantBo = descendant.businessObject || descendant,\r\n\t      ancestorBo = ancestor.businessObject || ancestor;\r\n\r\n\t  while (descendantBo.$parent) {\r\n\t    if (descendantBo.$parent === ancestorBo.processRef || ancestorBo) {\r\n\t      return true;\r\n\t    }\r\n\r\n\t    descendantBo = descendantBo.$parent;\r\n\t  }\r\n\r\n\t  return false;\r\n\t}\r\n\r\n\tfunction getAncestor(element, type) {\r\n\r\n\t  while (element.parent) {\r\n\t    if (is$1(element.parent, type)) {\r\n\t      return element.parent;\r\n\t    }\r\n\r\n\t    element = element.parent;\r\n\t  }\r\n\t}\n\n\tvar LOW_PRIORITY$c = 500;\n\n\n\t/**\n\t * BPMN specific delete lane behavior\n\t */\n\tfunction DeleteLaneBehavior(eventBus, modeling, spaceTool) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  function compensateLaneDelete(shape, oldParent) {\n\n\t    var siblings = getChildLanes(oldParent);\n\n\t    var topAffected = [];\n\t    var bottomAffected = [];\n\n\t    eachElement(siblings, function(element) {\n\n\t      if (element.y > shape.y) {\n\t        bottomAffected.push(element);\n\t      } else {\n\t        topAffected.push(element);\n\t      }\n\n\t      return element.children;\n\t    });\n\n\t    if (!siblings.length) {\n\t      return;\n\t    }\n\n\t    var offset;\n\n\t    if (bottomAffected.length && topAffected.length) {\n\t      offset = shape.height / 2;\n\t    } else {\n\t      offset = shape.height;\n\t    }\n\n\t    var topAdjustments,\n\t        bottomAdjustments;\n\n\t    if (topAffected.length) {\n\t      topAdjustments = spaceTool.calculateAdjustments(\n\t        topAffected, 'y', offset, shape.y - 10);\n\n\t      spaceTool.makeSpace(\n\t        topAdjustments.movingShapes,\n\t        topAdjustments.resizingShapes,\n\t        { x: 0, y: offset }, 's');\n\t    }\n\n\t    if (bottomAffected.length) {\n\t      bottomAdjustments = spaceTool.calculateAdjustments(\n\t        bottomAffected, 'y', -offset, shape.y + shape.height + 10);\n\n\t      spaceTool.makeSpace(\n\t        bottomAdjustments.movingShapes,\n\t        bottomAdjustments.resizingShapes,\n\t        { x: 0, y: -offset }, 'n');\n\t    }\n\t  }\n\n\n\t  /**\n\t   * Adjust sizes of other lanes after lane deletion\n\t   */\n\t  this.postExecuted('shape.delete', LOW_PRIORITY$c, function(event) {\n\n\t    var context = event.context,\n\t        hints = context.hints,\n\t        shape = context.shape,\n\t        oldParent = context.oldParent;\n\n\t    // only compensate lane deletes\n\t    if (!is$1(shape, 'bpmn:Lane')) {\n\t      return;\n\t    }\n\n\t    // compensate root deletes only\n\t    if (hints && hints.nested) {\n\t      return;\n\t    }\n\n\t    compensateLaneDelete(shape, oldParent);\n\t  });\n\t}\n\n\tDeleteLaneBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling',\n\t  'spaceTool'\n\t];\n\n\tinherits_browser(DeleteLaneBehavior, CommandInterceptor);\n\n\tvar LOW_PRIORITY$d = 500;\n\n\n\t/**\n\t * Replace boundary event with intermediate event when creating or moving results in detached event.\n\t */\n\tfunction DetachEventBehavior(bpmnReplace, injector) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this._bpmnReplace = bpmnReplace;\n\n\t  var self = this;\n\n\t  this.postExecuted('elements.create', LOW_PRIORITY$d, function(context) {\n\t    var elements = context.elements;\n\n\t    elements.filter(function(shape) {\n\t      var host = shape.host;\n\n\t      return shouldReplace$1(shape, host);\n\t    }).map(function(shape) {\n\t      return elements.indexOf(shape);\n\t    }).forEach(function(index) {\n\t      context.elements[ index ] = self.replaceShape(elements[ index ]);\n\t    });\n\t  }, true);\n\n\t  this.preExecute('elements.move', LOW_PRIORITY$d, function(context) {\n\t    var shapes = context.shapes,\n\t        newHost = context.newHost;\n\n\t    shapes.forEach(function(shape, index) {\n\t      var host = shape.host;\n\n\t      if (shouldReplace$1(shape, includes(shapes, host) ? host : newHost)) {\n\t        shapes[ index ] = self.replaceShape(shape);\n\t      }\n\t    });\n\t  }, true);\n\t}\n\n\tDetachEventBehavior.$inject = [\n\t  'bpmnReplace',\n\t  'injector'\n\t];\n\n\tinherits_browser(DetachEventBehavior, CommandInterceptor);\n\n\tDetachEventBehavior.prototype.replaceShape = function(shape) {\n\t  var eventDefinition = getEventDefinition$1(shape),\n\t      intermediateEvent;\n\n\t  if (eventDefinition) {\n\t    intermediateEvent = {\n\t      type: 'bpmn:IntermediateCatchEvent',\n\t      eventDefinitionType: eventDefinition.$type\n\t    };\n\t  } else {\n\t    intermediateEvent = {\n\t      type: 'bpmn:IntermediateThrowEvent'\n\t    };\n\t  }\n\n\t  return this._bpmnReplace.replaceElement(shape, intermediateEvent, { layoutConnection: false });\n\t};\n\n\n\t// helpers //////////\n\n\tfunction getEventDefinition$1(element) {\n\t  var businessObject = getBusinessObject(element),\n\t      eventDefinitions = businessObject.eventDefinitions;\n\n\t  return eventDefinitions && eventDefinitions[0];\n\t}\n\n\tfunction shouldReplace$1(shape, host) {\n\t  return !isLabel(shape) && is$1(shape, 'bpmn:BoundaryEvent') && !host;\n\t}\n\n\tfunction includes(array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\tfunction DropOnFlowBehavior(eventBus, bpmnRules, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  /**\n\t   * Reconnect start / end of a connection after\n\t   * dropping an element on a flow.\n\t   */\n\n\t  function insertShape(shape, targetFlow, positionOrBounds) {\n\t    var waypoints = targetFlow.waypoints,\n\t        waypointsBefore,\n\t        waypointsAfter,\n\t        dockingPoint,\n\t        source,\n\t        target,\n\t        incomingConnection,\n\t        outgoingConnection,\n\t        oldOutgoing = shape.outgoing.slice(),\n\t        oldIncoming = shape.incoming.slice();\n\n\t    var mid;\n\n\t    if (isNumber(positionOrBounds.width)) {\n\t      mid = getMid(positionOrBounds);\n\t    } else {\n\t      mid = positionOrBounds;\n\t    }\n\n\t    var intersection = getApproxIntersection(waypoints, mid);\n\n\t    if (intersection) {\n\t      waypointsBefore = waypoints.slice(0, intersection.index);\n\t      waypointsAfter = waypoints.slice(intersection.index + (intersection.bendpoint ? 1 : 0));\n\n\t      // due to inaccuracy intersection might have been found\n\t      if (!waypointsBefore.length || !waypointsAfter.length) {\n\t        return;\n\t      }\n\n\t      dockingPoint = intersection.bendpoint ? waypoints[intersection.index] : mid;\n\n\t      // if last waypointBefore is inside shape's bounds, ignore docking point\n\t      if (!isPointInsideBBox$2(shape, waypointsBefore[waypointsBefore.length-1])) {\n\t        waypointsBefore.push(copy(dockingPoint));\n\t      }\n\n\t      // if first waypointAfter is inside shape's bounds, ignore docking point\n\t      if (!isPointInsideBBox$2(shape, waypointsAfter[0])) {\n\t        waypointsAfter.unshift(copy(dockingPoint));\n\t      }\n\t    }\n\n\t    source = targetFlow.source;\n\t    target = targetFlow.target;\n\n\t    if (bpmnRules.canConnect(source, shape, targetFlow)) {\n\n\t      // reconnect source -> inserted shape\n\t      modeling.reconnectEnd(targetFlow, shape, waypointsBefore || mid);\n\n\t      incomingConnection = targetFlow;\n\t    }\n\n\t    if (bpmnRules.canConnect(shape, target, targetFlow)) {\n\n\t      if (!incomingConnection) {\n\n\t        // reconnect inserted shape -> end\n\t        modeling.reconnectStart(targetFlow, shape, waypointsAfter || mid);\n\n\t        outgoingConnection = targetFlow;\n\t      } else {\n\t        outgoingConnection = modeling.connect(\n\t          shape, target, { type: targetFlow.type, waypoints: waypointsAfter }\n\t        );\n\t      }\n\t    }\n\n\t    var duplicateConnections = [].concat(\n\n\t      incomingConnection && filter(oldIncoming, function(connection) {\n\t        return connection.source === incomingConnection.source;\n\t      }) || [],\n\n\t      outgoingConnection && filter(oldOutgoing, function(connection) {\n\t        return connection.target === outgoingConnection.target;\n\t      }) || []\n\t    );\n\n\t    if (duplicateConnections.length) {\n\t      modeling.removeElements(duplicateConnections);\n\t    }\n\t  }\n\n\t  this.preExecute('elements.move', function(context) {\n\n\t    var newParent = context.newParent,\n\t        shapes = context.shapes,\n\t        delta = context.delta,\n\t        shape = shapes[0];\n\n\t    if (!shape || !newParent) {\n\t      return;\n\t    }\n\n\t    // if the new parent is a connection,\n\t    // change it to the new parent's parent\n\t    if (newParent && newParent.waypoints) {\n\t      context.newParent = newParent = newParent.parent;\n\t    }\n\n\t    var shapeMid = getMid(shape);\n\t    var newShapeMid = {\n\t      x: shapeMid.x + delta.x,\n\t      y: shapeMid.y + delta.y\n\t    };\n\n\t    // find a connection which intersects with the\n\t    // element's mid point\n\t    var connection = find(newParent.children, function(element) {\n\t      var canInsert = bpmnRules.canInsert(shapes, element);\n\n\t      return canInsert && getApproxIntersection(element.waypoints, newShapeMid);\n\t    });\n\n\t    if (connection) {\n\t      context.targetFlow = connection;\n\t      context.position = newShapeMid;\n\t    }\n\n\t  }, true);\n\n\t  this.postExecuted('elements.move', function(context) {\n\n\t    var shapes = context.shapes,\n\t        targetFlow = context.targetFlow,\n\t        position = context.position;\n\n\t    if (targetFlow) {\n\t      insertShape(shapes[0], targetFlow, position);\n\t    }\n\n\t  }, true);\n\n\t  this.preExecute('shape.create', function(context) {\n\n\t    var parent = context.parent,\n\t        shape = context.shape;\n\n\t    if (bpmnRules.canInsert(shape, parent)) {\n\t      context.targetFlow = parent;\n\t      context.parent = parent.parent;\n\t    }\n\t  }, true);\n\n\t  this.postExecuted('shape.create', function(context) {\n\n\t    var shape = context.shape,\n\t        targetFlow = context.targetFlow,\n\t        positionOrBounds = context.position;\n\n\t    if (targetFlow) {\n\t      insertShape(shape, targetFlow, positionOrBounds);\n\t    }\n\t  }, true);\n\t}\n\n\tinherits_browser(DropOnFlowBehavior, CommandInterceptor);\n\n\tDropOnFlowBehavior.$inject = [\n\t  'eventBus',\n\t  'bpmnRules',\n\t  'modeling'\n\t];\n\n\n\t// helpers /////////////////////\n\n\tfunction isPointInsideBBox$2(bbox, point) {\n\t  var x = point.x,\n\t      y = point.y;\n\n\t  return x >= bbox.x &&\n\t    x <= bbox.x + bbox.width &&\n\t    y >= bbox.y &&\n\t    y <= bbox.y + bbox.height;\n\t}\n\n\tfunction copy(obj) {\n\t  return assign({}, obj);\n\t}\n\n\tfunction EventBasedGatewayBehavior(eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  /**\n\t   * Remove existing sequence flows of event-based target before connecting\n\t   * from event-based gateway.\n\t   */\n\t  this.preExecuted('connection.create', function(event) {\n\n\t    var context = event.context,\n\t        source = context.source,\n\t        target = context.target,\n\t        existingIncomingConnections = target.incoming.slice();\n\n\t    if (context.hints && context.hints.createElementsBehavior === false) {\n\t      return;\n\t    }\n\n\t    if (\n\t      is$1(source, 'bpmn:EventBasedGateway') &&\n\t      target.incoming.length\n\t    ) {\n\n\t      existingIncomingConnections.filter(isSequenceFlow)\n\t        .forEach(function(sequenceFlow) {\n\t          modeling.removeConnection(sequenceFlow);\n\t        });\n\t    }\n\t  });\n\n\t  /**\n\t   *  After replacing shape with event-based gateway, remove incoming sequence\n\t   *  flows of event-based targets which do not belong to event-based gateway\n\t   *  source.\n\t   */\n\t  this.preExecuted('shape.replace', function(event) {\n\n\t    var newShape = event.context.newShape,\n\t        newShapeTargets,\n\t        newShapeTargetsIncomingSequenceFlows;\n\n\t    if (!is$1(newShape, 'bpmn:EventBasedGateway')) {\n\t      return;\n\t    }\n\n\t    newShapeTargets = newShape.outgoing.filter(isSequenceFlow)\n\t      .map(function(sequenceFlow) {\n\t        return sequenceFlow.target;\n\t      });\n\n\t    newShapeTargetsIncomingSequenceFlows = newShapeTargets.reduce(function(sequenceFlows, target) {\n\t      var incomingSequenceFlows = target.incoming.filter(isSequenceFlow);\n\n\t      return sequenceFlows.concat(incomingSequenceFlows);\n\t    }, []);\n\n\t    newShapeTargetsIncomingSequenceFlows.forEach(function(sequenceFlow) {\n\t      if (sequenceFlow.source !== newShape) {\n\t        modeling.removeConnection(sequenceFlow);\n\t      }\n\t    });\n\t  });\n\t}\n\n\tEventBasedGatewayBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\tinherits_browser(EventBasedGatewayBehavior, CommandInterceptor);\n\n\n\n\t// helpers //////////////////////\n\n\tfunction isSequenceFlow(connection) {\n\t  return is$1(connection, 'bpmn:SequenceFlow');\n\t}\n\n\tvar HIGH_PRIORITY$9 = 2000;\n\n\n\t/**\n\t * BPMN specific Group behavior\n\t */\n\tfunction GroupBehavior(\n\t    bpmnFactory,\n\t    canvas,\n\t    elementRegistry,\n\t    eventBus,\n\t    injector,\n\t    moddleCopy\n\t) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  /**\n\t   * Gets process definitions\n\t   *\n\t   * @return {ModdleElement} definitions\n\t   */\n\t  function getDefinitions() {\n\t    var rootElement = canvas.getRootElement(),\n\t        businessObject = getBusinessObject(rootElement);\n\n\t    return businessObject.$parent;\n\t  }\n\n\t  /**\n\t   * Removes a referenced category value for a given group shape\n\t   *\n\t   * @param {djs.model.Shape} shape\n\t   */\n\t  function removeReferencedCategoryValue(shape) {\n\n\t    var businessObject = getBusinessObject(shape),\n\t        categoryValue = businessObject.categoryValueRef;\n\n\t    if (!categoryValue) {\n\t      return;\n\t    }\n\n\t    var category = categoryValue.$parent;\n\n\t    if (!categoryValue) {\n\t      return;\n\t    }\n\n\t    remove$2(category.categoryValue, categoryValue);\n\n\t    // cleanup category if it is empty\n\t    if (category && !category.categoryValue.length) {\n\t      removeCategory(category);\n\t    }\n\t  }\n\n\t  /**\n\t   * Removes a given category from the definitions\n\t   *\n\t   * @param {ModdleElement} category\n\t   */\n\t  function removeCategory(category) {\n\n\t    var definitions = getDefinitions();\n\n\t    remove$2(definitions.get('rootElements'), category);\n\t  }\n\n\t  /**\n\t   * Returns all group element in the current registry\n\t   *\n\t   * @return {Array<djs.model.shape>} a list of group shapes\n\t   */\n\t  function getGroupElements() {\n\t    return elementRegistry.filter(function(e) {\n\t      return is$1(e, 'bpmn:Group');\n\t    });\n\t  }\n\n\t  /**\n\t   * Returns true if given categoryValue is referenced in one of the given elements\n\t   *\n\t   * @param {Array<djs.model.shape>} elements\n\t   * @param {ModdleElement} categoryValue\n\t   * @return {boolean}\n\t   */\n\t  function isReferenced(elements, categoryValue) {\n\t    return elements.some(function(e) {\n\n\t      var businessObject = getBusinessObject(e);\n\n\t      return businessObject.categoryValueRef\n\t        && businessObject.categoryValueRef === categoryValue;\n\t    });\n\t  }\n\n\t  /**\n\t   * remove referenced category + value when group was deleted\n\t   */\n\t  this.executed('shape.delete', function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:Group')) {\n\n\t      var businessObject = getBusinessObject(shape),\n\t          categoryValueRef = businessObject.categoryValueRef,\n\t          groupElements = getGroupElements();\n\n\t      if (!isReferenced(groupElements, categoryValueRef)) {\n\t        removeReferencedCategoryValue(shape);\n\t      }\n\t    }\n\t  });\n\n\t  /**\n\t   * re-attach removed category\n\t   */\n\t  this.reverted('shape.delete', function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:Group')) {\n\n\t      var businessObject = getBusinessObject(shape),\n\t          categoryValueRef = businessObject.categoryValueRef,\n\t          definitions = getDefinitions(),\n\t          category = categoryValueRef ? categoryValueRef.$parent : null;\n\n\t      add$1(category.get('categoryValue'), categoryValueRef);\n\t      add$1(definitions.get('rootElements'), category);\n\t    }\n\t  });\n\n\t  /**\n\t   * create new category + value when group was created\n\t   */\n\t  this.execute('shape.create', function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        businessObject = getBusinessObject(shape);\n\n\t    if (is$1(businessObject, 'bpmn:Group') && !businessObject.categoryValueRef) {\n\n\t      var definitions = getDefinitions(),\n\t          categoryValue = createCategoryValue(definitions, bpmnFactory);\n\n\t      // link the reference to the Group\n\t      businessObject.categoryValueRef = categoryValue;\n\t    }\n\t  });\n\n\n\t  this.revert('shape.create', function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:Group')) {\n\t      removeReferencedCategoryValue(shape);\n\n\t      delete getBusinessObject(shape).categoryValueRef;\n\n\t    }\n\t  });\n\n\t  // copy bpmn:CategoryValue when copying element\n\t  eventBus.on('moddleCopy.canCopyProperty', HIGH_PRIORITY$9, function(context) {\n\t    var property = context.property,\n\t        categoryValue;\n\n\t    if (is$1(property, 'bpmn:CategoryValue')) {\n\t      categoryValue = createCategoryValue(getDefinitions(), bpmnFactory);\n\n\t      // return copy of category\n\t      return moddleCopy.copyElement(property, categoryValue);\n\t    }\n\t  });\n\n\t}\n\n\tGroupBehavior.$inject = [\n\t  'bpmnFactory',\n\t  'canvas',\n\t  'elementRegistry',\n\t  'eventBus',\n\t  'injector',\n\t  'moddleCopy'\n\t];\n\n\tinherits_browser(GroupBehavior, CommandInterceptor);\n\n\t/**\n\t * Returns the intersection between two line segments a and b.\n\t *\n\t * @param {Point} l1s\n\t * @param {Point} l1e\n\t * @param {Point} l2s\n\t * @param {Point} l2e\n\t *\n\t * @return {Point}\n\t */\n\tfunction lineIntersect(l1s, l1e, l2s, l2e) {\n\n\t  // if the lines intersect, the result contains the x and y of the\n\t  // intersection (treating the lines as infinite) and booleans for\n\t  // whether line segment 1 or line segment 2 contain the point\n\t  var denominator, a, b, c, numerator;\n\n\t  denominator = ((l2e.y - l2s.y) * (l1e.x - l1s.x)) - ((l2e.x - l2s.x) * (l1e.y - l1s.y));\n\n\t  if (denominator == 0) {\n\t    return null;\n\t  }\n\n\t  a = l1s.y - l2s.y;\n\t  b = l1s.x - l2s.x;\n\t  numerator = ((l2e.x - l2s.x) * a) - ((l2e.y - l2s.y) * b);\n\n\t  c = numerator / denominator;\n\n\t  // if we cast these lines infinitely in\n\t  // both directions, they intersect here\n\t  return {\n\t    x: Math.round(l1s.x + (c * (l1e.x - l1s.x))),\n\t    y: Math.round(l1s.y + (c * (l1e.y - l1s.y)))\n\t  };\n\t}\n\n\t/**\n\t * Fix broken dockings after DI imports.\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction ImportDockingFix(eventBus) {\n\n\t  function adjustDocking(startPoint, nextPoint, elementMid) {\n\n\t    var elementTop = {\n\t      x: elementMid.x,\n\t      y: elementMid.y - 50\n\t    };\n\n\t    var elementLeft = {\n\t      x: elementMid.x - 50,\n\t      y: elementMid.y\n\t    };\n\n\t    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n\t        horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);\n\n\t    // original is horizontal or vertical center cross intersection\n\t    var centerIntersect;\n\n\t    if (verticalIntersect && horizontalIntersect) {\n\t      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n\t        centerIntersect = horizontalIntersect;\n\t      } else {\n\t        centerIntersect = verticalIntersect;\n\t      }\n\t    } else {\n\t      centerIntersect = verticalIntersect || horizontalIntersect;\n\t    }\n\n\t    startPoint.original = centerIntersect;\n\t  }\n\n\t  function fixDockings(connection) {\n\t    var waypoints = connection.waypoints;\n\n\t    adjustDocking(\n\t      waypoints[0],\n\t      waypoints[1],\n\t      getMid(connection.source)\n\t    );\n\n\t    adjustDocking(\n\t      waypoints[waypoints.length - 1],\n\t      waypoints[waypoints.length - 2],\n\t      getMid(connection.target)\n\t    );\n\t  }\n\n\t  eventBus.on('bpmnElement.added', function(e) {\n\n\t    var element = e.element;\n\n\t    if (element.waypoints) {\n\t      fixDockings(element);\n\t    }\n\t  });\n\t}\n\n\tImportDockingFix.$inject = [\n\t  'eventBus'\n\t];\n\n\n\t// helpers //////////////////////\n\n\tfunction getDistance(p1, p2) {\n\t  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n\t}\n\n\t/**\n\t * A component that makes sure that each created or updated\n\t * Pool and Lane is assigned an isHorizontal property set to true.\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction IsHorizontalFix(eventBus) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  var elementTypesToUpdate = [\n\t    'bpmn:Participant',\n\t    'bpmn:Lane'\n\t  ];\n\n\t  this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], function(event) {\n\t    var bo = getBusinessObject(event.context.shape);\n\n\t    if (isAny(bo, elementTypesToUpdate) && !bo.di.get('isHorizontal')) {\n\n\t      // set attribute directly to avoid modeling#updateProperty side effects\n\t      bo.di.set('isHorizontal', true);\n\t    }\n\t  });\n\n\t}\n\n\tIsHorizontalFix.$inject = [ 'eventBus' ];\n\n\tinherits_browser(IsHorizontalFix, CommandInterceptor);\n\n\t/**\n\t * Returns the length of a vector\n\t *\n\t * @param {Vector}\n\t * @return {Float}\n\t */\n\tfunction vectorLength(v) {\n\t  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n\t}\n\n\n\t/**\n\t * Calculates the angle between a line a the yAxis\n\t *\n\t * @param {Array}\n\t * @return {Float}\n\t */\n\tfunction getAngle(line) {\n\n\t  // return value is between 0, 180 and -180, -0\n\t  // @janstuemmel: maybe replace return a/b with b/a\n\t  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));\n\t}\n\n\n\t/**\n\t * Rotates a vector by a given angle\n\t *\n\t * @param {Vector}\n\t * @param {Float} Angle in radians\n\t * @return {Vector}\n\t */\n\tfunction rotateVector(vector, angle) {\n\t  return (!angle) ? vector : {\n\t    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,\n\t    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y\n\t  };\n\t}\n\n\n\t/**\n\t * Solves a 2D equation system\n\t * a + r*b = c, where a,b,c are 2D vectors\n\t *\n\t * @param {Vector}\n\t * @param {Vector}\n\t * @param {Vector}\n\t * @return {Float}\n\t */\n\tfunction solveLambaSystem(a, b, c) {\n\n\t  // the 2d system\n\t  var system = [\n\t    { n: a[0] - c[0], lambda: b[0] },\n\t    { n: a[1] - c[1], lambda: b[1] }\n\t  ];\n\n\t  // solve\n\t  var n = system[0].n * b[0] + system[1].n * b[1],\n\t      l = system[0].lambda * b[0] + system[1].lambda * b[1];\n\n\t  return -n/l;\n\t}\n\n\n\t/**\n\t * Position of perpendicular foot\n\t *\n\t * @param {Point}\n\t * @param [ {Point}, {Point} ] line defined through two points\n\t * @return {Point} the perpendicular foot position\n\t */\n\tfunction perpendicularFoot(point, line) {\n\n\t  var a = line[0], b = line[1];\n\n\t  // relative position of b from a\n\t  var bd = { x: b.x - a.x, y: b.y - a.y };\n\n\t  // solve equation system to the parametrized vectors param real value\n\t  var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);\n\n\t  return { x: a.x + r*bd.x, y: a.y + r*bd.y };\n\t}\n\n\n\t/**\n\t * Calculates the distance between a point and a line\n\t *\n\t * @param {Point}\n\t * @param [ {Point}, {Point} ] line defined through two points\n\t * @return {Float} distance\n\t */\n\tfunction getDistancePointLine(point, line) {\n\n\t  var pfPoint = perpendicularFoot(point, line);\n\n\t  // distance vector\n\t  var connectionVector = {\n\t    x: pfPoint.x - point.x,\n\t    y: pfPoint.y - point.y\n\t  };\n\n\t  return vectorLength(connectionVector);\n\t}\n\n\n\t/**\n\t * Calculates the distance between two points\n\t *\n\t * @param {Point}\n\t * @param {Point}\n\t * @return {Float} distance\n\t */\n\tfunction getDistancePointPoint(point1, point2) {\n\n\t  return vectorLength({\n\t    x: point1.x - point2.x,\n\t    y: point1.y - point2.y\n\t  });\n\t}\n\n\tvar sqrt = Math.sqrt,\n\t    min$2 = Math.min,\n\t    max$3 = Math.max,\n\t    abs$4 = Math.abs;\n\n\t/**\n\t * Calculate the square (power to two) of a number.\n\t *\n\t * @param {number} n\n\t *\n\t * @return {number}\n\t */\n\tfunction sq(n) {\n\t  return Math.pow(n, 2);\n\t}\n\n\t/**\n\t * Get distance between two points.\n\t *\n\t * @param {Point} p1\n\t * @param {Point} p2\n\t *\n\t * @return {number}\n\t */\n\tfunction getDistance$1(p1, p2) {\n\t  return sqrt(sq(p1.x - p2.x) + sq(p1.y - p2.y));\n\t}\n\n\t/**\n\t * Return the attachment of the given point on the specified line.\n\t *\n\t * The attachment is either a bendpoint (attached to the given point)\n\t * or segment (attached to a location on a line segment) attachment:\n\t *\n\t * ```javascript\n\t * var pointAttachment = {\n\t *   type: 'bendpoint',\n\t *   bendpointIndex: 3,\n\t *   position: { x: 10, y: 10 } // the attach point on the line\n\t * };\n\t *\n\t * var segmentAttachment = {\n\t *   type: 'segment',\n\t *   segmentIndex: 2,\n\t *   relativeLocation: 0.31, // attach point location between 0 (at start) and 1 (at end)\n\t *   position: { x: 10, y: 10 } // the attach point on the line\n\t * };\n\t * ```\n\t *\n\t * @param {Point} point\n\t * @param {Array<Point>} line\n\t *\n\t * @return {Object} attachment\n\t */\n\tfunction getAttachment(point, line) {\n\n\t  var idx = 0,\n\t      segmentStart,\n\t      segmentEnd,\n\t      segmentStartDistance,\n\t      segmentEndDistance,\n\t      attachmentPosition,\n\t      minDistance,\n\t      intersections,\n\t      attachment,\n\t      attachmentDistance,\n\t      closestAttachmentDistance,\n\t      closestAttachment;\n\n\t  for (idx = 0; idx < line.length - 1; idx++) {\n\n\t    segmentStart = line[idx];\n\t    segmentEnd = line[idx + 1];\n\n\t    if (pointsEqual(segmentStart, segmentEnd)) {\n\t      intersections = [ segmentStart ];\n\t    } else {\n\t      segmentStartDistance = getDistance$1(point, segmentStart);\n\t      segmentEndDistance = getDistance$1(point, segmentEnd);\n\n\t      minDistance = min$2(segmentStartDistance, segmentEndDistance);\n\n\t      intersections = getCircleSegmentIntersections(segmentStart, segmentEnd, point, minDistance);\n\t    }\n\n\t    if (intersections.length < 1) {\n\t      throw new Error('expected between [1, 2] circle -> line intersections');\n\t    }\n\n\t    // one intersection -> bendpoint attachment\n\t    if (intersections.length === 1) {\n\t      attachment = {\n\t        type: 'bendpoint',\n\t        position: intersections[0],\n\t        segmentIndex: idx,\n\t        bendpointIndex: pointsEqual(segmentStart, intersections[0]) ? idx : idx + 1\n\t      };\n\t    }\n\n\t    // two intersections -> segment attachment\n\t    if (intersections.length === 2) {\n\n\t      attachmentPosition = mid$1(intersections[0], intersections[1]);\n\n\t      attachment = {\n\t        type: 'segment',\n\t        position: attachmentPosition,\n\t        segmentIndex: idx,\n\t        relativeLocation: getDistance$1(segmentStart, attachmentPosition) / getDistance$1(segmentStart, segmentEnd)\n\t      };\n\t    }\n\n\t    attachmentDistance = getDistance$1(attachment.position, point);\n\n\t    if (!closestAttachment || closestAttachmentDistance > attachmentDistance) {\n\t      closestAttachment = attachment;\n\t      closestAttachmentDistance = attachmentDistance;\n\t    }\n\t  }\n\n\t  return closestAttachment;\n\t}\n\n\t/**\n\t * Gets the intersection between a circle and a line segment.\n\t *\n\t * @param {Point} s1 segment start\n\t * @param {Point} s2 segment end\n\t * @param {Point} cc circle center\n\t * @param {number} cr circle radius\n\t *\n\t * @return {Array<Point>} intersections\n\t */\n\tfunction getCircleSegmentIntersections(s1, s2, cc, cr) {\n\n\t  var baX = s2.x - s1.x;\n\t  var baY = s2.y - s1.y;\n\t  var caX = cc.x - s1.x;\n\t  var caY = cc.y - s1.y;\n\n\t  var a = baX * baX + baY * baY;\n\t  var bBy2 = baX * caX + baY * caY;\n\t  var c = caX * caX + caY * caY - cr * cr;\n\n\t  var pBy2 = bBy2 / a;\n\t  var q = c / a;\n\n\t  var disc = pBy2 * pBy2 - q;\n\n\t  // check against negative value to work around\n\t  // negative, very close to zero results (-4e-15)\n\t  // being produced in some environments\n\t  if (disc < 0 && disc > -0.000001) {\n\t    disc = 0;\n\t  }\n\n\t  if (disc < 0) {\n\t    return [];\n\t  }\n\n\t  // if disc == 0 ... dealt with later\n\t  var tmpSqrt = sqrt(disc);\n\t  var abScalingFactor1 = -pBy2 + tmpSqrt;\n\t  var abScalingFactor2 = -pBy2 - tmpSqrt;\n\n\t  var i1 = {\n\t    x: s1.x - baX * abScalingFactor1,\n\t    y: s1.y - baY * abScalingFactor1\n\t  };\n\n\t  if (disc === 0) { // abScalingFactor1 == abScalingFactor2\n\t    return [ i1 ];\n\t  }\n\n\t  var i2 = {\n\t    x: s1.x - baX * abScalingFactor2,\n\t    y: s1.y - baY * abScalingFactor2\n\t  };\n\n\t  // return only points on line segment\n\t  return [ i1, i2 ].filter(function(p) {\n\t    return isPointInSegment(p, s1, s2);\n\t  });\n\t}\n\n\n\tfunction isPointInSegment(p, segmentStart, segmentEnd) {\n\t  return (\n\t    fenced(p.x, segmentStart.x, segmentEnd.x) &&\n\t    fenced(p.y, segmentStart.y, segmentEnd.y)\n\t  );\n\t}\n\n\tfunction fenced(n, rangeStart, rangeEnd) {\n\n\t  // use matching threshold to work around\n\t  // precision errors in intersection computation\n\n\t  return (\n\t    n >= min$2(rangeStart, rangeEnd) - EQUAL_THRESHOLD &&\n\t    n <= max$3(rangeStart, rangeEnd) + EQUAL_THRESHOLD\n\t  );\n\t}\n\n\t/**\n\t * Calculate mid of two points.\n\t *\n\t * @param {Point} p1\n\t * @param {Point} p2\n\t *\n\t * @return {Point}\n\t */\n\tfunction mid$1(p1, p2) {\n\n\t  return {\n\t    x: (p1.x + p2.x) / 2,\n\t    y: (p1.y + p2.y) / 2\n\t  };\n\t}\n\n\tvar EQUAL_THRESHOLD = 0.1;\n\n\tfunction pointsEqual(p1, p2) {\n\n\t  return (\n\t    abs$4(p1.x - p2.x) <= EQUAL_THRESHOLD &&\n\t    abs$4(p1.y - p2.y) <= EQUAL_THRESHOLD\n\t  );\n\t}\n\n\tfunction findNewLabelLineStartIndex(oldWaypoints, newWaypoints, attachment, hints) {\n\n\t  var index = attachment.segmentIndex;\n\n\t  var offset = newWaypoints.length - oldWaypoints.length;\n\n\t  // segmentMove happened\n\t  if (hints.segmentMove) {\n\n\t    var oldSegmentStartIndex = hints.segmentMove.segmentStartIndex,\n\t        newSegmentStartIndex = hints.segmentMove.newSegmentStartIndex;\n\n\t    // if label was on moved segment return new segment index\n\t    if (index === oldSegmentStartIndex) {\n\t      return newSegmentStartIndex;\n\t    }\n\n\t    // label is after new segment index\n\t    if (index >= newSegmentStartIndex) {\n\t      return (index+offset < newSegmentStartIndex) ? newSegmentStartIndex : index+offset;\n\t    }\n\n\t    // if label is before new segment index\n\t    return index;\n\t  }\n\n\t  // bendpointMove happened\n\t  if (hints.bendpointMove) {\n\n\t    var insert = hints.bendpointMove.insert,\n\t        bendpointIndex = hints.bendpointMove.bendpointIndex,\n\t        newIndex;\n\n\t    // waypoints length didnt change\n\t    if (offset === 0) {\n\t      return index;\n\t    }\n\n\t    // label behind new/removed bendpoint\n\t    if (index >= bendpointIndex) {\n\t      newIndex = insert ? index + 1 : index - 1;\n\t    }\n\n\t    // label before new/removed bendpoint\n\t    if (index < bendpointIndex) {\n\n\t      newIndex = index;\n\n\t      // decide label should take right or left segment\n\t      if (insert && attachment.type !== 'bendpoint' && bendpointIndex-1 === index) {\n\n\t        var rel = relativePositionMidWaypoint(newWaypoints, bendpointIndex);\n\n\t        if (rel < attachment.relativeLocation) {\n\t          newIndex++;\n\t        }\n\t      }\n\t    }\n\n\t    return newIndex;\n\t  }\n\n\t  // start/end changed\n\t  if (offset === 0) {\n\t    return index;\n\t  }\n\n\t  if (hints.connectionStart) {\n\t    return (index === 0) ? 0 : null;\n\t  }\n\n\t  if (hints.connectionEnd) {\n\t    return (index === oldWaypoints.length - 2) ? newWaypoints.length - 2 : null;\n\t  }\n\n\t  // if nothing fits, return null\n\t  return null;\n\t}\n\n\n\t/**\n\t * Calculate the required adjustment (move delta) for the given label\n\t * after the connection waypoints got updated.\n\t *\n\t * @param {djs.model.Label} label\n\t * @param {Array<Point>} newWaypoints\n\t * @param {Array<Point>} oldWaypoints\n\t * @param {Object} hints\n\t *\n\t * @return {Point} delta\n\t */\n\tfunction getLabelAdjustment(label, newWaypoints, oldWaypoints, hints) {\n\n\t  var x = 0,\n\t      y = 0;\n\n\t  var labelPosition = getLabelMid(label);\n\n\t  // get closest attachment\n\t  var attachment = getAttachment(labelPosition, oldWaypoints),\n\t      oldLabelLineIndex = attachment.segmentIndex,\n\t      newLabelLineIndex = findNewLabelLineStartIndex(oldWaypoints, newWaypoints, attachment, hints);\n\n\t  if (newLabelLineIndex === null) {\n\t    return { x: x, y: y };\n\t  }\n\n\t  // should never happen\n\t  // TODO(@janstuemmel): throw an error here when connectionSegmentMove is refactored\n\t  if (newLabelLineIndex < 0 ||\n\t      newLabelLineIndex > newWaypoints.length - 2) {\n\t    return { x: x, y: y };\n\t  }\n\n\t  var oldLabelLine = getLine(oldWaypoints, oldLabelLineIndex),\n\t      newLabelLine = getLine(newWaypoints, newLabelLineIndex),\n\t      oldFoot = attachment.position;\n\n\t  var relativeFootPosition = getRelativeFootPosition(oldLabelLine, oldFoot),\n\t      angleDelta = getAngleDelta(oldLabelLine, newLabelLine);\n\n\t  // special rule if label on bendpoint\n\t  if (attachment.type === 'bendpoint') {\n\n\t    var offset = newWaypoints.length - oldWaypoints.length,\n\t        oldBendpointIndex = attachment.bendpointIndex,\n\t        oldBendpoint = oldWaypoints[oldBendpointIndex];\n\n\t    // bendpoint position hasn't changed, return same position\n\t    if (newWaypoints.indexOf(oldBendpoint) !== -1) {\n\t      return { x: x, y: y };\n\t    }\n\n\t    // new bendpoint and old bendpoint have same index, then just return the offset\n\t    if (offset === 0) {\n\t      var newBendpoint = newWaypoints[oldBendpointIndex];\n\n\t      return {\n\t        x: newBendpoint.x - attachment.position.x,\n\t        y: newBendpoint.y - attachment.position.y\n\t      };\n\t    }\n\n\t    // if bendpoints get removed\n\t    if (offset < 0 && oldBendpointIndex !== 0 && oldBendpointIndex < oldWaypoints.length - 1) {\n\t      relativeFootPosition = relativePositionMidWaypoint(oldWaypoints, oldBendpointIndex);\n\t    }\n\t  }\n\n\t  var newFoot = {\n\t    x: (newLabelLine[1].x - newLabelLine[0].x) * relativeFootPosition + newLabelLine[0].x,\n\t    y: (newLabelLine[1].y - newLabelLine[0].y) * relativeFootPosition + newLabelLine[0].y\n\t  };\n\n\t  // the rotated vector to label\n\t  var newLabelVector = rotateVector({\n\t    x: labelPosition.x - oldFoot.x,\n\t    y: labelPosition.y - oldFoot.y\n\t  }, angleDelta);\n\n\t  // the new relative position\n\t  x = newFoot.x + newLabelVector.x - labelPosition.x;\n\t  y = newFoot.y + newLabelVector.y - labelPosition.y;\n\n\t  return roundPoint({\n\t    x: x,\n\t    y: y\n\t  });\n\t}\n\n\n\t// HELPERS //////////////////////\n\n\tfunction relativePositionMidWaypoint(waypoints, idx) {\n\n\t  var distanceSegment1 = getDistancePointPoint(waypoints[idx-1], waypoints[idx]),\n\t      distanceSegment2 = getDistancePointPoint(waypoints[idx], waypoints[idx+1]);\n\n\t  var relativePosition = distanceSegment1 / (distanceSegment1 + distanceSegment2);\n\n\t  return relativePosition;\n\t}\n\n\tfunction getLabelMid(label) {\n\t  return {\n\t    x: label.x + label.width / 2,\n\t    y: label.y + label.height / 2\n\t  };\n\t}\n\n\tfunction getAngleDelta(l1, l2) {\n\t  var a1 = getAngle(l1),\n\t      a2 = getAngle(l2);\n\t  return a2 - a1;\n\t}\n\n\tfunction getLine(waypoints, idx) {\n\t  return [ waypoints[idx], waypoints[idx+1] ];\n\t}\n\n\tfunction getRelativeFootPosition(line, foot) {\n\n\t  var length = getDistancePointPoint(line[0], line[1]),\n\t      lengthToFoot = getDistancePointPoint(line[0], foot);\n\n\t  return length === 0 ? 0 : lengthToFoot / length;\n\t}\n\n\t/**\n\t * Calculates the absolute point relative to the new element's position\n\t *\n\t * @param {point} point [absolute]\n\t * @param {bounds} oldBounds\n\t * @param {bounds} newBounds\n\t *\n\t * @return {point} point [absolute]\n\t */\n\tfunction getNewAttachPoint(point, oldBounds, newBounds) {\n\t  var oldCenter = center(oldBounds),\n\t      newCenter = center(newBounds),\n\t      oldDelta = delta(point, oldCenter);\n\n\t  var newDelta = {\n\t    x: oldDelta.x * (newBounds.width / oldBounds.width),\n\t    y: oldDelta.y * (newBounds.height / oldBounds.height)\n\t  };\n\n\t  return roundPoint({\n\t    x: newCenter.x + newDelta.x,\n\t    y: newCenter.y + newDelta.y\n\t  });\n\t}\n\n\n\t/**\n\t * Calculates the shape's delta relative to a new position\n\t * of a certain element's bounds\n\t *\n\t * @param {djs.model.Shape} point [absolute]\n\t * @param {bounds} oldBounds\n\t * @param {bounds} newBounds\n\t *\n\t * @return {delta} delta\n\t */\n\tfunction getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n\t  var shapeCenter = center(shape),\n\t      oldCenter = center(oldBounds),\n\t      newCenter = center(newBounds),\n\t      shapeDelta = delta(shape, shapeCenter),\n\t      oldCenterDelta = delta(shapeCenter, oldCenter),\n\t      stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);\n\n\t  if (stickyPositionDelta) {\n\t    return stickyPositionDelta;\n\t  }\n\n\t  var newCenterDelta = {\n\t    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n\t    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n\t  };\n\n\t  var newShapeCenter = {\n\t    x: newCenter.x + newCenterDelta.x,\n\t    y: newCenter.y + newCenterDelta.y\n\t  };\n\n\t  return roundPoint({\n\t    x: newShapeCenter.x + shapeDelta.x - shape.x,\n\t    y: newShapeCenter.y + shapeDelta.y - shape.y\n\t  });\n\t}\n\n\tfunction getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {\n\t  var oldTRBL = asTRBL(oldBounds),\n\t      newTRBL = asTRBL(newBounds);\n\n\t  if (isMoved(oldTRBL, newTRBL)) {\n\t    return null;\n\t  }\n\n\t  var oldOrientation = getOrientation(oldBounds, oldShapeCenter),\n\t      stickyPositionDelta,\n\t      newShapeCenter,\n\t      newOrientation;\n\n\t  if (oldOrientation === 'top') {\n\t    stickyPositionDelta = {\n\t      x: 0,\n\t      y: newTRBL.bottom - oldTRBL.bottom\n\t    };\n\t  } else if (oldOrientation === 'bottom') {\n\t    stickyPositionDelta = {\n\t      x: 0,\n\t      y: newTRBL.top - oldTRBL.top\n\t    };\n\t  } else if (oldOrientation === 'right') {\n\t    stickyPositionDelta = {\n\t      x: newTRBL.left - oldTRBL.left,\n\t      y: 0\n\t    };\n\t  } else if (oldOrientation === 'left') {\n\t    stickyPositionDelta = {\n\t      x: newTRBL.right - oldTRBL.right,\n\t      y: 0\n\t    };\n\t  } else {\n\n\t    // fallback to proportional movement for corner-placed attachments\n\t    return null;\n\t  }\n\n\t  newShapeCenter = {\n\t    x: oldShapeCenter.x + stickyPositionDelta.x,\n\t    y: oldShapeCenter.y + stickyPositionDelta.y\n\t  };\n\n\t  newOrientation = getOrientation(newBounds, newShapeCenter);\n\n\t  if (newOrientation !== oldOrientation) {\n\n\t    // fallback to proportional movement if orientation would otherwise change\n\t    return null;\n\t  }\n\n\t  return stickyPositionDelta;\n\t}\n\n\tfunction isMoved(oldTRBL, newTRBL) {\n\t  return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);\n\t}\n\n\tfunction isHorizontallyMoved(oldTRBL, newTRBL) {\n\t  return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;\n\t}\n\n\tfunction isVerticallyMoved(oldTRBL, newTRBL) {\n\t  return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;\n\t}\n\n\tvar DEFAULT_LABEL_DIMENSIONS = {\n\t  width: 90,\n\t  height: 20\n\t};\n\n\tvar NAME_PROPERTY = 'name';\n\tvar TEXT_PROPERTY = 'text';\n\n\t/**\n\t * A component that makes sure that external labels are added\n\t * together with respective elements and properly updated (DI wise)\n\t * during move.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t * @param {BpmnFactory} bpmnFactory\n\t * @param {TextRenderer} textRenderer\n\t */\n\tfunction LabelBehavior(\n\t    eventBus, modeling, bpmnFactory,\n\t    textRenderer) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  // update label if name property was updated\n\t  this.postExecute('element.updateProperties', function(e) {\n\t    var context = e.context,\n\t        element = context.element,\n\t        properties = context.properties;\n\n\t    if (NAME_PROPERTY in properties) {\n\t      modeling.updateLabel(element, properties[NAME_PROPERTY]);\n\t    }\n\n\t    if (TEXT_PROPERTY in properties\n\t        && is$1(element, 'bpmn:TextAnnotation')) {\n\n\t      var newBounds = textRenderer.getTextAnnotationBounds(\n\t        {\n\t          x: element.x,\n\t          y: element.y,\n\t          width: element.width,\n\t          height: element.height\n\t        },\n\t        properties[TEXT_PROPERTY] || ''\n\t      );\n\n\t      modeling.updateLabel(element, properties.text, newBounds);\n\t    }\n\t  });\n\n\t  // create label shape after shape/connection was created\n\t  this.postExecute([ 'shape.create', 'connection.create' ], function(e) {\n\t    var context = e.context,\n\t        hints = context.hints || {};\n\n\t    if (hints.createElementsBehavior === false) {\n\t      return;\n\t    }\n\n\t    var element = context.shape || context.connection,\n\t        businessObject = element.businessObject;\n\n\t    if (isLabel(element) || !isLabelExternal(element)) {\n\t      return;\n\t    }\n\n\t    // only create label if attribute available\n\t    if (!getLabel(element)) {\n\t      return;\n\t    }\n\n\t    var labelCenter = getExternalLabelMid(element);\n\n\t    // we don't care about x and y\n\t    var labelDimensions = textRenderer.getExternalLabelBounds(\n\t      DEFAULT_LABEL_DIMENSIONS,\n\t      getLabel(element)\n\t    );\n\n\t    modeling.createLabel(element, labelCenter, {\n\t      id: businessObject.id + '_label',\n\t      businessObject: businessObject,\n\t      width: labelDimensions.width,\n\t      height: labelDimensions.height\n\t    });\n\t  });\n\n\t  // update label after label shape was deleted\n\t  this.postExecute('shape.delete', function(event) {\n\t    var context = event.context,\n\t        labelTarget = context.labelTarget,\n\t        hints = context.hints || {};\n\n\t    // check if label\n\t    if (labelTarget && hints.unsetLabel !== false) {\n\t      modeling.updateLabel(labelTarget, null, null, { removeShape: false });\n\t    }\n\t  });\n\n\t  // update di information on label creation\n\t  this.postExecute([ 'label.create' ], function(event) {\n\n\t    var context = event.context,\n\t        element = context.shape,\n\t        businessObject,\n\t        di;\n\n\t    // we want to trigger on real labels only\n\t    if (!element.labelTarget) {\n\t      return;\n\t    }\n\n\t    // we want to trigger on BPMN elements only\n\t    if (!is$1(element.labelTarget || element, 'bpmn:BaseElement')) {\n\t      return;\n\t    }\n\n\t    businessObject = element.businessObject,\n\t    di = businessObject.di;\n\n\n\t    if (!di.label) {\n\t      di.label = bpmnFactory.create('bpmndi:BPMNLabel', {\n\t        bounds: bpmnFactory.create('dc:Bounds')\n\t      });\n\t    }\n\n\t    assign(di.label.bounds, {\n\t      x: element.x,\n\t      y: element.y,\n\t      width: element.width,\n\t      height: element.height\n\t    });\n\t  });\n\n\t  function getVisibleLabelAdjustment(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        label = connection.label,\n\t        hints = assign({}, context.hints),\n\t        newWaypoints = context.newWaypoints || connection.waypoints,\n\t        oldWaypoints = context.oldWaypoints;\n\n\n\t    if (typeof hints.startChanged === 'undefined') {\n\t      hints.startChanged = !!hints.connectionStart;\n\t    }\n\n\t    if (typeof hints.endChanged === 'undefined') {\n\t      hints.endChanged = !!hints.connectionEnd;\n\t    }\n\n\t    return getLabelAdjustment(label, newWaypoints, oldWaypoints, hints);\n\t  }\n\n\t  this.postExecute([\n\t    'connection.layout',\n\t    'connection.updateWaypoints'\n\t  ], function(event) {\n\t    var context = event.context,\n\t        hints = context.hints || {};\n\n\t    if (hints.labelBehavior === false) {\n\t      return;\n\t    }\n\n\t    var connection = context.connection,\n\t        label = connection.label,\n\t        labelAdjustment;\n\n\t    // handle missing label as well as the case\n\t    // that the label parent does not exist (yet),\n\t    // because it is being pasted / created via multi element create\n\t    //\n\t    // Cf. https://github.com/bpmn-io/bpmn-js/pull/1227\n\t    if (!label || !label.parent) {\n\t      return;\n\t    }\n\n\t    labelAdjustment = getVisibleLabelAdjustment(event);\n\n\t    modeling.moveShape(label, labelAdjustment);\n\t  });\n\n\n\t  // keep label position on shape replace\n\t  this.postExecute([ 'shape.replace' ], function(event) {\n\t    var context = event.context,\n\t        newShape = context.newShape,\n\t        oldShape = context.oldShape;\n\n\t    var businessObject = getBusinessObject(newShape);\n\n\t    if (businessObject\n\t      && isLabelExternal(businessObject)\n\t      && oldShape.label\n\t      && newShape.label) {\n\t      newShape.label.x = oldShape.label.x;\n\t      newShape.label.y = oldShape.label.y;\n\t    }\n\t  });\n\n\n\t  // move external label after resizing\n\t  this.postExecute('shape.resize', function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        newBounds = context.newBounds,\n\t        oldBounds = context.oldBounds;\n\n\t    if (hasExternalLabel(shape)) {\n\n\t      var label = shape.label,\n\t          labelMid = getMid(label),\n\t          edges = asEdges(oldBounds);\n\n\t      // get nearest border point to label as reference point\n\t      var referencePoint = getReferencePoint$1(labelMid, edges);\n\n\t      var delta = getReferencePointDelta(referencePoint, oldBounds, newBounds);\n\n\t      modeling.moveShape(label, delta);\n\n\t    }\n\n\t  });\n\n\t}\n\n\tinherits_browser(LabelBehavior, CommandInterceptor);\n\n\tLabelBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling',\n\t  'bpmnFactory',\n\t  'textRenderer'\n\t];\n\n\t// helpers //////////////////////\n\n\t/**\n\t * Calculates a reference point delta relative to a new position\n\t * of a certain element's bounds\n\t *\n\t * @param {Point} point\n\t * @param {Bounds} oldBounds\n\t * @param {Bounds} newBounds\n\t *\n\t * @return {Delta} delta\n\t */\n\tfunction getReferencePointDelta(referencePoint, oldBounds, newBounds) {\n\n\t  var newReferencePoint = getNewAttachPoint(referencePoint, oldBounds, newBounds);\n\n\t  return roundPoint(delta(newReferencePoint, referencePoint));\n\t}\n\n\t/**\n\t * Generates the nearest point (reference point) for a given point\n\t * onto given set of lines\n\t *\n\t * @param {Array<Point, Point>} lines\n\t * @param {Point} point\n\t *\n\t * @param {Point}\n\t */\n\tfunction getReferencePoint$1(point, lines) {\n\n\t  if (!lines.length) {\n\t    return;\n\t  }\n\n\t  var nearestLine = getNearestLine(point, lines);\n\n\t  return perpendicularFoot(point, nearestLine);\n\t}\n\n\t/**\n\t * Convert the given bounds to a lines array containing all edges\n\t *\n\t * @param {Bounds|Point} bounds\n\t *\n\t * @return Array<Point>\n\t */\n\tfunction asEdges(bounds) {\n\t  return [\n\t    [ // top\n\t      {\n\t        x: bounds.x,\n\t        y: bounds.y\n\t      },\n\t      {\n\t        x: bounds.x + (bounds.width || 0),\n\t        y: bounds.y\n\t      }\n\t    ],\n\t    [ // right\n\t      {\n\t        x: bounds.x + (bounds.width || 0),\n\t        y: bounds.y\n\t      },\n\t      {\n\t        x: bounds.x + (bounds.width || 0),\n\t        y: bounds.y + (bounds.height || 0)\n\t      }\n\t    ],\n\t    [ // bottom\n\t      {\n\t        x: bounds.x,\n\t        y: bounds.y + (bounds.height || 0)\n\t      },\n\t      {\n\t        x: bounds.x + (bounds.width || 0),\n\t        y: bounds.y + (bounds.height || 0)\n\t      }\n\t    ],\n\t    [ // left\n\t      {\n\t        x: bounds.x,\n\t        y: bounds.y\n\t      },\n\t      {\n\t        x: bounds.x,\n\t        y: bounds.y + (bounds.height || 0)\n\t      }\n\t    ]\n\t  ];\n\t}\n\n\t/**\n\t * Returns the nearest line for a given point by distance\n\t * @param {Point} point\n\t * @param Array<Point> lines\n\t *\n\t * @return Array<Point>\n\t */\n\tfunction getNearestLine(point, lines) {\n\n\t  var distances = lines.map(function(l) {\n\t    return {\n\t      line: l,\n\t      distance: getDistancePointLine(point, l)\n\t    };\n\t  });\n\n\t  var sorted = sortBy(distances, 'distance');\n\n\t  return sorted[0].line;\n\t}\n\n\tvar COLLAB_ERR_MSG = 'flow elements must be children of pools/participants',\n\t    PROCESS_ERR_MSG = 'participants cannot be pasted onto a non-empty process diagram';\n\n\n\tfunction ModelingFeedback(eventBus, tooltips, translate) {\n\n\t  function showError(position, message, timeout) {\n\t    tooltips.add({\n\t      position: {\n\t        x: position.x + 5,\n\t        y: position.y + 5\n\t      },\n\t      type: 'error',\n\t      timeout: timeout || 2000,\n\t      html: '<div>' + message + '</div>'\n\t    });\n\t  }\n\n\t  eventBus.on([ 'shape.move.rejected', 'create.rejected' ], function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        target = context.target;\n\n\t    if (is$1(target, 'bpmn:Collaboration') && is$1(shape, 'bpmn:FlowNode')) {\n\t      showError(event, translate(COLLAB_ERR_MSG));\n\t    }\n\t  });\n\n\t  eventBus.on([ 'elements.paste.rejected' ], function(event) {\n\t    var context = event.context,\n\t        position = context.position,\n\t        target = context.target;\n\n\t    if (is$1(target, 'bpmn:Collaboration')) {\n\t      showError(position, translate(COLLAB_ERR_MSG));\n\t    }\n\n\t    if (is$1(target, 'bpmn:Process')) {\n\t      showError(position, translate(PROCESS_ERR_MSG), 3000);\n\t    }\n\t  });\n\t}\n\n\tModelingFeedback.$inject = [\n\t  'eventBus',\n\t  'tooltips',\n\t  'translate'\n\t];\n\n\tfunction ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  var dragging = injector.get('dragging', false);\n\n\t  function fixConnection(connection) {\n\n\t    var source = connection.source,\n\t        target = connection.target,\n\t        parent = connection.parent;\n\n\t    // do not do anything if connection\n\t    // is already deleted (may happen due to other\n\t    // behaviors plugged-in before)\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    var replacementType,\n\t        remove;\n\n\t    /**\n\t     * Check if incoming or outgoing connections\n\t     * can stay or could be substituted with an\n\t     * appropriate replacement.\n\t     *\n\t     * This holds true for SequenceFlow <> MessageFlow.\n\t     */\n\n\t    if (is$1(connection, 'bpmn:SequenceFlow')) {\n\t      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n\t        remove = true;\n\t      }\n\n\t      if (bpmnRules.canConnectMessageFlow(source, target)) {\n\t        replacementType = 'bpmn:MessageFlow';\n\t      }\n\t    }\n\n\t    // transform message flows into sequence flows, if possible\n\n\t    if (is$1(connection, 'bpmn:MessageFlow')) {\n\n\t      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n\t        remove = true;\n\t      }\n\n\t      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n\t        replacementType = 'bpmn:SequenceFlow';\n\t      }\n\t    }\n\n\t    if (is$1(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n\t      remove = true;\n\t    }\n\n\n\t    // remove invalid connection,\n\t    // unless it has been removed already\n\t    if (remove) {\n\t      modeling.removeConnection(connection);\n\t    }\n\n\t    // replace SequenceFlow <> MessageFlow\n\n\t    if (replacementType) {\n\t      modeling.connect(source, target, {\n\t        type: replacementType,\n\t        waypoints: connection.waypoints.slice()\n\t      });\n\t    }\n\t  }\n\n\t  function replaceReconnectedConnection(event) {\n\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        source = context.newSource || connection.source,\n\t        target = context.newTarget || connection.target,\n\t        allowed,\n\t        replacement;\n\n\t    allowed = bpmnRules.canConnect(source, target);\n\n\t    if (!allowed || allowed.type === connection.type) {\n\t      return;\n\t    }\n\n\t    replacement = modeling.connect(source, target, {\n\t      type: allowed.type,\n\t      waypoints: connection.waypoints.slice()\n\t    });\n\n\t    // remove old connection\n\t    modeling.removeConnection(connection);\n\n\t    // replace connection in context to reconnect end/start\n\t    context.connection = replacement;\n\n\t    if (dragging) {\n\t      cleanDraggingSelection(connection, replacement);\n\t    }\n\t  }\n\n\t  // monkey-patch selection saved in dragging in order to re-select it when operation is finished\n\t  function cleanDraggingSelection(oldConnection, newConnection) {\n\t    var context = dragging.context(),\n\t        previousSelection = context && context.payload.previousSelection,\n\t        index;\n\n\t    // do nothing if not dragging or no selection was present\n\t    if (!previousSelection || !previousSelection.length) {\n\t      return;\n\t    }\n\n\t    index = previousSelection.indexOf(oldConnection);\n\n\t    if (index === -1) {\n\t      return;\n\t    }\n\n\t    previousSelection.splice(index, 1, newConnection);\n\t  }\n\n\t  // lifecycle hooks\n\n\t  this.postExecuted('elements.move', function(context) {\n\n\t    var closure = context.closure,\n\t        allConnections = closure.allConnections;\n\n\t    forEach(allConnections, fixConnection);\n\t  }, true);\n\n\t  this.preExecute('connection.reconnect', replaceReconnectedConnection);\n\n\t  this.postExecuted('element.updateProperties', function(event) {\n\t    var context = event.context,\n\t        properties = context.properties,\n\t        element = context.element,\n\t        businessObject = element.businessObject,\n\t        connection;\n\n\t    // remove condition on change to default\n\t    if (properties.default) {\n\t      connection = find(\n\t        element.outgoing,\n\t        matchPattern({ id: element.businessObject.default.id })\n\t      );\n\n\t      if (connection) {\n\t        modeling.updateProperties(connection, { conditionExpression: undefined });\n\t      }\n\t    }\n\n\t    // remove default from source on change to conditional\n\t    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n\t      modeling.updateProperties(element.source, { default: undefined });\n\t    }\n\t  });\n\t}\n\n\tinherits_browser(ReplaceConnectionBehavior, CommandInterceptor);\n\n\tReplaceConnectionBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling',\n\t  'bpmnRules',\n\t  'injector'\n\t];\n\n\t/**\n\t * BPMN specific remove behavior\n\t */\n\tfunction RemoveParticipantBehavior(eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  /**\n\t   * morph collaboration diagram into process diagram\n\t   * after the last participant has been removed\n\t   */\n\n\t  this.preExecute('shape.delete', function(context) {\n\n\t    var shape = context.shape,\n\t        parent = shape.parent;\n\n\t    // activate the behavior if the shape to be removed\n\t    // is a participant\n\t    if (is$1(shape, 'bpmn:Participant')) {\n\t      context.collaborationRoot = parent;\n\t    }\n\t  }, true);\n\n\t  this.postExecute('shape.delete', function(context) {\n\n\t    var collaborationRoot = context.collaborationRoot;\n\n\t    if (collaborationRoot && !collaborationRoot.businessObject.participants.length) {\n\n\t      // replace empty collaboration with process diagram\n\t      modeling.makeProcess();\n\t    }\n\t  }, true);\n\n\t}\n\n\tRemoveParticipantBehavior.$inject = [ 'eventBus', 'modeling' ];\n\n\tinherits_browser(RemoveParticipantBehavior, CommandInterceptor);\n\n\t/**\n\t * BPMN-specific replace behavior.\n\t */\n\tfunction ReplaceElementBehaviour(\n\t    bpmnReplace,\n\t    bpmnRules,\n\t    elementRegistry,\n\t    injector,\n\t    modeling,\n\t    selection\n\t) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this._bpmnReplace = bpmnReplace;\n\t  this._elementRegistry = elementRegistry;\n\t  this._selection = selection;\n\n\t  // replace elements on move\n\t  this.postExecuted([ 'elements.move' ], 500, function(event) {\n\t    var context = event.context,\n\t        target = context.newParent,\n\t        newHost = context.newHost,\n\t        elements = [];\n\n\t    forEach(context.closure.topLevel, function(topLevelElements) {\n\t      if (isEventSubProcess(topLevelElements)) {\n\t        elements = elements.concat(topLevelElements.children);\n\t      } else {\n\t        elements = elements.concat(topLevelElements);\n\t      }\n\t    });\n\n\t    // set target to host if attaching\n\t    if (elements.length === 1 && newHost) {\n\t      target = newHost;\n\t    }\n\n\t    var canReplace = bpmnRules.canReplace(elements, target);\n\n\t    if (canReplace) {\n\t      this.replaceElements(elements, canReplace.replacements, newHost);\n\t    }\n\t  }, this);\n\n\t  // update attachments on host replace\n\t  this.postExecute([ 'shape.replace' ], 1500, function(e) {\n\t    var context = e.context,\n\t        oldShape = context.oldShape,\n\t        newShape = context.newShape,\n\t        attachers = oldShape.attachers,\n\t        canReplace;\n\n\t    if (attachers && attachers.length) {\n\t      canReplace = bpmnRules.canReplace(attachers, newShape);\n\n\t      this.replaceElements(attachers, canReplace.replacements);\n\t    }\n\n\t  }, this);\n\n\t  // keep ID on shape replace\n\t  this.postExecuted([ 'shape.replace' ], 1500, function(e) {\n\t    var context = e.context,\n\t        oldShape = context.oldShape,\n\t        newShape = context.newShape;\n\n\t    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n\t    modeling.updateProperties(newShape, { id: oldShape.id });\n\t  });\n\t}\n\n\tinherits_browser(ReplaceElementBehaviour, CommandInterceptor);\n\n\tReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {\n\t  var elementRegistry = this._elementRegistry,\n\t      bpmnReplace = this._bpmnReplace,\n\t      selection = this._selection;\n\n\t  forEach(newElements, function(replacement) {\n\t    var newElement = {\n\t      type: replacement.newElementType\n\t    };\n\n\t    var oldElement = elementRegistry.get(replacement.oldElementId);\n\n\t    var idx = elements.indexOf(oldElement);\n\n\t    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });\n\t  });\n\n\t  if (newElements) {\n\t    selection.select(elements);\n\t  }\n\t};\n\n\tReplaceElementBehaviour.$inject = [\n\t  'bpmnReplace',\n\t  'bpmnRules',\n\t  'elementRegistry',\n\t  'injector',\n\t  'modeling',\n\t  'selection'\n\t];\n\n\tvar abs$5 = Math.abs,\r\n\t    min$3 = Math.min,\r\n\t    max$4 = Math.max;\r\n\r\n\r\n\tfunction addToTrbl(trbl, attr, value, choice) {\r\n\t  var current = trbl[attr];\r\n\r\n\t  // make sure to set the value if it does not exist\r\n\t  // or apply the correct value by comparing against\r\n\t  // choice(value, currentValue)\r\n\t  trbl[attr] = current === undefined ? value : choice(value, current);\r\n\t}\r\n\r\n\tfunction addMin(trbl, attr, value) {\r\n\t  return addToTrbl(trbl, attr, value, min$3);\r\n\t}\r\n\r\n\tfunction addMax(trbl, attr, value) {\r\n\t  return addToTrbl(trbl, attr, value, max$4);\r\n\t}\r\n\r\n\tvar LANE_RIGHT_PADDING = 20,\r\n\t    LANE_LEFT_PADDING = 50,\r\n\t    LANE_TOP_PADDING = 20,\r\n\t    LANE_BOTTOM_PADDING = 20;\r\n\r\n\r\n\tfunction getParticipantResizeConstraints(laneShape, resizeDirection, balanced) {\r\n\t  var lanesRoot = getLanesRoot(laneShape);\r\n\r\n\t  var isFirst = true,\r\n\t      isLast = true;\r\n\r\n\t  // max top/bottom size for lanes\r\n\t  var allLanes = collectLanes(lanesRoot, [ lanesRoot ]);\r\n\r\n\t  var laneTrbl = asTRBL(laneShape);\r\n\r\n\t  var maxTrbl = {},\r\n\t      minTrbl = {};\r\n\r\n\t  if (/e/.test(resizeDirection)) {\r\n\t    minTrbl.right = laneTrbl.left + LANE_MIN_DIMENSIONS.width;\r\n\t  } else\r\n\t  if (/w/.test(resizeDirection)) {\r\n\t    minTrbl.left = laneTrbl.right - LANE_MIN_DIMENSIONS.width;\r\n\t  }\r\n\r\n\t  allLanes.forEach(function(other) {\r\n\r\n\t    var otherTrbl = asTRBL(other);\r\n\r\n\t    if (/n/.test(resizeDirection)) {\r\n\r\n\t      if (otherTrbl.top < (laneTrbl.top - 10)) {\r\n\t        isFirst = false;\r\n\t      }\r\n\r\n\t      // max top size (based on next element)\r\n\t      if (balanced && abs$5(laneTrbl.top - otherTrbl.bottom) < 10) {\r\n\t        addMax(maxTrbl, 'top', otherTrbl.top + LANE_MIN_DIMENSIONS.height);\r\n\t      }\r\n\r\n\t      // min top size (based on self or nested element)\r\n\t      if (abs$5(laneTrbl.top - otherTrbl.top) < 5) {\r\n\t        addMin(minTrbl, 'top', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);\r\n\t      }\r\n\t    }\r\n\r\n\t    if (/s/.test(resizeDirection)) {\r\n\r\n\t      if (otherTrbl.bottom > (laneTrbl.bottom + 10)) {\r\n\t        isLast = false;\r\n\t      }\r\n\r\n\t      // max bottom size (based on previous element)\r\n\t      if (balanced && abs$5(laneTrbl.bottom - otherTrbl.top) < 10) {\r\n\t        addMin(maxTrbl, 'bottom', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);\r\n\t      }\r\n\r\n\t      // min bottom size (based on self or nested element)\r\n\t      if (abs$5(laneTrbl.bottom - otherTrbl.bottom) < 5) {\r\n\t        addMax(minTrbl, 'bottom', otherTrbl.top + LANE_MIN_DIMENSIONS.height);\r\n\t      }\r\n\t    }\r\n\t  });\r\n\r\n\t  // max top/bottom/left/right size based on flow nodes\r\n\t  var flowElements = lanesRoot.children.filter(function(s) {\r\n\t    return !s.hidden && !s.waypoints && (is$1(s, 'bpmn:FlowElement') || is$1(s, 'bpmn:Artifact'));\r\n\t  });\r\n\r\n\t  flowElements.forEach(function(flowElement) {\r\n\r\n\t    var flowElementTrbl = asTRBL(flowElement);\r\n\r\n\t    if (isFirst && /n/.test(resizeDirection)) {\r\n\t      addMin(minTrbl, 'top', flowElementTrbl.top - LANE_TOP_PADDING);\r\n\t    }\r\n\r\n\t    if (/e/.test(resizeDirection)) {\r\n\t      addMax(minTrbl, 'right', flowElementTrbl.right + LANE_RIGHT_PADDING);\r\n\t    }\r\n\r\n\t    if (isLast && /s/.test(resizeDirection)) {\r\n\t      addMax(minTrbl, 'bottom', flowElementTrbl.bottom + LANE_BOTTOM_PADDING);\r\n\t    }\r\n\r\n\t    if (/w/.test(resizeDirection)) {\r\n\t      addMin(minTrbl, 'left', flowElementTrbl.left - LANE_LEFT_PADDING);\r\n\t    }\r\n\t  });\r\n\r\n\t  return {\r\n\t    min: minTrbl,\r\n\t    max: maxTrbl\r\n\t  };\r\n\t}\n\n\tvar HIGH_PRIORITY$a = 1500;\r\n\r\n\tvar LANE_MIN_DIMENSIONS = { width: 300, height: 60 };\r\n\r\n\tvar PARTICIPANT_MIN_DIMENSIONS = { width: 300, height: 150 };\r\n\r\n\tvar SUB_PROCESS_MIN_DIMENSIONS = { width: 140, height: 120 };\r\n\r\n\tvar TEXT_ANNOTATION_MIN_DIMENSIONS = { width: 50, height: 30 };\r\n\r\n\r\n\t/**\r\n\t * Set minimum bounds/resize constraints on resize.\r\n\t *\r\n\t * @param {EventBus} eventBus\r\n\t */\r\n\tfunction ResizeBehavior$1(eventBus) {\r\n\t  eventBus.on('resize.start', HIGH_PRIORITY$a, function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        direction = context.direction,\r\n\t        balanced = context.balanced;\r\n\r\n\t    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {\r\n\t      context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);\r\n\t    }\r\n\r\n\t    if (is$1(shape, 'bpmn:Participant')) {\r\n\t      context.minDimensions = PARTICIPANT_MIN_DIMENSIONS;\r\n\t    }\r\n\r\n\t    if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {\r\n\t      context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;\r\n\t    }\r\n\r\n\t    if (is$1(shape, 'bpmn:TextAnnotation')) {\r\n\t      context.minDimensions = TEXT_ANNOTATION_MIN_DIMENSIONS;\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tResizeBehavior$1.$inject = [ 'eventBus' ];\n\n\tvar SLIGHTLY_HIGHER_PRIORITY = 1001;\n\n\n\t/**\n\t * Invoke {@link Modeling#resizeLane} instead of\n\t * {@link Modeling#resizeShape} when resizing a Lane\n\t * or Participant shape.\n\t */\n\tfunction ResizeLaneBehavior(eventBus, modeling) {\n\n\t  eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function(event) {\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {\n\n\t      // should we resize the opposite lane(s) in\n\t      // order to compensate for the resize operation?\n\t      context.balanced = !hasPrimaryModifier(event);\n\t    }\n\t  });\n\n\t  /**\n\t   * Intercept resize end and call resize lane function instead.\n\t   */\n\t  eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        canExecute = context.canExecute,\n\t        newBounds = context.newBounds;\n\n\t    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {\n\n\t      if (canExecute) {\n\n\t        // ensure we have actual pixel values for new bounds\n\t        // (important when zoom level was > 1 during move)\n\t        newBounds = roundBounds(newBounds);\n\n\t        // perform the actual resize\n\t        modeling.resizeLane(shape, newBounds, context.balanced);\n\t      }\n\n\t      // stop propagation\n\t      return false;\n\t    }\n\t  });\n\t}\n\n\tResizeLaneBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\tfunction RemoveElementBehavior(eventBus, bpmnRules, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  /**\n\t   * Combine sequence flows when deleting an element\n\t   * if there is one incoming and one outgoing\n\t   * sequence flow\n\t   */\n\t  this.preExecute('shape.delete', function(e) {\n\n\t    var shape = e.context.shape;\n\n\t    // only handle [a] -> [shape] -> [b] patterns\n\t    if (shape.incoming.length !== 1 || shape.outgoing.length !== 1) {\n\t      return;\n\t    }\n\n\t    var inConnection = shape.incoming[0],\n\t        outConnection = shape.outgoing[0];\n\n\t    // only handle sequence flows\n\t    if (!is$1(inConnection, 'bpmn:SequenceFlow') || !is$1(outConnection, 'bpmn:SequenceFlow')) {\n\t      return;\n\t    }\n\n\t    if (bpmnRules.canConnect(inConnection.source, outConnection.target, inConnection)) {\n\n\t      // compute new, combined waypoints\n\t      var newWaypoints = getNewWaypoints(inConnection.waypoints, outConnection.waypoints);\n\n\t      modeling.reconnectEnd(inConnection, outConnection.target, newWaypoints);\n\t    }\n\t  });\n\n\t}\n\n\tinherits_browser(RemoveElementBehavior, CommandInterceptor);\n\n\tRemoveElementBehavior.$inject = [\n\t  'eventBus',\n\t  'bpmnRules',\n\t  'modeling'\n\t];\n\n\n\t// helpers //////////////////////\n\n\tfunction getDocking$1(point) {\n\t  return point.original || point;\n\t}\n\n\n\tfunction getNewWaypoints(inWaypoints, outWaypoints) {\n\n\t  var intersection = lineIntersect(\n\t    getDocking$1(inWaypoints[inWaypoints.length - 2]),\n\t    getDocking$1(inWaypoints[inWaypoints.length - 1]),\n\t    getDocking$1(outWaypoints[1]),\n\t    getDocking$1(outWaypoints[0]));\n\n\t  if (intersection) {\n\t    return [].concat(\n\t      inWaypoints.slice(0, inWaypoints.length - 1),\n\t      [ intersection ],\n\t      outWaypoints.slice(1));\n\t  } else {\n\t    return [\n\t      getDocking$1(inWaypoints[0]),\n\t      getDocking$1(outWaypoints[outWaypoints.length - 1])\n\t    ];\n\t  }\n\t}\n\n\tvar max$5 = Math.max;\r\n\r\n\r\n\tfunction SpaceToolBehavior$1(eventBus) {\r\n\t  eventBus.on('spaceTool.getMinDimensions', function(context) {\r\n\t    var shapes = context.shapes,\r\n\t        axis = context.axis,\r\n\t        start = context.start,\r\n\t        minDimensions = {};\r\n\r\n\t    forEach(shapes, function(shape) {\r\n\t      var id = shape.id;\r\n\r\n\t      if (is$1(shape, 'bpmn:Participant')) {\r\n\r\n\t        if (isHorizontal$2(axis)) {\r\n\t          minDimensions[ id ] = PARTICIPANT_MIN_DIMENSIONS;\r\n\t        } else {\r\n\t          minDimensions[ id ] = {\r\n\t            width: PARTICIPANT_MIN_DIMENSIONS.width,\r\n\t            height: getParticipantMinHeight(shape, start)\r\n\t          };\r\n\t        }\r\n\r\n\t      }\r\n\r\n\t      if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {\r\n\t        minDimensions[ id ] = SUB_PROCESS_MIN_DIMENSIONS;\r\n\t      }\r\n\r\n\t      if (is$1(shape, 'bpmn:TextAnnotation')) {\r\n\t        minDimensions[ id ] = TEXT_ANNOTATION_MIN_DIMENSIONS;\r\n\t      }\r\n\t    });\r\n\r\n\t    return minDimensions;\r\n\t  });\r\n\t}\r\n\r\n\tSpaceToolBehavior$1.$inject = [ 'eventBus' ];\r\n\r\n\r\n\t// helpers //////////\r\n\tfunction isHorizontal$2(axis) {\r\n\t  return axis === 'x';\r\n\t}\r\n\r\n\t/**\r\n\t * Get minimum height for participant taking lanes into account.\r\n\t *\r\n\t * @param {<djs.model.Shape>} participant\r\n\t * @param {number} start\r\n\t *\r\n\t * @returns {Object}\r\n\t */\r\n\tfunction getParticipantMinHeight(participant, start) {\r\n\t  var lanesMinHeight;\r\n\r\n\t  if (!hasChildLanes(participant)) {\r\n\t    return PARTICIPANT_MIN_DIMENSIONS.height;\r\n\t  }\r\n\r\n\t  lanesMinHeight = getLanesMinHeight(participant, start);\r\n\r\n\t  return max$5(PARTICIPANT_MIN_DIMENSIONS.height, lanesMinHeight);\r\n\t}\r\n\r\n\tfunction hasChildLanes(element) {\r\n\t  return !!getChildLanes(element).length;\r\n\t}\r\n\r\n\tfunction getLanesMinHeight(participant, resizeStart) {\r\n\t  var lanes = getChildLanes(participant),\r\n\t      resizedLane;\r\n\r\n\t  // find the nested lane which is currently resized\r\n\t  resizedLane = findResizedLane(lanes, resizeStart);\r\n\r\n\t  // resized lane cannot shrink below the minimum height\r\n\t  // but remaining lanes' dimensions are kept intact\r\n\t  return participant.height - resizedLane.height + LANE_MIN_DIMENSIONS.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Find nested lane which is currently resized.\r\n\t *\r\n\t * @param {Array<djs.model.Shape>} lanes\r\n\t * @param {number} resizeStart\r\n\t */\r\n\tfunction findResizedLane(lanes, resizeStart) {\r\n\t  var i, lane, childLanes;\r\n\r\n\t  for (i = 0; i < lanes.length; i++) {\r\n\t    lane = lanes[i];\r\n\r\n\t    // resizing current lane or a lane nested\r\n\t    if (resizeStart >= lane.y && resizeStart <= lane.y + lane.height) {\r\n\t      childLanes = getChildLanes(lane);\r\n\r\n\t      // a nested lane is resized\r\n\t      if (childLanes.length) {\r\n\t        return findResizedLane(childLanes, resizeStart);\r\n\t      }\r\n\r\n\t      // current lane is the resized one\r\n\t      return lane;\r\n\t    }\r\n\t  }\r\n\t}\n\n\t/**\n\t * Add start event replacing element with expanded sub process.\n\t *\n\t * @param {Injector} injector\n\t * @param {Modeling} modeling\n\t */\n\tfunction SubProcessStartEventBehavior(injector, modeling) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this.postExecuted('shape.replace', function(event) {\n\t    var oldShape = event.context.oldShape,\n\t        newShape = event.context.newShape;\n\n\t    if (\n\t      !is$1(newShape, 'bpmn:SubProcess') ||\n\t      !is$1(oldShape, 'bpmn:Task') ||\n\t      !isExpanded(newShape)\n\t    ) {\n\t      return;\n\t    }\n\n\t    var position = getStartEventPosition(newShape);\n\n\t    modeling.createShape({ type: 'bpmn:StartEvent' }, position, newShape);\n\t  });\n\t}\n\n\tSubProcessStartEventBehavior.$inject = [\n\t  'injector',\n\t  'modeling'\n\t];\n\n\tinherits_browser(SubProcessStartEventBehavior, CommandInterceptor);\n\n\t// helpers //////////\n\n\tfunction getStartEventPosition(shape) {\n\t  return {\n\t    x: shape.x + shape.width / 6,\n\t    y: shape.y + shape.height / 2\n\t  };\n\t}\n\n\tvar LOW_PRIORITY$e = 500;\n\n\n\tfunction ToggleElementCollapseBehaviour(\n\t    eventBus, elementFactory, modeling,\n\t    resize) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  function hideEmptyLabels(children) {\n\t    if (children.length) {\n\t      children.forEach(function(child) {\n\t        if (child.type === 'label' && !child.businessObject.name) {\n\t          child.hidden = true;\n\t        }\n\t      });\n\t    }\n\t  }\n\n\t  function expandedBounds(shape, defaultSize) {\n\t    var children = shape.children,\n\t        newBounds = defaultSize,\n\t        visibleElements,\n\t        visibleBBox;\n\n\t    visibleElements = filterVisible(children).concat([ shape ]);\n\n\t    visibleBBox = computeChildrenBBox(visibleElements);\n\n\t    if (visibleBBox) {\n\n\t      // center to visibleBBox with max(defaultSize, childrenBounds)\n\t      newBounds.width = Math.max(visibleBBox.width, newBounds.width);\n\t      newBounds.height = Math.max(visibleBBox.height, newBounds.height);\n\n\t      newBounds.x = visibleBBox.x + (visibleBBox.width - newBounds.width) / 2;\n\t      newBounds.y = visibleBBox.y + (visibleBBox.height - newBounds.height) / 2;\n\t    } else {\n\n\t      // center to collapsed shape with defaultSize\n\t      newBounds.x = shape.x + (shape.width - newBounds.width) / 2;\n\t      newBounds.y = shape.y + (shape.height - newBounds.height) / 2;\n\t    }\n\n\t    return newBounds;\n\t  }\n\n\t  function collapsedBounds(shape, defaultSize) {\n\n\t    return {\n\t      x: shape.x + (shape.width - defaultSize.width) / 2,\n\t      y: shape.y + (shape.height - defaultSize.height) / 2,\n\t      width: defaultSize.width,\n\t      height: defaultSize.height\n\t    };\n\t  }\n\n\t  this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {\n\n\t    var context = e.context,\n\t        shape = context.shape;\n\n\t    if (!is$1(shape, 'bpmn:SubProcess')) {\n\t      return;\n\t    }\n\n\t    if (!shape.collapsed) {\n\n\t      // all children got made visible through djs, hide empty labels\n\t      hideEmptyLabels(shape.children);\n\n\t      // remove collapsed marker\n\t      getBusinessObject(shape).di.isExpanded = true;\n\t    } else {\n\n\t      // place collapsed marker\n\t      getBusinessObject(shape).di.isExpanded = false;\n\t    }\n\t  });\n\n\t  this.reverted([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {\n\n\t    var context = e.context;\n\t    var shape = context.shape;\n\n\n\t    // revert removing/placing collapsed marker\n\t    if (!shape.collapsed) {\n\t      getBusinessObject(shape).di.isExpanded = true;\n\n\t    } else {\n\t      getBusinessObject(shape).di.isExpanded = false;\n\t    }\n\t  });\n\n\t  this.postExecuted([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {\n\t    var shape = e.context.shape,\n\t        defaultSize = elementFactory._getDefaultSize(shape),\n\t        newBounds;\n\n\t    if (shape.collapsed) {\n\n\t      // resize to default size of collapsed shapes\n\t      newBounds = collapsedBounds(shape, defaultSize);\n\t    } else {\n\n\t      // resize to bounds of max(visible children, defaultSize)\n\t      newBounds = expandedBounds(shape, defaultSize);\n\t    }\n\n\t    modeling.resizeShape(shape, newBounds, null, {\n\t      autoResize: shape.collapsed ? false : 'nwse'\n\t    });\n\t  });\n\n\t}\n\n\n\tinherits_browser(ToggleElementCollapseBehaviour, CommandInterceptor);\n\n\tToggleElementCollapseBehaviour.$inject = [\n\t  'eventBus',\n\t  'elementFactory',\n\t  'modeling'\n\t];\n\n\n\t// helpers //////////////////////\n\n\tfunction filterVisible(elements) {\n\t  return elements.filter(function(e) {\n\t    return !e.hidden;\n\t  });\n\t}\n\n\t/**\n\t * Unclaims model IDs on element deletion.\n\t *\n\t * @param {Canvas} canvas\n\t * @param {Injector} injector\n\t * @param {Moddle} moddle\n\t * @param {Modeling} modeling\n\t */\n\tfunction UnclaimIdBehavior(canvas, injector, moddle, modeling) {\n\t  injector.invoke(CommandInterceptor, this);\n\n\t  this.preExecute('shape.delete', function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        shapeBo = shape.businessObject;\n\n\t    if (isLabel(shape)) {\n\t      return;\n\t    }\n\n\t    if (is$1(shape, 'bpmn:Participant') && isExpanded(shape)) {\n\t      moddle.ids.unclaim(shapeBo.processRef.id);\n\t    }\n\n\t    modeling.unclaimId(shapeBo.id, shapeBo);\n\t  });\n\n\n\t  this.preExecute('connection.delete', function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        connectionBo = connection.businessObject;\n\n\t    modeling.unclaimId(connectionBo.id, connectionBo);\n\t  });\n\n\t  this.preExecute('canvas.updateRoot', function() {\n\t    var rootElement = canvas.getRootElement(),\n\t        rootElementBo = rootElement.businessObject;\n\n\t    moddle.ids.unclaim(rootElementBo.id);\n\t  });\n\t}\n\n\tinherits_browser(UnclaimIdBehavior, CommandInterceptor);\n\n\tUnclaimIdBehavior.$inject = [ 'canvas', 'injector', 'moddle', 'modeling' ];\n\n\tvar LOW_PRIORITY$f = 500,\n\t    HIGH_PRIORITY$b = 5000;\n\n\n\t/**\n\t * BPMN specific delete lane behavior\n\t */\n\tfunction UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  /**\n\t   * Ok, this is it:\n\t   *\n\t   * We have to update the Lane#flowNodeRefs _and_\n\t   * FlowNode#lanes with every FlowNode move/resize and\n\t   * Lane move/resize.\n\t   *\n\t   * We want to group that stuff to recompute containments\n\t   * as efficient as possible.\n\t   *\n\t   * Yea!\n\t   */\n\n\t  // the update context\n\t  var context;\n\n\n\t  function initContext() {\n\t    context = context || new UpdateContext();\n\t    context.enter();\n\n\t    return context;\n\t  }\n\n\t  function getContext() {\n\t    if (!context) {\n\t      throw new Error(translate('out of bounds release'));\n\t    }\n\n\t    return context;\n\t  }\n\n\t  function releaseContext() {\n\n\t    if (!context) {\n\t      throw new Error(translate('out of bounds release'));\n\t    }\n\n\t    var triggerUpdate = context.leave();\n\n\t    if (triggerUpdate) {\n\t      modeling.updateLaneRefs(context.flowNodes, context.lanes);\n\n\t      context = null;\n\t    }\n\n\t    return triggerUpdate;\n\t  }\n\n\n\t  var laneRefUpdateEvents = [\n\t    'spaceTool',\n\t    'lane.add',\n\t    'lane.resize',\n\t    'lane.split',\n\t    'elements.create',\n\t    'elements.delete',\n\t    'elements.move',\n\t    'shape.create',\n\t    'shape.delete',\n\t    'shape.move',\n\t    'shape.resize'\n\t  ];\n\n\n\t  // listen to a lot of stuff to group lane updates\n\n\t  this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY$b, function(event) {\n\t    initContext();\n\t  });\n\n\t  this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY$f, function(event) {\n\t    releaseContext();\n\t  });\n\n\n\t  // Mark flow nodes + lanes that need an update\n\n\t  this.preExecute([\n\t    'shape.create',\n\t    'shape.move',\n\t    'shape.delete',\n\t    'shape.resize'\n\t  ], function(event) {\n\n\t    var context = event.context,\n\t        shape = context.shape;\n\n\t    var updateContext = getContext();\n\n\t    // no need to update labels\n\t    if (shape.labelTarget) {\n\t      return;\n\t    }\n\n\t    if (is$1(shape, 'bpmn:Lane')) {\n\t      updateContext.addLane(shape);\n\t    }\n\n\t    if (is$1(shape, 'bpmn:FlowNode')) {\n\t      updateContext.addFlowNode(shape);\n\t    }\n\t  });\n\t}\n\n\tUpdateFlowNodeRefsBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling' ,\n\t  'translate'\n\t];\n\n\tinherits_browser(UpdateFlowNodeRefsBehavior, CommandInterceptor);\n\n\n\tfunction UpdateContext() {\n\n\t  this.flowNodes = [];\n\t  this.lanes = [];\n\n\t  this.counter = 0;\n\n\t  this.addLane = function(lane) {\n\t    this.lanes.push(lane);\n\t  };\n\n\t  this.addFlowNode = function(flowNode) {\n\t    this.flowNodes.push(flowNode);\n\t  };\n\n\t  this.enter = function() {\n\t    this.counter++;\n\t  };\n\n\t  this.leave = function() {\n\t    this.counter--;\n\n\t    return !this.counter;\n\t  };\n\t}\n\n\t/**\n\t * A behavior that unsets the Default property of\n\t * sequence flow source on element delete, if the\n\t * removed element is the Gateway or Task's default flow.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t */\n\tfunction DeleteSequenceFlowBehavior(eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  this.preExecute('connection.delete', function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        source = connection.source;\n\n\t    if (isDefaultFlow(connection, source)) {\n\t      modeling.updateProperties(source, {\n\t        'default': null\n\t      });\n\t    }\n\t  });\n\t}\n\n\tinherits_browser(DeleteSequenceFlowBehavior, CommandInterceptor);\n\n\tDeleteSequenceFlowBehavior.$inject = [\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\n\t// helpers //////////////////////\n\n\tfunction isDefaultFlow(connection, source) {\n\n\t  if (!is$1(connection, 'bpmn:SequenceFlow')) {\n\t    return false;\n\t  }\n\n\t  var sourceBo = getBusinessObject(source),\n\t      sequenceFlow = getBusinessObject(connection);\n\n\t  return sourceBo.get('default') === sequenceFlow;\n\t}\n\n\tvar BehaviorModule = {\n\t  __init__: [\n\t    'adaptiveLabelPositioningBehavior',\n\t    'appendBehavior',\n\t    'associationBehavior',\n\t    'attachEventBehavior',\n\t    'boundaryEventBehavior',\n\t    'rootElementReferenceBehavior',\n\t    'createBehavior',\n\t    'fixHoverBehavior',\n\t    'createDataObjectBehavior',\n\t    'createParticipantBehavior',\n\t    'dataStoreBehavior',\n\t    'dataInputAssociationBehavior',\n\t    'deleteLaneBehavior',\n\t    'detachEventBehavior',\n\t    'dropOnFlowBehavior',\n\t    'eventBasedGatewayBehavior',\n\t    'groupBehavior',\n\t    'importDockingFix',\n\t    'isHorizontalFix',\n\t    'labelBehavior',\n\t    'modelingFeedback',\n\t    'removeElementBehavior',\n\t    'removeParticipantBehavior',\n\t    'replaceConnectionBehavior',\n\t    'replaceElementBehaviour',\n\t    'resizeBehavior',\n\t    'resizeLaneBehavior',\n\t    'toggleElementCollapseBehaviour',\n\t    'spaceToolBehavior',\n\t    'subProcessStartEventBehavior',\n\t    'unclaimIdBehavior',\n\t    'unsetDefaultFlowBehavior',\n\t    'updateFlowNodeRefsBehavior'\n\t  ],\n\t  adaptiveLabelPositioningBehavior: [ 'type', AdaptiveLabelPositioningBehavior ],\n\t  appendBehavior: [ 'type', AppendBehavior ],\n\t  associationBehavior: [ 'type', AssociationBehavior ],\n\t  attachEventBehavior: [ 'type', AttachEventBehavior ],\n\t  boundaryEventBehavior: [ 'type', BoundaryEventBehavior ],\n\t  rootElementReferenceBehavior: [ 'type', RootElementReferenceBehavior ],\n\t  createBehavior: [ 'type', CreateBehavior ],\n\t  fixHoverBehavior: [ 'type', FixHoverBehavior ],\n\t  createDataObjectBehavior: [ 'type', CreateDataObjectBehavior ],\n\t  createParticipantBehavior: [ 'type', CreateParticipantBehavior$1 ],\n\t  dataInputAssociationBehavior: [ 'type', DataInputAssociationBehavior ],\n\t  dataStoreBehavior: [ 'type', DataStoreBehavior ],\n\t  deleteLaneBehavior: [ 'type', DeleteLaneBehavior ],\n\t  detachEventBehavior: [ 'type', DetachEventBehavior ],\n\t  dropOnFlowBehavior: [ 'type', DropOnFlowBehavior ],\n\t  eventBasedGatewayBehavior: [ 'type', EventBasedGatewayBehavior ],\n\t  groupBehavior: [ 'type', GroupBehavior ],\n\t  importDockingFix: [ 'type', ImportDockingFix ],\n\t  isHorizontalFix: [ 'type', IsHorizontalFix ],\n\t  labelBehavior: [ 'type', LabelBehavior ],\n\t  modelingFeedback: [ 'type', ModelingFeedback ],\n\t  replaceConnectionBehavior: [ 'type', ReplaceConnectionBehavior ],\n\t  removeParticipantBehavior: [ 'type', RemoveParticipantBehavior ],\n\t  replaceElementBehaviour: [ 'type', ReplaceElementBehaviour ],\n\t  resizeBehavior: [ 'type', ResizeBehavior$1 ],\n\t  resizeLaneBehavior: [ 'type', ResizeLaneBehavior ],\n\t  removeElementBehavior: [ 'type', RemoveElementBehavior ],\n\t  toggleElementCollapseBehaviour : [ 'type', ToggleElementCollapseBehaviour ],\n\t  spaceToolBehavior: [ 'type', SpaceToolBehavior$1 ],\n\t  subProcessStartEventBehavior: [ 'type', SubProcessStartEventBehavior ],\n\t  unclaimIdBehavior: [ 'type', UnclaimIdBehavior ],\n\t  updateFlowNodeRefsBehavior: [ 'type', UpdateFlowNodeRefsBehavior ],\n\t  unsetDefaultFlowBehavior: [ 'type', DeleteSequenceFlowBehavior ]\n\t};\n\n\tfunction getBoundaryAttachment(position, targetBounds) {\r\n\r\n\t  var orientation = getOrientation(position, targetBounds, -15);\r\n\r\n\t  if (orientation !== 'intersect') {\r\n\t    return orientation;\r\n\t  } else {\r\n\t    return null;\r\n\t  }\r\n\t}\n\n\t/**\n\t * BPMN specific modeling rule\n\t */\n\tfunction BpmnRules(eventBus) {\n\t  RuleProvider.call(this, eventBus);\n\t}\n\n\tinherits_browser(BpmnRules, RuleProvider);\n\n\tBpmnRules.$inject = [ 'eventBus' ];\n\n\tBpmnRules.prototype.init = function() {\n\n\t  this.addRule('connection.start', function(context) {\n\t    var source = context.source;\n\n\t    return canStartConnection(source);\n\t  });\n\n\t  this.addRule('connection.create', function(context) {\n\t    var source = context.source,\n\t        target = context.target,\n\t        hints = context.hints || {},\n\t        targetParent = hints.targetParent,\n\t        targetAttach = hints.targetAttach;\n\n\t    // don't allow incoming connections on\n\t    // newly created boundary events\n\t    // to boundary events\n\t    if (targetAttach) {\n\t      return false;\n\t    }\n\n\t    // temporarily set target parent for scoping\n\t    // checks to work\n\t    if (targetParent) {\n\t      target.parent = targetParent;\n\t    }\n\n\t    try {\n\t      return canConnect(source, target);\n\t    } finally {\n\n\t      // unset temporary target parent\n\t      if (targetParent) {\n\t        target.parent = null;\n\t      }\n\t    }\n\t  });\n\n\t  this.addRule('connection.reconnect', function(context) {\n\n\t    var connection = context.connection,\n\t        source = context.source,\n\t        target = context.target;\n\n\t    return canConnect(source, target, connection);\n\t  });\n\n\t  this.addRule('connection.updateWaypoints', function(context) {\n\t    return {\n\t      type: context.connection.type\n\t    };\n\t  });\n\n\t  this.addRule('shape.resize', function(context) {\n\n\t    var shape = context.shape,\n\t        newBounds = context.newBounds;\n\n\t    return canResize(shape, newBounds);\n\t  });\n\n\t  this.addRule('elements.create', function(context) {\n\t    var elements = context.elements,\n\t        position = context.position,\n\t        target = context.target;\n\n\t    return every(elements, function(element) {\n\t      if (isConnection$3(element)) {\n\t        return canConnect(element.source, element.target, element);\n\t      }\n\n\t      if (element.host) {\n\t        return canAttach(element, element.host, null, position);\n\t      }\n\n\t      return canCreate(element, target, null);\n\t    });\n\t  });\n\n\t  this.addRule('elements.move', function(context) {\n\n\t    var target = context.target,\n\t        shapes = context.shapes,\n\t        position = context.position;\n\n\t    return canAttach(shapes, target, null, position) ||\n\t           canReplace(shapes, target, position) ||\n\t           canMove(shapes, target) ||\n\t           canInsert(shapes, target);\n\t  });\n\n\t  this.addRule('shape.create', function(context) {\n\t    return canCreate(\n\t      context.shape,\n\t      context.target,\n\t      context.source,\n\t      context.position\n\t    );\n\t  });\n\n\t  this.addRule('shape.attach', function(context) {\n\n\t    return canAttach(\n\t      context.shape,\n\t      context.target,\n\t      null,\n\t      context.position\n\t    );\n\t  });\n\n\t  this.addRule('element.copy', function(context) {\n\t    var element = context.element,\n\t        elements = context.elements;\n\n\t    return canCopy(elements, element);\n\t  });\n\t};\n\n\tBpmnRules.prototype.canConnectMessageFlow = canConnectMessageFlow;\n\n\tBpmnRules.prototype.canConnectSequenceFlow = canConnectSequenceFlow;\n\n\tBpmnRules.prototype.canConnectDataAssociation = canConnectDataAssociation;\n\n\tBpmnRules.prototype.canConnectAssociation = canConnectAssociation;\n\n\tBpmnRules.prototype.canMove = canMove;\n\n\tBpmnRules.prototype.canAttach = canAttach;\n\n\tBpmnRules.prototype.canReplace = canReplace;\n\n\tBpmnRules.prototype.canDrop = canDrop;\n\n\tBpmnRules.prototype.canInsert = canInsert;\n\n\tBpmnRules.prototype.canCreate = canCreate;\n\n\tBpmnRules.prototype.canConnect = canConnect;\n\n\tBpmnRules.prototype.canResize = canResize;\n\n\tBpmnRules.prototype.canCopy = canCopy;\n\n\t/**\n\t * Utility functions for rule checking\n\t */\n\n\t/**\n\t * Checks if given element can be used for starting connection.\n\t *\n\t * @param  {Element} source\n\t * @return {boolean}\n\t */\n\tfunction canStartConnection(element) {\n\t  if (nonExistingOrLabel(element)) {\n\t    return null;\n\t  }\n\n\t  return isAny(element, [\n\t    'bpmn:FlowNode',\n\t    'bpmn:InteractionNode',\n\t    'bpmn:DataObjectReference',\n\t    'bpmn:DataStoreReference',\n\t    'bpmn:Group'\n\t  ]);\n\t}\n\n\tfunction nonExistingOrLabel(element) {\n\t  return !element || isLabel(element);\n\t}\n\n\tfunction isSame(a, b) {\n\t  return a === b;\n\t}\n\n\tfunction getOrganizationalParent(element) {\n\n\t  do {\n\t    if (is$1(element, 'bpmn:Process')) {\n\t      return getBusinessObject(element);\n\t    }\n\n\t    if (is$1(element, 'bpmn:Participant')) {\n\t      return (\n\t        getBusinessObject(element).processRef ||\n\t        getBusinessObject(element)\n\t      );\n\t    }\n\t  } while ((element = element.parent));\n\n\t}\n\n\tfunction isTextAnnotation(element) {\n\t  return is$1(element, 'bpmn:TextAnnotation');\n\t}\n\n\tfunction isGroup(element) {\n\t  return is$1(element, 'bpmn:Group') && !element.labelTarget;\n\t}\n\n\tfunction isCompensationBoundary(element) {\n\t  return is$1(element, 'bpmn:BoundaryEvent') &&\n\t         hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');\n\t}\n\n\tfunction isForCompensation(e) {\n\t  return getBusinessObject(e).isForCompensation;\n\t}\n\n\tfunction isSameOrganization(a, b) {\n\t  var parentA = getOrganizationalParent(a),\n\t      parentB = getOrganizationalParent(b);\n\n\t  return parentA === parentB;\n\t}\n\n\tfunction isMessageFlowSource(element) {\n\t  return (\n\t    is$1(element, 'bpmn:InteractionNode') &&\n\t    !is$1(element, 'bpmn:BoundaryEvent') && (\n\t      !is$1(element, 'bpmn:Event') || (\n\t        is$1(element, 'bpmn:ThrowEvent') &&\n\t        hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')\n\t      )\n\t    )\n\t  );\n\t}\n\n\tfunction isMessageFlowTarget(element) {\n\t  return (\n\t    is$1(element, 'bpmn:InteractionNode') &&\n\t    !is$1(element, 'bpmn:BoundaryEvent') &&\n\t    !isForCompensation(element) && (\n\t      !is$1(element, 'bpmn:Event') || (\n\t        is$1(element, 'bpmn:CatchEvent') &&\n\t        hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')\n\t      )\n\t    )\n\t  );\n\t}\n\n\tfunction getScopeParent(element) {\n\n\t  var parent = element;\n\n\t  while ((parent = parent.parent)) {\n\n\t    if (is$1(parent, 'bpmn:FlowElementsContainer')) {\n\t      return getBusinessObject(parent);\n\t    }\n\n\t    if (is$1(parent, 'bpmn:Participant')) {\n\t      return getBusinessObject(parent).processRef;\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction isSameScope(a, b) {\n\t  var scopeParentA = getScopeParent(a),\n\t      scopeParentB = getScopeParent(b);\n\n\t  return scopeParentA === scopeParentB;\n\t}\n\n\tfunction hasEventDefinition$2(element, eventDefinition) {\n\t  var bo = getBusinessObject(element);\n\n\t  return !!find(bo.eventDefinitions || [], function(definition) {\n\t    return is$1(definition, eventDefinition);\n\t  });\n\t}\n\n\tfunction hasEventDefinitionOrNone(element, eventDefinition) {\n\t  var bo = getBusinessObject(element);\n\n\t  return (bo.eventDefinitions || []).every(function(definition) {\n\t    return is$1(definition, eventDefinition);\n\t  });\n\t}\n\n\tfunction isSequenceFlowSource(element) {\n\t  return (\n\t    is$1(element, 'bpmn:FlowNode') &&\n\t    !is$1(element, 'bpmn:EndEvent') &&\n\t    !isEventSubProcess(element) &&\n\t    !(is$1(element, 'bpmn:IntermediateThrowEvent') &&\n\t      hasEventDefinition$2(element, 'bpmn:LinkEventDefinition')\n\t    ) &&\n\t    !isCompensationBoundary(element) &&\n\t    !isForCompensation(element)\n\t  );\n\t}\n\n\tfunction isSequenceFlowTarget(element) {\n\t  return (\n\t    is$1(element, 'bpmn:FlowNode') &&\n\t    !is$1(element, 'bpmn:StartEvent') &&\n\t    !is$1(element, 'bpmn:BoundaryEvent') &&\n\t    !isEventSubProcess(element) &&\n\t    !(is$1(element, 'bpmn:IntermediateCatchEvent') &&\n\t      hasEventDefinition$2(element, 'bpmn:LinkEventDefinition')\n\t    ) &&\n\t    !isForCompensation(element)\n\t  );\n\t}\n\n\tfunction isEventBasedTarget(element) {\n\t  return (\n\t    is$1(element, 'bpmn:ReceiveTask') || (\n\t      is$1(element, 'bpmn:IntermediateCatchEvent') && (\n\t        hasEventDefinition$2(element, 'bpmn:MessageEventDefinition') ||\n\t        hasEventDefinition$2(element, 'bpmn:TimerEventDefinition') ||\n\t        hasEventDefinition$2(element, 'bpmn:ConditionalEventDefinition') ||\n\t        hasEventDefinition$2(element, 'bpmn:SignalEventDefinition')\n\t      )\n\t    )\n\t  );\n\t}\n\n\tfunction isConnection$3(element) {\n\t  return element.waypoints;\n\t}\n\n\tfunction getParents$1(element) {\n\n\t  var parents = [];\n\n\t  while (element) {\n\t    element = element.parent;\n\n\t    if (element) {\n\t      parents.push(element);\n\t    }\n\t  }\n\n\t  return parents;\n\t}\n\n\tfunction isParent(possibleParent, element) {\n\t  var allParents = getParents$1(element);\n\t  return allParents.indexOf(possibleParent) !== -1;\n\t}\n\n\tfunction canConnect(source, target, connection) {\n\n\t  if (nonExistingOrLabel(source) || nonExistingOrLabel(target)) {\n\t    return null;\n\t  }\n\n\t  if (!is$1(connection, 'bpmn:DataAssociation')) {\n\n\t    if (canConnectMessageFlow(source, target)) {\n\t      return { type: 'bpmn:MessageFlow' };\n\t    }\n\n\t    if (canConnectSequenceFlow(source, target)) {\n\t      return { type: 'bpmn:SequenceFlow' };\n\t    }\n\t  }\n\n\t  var connectDataAssociation = canConnectDataAssociation(source, target);\n\n\t  if (connectDataAssociation) {\n\t    return connectDataAssociation;\n\t  }\n\n\t  if (isCompensationBoundary(source) && isForCompensation(target)) {\n\t    return {\n\t      type: 'bpmn:Association',\n\t      associationDirection: 'One'\n\t    };\n\t  }\n\n\t  if (canConnectAssociation(source, target)) {\n\n\t    return {\n\t      type: 'bpmn:Association'\n\t    };\n\t  }\n\n\t  return false;\n\t}\n\n\t/**\n\t * Can an element be dropped into the target element\n\t *\n\t * @return {boolean}\n\t */\n\tfunction canDrop(element, target, position) {\n\n\t  // can move labels and groups everywhere\n\t  if (isLabel(element) || isGroup(element)) {\n\t    return true;\n\t  }\n\n\n\t  // disallow to create elements on collapsed pools\n\t  if (is$1(target, 'bpmn:Participant') && !isExpanded(target)) {\n\t    return false;\n\t  }\n\n\t  // allow to create new participants on\n\t  // existing collaboration and process diagrams\n\t  if (is$1(element, 'bpmn:Participant')) {\n\t    return is$1(target, 'bpmn:Process') || is$1(target, 'bpmn:Collaboration');\n\t  }\n\n\t  // allow moving DataInput / DataOutput within its original container only\n\t  if (isAny(element, [ 'bpmn:DataInput', 'bpmn:DataOutput' ])) {\n\n\t    if (element.parent) {\n\t      return target === element.parent;\n\t    }\n\t  }\n\n\t  // allow creating lanes on participants and other lanes only\n\t  if (is$1(element, 'bpmn:Lane')) {\n\t    return is$1(target, 'bpmn:Participant') || is$1(target, 'bpmn:Lane');\n\t  }\n\n\t  // disallow dropping boundary events which cannot replace with intermediate event\n\t  if (is$1(element, 'bpmn:BoundaryEvent') && !isDroppableBoundaryEvent(element)) {\n\t    return false;\n\t  }\n\n\t  // drop flow elements onto flow element containers\n\t  // and participants\n\t  if (is$1(element, 'bpmn:FlowElement') && !is$1(element, 'bpmn:DataStoreReference')) {\n\t    if (is$1(target, 'bpmn:FlowElementsContainer')) {\n\t      return isExpanded(target);\n\t    }\n\n\t    return isAny(target, [ 'bpmn:Participant', 'bpmn:Lane' ]);\n\t  }\n\n\t  // account for the fact that data associations are always\n\t  // rendered and moved to top (Process or Collaboration level)\n\t  //\n\t  // artifacts may be placed wherever, too\n\t  if (isAny(element, [ 'bpmn:Artifact', 'bpmn:DataAssociation', 'bpmn:DataStoreReference' ])) {\n\t    return isAny(target, [\n\t      'bpmn:Collaboration',\n\t      'bpmn:Lane',\n\t      'bpmn:Participant',\n\t      'bpmn:Process',\n\t      'bpmn:SubProcess' ]);\n\t  }\n\n\t  if (is$1(element, 'bpmn:MessageFlow')) {\n\t    return is$1(target, 'bpmn:Collaboration')\n\t      || element.source.parent == target\n\t      || element.target.parent == target;\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction isDroppableBoundaryEvent(event) {\n\t  return getBusinessObject(event).cancelActivity && (\n\t    hasNoEventDefinition(event) || hasCommonBoundaryIntermediateEventDefinition(event)\n\t  );\n\t}\n\n\tfunction isBoundaryEvent(element) {\n\t  return !isLabel(element) && is$1(element, 'bpmn:BoundaryEvent');\n\t}\n\n\tfunction isLane(element) {\n\t  return is$1(element, 'bpmn:Lane');\n\t}\n\n\t/**\n\t * We treat IntermediateThrowEvents as boundary events during create,\n\t * this must be reflected in the rules.\n\t */\n\tfunction isBoundaryCandidate(element) {\n\t  if (isBoundaryEvent(element)) {\n\t    return true;\n\t  }\n\n\t  if (is$1(element, 'bpmn:IntermediateThrowEvent') && hasNoEventDefinition(element)) {\n\t    return true;\n\t  }\n\n\t  return (\n\t    is$1(element, 'bpmn:IntermediateCatchEvent') &&\n\t    hasCommonBoundaryIntermediateEventDefinition(element)\n\t  );\n\t}\n\n\tfunction hasNoEventDefinition(element) {\n\t  var bo = getBusinessObject(element);\n\n\t  return bo && !(bo.eventDefinitions && bo.eventDefinitions.length);\n\t}\n\n\tfunction hasCommonBoundaryIntermediateEventDefinition(element) {\n\t  return hasOneOfEventDefinitions(element, [\n\t    'bpmn:MessageEventDefinition',\n\t    'bpmn:TimerEventDefinition',\n\t    'bpmn:SignalEventDefinition',\n\t    'bpmn:ConditionalEventDefinition'\n\t  ]);\n\t}\n\n\tfunction hasOneOfEventDefinitions(element, eventDefinitions) {\n\t  return eventDefinitions.some(function(definition) {\n\t    return hasEventDefinition$2(element, definition);\n\t  });\n\t}\n\n\tfunction isReceiveTaskAfterEventBasedGateway(element) {\n\t  return (\n\t    is$1(element, 'bpmn:ReceiveTask') &&\n\t    find(element.incoming, function(incoming) {\n\t      return is$1(incoming.source, 'bpmn:EventBasedGateway');\n\t    })\n\t  );\n\t}\n\n\n\tfunction canAttach(elements, target, source, position) {\n\n\t  if (!Array.isArray(elements)) {\n\t    elements = [ elements ];\n\t  }\n\n\t  // only (re-)attach one element at a time\n\t  if (elements.length !== 1) {\n\t    return false;\n\t  }\n\n\t  var element = elements[0];\n\n\t  // do not attach labels\n\t  if (isLabel(element)) {\n\t    return false;\n\t  }\n\n\t  // only handle boundary events\n\t  if (!isBoundaryCandidate(element)) {\n\t    return false;\n\t  }\n\n\t  // disallow drop on event sub processes\n\t  if (isEventSubProcess(target)) {\n\t    return false;\n\t  }\n\n\t  // only allow drop on non compensation activities\n\t  if (!is$1(target, 'bpmn:Activity') || isForCompensation(target)) {\n\t    return false;\n\t  }\n\n\t  // only attach to subprocess border\n\t  if (position && !getBoundaryAttachment(position, target)) {\n\t    return false;\n\t  }\n\n\t  // do not attach on receive tasks after event based gateways\n\t  if (isReceiveTaskAfterEventBasedGateway(target)) {\n\t    return false;\n\t  }\n\n\t  return 'attach';\n\t}\n\n\n\t/**\n\t * Defines how to replace elements for a given target.\n\t *\n\t * Returns an array containing all elements which will be replaced.\n\t *\n\t * @example\n\t *\n\t *  [{ id: 'IntermediateEvent_2',\n\t *     type: 'bpmn:StartEvent'\n\t *   },\n\t *   { id: 'IntermediateEvent_5',\n\t *     type: 'bpmn:EndEvent'\n\t *   }]\n\t *\n\t * @param  {Array} elements\n\t * @param  {Object} target\n\t *\n\t * @return {Object} an object containing all elements which have to be replaced\n\t */\n\tfunction canReplace(elements, target, position) {\n\n\t  if (!target) {\n\t    return false;\n\t  }\n\n\t  var canExecute = {\n\t    replacements: []\n\t  };\n\n\t  forEach(elements, function(element) {\n\n\t    if (!isEventSubProcess(target)) {\n\n\t      if (is$1(element, 'bpmn:StartEvent') &&\n\t          element.type !== 'label' &&\n\t          canDrop(element, target)) {\n\n\t        // replace a non-interrupting start event by a blank interrupting start event\n\t        // when the target is not an event sub process\n\t        if (!isInterrupting(element)) {\n\t          canExecute.replacements.push({\n\t            oldElementId: element.id,\n\t            newElementType: 'bpmn:StartEvent'\n\t          });\n\t        }\n\n\t        // replace an error/escalation/compensate start event by a blank interrupting start event\n\t        // when the target is not an event sub process\n\t        if (hasErrorEventDefinition(element) ||\n\t            hasEscalationEventDefinition(element) ||\n\t            hasCompensateEventDefinition(element)) {\n\t          canExecute.replacements.push({\n\t            oldElementId: element.id,\n\t            newElementType: 'bpmn:StartEvent'\n\t          });\n\t        }\n\n\t        // replace a typed start event by a blank interrupting start event\n\t        // when the target is a sub process but not an event sub process\n\t        if (hasOneOfEventDefinitions(element,\n\t          [\n\t            'bpmn:MessageEventDefinition',\n\t            'bpmn:TimerEventDefinition',\n\t            'bpmn:SignalEventDefinition',\n\t            'bpmn:ConditionalEventDefinition'\n\t          ]) &&\n\t            is$1(target, 'bpmn:SubProcess')) {\n\t          canExecute.replacements.push({\n\t            oldElementId: element.id,\n\t            newElementType: 'bpmn:StartEvent'\n\t          });\n\t        }\n\t      }\n\t    }\n\n\t    if (!is$1(target, 'bpmn:Transaction')) {\n\t      if (hasEventDefinition$2(element, 'bpmn:CancelEventDefinition') &&\n\t          element.type !== 'label') {\n\n\t        if (is$1(element, 'bpmn:EndEvent') && canDrop(element, target)) {\n\t          canExecute.replacements.push({\n\t            oldElementId: element.id,\n\t            newElementType: 'bpmn:EndEvent'\n\t          });\n\t        }\n\n\t        if (is$1(element, 'bpmn:BoundaryEvent') && canAttach(element, target, null, position)) {\n\t          canExecute.replacements.push({\n\t            oldElementId: element.id,\n\t            newElementType: 'bpmn:BoundaryEvent'\n\t          });\n\t        }\n\t      }\n\t    }\n\t  });\n\n\t  return canExecute.replacements.length ? canExecute : false;\n\t}\n\n\tfunction canMove(elements, target) {\n\n\t  // do not move selection containing lanes\n\t  if (some(elements, isLane)) {\n\t    return false;\n\t  }\n\n\t  // allow default move check to start move operation\n\t  if (!target) {\n\t    return true;\n\t  }\n\n\t  return elements.every(function(element) {\n\t    return canDrop(element, target);\n\t  });\n\t}\n\n\tfunction canCreate(shape, target, source, position) {\n\n\t  if (!target) {\n\t    return false;\n\t  }\n\n\t  if (isLabel(shape) || isGroup(shape)) {\n\t    return true;\n\t  }\n\n\t  if (isSame(source, target)) {\n\t    return false;\n\t  }\n\n\t  // ensure we do not drop the element\n\t  // into source\n\t  if (source && isParent(source, target)) {\n\t    return false;\n\t  }\n\n\t  return canDrop(shape, target) || canInsert(shape, target);\n\t}\n\n\tfunction canResize(shape, newBounds) {\n\t  if (is$1(shape, 'bpmn:SubProcess')) {\n\t    return (\n\t      isExpanded(shape) && (\n\t        !newBounds || (newBounds.width >= 100 && newBounds.height >= 80)\n\t      )\n\t    );\n\t  }\n\n\t  if (is$1(shape, 'bpmn:Lane')) {\n\t    return !newBounds || (newBounds.width >= 130 && newBounds.height >= 60);\n\t  }\n\n\t  if (is$1(shape, 'bpmn:Participant')) {\n\t    return !newBounds || (newBounds.width >= 250 && newBounds.height >= 50);\n\t  }\n\n\t  if (isTextAnnotation(shape)) {\n\t    return true;\n\t  }\n\n\t  if (isGroup(shape)) {\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\t/**\n\t * Check, whether one side of the relationship\n\t * is a text annotation.\n\t */\n\tfunction isOneTextAnnotation(source, target) {\n\n\t  var sourceTextAnnotation = isTextAnnotation(source),\n\t      targetTextAnnotation = isTextAnnotation(target);\n\n\t  return (\n\t    (sourceTextAnnotation || targetTextAnnotation) &&\n\t    (sourceTextAnnotation !== targetTextAnnotation)\n\t  );\n\t}\n\n\n\tfunction canConnectAssociation(source, target) {\n\n\t  // do not connect connections\n\t  if (isConnection$3(source) || isConnection$3(target)) {\n\t    return false;\n\t  }\n\n\t  // compensation boundary events are exception\n\t  if (isCompensationBoundary(source) && isForCompensation(target)) {\n\t    return true;\n\t  }\n\n\t  // don't connect parent <-> child\n\t  if (isParent(target, source) || isParent(source, target)) {\n\t    return false;\n\t  }\n\n\t  // allow connection of associations between <!TextAnnotation> and <TextAnnotation>\n\t  if (isOneTextAnnotation(source, target)) {\n\t    return true;\n\t  }\n\n\t  // can connect associations where we can connect\n\t  // data associations, too (!)\n\t  return !!canConnectDataAssociation(source, target);\n\t}\n\n\tfunction canConnectMessageFlow(source, target) {\n\n\t  // during connect user might move mouse out of canvas\n\t  // https://github.com/bpmn-io/bpmn-js/issues/1033\n\t  if (getRootElement(source) && !getRootElement(target)) {\n\t    return false;\n\t  }\n\n\t  return (\n\t    isMessageFlowSource(source) &&\n\t    isMessageFlowTarget(target) &&\n\t    !isSameOrganization(source, target)\n\t  );\n\t}\n\n\tfunction canConnectSequenceFlow(source, target) {\n\n\t  if (\n\t    isEventBasedTarget(target) &&\n\t    target.incoming.length > 0 &&\n\t    areOutgoingEventBasedGatewayConnections(target.incoming) &&\n\t    !is$1(source, 'bpmn:EventBasedGateway')\n\t  ) {\n\t    return false;\n\t  }\n\n\t  return isSequenceFlowSource(source) &&\n\t         isSequenceFlowTarget(target) &&\n\t         isSameScope(source, target) &&\n\t         !(is$1(source, 'bpmn:EventBasedGateway') && !isEventBasedTarget(target));\n\t}\n\n\n\tfunction canConnectDataAssociation(source, target) {\n\n\t  if (isAny(source, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&\n\t      isAny(target, [ 'bpmn:Activity', 'bpmn:ThrowEvent' ])) {\n\t    return { type: 'bpmn:DataInputAssociation' };\n\t  }\n\n\t  if (isAny(target, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&\n\t      isAny(source, [ 'bpmn:Activity', 'bpmn:CatchEvent' ])) {\n\t    return { type: 'bpmn:DataOutputAssociation' };\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction canInsert(shape, flow, position) {\n\n\t  if (!flow) {\n\t    return false;\n\t  }\n\n\t  if (Array.isArray(shape)) {\n\t    if (shape.length !== 1) {\n\t      return false;\n\t    }\n\n\t    shape = shape[0];\n\t  }\n\n\t  if (flow.source === shape ||\n\t      flow.target === shape) {\n\t    return false;\n\t  }\n\n\t  // return true if we can drop on the\n\t  // underlying flow parent\n\t  //\n\t  // at this point we are not really able to talk\n\t  // about connection rules (yet)\n\n\t  return (\n\t    isAny(flow, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ]) &&\n\t    !isLabel(flow) &&\n\t    is$1(shape, 'bpmn:FlowNode') &&\n\t    !is$1(shape, 'bpmn:BoundaryEvent') &&\n\t    canDrop(shape, flow.parent));\n\t}\n\n\tfunction includes$1(elements, element) {\n\t  return (elements && element) && elements.indexOf(element) !== -1;\n\t}\n\n\tfunction canCopy(elements, element) {\n\t  if (isLabel(element)) {\n\t    return true;\n\t  }\n\n\t  if (is$1(element, 'bpmn:Lane') && !includes$1(elements, element.parent)) {\n\t    return false;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction isOutgoingEventBasedGatewayConnection(connection) {\n\n\t  if (connection && connection.source) {\n\t    return is$1(connection.source, 'bpmn:EventBasedGateway');\n\t  }\n\t}\n\n\tfunction areOutgoingEventBasedGatewayConnections(connections) {\n\t  connections = connections || [];\n\n\t  return connections.some(isOutgoingEventBasedGatewayConnection);\n\t}\n\n\tfunction getRootElement(element) {\n\t  return getParent$1(element, 'bpmn:Process') || getParent$1(element, 'bpmn:Collaboration');\n\t}\n\n\tvar RulesModule$1 = {\n\t  __depends__: [\n\t    RulesModule\n\t  ],\n\t  __init__: [ 'bpmnRules' ],\n\t  bpmnRules: [ 'type', BpmnRules ]\n\t};\n\n\tvar HIGH_PRIORITY$c = 2000;\n\n\tfunction BpmnDiOrdering(eventBus, canvas) {\n\n\t  eventBus.on('saveXML.start', HIGH_PRIORITY$c, orderDi);\n\n\t  function orderDi() {\n\t    var root = canvas.getRootElement(),\n\t        rootDi = getBusinessObject(root).di,\n\t        elements,\n\t        diElements;\n\n\t    elements = selfAndAllChildren([ root ], false);\n\n\t    // only bpmndi:Shape and bpmndi:Edge can be direct children of bpmndi:Plane\n\t    elements = filter(elements, function(element) {\n\t      return element !== root && !element.labelTarget;\n\t    });\n\n\t    diElements = map(elements, getDi);\n\n\t    rootDi.set('planeElement', diElements);\n\t  }\n\t}\n\n\tBpmnDiOrdering.$inject = [ 'eventBus', 'canvas' ];\n\n\tvar DiOrderingModule = {\n\t  __init__: [\n\t    'bpmnDiOrdering'\n\t  ],\n\t  bpmnDiOrdering: [ 'type', BpmnDiOrdering ]\n\t};\n\n\t/**\n\t * An abstract provider that allows modelers to implement a custom\n\t * ordering of diagram elements on the canvas.\n\t *\n\t * It makes sure that the order is always preserved during element\n\t * creation and move operations.\n\t *\n\t * In order to use this behavior, inherit from it and override\n\t * the method {@link OrderingProvider#getOrdering}.\n\t *\n\t * @example\n\t *\n\t * ```javascript\n\t * function CustomOrderingProvider(eventBus) {\n\t *   OrderingProvider.call(this, eventBus);\n\t *\n\t *   this.getOrdering = function(element, newParent) {\n\t *     // always insert elements at the front\n\t *     // when moving\n\t *     return {\n\t *       index: 0,\n\t *       parent: newParent\n\t *     };\n\t *   };\n\t * }\n\t * ```\n\t *\n\t * @param {EventBus} eventBus\n\t */\n\tfunction OrderingProvider(eventBus) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\n\t  var self = this;\n\n\t  this.preExecute([ 'shape.create', 'connection.create' ], function(event) {\n\n\t    var context = event.context,\n\t        element = context.shape || context.connection,\n\t        parent = context.parent;\n\n\t    var ordering = self.getOrdering(element, parent);\n\n\t    if (ordering) {\n\n\t      if (ordering.parent !== undefined) {\n\t        context.parent = ordering.parent;\n\t      }\n\n\t      context.parentIndex = ordering.index;\n\t    }\n\t  });\n\n\t  this.preExecute([ 'shape.move', 'connection.move' ], function(event) {\n\n\t    var context = event.context,\n\t        element = context.shape || context.connection,\n\t        parent = context.newParent || element.parent;\n\n\t    var ordering = self.getOrdering(element, parent);\n\n\t    if (ordering) {\n\n\t      if (ordering.parent !== undefined) {\n\t        context.newParent = ordering.parent;\n\t      }\n\n\t      context.newParentIndex = ordering.index;\n\t    }\n\t  });\n\t}\n\n\t/**\n\t * Return a custom ordering of the element, both in terms\n\t * of parent element and index in the new parent.\n\t *\n\t * Implementors of this method must return an object with\n\t * `parent` _and_ `index` in it.\n\t *\n\t * @param {djs.model.Base} element\n\t * @param {djs.model.Shape} newParent\n\t *\n\t * @return {Object} ordering descriptor\n\t */\n\tOrderingProvider.prototype.getOrdering = function(element, newParent) {\n\t  return null;\n\t};\n\n\tinherits_browser(OrderingProvider, CommandInterceptor);\n\n\t/**\n\t * a simple ordering provider that makes sure:\n\t *\n\t * (0) labels and groups are rendered always on top\n\t * (1) elements are ordered by a {level} property\n\t */\n\tfunction BpmnOrderingProvider(eventBus, canvas, translate) {\n\n\t  OrderingProvider.call(this, eventBus);\n\n\t  var orders = [\n\t    { type: 'bpmn:SubProcess', order: { level: 6 } },\n\t    {\n\t      type: 'bpmn:SequenceFlow',\n\t      order: {\n\t        level: 3,\n\t        containers: [\n\t          'bpmn:Participant',\n\t          'bpmn:FlowElementsContainer'\n\t        ]\n\t      }\n\t    },\n\n\t    // handle DataAssociation(s) like message flows and render them always on top\n\t    {\n\t      type: 'bpmn:DataAssociation',\n\t      order: {\n\t        level: 9,\n\t        containers: [\n\t          'bpmn:Collaboration',\n\t          'bpmn:Process'\n\t        ]\n\t      }\n\t    },\n\t    {\n\t      type: 'bpmn:MessageFlow', order: {\n\t        level: 9,\n\t        containers: [ 'bpmn:Collaboration' ]\n\t      }\n\t    },\n\t    {\n\t      type: 'bpmn:Association',\n\t      order: {\n\t        level: 6,\n\t        containers: [\n\t          'bpmn:Participant',\n\t          'bpmn:FlowElementsContainer',\n\t          'bpmn:Collaboration'\n\t        ]\n\t      }\n\t    },\n\t    { type: 'bpmn:BoundaryEvent', order: { level: 8 } },\n\t    {\n\t      type: 'bpmn:Group',\n\t      order: {\n\t        level: 10,\n\t        containers: [\n\t          'bpmn:Collaboration',\n\t          'bpmn:Process'\n\t        ]\n\t      }\n\t    },\n\t    { type: 'bpmn:FlowElement', order: { level: 5 } },\n\t    { type: 'bpmn:Participant', order: { level: -2 } },\n\t    { type: 'bpmn:Lane', order: { level: -1 } }\n\t  ];\n\n\t  function computeOrder(element) {\n\t    if (element.labelTarget) {\n\t      return { level: 10 };\n\t    }\n\n\t    var entry = find(orders, function(o) {\n\t      return isAny(element, [ o.type ]);\n\t    });\n\n\t    return entry && entry.order || { level: 1 };\n\t  }\n\n\t  function getOrder(element) {\n\n\t    var order = element.order;\n\n\t    if (!order) {\n\t      element.order = order = computeOrder(element);\n\t    }\n\n\t    return order;\n\t  }\n\n\t  function findActualParent(element, newParent, containers) {\n\n\t    var actualParent = newParent;\n\n\t    while (actualParent) {\n\n\t      if (isAny(actualParent, containers)) {\n\t        break;\n\t      }\n\n\t      actualParent = actualParent.parent;\n\t    }\n\n\t    if (!actualParent) {\n\t      throw new Error(translate('no parent for {element} in {parent}', {\n\t        element: element.id,\n\t        parent: newParent.id\n\t      }));\n\t    }\n\n\t    return actualParent;\n\t  }\n\n\t  this.getOrdering = function(element, newParent) {\n\n\t    // render labels always on top\n\t    if (element.labelTarget) {\n\t      return {\n\t        parent: canvas.getRootElement(),\n\t        index: -1\n\t      };\n\t    }\n\n\t    var elementOrder = getOrder(element);\n\n\n\t    if (elementOrder.containers) {\n\t      newParent = findActualParent(element, newParent, elementOrder.containers);\n\t    }\n\n\n\t    var currentIndex = newParent.children.indexOf(element);\n\n\t    var insertIndex = findIndex(newParent.children, function(child) {\n\n\t      // do not compare with labels, they are created\n\t      // in the wrong order (right after elements) during import and\n\t      // mess up the positioning.\n\t      if (!element.labelTarget && child.labelTarget) {\n\t        return false;\n\t      }\n\n\t      return elementOrder.level < getOrder(child).level;\n\t    });\n\n\n\t    // if the element is already in the child list at\n\t    // a smaller index, we need to adjust the insert index.\n\t    // this takes into account that the element is being removed\n\t    // before being re-inserted\n\t    if (insertIndex !== -1) {\n\t      if (currentIndex !== -1 && currentIndex < insertIndex) {\n\t        insertIndex -= 1;\n\t      }\n\t    }\n\n\t    return {\n\t      index: insertIndex,\n\t      parent: newParent\n\t    };\n\t  };\n\t}\n\n\tBpmnOrderingProvider.$inject = [ 'eventBus', 'canvas', 'translate' ];\n\n\tinherits_browser(BpmnOrderingProvider, OrderingProvider);\n\n\tvar OrderingModule = {\n\t  __depends__: [\n\t    translate$2\n\t  ],\n\t  __init__: [ 'bpmnOrderingProvider' ],\n\t  bpmnOrderingProvider: [ 'type', BpmnOrderingProvider ]\n\t};\n\n\t/**\n\t * A service that offers un- and redoable execution of commands.\n\t *\n\t * The command stack is responsible for executing modeling actions\n\t * in a un- and redoable manner. To do this it delegates the actual\n\t * command execution to {@link CommandHandler}s.\n\t *\n\t * Command handlers provide {@link CommandHandler#execute(ctx)} and\n\t * {@link CommandHandler#revert(ctx)} methods to un- and redo a command\n\t * identified by a command context.\n\t *\n\t *\n\t * ## Life-Cycle events\n\t *\n\t * In the process the command stack fires a number of life-cycle events\n\t * that other components to participate in the command execution.\n\t *\n\t *    * preExecute\n\t *    * preExecuted\n\t *    * execute\n\t *    * executed\n\t *    * postExecute\n\t *    * postExecuted\n\t *    * revert\n\t *    * reverted\n\t *\n\t * A special event is used for validating, whether a command can be\n\t * performed prior to its execution.\n\t *\n\t *    * canExecute\n\t *\n\t * Each of the events is fired as `commandStack.{eventName}` and\n\t * `commandStack.{commandName}.{eventName}`, respectively. This gives\n\t * components fine grained control on where to hook into.\n\t *\n\t * The event object fired transports `command`, the name of the\n\t * command and `context`, the command context.\n\t *\n\t *\n\t * ## Creating Command Handlers\n\t *\n\t * Command handlers should provide the {@link CommandHandler#execute(ctx)}\n\t * and {@link CommandHandler#revert(ctx)} methods to implement\n\t * redoing and undoing of a command.\n\t *\n\t * A command handler _must_ ensure undo is performed properly in order\n\t * not to break the undo chain. It must also return the shapes that\n\t * got changed during the `execute` and `revert` operations.\n\t *\n\t * Command handlers may execute other modeling operations (and thus\n\t * commands) in their `preExecute` and `postExecute` phases. The command\n\t * stack will properly group all commands together into a logical unit\n\t * that may be re- and undone atomically.\n\t *\n\t * Command handlers must not execute other commands from within their\n\t * core implementation (`execute`, `revert`).\n\t *\n\t *\n\t * ## Change Tracking\n\t *\n\t * During the execution of the CommandStack it will keep track of all\n\t * elements that have been touched during the command's execution.\n\t *\n\t * At the end of the CommandStack execution it will notify interested\n\t * components via an 'elements.changed' event with all the dirty\n\t * elements.\n\t *\n\t * The event can be picked up by components that are interested in the fact\n\t * that elements have been changed. One use case for this is updating\n\t * their graphical representation after moving / resizing or deletion.\n\t *\n\t * @see CommandHandler\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Injector} injector\n\t */\n\tfunction CommandStack(eventBus, injector) {\n\n\t  /**\n\t   * A map of all registered command handlers.\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._handlerMap = {};\n\n\t  /**\n\t   * A stack containing all re/undoable actions on the diagram\n\t   *\n\t   * @type {Array<Object>}\n\t   */\n\t  this._stack = [];\n\n\t  /**\n\t   * The current index on the stack\n\t   *\n\t   * @type {number}\n\t   */\n\t  this._stackIdx = -1;\n\n\t  /**\n\t   * Current active commandStack execution\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._currentExecution = {\n\t    actions: [],\n\t    dirty: []\n\t  };\n\n\n\t  this._injector = injector;\n\t  this._eventBus = eventBus;\n\n\t  this._uid = 1;\n\n\t  eventBus.on([\n\t    'diagram.destroy',\n\t    'diagram.clear'\n\t  ], function() {\n\t    this.clear(false);\n\t  }, this);\n\t}\n\n\tCommandStack.$inject = [ 'eventBus', 'injector' ];\n\n\n\t/**\n\t * Execute a command\n\t *\n\t * @param {string} command the command to execute\n\t * @param {Object} context the environment to execute the command in\n\t */\n\tCommandStack.prototype.execute = function(command, context) {\n\t  if (!command) {\n\t    throw new Error('command required');\n\t  }\n\n\t  var action = { command: command, context: context };\n\n\t  this._pushAction(action);\n\t  this._internalExecute(action);\n\t  this._popAction(action);\n\t};\n\n\n\t/**\n\t * Ask whether a given command can be executed.\n\t *\n\t * Implementors may hook into the mechanism on two ways:\n\t *\n\t *   * in event listeners:\n\t *\n\t *     Users may prevent the execution via an event listener.\n\t *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.\n\t *\n\t *   * in command handlers:\n\t *\n\t *     If the method {@link CommandHandler#canExecute} is implemented in a handler\n\t *     it will be called to figure out whether the execution is allowed.\n\t *\n\t * @param  {string} command the command to execute\n\t * @param  {Object} context the environment to execute the command in\n\t *\n\t * @return {boolean} true if the command can be executed\n\t */\n\tCommandStack.prototype.canExecute = function(command, context) {\n\n\t  var action = { command: command, context: context };\n\n\t  var handler = this._getHandler(command);\n\n\t  var result = this._fire(command, 'canExecute', action);\n\n\t  // handler#canExecute will only be called if no listener\n\t  // decided on a result already\n\t  if (result === undefined) {\n\t    if (!handler) {\n\t      return false;\n\t    }\n\n\t    if (handler.canExecute) {\n\t      result = handler.canExecute(context);\n\t    }\n\t  }\n\n\t  return result;\n\t};\n\n\n\t/**\n\t * Clear the command stack, erasing all undo / redo history\n\t */\n\tCommandStack.prototype.clear = function(emit) {\n\t  this._stack.length = 0;\n\t  this._stackIdx = -1;\n\n\t  if (emit !== false) {\n\t    this._fire('changed');\n\t  }\n\t};\n\n\n\t/**\n\t * Undo last command(s)\n\t */\n\tCommandStack.prototype.undo = function() {\n\t  var action = this._getUndoAction(),\n\t      next;\n\n\t  if (action) {\n\t    this._pushAction(action);\n\n\t    while (action) {\n\t      this._internalUndo(action);\n\t      next = this._getUndoAction();\n\n\t      if (!next || next.id !== action.id) {\n\t        break;\n\t      }\n\n\t      action = next;\n\t    }\n\n\t    this._popAction();\n\t  }\n\t};\n\n\n\t/**\n\t * Redo last command(s)\n\t */\n\tCommandStack.prototype.redo = function() {\n\t  var action = this._getRedoAction(),\n\t      next;\n\n\t  if (action) {\n\t    this._pushAction(action);\n\n\t    while (action) {\n\t      this._internalExecute(action, true);\n\t      next = this._getRedoAction();\n\n\t      if (!next || next.id !== action.id) {\n\t        break;\n\t      }\n\n\t      action = next;\n\t    }\n\n\t    this._popAction();\n\t  }\n\t};\n\n\n\t/**\n\t * Register a handler instance with the command stack\n\t *\n\t * @param {string} command\n\t * @param {CommandHandler} handler\n\t */\n\tCommandStack.prototype.register = function(command, handler) {\n\t  this._setHandler(command, handler);\n\t};\n\n\n\t/**\n\t * Register a handler type with the command stack\n\t * by instantiating it and injecting its dependencies.\n\t *\n\t * @param {string} command\n\t * @param {Function} a constructor for a {@link CommandHandler}\n\t */\n\tCommandStack.prototype.registerHandler = function(command, handlerCls) {\n\n\t  if (!command || !handlerCls) {\n\t    throw new Error('command and handlerCls must be defined');\n\t  }\n\n\t  var handler = this._injector.instantiate(handlerCls);\n\t  this.register(command, handler);\n\t};\n\n\tCommandStack.prototype.canUndo = function() {\n\t  return !!this._getUndoAction();\n\t};\n\n\tCommandStack.prototype.canRedo = function() {\n\t  return !!this._getRedoAction();\n\t};\n\n\t// stack access  //////////////////////\n\n\tCommandStack.prototype._getRedoAction = function() {\n\t  return this._stack[this._stackIdx + 1];\n\t};\n\n\n\tCommandStack.prototype._getUndoAction = function() {\n\t  return this._stack[this._stackIdx];\n\t};\n\n\n\t// internal functionality //////////////////////\n\n\tCommandStack.prototype._internalUndo = function(action) {\n\t  var self = this;\n\n\t  var command = action.command,\n\t      context = action.context;\n\n\t  var handler = this._getHandler(command);\n\n\t  // guard against illegal nested command stack invocations\n\t  this._atomicDo(function() {\n\t    self._fire(command, 'revert', action);\n\n\t    if (handler.revert) {\n\t      self._markDirty(handler.revert(context));\n\t    }\n\n\t    self._revertedAction(action);\n\n\t    self._fire(command, 'reverted', action);\n\t  });\n\t};\n\n\n\tCommandStack.prototype._fire = function(command, qualifier, event) {\n\t  if (arguments.length < 3) {\n\t    event = qualifier;\n\t    qualifier = null;\n\t  }\n\n\t  var names = qualifier ? [ command + '.' + qualifier, qualifier ] : [ command ],\n\t      i, name, result;\n\n\t  event = this._eventBus.createEvent(event);\n\n\t  for (i = 0; (name = names[i]); i++) {\n\t    result = this._eventBus.fire('commandStack.' + name, event);\n\n\t    if (event.cancelBubble) {\n\t      break;\n\t    }\n\t  }\n\n\t  return result;\n\t};\n\n\tCommandStack.prototype._createId = function() {\n\t  return this._uid++;\n\t};\n\n\tCommandStack.prototype._atomicDo = function(fn) {\n\n\t  var execution = this._currentExecution;\n\n\t  execution.atomic = true;\n\n\t  try {\n\t    fn();\n\t  } finally {\n\t    execution.atomic = false;\n\t  }\n\t};\n\n\tCommandStack.prototype._internalExecute = function(action, redo) {\n\t  var self = this;\n\n\t  var command = action.command,\n\t      context = action.context;\n\n\t  var handler = this._getHandler(command);\n\n\t  if (!handler) {\n\t    throw new Error('no command handler registered for <' + command + '>');\n\t  }\n\n\t  this._pushAction(action);\n\n\t  if (!redo) {\n\t    this._fire(command, 'preExecute', action);\n\n\t    if (handler.preExecute) {\n\t      handler.preExecute(context);\n\t    }\n\n\t    this._fire(command, 'preExecuted', action);\n\t  }\n\n\t  // guard against illegal nested command stack invocations\n\t  this._atomicDo(function() {\n\n\t    self._fire(command, 'execute', action);\n\n\t    if (handler.execute) {\n\n\t      // actual execute + mark return results as dirty\n\t      self._markDirty(handler.execute(context));\n\t    }\n\n\t    // log to stack\n\t    self._executedAction(action, redo);\n\n\t    self._fire(command, 'executed', action);\n\t  });\n\n\t  if (!redo) {\n\t    this._fire(command, 'postExecute', action);\n\n\t    if (handler.postExecute) {\n\t      handler.postExecute(context);\n\t    }\n\n\t    this._fire(command, 'postExecuted', action);\n\t  }\n\n\t  this._popAction(action);\n\t};\n\n\n\tCommandStack.prototype._pushAction = function(action) {\n\n\t  var execution = this._currentExecution,\n\t      actions = execution.actions;\n\n\t  var baseAction = actions[0];\n\n\t  if (execution.atomic) {\n\t    throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');\n\t  }\n\n\t  if (!action.id) {\n\t    action.id = (baseAction && baseAction.id) || this._createId();\n\t  }\n\n\t  actions.push(action);\n\t};\n\n\n\tCommandStack.prototype._popAction = function() {\n\t  var execution = this._currentExecution,\n\t      actions = execution.actions,\n\t      dirty = execution.dirty;\n\n\t  actions.pop();\n\n\t  if (!actions.length) {\n\t    this._eventBus.fire('elements.changed', { elements: uniqueBy('id', dirty.reverse()) });\n\n\t    dirty.length = 0;\n\n\t    this._fire('changed');\n\t  }\n\t};\n\n\n\tCommandStack.prototype._markDirty = function(elements) {\n\t  var execution = this._currentExecution;\n\n\t  if (!elements) {\n\t    return;\n\t  }\n\n\t  elements = isArray(elements) ? elements : [ elements ];\n\n\t  execution.dirty = execution.dirty.concat(elements);\n\t};\n\n\n\tCommandStack.prototype._executedAction = function(action, redo) {\n\t  var stackIdx = ++this._stackIdx;\n\n\t  if (!redo) {\n\t    this._stack.splice(stackIdx, this._stack.length, action);\n\t  }\n\t};\n\n\n\tCommandStack.prototype._revertedAction = function(action) {\n\t  this._stackIdx--;\n\t};\n\n\n\tCommandStack.prototype._getHandler = function(command) {\n\t  return this._handlerMap[command];\n\t};\n\n\tCommandStack.prototype._setHandler = function(command, handler) {\n\t  if (!command || !handler) {\n\t    throw new Error('command and handler required');\n\t  }\n\n\t  if (this._handlerMap[command]) {\n\t    throw new Error('overriding handler for command <' + command + '>');\n\t  }\n\n\t  this._handlerMap[command] = handler;\n\t};\n\n\tvar CommandModule = {\n\t  commandStack: [ 'type', CommandStack ]\n\t};\n\n\t// document wide unique tooltip ids\n\tvar ids$1 = new IdGenerator('tt');\n\n\n\tfunction createRoot$1(parentNode) {\n\t  var root = domify(\n\t    '<div class=\"djs-tooltip-container\" style=\"position: absolute; width: 0; height: 0;\" />'\n\t  );\n\n\t  parentNode.insertBefore(root, parentNode.firstChild);\n\n\t  return root;\n\t}\n\n\n\tfunction setPosition$1(el, x, y) {\n\t  assign(el.style, { left: x + 'px', top: y + 'px' });\n\t}\n\n\tfunction setVisible$1(el, visible) {\n\t  el.style.display = visible === false ? 'none' : '';\n\t}\n\n\n\tvar tooltipClass = 'djs-tooltip',\n\t    tooltipSelector = '.' + tooltipClass;\n\n\t/**\n\t * A service that allows users to render tool tips on the diagram.\n\t *\n\t * The tooltip service will take care of updating the tooltip positioning\n\t * during navigation + zooming.\n\t *\n\t * @example\n\t *\n\t * ```javascript\n\t *\n\t * // add a pink badge on the top left of the shape\n\t * tooltips.add({\n\t *   position: {\n\t *     x: 50,\n\t *     y: 100\n\t *   },\n\t *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n\t * });\n\t *\n\t * // or with optional life span\n\t * tooltips.add({\n\t *   position: {\n\t *     top: -5,\n\t *     left: -5\n\t *   },\n\t *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>',\n\t *   ttl: 2000\n\t * });\n\t *\n\t * // remove a tool tip\n\t * var id = tooltips.add(...);\n\t * tooltips.remove(id);\n\t * ```\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t */\n\tfunction Tooltips(eventBus, canvas) {\n\n\t  this._eventBus = eventBus;\n\t  this._canvas = canvas;\n\n\t  this._ids = ids$1;\n\n\t  this._tooltipDefaults = {\n\t    show: {\n\t      minZoom: 0.7,\n\t      maxZoom: 5.0\n\t    }\n\t  };\n\n\t  /**\n\t   * Mapping tooltipId -> tooltip\n\t   */\n\t  this._tooltips = {};\n\n\t  // root html element for all tooltips\n\t  this._tooltipRoot = createRoot$1(canvas.getContainer());\n\n\n\t  var self = this;\n\n\t  delegateEvents.bind(this._tooltipRoot, tooltipSelector, 'mousedown', function(event) {\n\t    event.stopPropagation();\n\t  });\n\n\t  delegateEvents.bind(this._tooltipRoot, tooltipSelector, 'mouseover', function(event) {\n\t    self.trigger('mouseover', event);\n\t  });\n\n\t  delegateEvents.bind(this._tooltipRoot, tooltipSelector, 'mouseout', function(event) {\n\t    self.trigger('mouseout', event);\n\t  });\n\n\t  this._init();\n\t}\n\n\n\tTooltips.$inject = [ 'eventBus', 'canvas' ];\n\n\n\t/**\n\t * Adds a HTML tooltip to the diagram\n\t *\n\t * @param {Object}               tooltip   the tooltip configuration\n\t *\n\t * @param {string|DOMElement}    tooltip.html                 html element to use as an tooltip\n\t * @param {Object}               [tooltip.show]               show configuration\n\t * @param {number}               [tooltip.show.minZoom]       minimal zoom level to show the tooltip\n\t * @param {number}               [tooltip.show.maxZoom]       maximum zoom level to show the tooltip\n\t * @param {Object}               tooltip.position             where to attach the tooltip\n\t * @param {number}               [tooltip.position.left]      relative to element bbox left attachment\n\t * @param {number}               [tooltip.position.top]       relative to element bbox top attachment\n\t * @param {number}               [tooltip.position.bottom]    relative to element bbox bottom attachment\n\t * @param {number}               [tooltip.position.right]     relative to element bbox right attachment\n\t * @param {number}               [tooltip.timeout=-1]\n\t *\n\t * @return {string}              id that may be used to reference the tooltip for update or removal\n\t */\n\tTooltips.prototype.add = function(tooltip) {\n\n\t  if (!tooltip.position) {\n\t    throw new Error('must specifiy tooltip position');\n\t  }\n\n\t  if (!tooltip.html) {\n\t    throw new Error('must specifiy tooltip html');\n\t  }\n\n\t  var id = this._ids.next();\n\n\t  tooltip = assign({}, this._tooltipDefaults, tooltip, {\n\t    id: id\n\t  });\n\n\t  this._addTooltip(tooltip);\n\n\t  if (tooltip.timeout) {\n\t    this.setTimeout(tooltip);\n\t  }\n\n\t  return id;\n\t};\n\n\tTooltips.prototype.trigger = function(action, event) {\n\n\t  var node = event.delegateTarget || event.target;\n\n\t  var tooltip = this.get(attr(node, 'data-tooltip-id'));\n\n\t  if (!tooltip) {\n\t    return;\n\t  }\n\n\t  if (action === 'mouseover' && tooltip.timeout) {\n\t    this.clearTimeout(tooltip);\n\t  }\n\n\t  if (action === 'mouseout' && tooltip.timeout) {\n\n\t    // cut timeout after mouse out\n\t    tooltip.timeout = 1000;\n\n\t    this.setTimeout(tooltip);\n\t  }\n\t};\n\n\t/**\n\t * Get a tooltip with the given id\n\t *\n\t * @param {string} id\n\t */\n\tTooltips.prototype.get = function(id) {\n\n\t  if (typeof id !== 'string') {\n\t    id = id.id;\n\t  }\n\n\t  return this._tooltips[id];\n\t};\n\n\tTooltips.prototype.clearTimeout = function(tooltip) {\n\n\t  tooltip = this.get(tooltip);\n\n\t  if (!tooltip) {\n\t    return;\n\t  }\n\n\t  var removeTimer = tooltip.removeTimer;\n\n\t  if (removeTimer) {\n\t    clearTimeout(removeTimer);\n\t    tooltip.removeTimer = null;\n\t  }\n\t};\n\n\tTooltips.prototype.setTimeout = function(tooltip) {\n\n\t  tooltip = this.get(tooltip);\n\n\t  if (!tooltip) {\n\t    return;\n\t  }\n\n\t  this.clearTimeout(tooltip);\n\n\t  var self = this;\n\n\t  tooltip.removeTimer = setTimeout(function() {\n\t    self.remove(tooltip);\n\t  }, tooltip.timeout);\n\t};\n\n\t/**\n\t * Remove an tooltip with the given id\n\t *\n\t * @param {string} id\n\t */\n\tTooltips.prototype.remove = function(id) {\n\n\t  var tooltip = this.get(id);\n\n\t  if (tooltip) {\n\t    remove(tooltip.html);\n\t    remove(tooltip.htmlContainer);\n\n\t    delete tooltip.htmlContainer;\n\n\t    delete this._tooltips[tooltip.id];\n\t  }\n\t};\n\n\n\tTooltips.prototype.show = function() {\n\t  setVisible$1(this._tooltipRoot);\n\t};\n\n\n\tTooltips.prototype.hide = function() {\n\t  setVisible$1(this._tooltipRoot, false);\n\t};\n\n\n\tTooltips.prototype._updateRoot = function(viewbox) {\n\t  var a = viewbox.scale || 1;\n\t  var d = viewbox.scale || 1;\n\n\t  var matrix = 'matrix(' + a + ',0,0,' + d + ',' + (-1 * viewbox.x * a) + ',' + (-1 * viewbox.y * d) + ')';\n\n\t  this._tooltipRoot.style.transform = matrix;\n\t  this._tooltipRoot.style['-ms-transform'] = matrix;\n\t};\n\n\n\tTooltips.prototype._addTooltip = function(tooltip) {\n\n\t  var id = tooltip.id,\n\t      html = tooltip.html,\n\t      htmlContainer,\n\t      tooltipRoot = this._tooltipRoot;\n\n\t  // unwrap jquery (for those who need it)\n\t  if (html.get && html.constructor.prototype.jquery) {\n\t    html = html.get(0);\n\t  }\n\n\t  // create proper html elements from\n\t  // tooltip HTML strings\n\t  if (isString(html)) {\n\t    html = domify(html);\n\t  }\n\n\t  htmlContainer = domify('<div data-tooltip-id=\"' + id + '\" class=\"' + tooltipClass + '\" style=\"position: absolute\">');\n\n\t  htmlContainer.appendChild(html);\n\n\t  if (tooltip.type) {\n\t    classes(htmlContainer).add('djs-tooltip-' + tooltip.type);\n\t  }\n\n\t  if (tooltip.className) {\n\t    classes(htmlContainer).add(tooltip.className);\n\t  }\n\n\t  tooltip.htmlContainer = htmlContainer;\n\n\t  tooltipRoot.appendChild(htmlContainer);\n\n\t  this._tooltips[id] = tooltip;\n\n\t  this._updateTooltip(tooltip);\n\t};\n\n\n\tTooltips.prototype._updateTooltip = function(tooltip) {\n\n\t  var position = tooltip.position,\n\t      htmlContainer = tooltip.htmlContainer;\n\n\t  // update overlay html based on tooltip x, y\n\n\t  setPosition$1(htmlContainer, position.x, position.y);\n\t};\n\n\n\tTooltips.prototype._updateTooltipVisibilty = function(viewbox) {\n\n\t  forEach(this._tooltips, function(tooltip) {\n\t    var show = tooltip.show,\n\t        htmlContainer = tooltip.htmlContainer,\n\t        visible = true;\n\n\t    if (show) {\n\t      if (show.minZoom > viewbox.scale ||\n\t          show.maxZoom < viewbox.scale) {\n\t        visible = false;\n\t      }\n\n\t      setVisible$1(htmlContainer, visible);\n\t    }\n\t  });\n\t};\n\n\tTooltips.prototype._init = function() {\n\n\t  var self = this;\n\n\t  // scroll/zoom integration\n\n\t  function updateViewbox(viewbox) {\n\t    self._updateRoot(viewbox);\n\t    self._updateTooltipVisibilty(viewbox);\n\n\t    self.show();\n\t  }\n\n\t  this._eventBus.on('canvas.viewbox.changing', function(event) {\n\t    self.hide();\n\t  });\n\n\t  this._eventBus.on('canvas.viewbox.changed', function(event) {\n\t    updateViewbox(event.viewbox);\n\t  });\n\t};\n\n\tvar TooltipsModule = {\n\t  __init__: [ 'tooltips' ],\n\t  tooltips: [ 'type', Tooltips ]\n\t};\n\n\t/**\n\t * Remove from the beginning of a collection until it is empty.\n\t *\n\t * This is a null-safe operation that ensures elements\n\t * are being removed from the given collection until the\n\t * collection is empty.\n\t *\n\t * The implementation deals with the fact that a remove operation\n\t * may touch, i.e. remove multiple elements in the collection\n\t * at a time.\n\t *\n\t * @param {Array<Object>} [collection]\n\t * @param {Function} removeFn\n\t *\n\t * @return {Array<Object>} the cleared collection\n\t */\n\tfunction saveClear(collection, removeFn) {\n\n\t  if (typeof removeFn !== 'function') {\n\t    throw new Error('removeFn iterator must be a function');\n\t  }\n\n\t  if (!collection) {\n\t    return;\n\t  }\n\n\t  var e;\n\n\t  while ((e = collection[0])) {\n\t    removeFn(e);\n\t  }\n\n\t  return collection;\n\t}\n\n\tvar LOW_PRIORITY$g = 250,\n\t    HIGH_PRIORITY$d = 1400;\n\n\n\t/**\n\t * A handler that makes sure labels are properly moved with\n\t * their label targets.\n\t *\n\t * @param {didi.Injector} injector\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t */\n\tfunction LabelSupport(injector, eventBus, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  var movePreview = injector.get('movePreview', false);\n\n\t  // remove labels from the collection that are being\n\t  // moved with other elements anyway\n\t  eventBus.on('shape.move.start', HIGH_PRIORITY$d, function(e) {\n\n\t    var context = e.context,\n\t        shapes = context.shapes,\n\t        validatedShapes = context.validatedShapes;\n\n\t    context.shapes = removeLabels(shapes);\n\t    context.validatedShapes = removeLabels(validatedShapes);\n\t  });\n\n\t  // add labels to visual's group\n\t  movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$g, function(e) {\n\n\t    var context = e.context,\n\t        shapes = context.shapes;\n\n\t    var labels = [];\n\n\t    forEach(shapes, function(element) {\n\n\t      forEach(element.labels, function(label) {\n\n\t        if (!label.hidden && context.shapes.indexOf(label) === -1) {\n\t          labels.push(label);\n\t        }\n\n\t        if (element.labelTarget) {\n\t          labels.push(element);\n\t        }\n\t      });\n\t    });\n\n\t    forEach(labels, function(label) {\n\t      movePreview.makeDraggable(context, label, true);\n\t    });\n\n\t  });\n\n\t  // add all labels to move closure\n\t  this.preExecuted('elements.move', HIGH_PRIORITY$d, function(e) {\n\t    var context = e.context,\n\t        closure = context.closure,\n\t        enclosedElements = closure.enclosedElements;\n\n\t    var enclosedLabels = [];\n\n\t    // find labels that are not part of\n\t    // move closure yet and add them\n\t    forEach(enclosedElements, function(element) {\n\t      forEach(element.labels, function(label) {\n\n\t        if (!enclosedElements[label.id]) {\n\t          enclosedLabels.push(label);\n\t        }\n\t      });\n\t    });\n\n\t    closure.addAll(enclosedLabels);\n\t  });\n\n\n\t  this.preExecute([\n\t    'connection.delete',\n\t    'shape.delete'\n\t  ], function(e) {\n\n\t    var context = e.context,\n\t        element = context.connection || context.shape;\n\n\t    saveClear(element.labels, function(label) {\n\t      modeling.removeShape(label, { nested: true });\n\t    });\n\t  });\n\n\n\t  this.execute('shape.delete', function(e) {\n\n\t    var context = e.context,\n\t        shape = context.shape,\n\t        labelTarget = shape.labelTarget;\n\n\t    // unset labelTarget\n\t    if (labelTarget) {\n\t      context.labelTargetIndex = indexOf$1(labelTarget.labels, shape);\n\t      context.labelTarget = labelTarget;\n\n\t      shape.labelTarget = null;\n\t    }\n\t  });\n\n\t  this.revert('shape.delete', function(e) {\n\n\t    var context = e.context,\n\t        shape = context.shape,\n\t        labelTarget = context.labelTarget,\n\t        labelTargetIndex = context.labelTargetIndex;\n\n\t    // restore labelTarget\n\t    if (labelTarget) {\n\t      add$1(labelTarget.labels, shape, labelTargetIndex);\n\n\t      shape.labelTarget = labelTarget;\n\t    }\n\t  });\n\n\t}\n\n\tinherits_browser(LabelSupport, CommandInterceptor);\n\n\tLabelSupport.$inject = [\n\t  'injector',\n\t  'eventBus',\n\t  'modeling'\n\t];\n\n\n\t/**\n\t * Return a filtered list of elements that do not\n\t * contain attached elements with hosts being part\n\t * of the selection.\n\t *\n\t * @param  {Array<djs.model.Base>} elements\n\t *\n\t * @return {Array<djs.model.Base>} filtered\n\t */\n\tfunction removeLabels(elements) {\n\n\t  return filter(elements, function(element) {\n\n\t    // filter out labels that are move together\n\t    // with their label targets\n\t    return elements.indexOf(element.labelTarget) === -1;\n\t  });\n\t}\n\n\tvar LabelSupportModule = {\n\t  __init__: [ 'labelSupport'],\n\t  labelSupport: [ 'type', LabelSupport ]\n\t};\n\n\tvar LOW_PRIORITY$h = 251,\n\t    HIGH_PRIORITY$e = 1401;\n\n\tvar MARKER_ATTACH$1 = 'attach-ok';\n\n\n\t/**\n\t * Adds the notion of attached elements to the modeler.\n\t *\n\t * Optionally depends on `diagram-js/lib/features/move` to render\n\t * the attached elements during move preview.\n\t *\n\t * Optionally depends on `diagram-js/lib/features/label-support`\n\t * to render attached labels during move preview.\n\t *\n\t * @param {didi.Injector} injector\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t * @param {Rules} rules\n\t * @param {Modeling} modeling\n\t */\n\tfunction AttachSupport(injector, eventBus, canvas, rules, modeling) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  var movePreview = injector.get('movePreview', false);\n\n\n\t  // remove all the attached elements from the shapes to be validated\n\t  // add all the attached shapes to the overall list of moved shapes\n\t  eventBus.on('shape.move.start', HIGH_PRIORITY$e, function(e) {\n\n\t    var context = e.context,\n\t        shapes = context.shapes,\n\t        validatedShapes = context.validatedShapes;\n\n\t    context.shapes = addAttached(shapes);\n\n\t    context.validatedShapes = removeAttached(validatedShapes);\n\t  });\n\n\t  // add attachers to the visual's group\n\t  movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$h, function(e) {\n\n\t    var context = e.context,\n\t        shapes = context.shapes,\n\t        attachers = getAttachers(shapes);\n\n\t    forEach(attachers, function(attacher) {\n\t      movePreview.makeDraggable(context, attacher, true);\n\n\t      forEach(attacher.labels, function(label) {\n\t        movePreview.makeDraggable(context, label, true);\n\t      });\n\t    });\n\t  });\n\n\t  // add attach-ok marker to current host\n\t  movePreview && eventBus.on('shape.move.start', function(event) {\n\t    var context = event.context,\n\t        shapes = context.shapes;\n\n\t    if (shapes.length !== 1) {\n\t      return;\n\t    }\n\n\t    var shape = shapes[0];\n\n\t    var host = shape.host;\n\n\t    if (host) {\n\t      canvas.addMarker(host, MARKER_ATTACH$1);\n\n\t      eventBus.once([\n\t        'shape.move.out',\n\t        'shape.move.cleanup'\n\t      ], function() {\n\t        canvas.removeMarker(host, MARKER_ATTACH$1);\n\t      });\n\t    }\n\t  });\n\n\t  // add all attachers to move closure\n\t  this.preExecuted('elements.move', HIGH_PRIORITY$e, function(e) {\n\t    var context = e.context,\n\t        closure = context.closure,\n\t        shapes = context.shapes,\n\t        attachers = getAttachers(shapes);\n\n\t    forEach(attachers, function(attacher) {\n\t      closure.add(attacher, closure.topLevel[attacher.host.id]);\n\t    });\n\t  });\n\n\t  // perform the attaching after shapes are done moving\n\t  this.postExecuted('elements.move', function(e) {\n\n\t    var context = e.context,\n\t        shapes = context.shapes,\n\t        newHost = context.newHost,\n\t        attachers;\n\n\t    // only single elements can be attached\n\t    // multiply elements can be detached\n\t    if (newHost && shapes.length !== 1) {\n\t      return;\n\t    }\n\n\t    if (newHost) {\n\t      attachers = shapes;\n\t    } else {\n\n\t      // find attachers moved without host\n\t      attachers = filter(shapes, function(shape) {\n\t        var host = shape.host;\n\n\t        return isAttacher$1(shape) && !includes$2(shapes, host);\n\t      });\n\t    }\n\n\t    forEach(attachers, function(attacher) {\n\t      modeling.updateAttachment(attacher, newHost);\n\t    });\n\t  });\n\n\t  // ensure invalid attachment connections are removed\n\t  this.postExecuted('elements.move', function(e) {\n\n\t    var shapes = e.context.shapes;\n\n\t    forEach(shapes, function(shape) {\n\n\t      forEach(shape.attachers, function(attacher) {\n\n\t        // remove invalid outgoing connections\n\t        forEach(attacher.outgoing.slice(), function(connection) {\n\t          var allowed = rules.allowed('connection.reconnect', {\n\t            connection: connection,\n\t            source: connection.source,\n\t            target: connection.target\n\t          });\n\n\t          if (!allowed) {\n\t            modeling.removeConnection(connection);\n\t          }\n\t        });\n\n\t        // remove invalid incoming connections\n\t        forEach(attacher.incoming.slice(), function(connection) {\n\t          var allowed = rules.allowed('connection.reconnect', {\n\t            connection: connection,\n\t            source: connection.source,\n\t            target: connection.target\n\t          });\n\n\t          if (!allowed) {\n\t            modeling.removeConnection(connection);\n\t          }\n\t        });\n\t      });\n\t    });\n\t  });\n\n\t  this.postExecute('shape.create', function(e) {\n\t    var context = e.context,\n\t        shape = context.shape,\n\t        host = context.host;\n\n\t    if (host) {\n\t      modeling.updateAttachment(shape, host);\n\t    }\n\t  });\n\n\t  // update attachments if the host is replaced\n\t  this.postExecute('shape.replace', function(e) {\n\n\t    var context = e.context,\n\t        oldShape = context.oldShape,\n\t        newShape = context.newShape;\n\n\t    // move the attachers to the new host\n\t    saveClear(oldShape.attachers, function(attacher) {\n\t      var allowed = rules.allowed('elements.move', {\n\t        target: newShape,\n\t        shapes: [attacher]\n\t      });\n\n\t      if (allowed === 'attach') {\n\t        modeling.updateAttachment(attacher, newShape);\n\t      } else {\n\t        modeling.removeShape(attacher);\n\t      }\n\t    });\n\n\t    // move attachers if new host has different size\n\t    if (newShape.attachers.length) {\n\n\t      forEach(newShape.attachers, function(attacher) {\n\t        var delta = getNewAttachShapeDelta(attacher, oldShape, newShape);\n\t        modeling.moveShape(attacher, delta, attacher.parent);\n\t      });\n\t    }\n\n\t  });\n\n\t  // move shape on host resize\n\t  this.postExecute('shape.resize', function(event) {\n\t    var context = event.context,\n\t        shape = context.shape,\n\t        oldBounds = context.oldBounds,\n\t        newBounds = context.newBounds,\n\t        attachers = shape.attachers,\n\t        hints = context.hints || {};\n\n\t    if (hints.attachSupport === false) {\n\t      return;\n\t    }\n\n\t    forEach(attachers, function(attacher) {\n\t      var delta = getNewAttachShapeDelta(attacher, oldBounds, newBounds);\n\n\t      modeling.moveShape(attacher, delta, attacher.parent);\n\n\t      forEach(attacher.labels, function(label) {\n\t        modeling.moveShape(label, delta, label.parent);\n\t      });\n\t    });\n\t  });\n\n\t  // remove attachments\n\t  this.preExecute('shape.delete', function(event) {\n\n\t    var shape = event.context.shape;\n\n\t    saveClear(shape.attachers, function(attacher) {\n\t      modeling.removeShape(attacher);\n\t    });\n\n\t    if (shape.host) {\n\t      modeling.updateAttachment(shape, null);\n\t    }\n\t  });\n\t}\n\n\tinherits_browser(AttachSupport, CommandInterceptor);\n\n\tAttachSupport.$inject = [\n\t  'injector',\n\t  'eventBus',\n\t  'canvas',\n\t  'rules',\n\t  'modeling'\n\t];\n\n\n\t/**\n\t * Return attachers of the given shapes\n\t *\n\t * @param {Array<djs.model.Base>} shapes\n\t * @return {Array<djs.model.Base>}\n\t */\n\tfunction getAttachers(shapes) {\n\t  return flatten(map(shapes, function(s) {\n\t    return s.attachers || [];\n\t  }));\n\t}\n\n\t/**\n\t * Return a combined list of elements and\n\t * attachers.\n\t *\n\t * @param {Array<djs.model.Base>} elements\n\t * @return {Array<djs.model.Base>} filtered\n\t */\n\tfunction addAttached(elements) {\n\t  var attachers = getAttachers(elements);\n\n\t  return unionBy('id', elements, attachers);\n\t}\n\n\t/**\n\t * Return a filtered list of elements that do not\n\t * contain attached elements with hosts being part\n\t * of the selection.\n\t *\n\t * @param  {Array<djs.model.Base>} elements\n\t *\n\t * @return {Array<djs.model.Base>} filtered\n\t */\n\tfunction removeAttached(elements) {\n\n\t  var ids = groupBy(elements, 'id');\n\n\t  return filter(elements, function(element) {\n\t    while (element) {\n\n\t      // host in selection\n\t      if (element.host && ids[element.host.id]) {\n\t        return false;\n\t      }\n\n\t      element = element.parent;\n\t    }\n\n\t    return true;\n\t  });\n\t}\n\n\tfunction isAttacher$1(shape) {\n\t  return !!shape.host;\n\t}\n\n\tfunction includes$2(array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\tvar AttachSupportModule = {\n\t  __depends__: [\n\t    RulesModule\n\t  ],\n\t  __init__: [ 'attachSupport' ],\n\t  attachSupport: [ 'type', AttachSupport ]\n\t};\n\n\tvar LOW_PRIORITY$i = 250;\n\n\t/**\n\t * The tool manager acts as middle-man between the available tool's and the Palette,\n\t * it takes care of making sure that the correct active state is set.\n\t *\n\t * @param  {Object}    eventBus\n\t * @param  {Object}    dragging\n\t */\n\tfunction ToolManager(eventBus, dragging) {\n\t  this._eventBus = eventBus;\n\t  this._dragging = dragging;\n\n\t  this._tools = [];\n\t  this._active = null;\n\t}\n\n\tToolManager.$inject = [ 'eventBus', 'dragging' ];\n\n\tToolManager.prototype.registerTool = function(name, events) {\n\t  var tools = this._tools;\n\n\t  if (!events) {\n\t    throw new Error('A tool has to be registered with it\\'s \"events\"');\n\t  }\n\n\t  tools.push(name);\n\n\t  this.bindEvents(name, events);\n\t};\n\n\tToolManager.prototype.isActive = function(tool) {\n\t  return tool && this._active === tool;\n\t};\n\n\tToolManager.prototype.length = function(tool) {\n\t  return this._tools.length;\n\t};\n\n\tToolManager.prototype.setActive = function(tool) {\n\t  var eventBus = this._eventBus;\n\n\t  if (this._active !== tool) {\n\t    this._active = tool;\n\n\t    eventBus.fire('tool-manager.update', { tool: tool });\n\t  }\n\t};\n\n\tToolManager.prototype.bindEvents = function(name, events) {\n\t  var eventBus = this._eventBus,\n\t      dragging = this._dragging;\n\n\t  var eventsToRegister = [];\n\n\t  eventBus.on(events.tool + '.init', function(event) {\n\t    var context = event.context;\n\n\t    // Active tools that want to reactivate themselves must do this explicitly\n\t    if (!context.reactivate && this.isActive(name)) {\n\t      this.setActive(null);\n\n\t      dragging.cancel();\n\t      return;\n\t    }\n\n\t    this.setActive(name);\n\n\t  }, this);\n\n\t  // Todo[ricardo]: add test cases\n\t  forEach(events, function(event) {\n\t    eventsToRegister.push(event + '.ended');\n\t    eventsToRegister.push(event + '.canceled');\n\t  });\n\n\t  eventBus.on(eventsToRegister, LOW_PRIORITY$i, function(event) {\n\t    var originalEvent = event.originalEvent;\n\n\t    // We defer the de-activation of the tool to the .activate phase,\n\t    // so we're able to check if we want to toggle off the current\n\t    // active tool or switch to a new one\n\t    if (!this._active) {\n\t      return;\n\t    }\n\n\t    if (originalEvent && closest(originalEvent.target, '.group[data-group=\"tools\"]')) {\n\t      return;\n\t    }\n\n\t    this.setActive(null);\n\t  }, this);\n\t};\n\n\tvar ToolManagerModule = {\n\t  __depends__: [\n\t    DraggingModule\n\t  ],\n\t  __init__: [ 'toolManager' ],\n\t  toolManager: [ 'type', ToolManager ]\n\t};\n\n\t/**\n\t * Return direction given axis and delta.\n\t *\n\t * @param {string} axis\n\t * @param {number} delta\n\t *\n\t * @return {string}\n\t */\n\tfunction getDirection(axis, delta) {\n\n\t  if (axis === 'x') {\n\t    if (delta > 0) {\n\t      return 'e';\n\t    }\n\n\t    if (delta < 0) {\n\t      return 'w';\n\t    }\n\t  }\n\n\t  if (axis === 'y') {\n\t    if (delta > 0) {\n\t      return 's';\n\t    }\n\n\t    if (delta < 0) {\n\t      return 'n';\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\t/**\n\t * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n\t * or end is to be moved or resized.\n\t *\n\t * @param {Array<djs.model.Shape} movingShapes\n\t * @param {Array<djs.model.Shape} resizingShapes\n\t *\n\t * @returns {Array<djs.model.Connection>}\n\t */\n\tfunction getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n\t  var waypointsUpdatingConnections = [];\n\n\t  forEach(movingShapes.concat(resizingShapes), function(shape) {\n\t    var incoming = shape.incoming,\n\t        outgoing = shape.outgoing;\n\n\t    forEach(incoming.concat(outgoing), function(connection) {\n\t      var source = connection.source,\n\t          target = connection.target;\n\n\t      if (includes$3(movingShapes, source) ||\n\t        includes$3(movingShapes, target) ||\n\t        includes$3(resizingShapes, source) ||\n\t        includes$3(resizingShapes, target)) {\n\n\t        if (!includes$3(waypointsUpdatingConnections, connection)) {\n\t          waypointsUpdatingConnections.push(connection);\n\t        }\n\t      }\n\t    });\n\t  });\n\n\t  return waypointsUpdatingConnections;\n\t}\n\n\tfunction includes$3(array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\t/**\n\t * Resize bounds.\n\t *\n\t * @param {Object} bounds\n\t * @param {number} bounds.x\n\t * @param {number} bounds.y\n\t * @param {number} bounds.width\n\t * @param {number} bounds.height\n\t * @param {string} direction\n\t * @param {Object} delta\n\t * @param {number} delta.x\n\t * @param {number} delta.y\n\t *\n\t * @return {Object}\n\t */\n\tfunction resizeBounds$1(bounds, direction, delta) {\n\t  var x = bounds.x,\n\t      y = bounds.y,\n\t      width = bounds.width,\n\t      height = bounds.height,\n\t      dx = delta.x,\n\t      dy = delta.y;\n\n\t  switch (direction) {\n\t  case 'n':\n\t    return {\n\t      x: x,\n\t      y: y + dy,\n\t      width: width,\n\t      height: height - dy\n\t    };\n\t  case 's':\n\t    return {\n\t      x: x,\n\t      y: y,\n\t      width: width,\n\t      height: height + dy\n\t    };\n\t  case 'w':\n\t    return {\n\t      x: x + dx,\n\t      y: y,\n\t      width: width - dx,\n\t      height: height\n\t    };\n\t  case 'e':\n\t    return {\n\t      x: x,\n\t      y: y,\n\t      width: width + dx,\n\t      height: height\n\t    };\n\t  default:\n\t    throw new Error('unknown direction: ' + direction);\n\t  }\n\t}\n\n\tvar abs$6 = Math.abs,\n\t    round$7 = Math.round;\n\n\tvar AXIS_TO_DIMENSION = {\n\t  x: 'width',\n\t  y: 'height'\n\t};\n\n\tvar CURSOR_CROSSHAIR = 'crosshair';\n\n\tvar DIRECTION_TO_TRBL = {\n\t  n: 'top',\n\t  w: 'left',\n\t  s: 'bottom',\n\t  e: 'right'\n\t};\n\n\tvar HIGH_PRIORITY$f = 1500;\n\n\tvar DIRECTION_TO_OPPOSITE = {\n\t  n: 's',\n\t  w: 'e',\n\t  s: 'n',\n\t  e: 'w'\n\t};\n\n\tvar PADDING = 20;\n\n\n\t/**\n\t * Add or remove space by moving and resizing elements.\n\t *\n\t * @param {Canvas} canvas\n\t * @param {Dragging} dragging\n\t * @param {EventBus} eventBus\n\t * @param {Modeling} modeling\n\t * @param {Rules} rules\n\t * @param {toolManager} toolManager\n\t */\n\tfunction SpaceTool(canvas, dragging, eventBus, modeling, rules, toolManager) {\n\t  this._canvas = canvas;\n\t  this._dragging = dragging;\n\t  this._eventBus = eventBus;\n\t  this._modeling = modeling;\n\t  this._rules = rules;\n\t  this._toolManager = toolManager;\n\n\t  var self = this;\n\n\t  toolManager.registerTool('space', {\n\t    tool: 'spaceTool.selection',\n\t    dragging: 'spaceTool'\n\t  });\n\n\t  eventBus.on('spaceTool.selection.end', function(event) {\n\t    eventBus.once('spaceTool.selection.ended', function() {\n\t      self.activateMakeSpace(event.originalEvent);\n\t    });\n\t  });\n\n\t  eventBus.on('spaceTool.move', HIGH_PRIORITY$f , function(event) {\n\t    var context = event.context,\n\t        initialized = context.initialized;\n\n\t    if (!initialized) {\n\t      initialized = context.initialized = self.init(event, context);\n\t    }\n\n\t    if (initialized) {\n\t      ensureConstraints$2(event);\n\t    }\n\t  });\n\n\t  eventBus.on('spaceTool.end', function(event) {\n\t    var context = event.context,\n\t        axis = context.axis,\n\t        direction = context.direction,\n\t        movingShapes = context.movingShapes,\n\t        resizingShapes = context.resizingShapes,\n\t        start = context.start;\n\n\t    if (!context.initialized) {\n\t      return;\n\t    }\n\n\t    ensureConstraints$2(event);\n\n\t    var delta = {\n\t      x: 0,\n\t      y: 0\n\t    };\n\n\t    delta[ axis ] = round$7(event[ 'd' + axis ]);\n\n\t    self.makeSpace(movingShapes, resizingShapes, delta, direction, start);\n\n\t    eventBus.once('spaceTool.ended', function(event) {\n\n\t      // activate space tool selection after make space\n\t      self.activateSelection(event.originalEvent, true, true);\n\t    });\n\t  });\n\t}\n\n\tSpaceTool.$inject = [\n\t  'canvas',\n\t  'dragging',\n\t  'eventBus',\n\t  'modeling',\n\t  'rules',\n\t  'toolManager'\n\t];\n\n\t/**\n\t * Activate space tool selection.\n\t *\n\t * @param {Object} event\n\t * @param {boolean} autoActivate\n\t */\n\tSpaceTool.prototype.activateSelection = function(event, autoActivate, reactivate) {\n\t  this._dragging.init(event, 'spaceTool.selection', {\n\t    autoActivate: autoActivate,\n\t    cursor: CURSOR_CROSSHAIR,\n\t    data: {\n\t      context: {\n\t        reactivate: reactivate\n\t      }\n\t    },\n\t    trapClick: false\n\t  });\n\t};\n\n\t/**\n\t * Activate space tool make space.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\tSpaceTool.prototype.activateMakeSpace = function(event) {\n\t  this._dragging.init(event, 'spaceTool', {\n\t    autoActivate: true,\n\t    cursor: CURSOR_CROSSHAIR,\n\t    data: {\n\t      context: {}\n\t    }\n\t  });\n\t};\n\n\t/**\n\t * Make space.\n\t *\n\t * @param  {Array<djs.model.Shape>} movingShapes\n\t * @param  {Array<djs.model.Shape>} resizingShapes\n\t * @param  {Object} delta\n\t * @param  {number} delta.x\n\t * @param  {number} delta.y\n\t * @param  {string} direction\n\t * @param  {number} start\n\t */\n\tSpaceTool.prototype.makeSpace = function(movingShapes, resizingShapes, delta, direction, start) {\n\t  return this._modeling.createSpace(movingShapes, resizingShapes, delta, direction, start);\n\t};\n\n\t/**\n\t * Initialize make space and return true if that was successful.\n\t *\n\t * @param {Object} event\n\t * @param {Object} context\n\t *\n\t * @return {boolean}\n\t */\n\tSpaceTool.prototype.init = function(event, context) {\n\t  var axis = abs$6(event.dx) > abs$6(event.dy) ? 'x' : 'y',\n\t      delta = event[ 'd' + axis ],\n\t      start = event[ axis ] - delta;\n\n\t  if (abs$6(delta) < 5) {\n\t    return false;\n\t  }\n\n\t  // invert delta to remove space when moving left\n\t  if (delta < 0) {\n\t    delta *= -1;\n\t  }\n\n\t  // invert delta to add/remove space when removing/adding space if modifier key is pressed\n\t  if (hasPrimaryModifier(event)) {\n\t    delta *= -1;\n\t  }\n\n\t  var direction = getDirection(axis, delta);\n\n\t  var root = this._canvas.getRootElement();\n\n\t  var children = selfAndAllChildren(root, true);\n\n\t  var elements = this.calculateAdjustments(children, axis, delta, start);\n\n\t  var minDimensions = this._eventBus.fire('spaceTool.getMinDimensions', {\n\t    axis: axis,\n\t    direction: direction,\n\t    shapes: elements.resizingShapes,\n\t    start: start\n\t  });\n\n\t  var spaceToolConstraints = getSpaceToolConstraints(elements, axis, direction, start, minDimensions);\n\n\t  assign(\n\t    context,\n\t    elements,\n\t    {\n\t      axis: axis,\n\t      direction: direction,\n\t      spaceToolConstraints: spaceToolConstraints,\n\t      start: start\n\t    }\n\t  );\n\n\t  set$1('resize-' + (axis === 'x' ? 'ew' : 'ns'));\n\n\t  return true;\n\t};\n\n\t/**\n\t * Get elements to be moved and resized.\n\t *\n\t * @param  {Array<djs.model.Shape>} elements\n\t * @param  {string} axis\n\t * @param  {number} delta\n\t * @param  {number} start\n\t *\n\t * @return {Object}\n\t */\n\tSpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {\n\t  var rules = this._rules;\n\n\t  var movingShapes = [],\n\t      resizingShapes = [];\n\n\t  forEach(elements, function(element) {\n\t    if (!element.parent || isConnection$4(element)) {\n\t      return;\n\t    }\n\n\t    var shapeStart = element[ axis ],\n\t        shapeEnd = shapeStart + element[ AXIS_TO_DIMENSION[ axis ] ];\n\n\t    // shape to be moved\n\t    if ((delta > 0 && shapeStart > start) || (delta < 0 && shapeEnd < start)) {\n\t      return movingShapes.push(element);\n\t    }\n\n\t    // shape to be resized\n\t    if (shapeStart < start &&\n\t      shapeEnd > start &&\n\t      rules.allowed('shape.resize', { shape: element })\n\t    ) {\n\n\t      return resizingShapes.push(element);\n\t    }\n\t  });\n\n\t  return {\n\t    movingShapes: movingShapes,\n\t    resizingShapes: resizingShapes\n\t  };\n\t};\n\n\tSpaceTool.prototype.toggle = function() {\n\t  if (this.isActive()) {\n\t    this._dragging.cancel();\n\t  } else {\n\t    this.activateSelection();\n\t  }\n\t};\n\n\tSpaceTool.prototype.isActive = function() {\n\t  var context = this._dragging.context();\n\n\t  return context && /^spaceTool/.test(context.prefix);\n\t};\n\n\t// helpers //////////\n\n\tfunction addPadding$1(trbl) {\n\t  return {\n\t    top: trbl.top - PADDING,\n\t    right: trbl.right + PADDING,\n\t    bottom: trbl.bottom + PADDING,\n\t    left: trbl.left - PADDING\n\t  };\n\t}\n\n\tfunction ensureConstraints$2(event) {\n\t  var context = event.context,\n\t      spaceToolConstraints = context.spaceToolConstraints;\n\n\t  if (!spaceToolConstraints) {\n\t    return;\n\t  }\n\n\t  var x, y;\n\n\t  if (isNumber(spaceToolConstraints.left)) {\n\t    x = Math.max(event.x, spaceToolConstraints.left);\n\n\t    event.dx = event.dx + x - event.x;\n\t    event.x = x;\n\t  }\n\n\t  if (isNumber(spaceToolConstraints.right)) {\n\t    x = Math.min(event.x, spaceToolConstraints.right);\n\n\t    event.dx = event.dx + x - event.x;\n\t    event.x = x;\n\t  }\n\n\t  if (isNumber(spaceToolConstraints.top)) {\n\t    y = Math.max(event.y, spaceToolConstraints.top);\n\n\t    event.dy = event.dy + y - event.y;\n\t    event.y = y;\n\t  }\n\n\t  if (isNumber(spaceToolConstraints.bottom)) {\n\t    y = Math.min(event.y, spaceToolConstraints.bottom);\n\n\t    event.dy = event.dy + y - event.y;\n\t    event.y = y;\n\t  }\n\t}\n\n\tfunction getSpaceToolConstraints(elements, axis, direction, start, minDimensions) {\n\t  var movingShapes = elements.movingShapes,\n\t      resizingShapes = elements.resizingShapes;\n\n\t  if (!resizingShapes.length) {\n\t    return;\n\t  }\n\n\t  var spaceToolConstraints = {},\n\t      min,\n\t      max;\n\n\t  forEach(resizingShapes, function(resizingShape) {\n\t    var resizingShapeBBox = asTRBL(resizingShape);\n\n\t    // find children that are not moving or resizing\n\t    var nonMovingResizingChildren = filter(resizingShape.children, function(child) {\n\t      return !isConnection$4(child) &&\n\t        !isLabel$4(child) &&\n\t        !includes$4(movingShapes, child) &&\n\t        !includes$4(resizingShapes, child);\n\t    });\n\n\t    // find children that are moving\n\t    var movingChildren = filter(resizingShape.children, function(child) {\n\t      return !isConnection$4(child) && !isLabel$4(child) && includes$4(movingShapes, child);\n\t    });\n\n\t    var minOrMax,\n\t        nonMovingResizingChildrenBBox,\n\t        movingChildrenBBox;\n\n\t    if (nonMovingResizingChildren.length) {\n\t      nonMovingResizingChildrenBBox = addPadding$1(asTRBL(getBBox(nonMovingResizingChildren)));\n\n\t      minOrMax = start -\n\t        resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] +\n\t        nonMovingResizingChildrenBBox[ DIRECTION_TO_TRBL[ direction ] ];\n\n\t      if (direction === 'n') {\n\t        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 'w') {\n\t        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 's') {\n\t        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      } else if (direction === 'e') {\n\t        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      }\n\t    }\n\n\t    if (movingChildren.length) {\n\t      movingChildrenBBox = addPadding$1(asTRBL(getBBox(movingChildren)));\n\n\t      minOrMax = start -\n\t        movingChildrenBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] +\n\t        resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ];\n\n\t      if (direction === 'n') {\n\t        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 'w') {\n\t        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 's') {\n\t        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      } else if (direction === 'e') {\n\t        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      }\n\t    }\n\n\t    var resizingShapeMinDimensions = minDimensions && minDimensions[ resizingShape.id ];\n\n\t    if (resizingShapeMinDimensions) {\n\t      if (direction === 'n') {\n\t        minOrMax = start +\n\t          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -\n\t          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];\n\n\t        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 'w') {\n\t        minOrMax = start +\n\t          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -\n\t          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];\n\n\t        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;\n\t      } else if (direction === 's') {\n\t        minOrMax = start -\n\t          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +\n\t          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];\n\n\t        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      } else if (direction === 'e') {\n\t        minOrMax = start -\n\t          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +\n\t          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];\n\n\t        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;\n\t      }\n\t    }\n\t  });\n\n\t  return spaceToolConstraints;\n\t}\n\n\tfunction includes$4(array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\tfunction isConnection$4(element) {\n\t  return !!element.waypoints;\n\t}\n\n\tfunction isLabel$4(element) {\n\t  return !!element.labelTarget;\n\t}\n\n\tvar MARKER_DRAGGING = 'djs-dragging',\n\t    MARKER_RESIZING$1 = 'djs-resizing';\n\n\tvar LOW_PRIORITY$j = 250;\n\n\tvar max$6 = Math.max;\n\n\n\t/**\n\t * Provides previews for selecting/moving/resizing shapes when creating/removing space.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementRegistry} elementRegistry\n\t * @param {Canvas} canvas\n\t * @param {Styles} styles\n\t */\n\tfunction SpaceToolPreview(\n\t    eventBus, elementRegistry, canvas,\n\t    styles, previewSupport) {\n\n\t  function addPreviewGfx(collection, dragGroup) {\n\t    forEach(collection, function(element) {\n\t      previewSupport.addDragger(element, dragGroup);\n\n\t      canvas.addMarker(element, MARKER_DRAGGING);\n\t    });\n\t  }\n\n\t  // add crosshair\n\t  eventBus.on('spaceTool.selection.start', function(event) {\n\t    var space = canvas.getLayer('space'),\n\t        context = event.context;\n\n\t    var orientation = {\n\t      x: 'M 0,-10000 L 0,10000',\n\t      y: 'M -10000,0 L 10000,0'\n\t    };\n\n\t    var crosshairGroup = create('g');\n\t    attr$1(crosshairGroup, styles.cls('djs-crosshair-group', [ 'no-events' ]));\n\n\t    append(space, crosshairGroup);\n\n\t    // horizontal path\n\t    var pathX = create('path');\n\t    attr$1(pathX, 'd', orientation.x);\n\t    classes$1(pathX).add('djs-crosshair');\n\n\t    append(crosshairGroup, pathX);\n\n\t    // vertical path\n\t    var pathY = create('path');\n\t    attr$1(pathY, 'd', orientation.y);\n\t    classes$1(pathY).add('djs-crosshair');\n\n\t    append(crosshairGroup, pathY);\n\n\t    context.crosshairGroup = crosshairGroup;\n\t  });\n\n\t  // update crosshair\n\t  eventBus.on('spaceTool.selection.move', function(event) {\n\t    var crosshairGroup = event.context.crosshairGroup;\n\n\t    translate(crosshairGroup, event.x, event.y);\n\t  });\n\n\t  // remove crosshair\n\t  eventBus.on('spaceTool.selection.cleanup', function(event) {\n\t    var context = event.context,\n\t        crosshairGroup = context.crosshairGroup;\n\n\t    if (crosshairGroup) {\n\t      remove$1(crosshairGroup);\n\t    }\n\t  });\n\n\t  // add and update move/resize previews\n\t  eventBus.on('spaceTool.move', LOW_PRIORITY$j, function(event) {\n\n\t    var context = event.context,\n\t        line = context.line,\n\t        axis = context.axis,\n\t        movingShapes = context.movingShapes,\n\t        resizingShapes = context.resizingShapes;\n\n\t    if (!context.initialized) {\n\t      return;\n\t    }\n\n\t    if (!context.dragGroup) {\n\t      var spaceLayer = canvas.getLayer('space');\n\n\t      line = create('path');\n\t      attr$1(line, 'd', 'M0,0 L0,0');\n\t      classes$1(line).add('djs-crosshair');\n\n\t      append(spaceLayer, line);\n\n\t      context.line = line;\n\n\t      var dragGroup = create('g');\n\t      attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));\n\n\t      append(canvas.getDefaultLayer(), dragGroup);\n\n\t      // shapes\n\t      addPreviewGfx(movingShapes, dragGroup);\n\n\t      // connections\n\t      var movingConnections = context.movingConnections = elementRegistry.filter(function(element) {\n\t        var sourceIsMoving = false;\n\n\t        forEach(movingShapes, function(shape) {\n\t          forEach(shape.outgoing, function(connection) {\n\t            if (element === connection) {\n\t              sourceIsMoving = true;\n\t            }\n\t          });\n\t        });\n\n\t        var targetIsMoving = false;\n\n\t        forEach(movingShapes, function(shape) {\n\t          forEach(shape.incoming, function(connection) {\n\t            if (element === connection) {\n\t              targetIsMoving = true;\n\t            }\n\t          });\n\t        });\n\n\t        var sourceIsResizing = false;\n\n\t        forEach(resizingShapes, function(shape) {\n\t          forEach(shape.outgoing, function(connection) {\n\t            if (element === connection) {\n\t              sourceIsResizing = true;\n\t            }\n\t          });\n\t        });\n\n\t        var targetIsResizing = false;\n\n\t        forEach(resizingShapes, function(shape) {\n\t          forEach(shape.incoming, function(connection) {\n\t            if (element === connection) {\n\t              targetIsResizing = true;\n\t            }\n\t          });\n\t        });\n\n\t        return isConnection$5(element)\n\t          && (sourceIsMoving || sourceIsResizing)\n\t          && (targetIsMoving || targetIsResizing);\n\t      });\n\n\n\t      addPreviewGfx(movingConnections, dragGroup);\n\n\t      context.dragGroup = dragGroup;\n\t    }\n\n\t    if (!context.frameGroup) {\n\t      var frameGroup = create('g');\n\t      attr$1(frameGroup, styles.cls('djs-frame-group', [ 'no-events' ]));\n\n\t      append(canvas.getDefaultLayer(), frameGroup);\n\n\t      var frames = [];\n\n\t      forEach(resizingShapes, function(shape) {\n\t        var frame = previewSupport.addFrame(shape, frameGroup);\n\n\t        var initialBounds = frame.getBBox();\n\n\t        frames.push({\n\t          element: frame,\n\t          initialBounds: initialBounds\n\t        });\n\n\t        canvas.addMarker(shape, MARKER_RESIZING$1);\n\t      });\n\n\t      context.frameGroup = frameGroup;\n\t      context.frames = frames;\n\t    }\n\n\t    var orientation = {\n\t      x: 'M' + event.x + ', -10000 L' + event.x + ', 10000',\n\t      y: 'M -10000, ' + event.y + ' L 10000, ' + event.y\n\t    };\n\n\t    attr$1(line, { d: orientation[ axis ] });\n\n\t    var opposite = { x: 'y', y: 'x' };\n\t    var delta = { x: event.dx, y: event.dy };\n\t    delta[ opposite[ context.axis ] ] = 0;\n\n\t    // update move previews\n\t    translate(context.dragGroup, delta.x, delta.y);\n\n\t    // update resize previews\n\t    forEach(context.frames, function(frame) {\n\t      var element = frame.element,\n\t          initialBounds = frame.initialBounds,\n\t          width,\n\t          height;\n\n\t      if (context.direction === 'e') {\n\t        attr$1(element, {\n\t          width: max$6(initialBounds.width + delta.x, 5)\n\t        });\n\t      } else {\n\t        width = max$6(initialBounds.width - delta.x, 5);\n\n\t        attr$1(element, {\n\t          width: width,\n\t          x: initialBounds.x + initialBounds.width - width\n\t        });\n\t      }\n\n\t      if (context.direction === 's') {\n\t        attr$1(element, {\n\t          height: max$6(initialBounds.height + delta.y, 5)\n\t        });\n\t      } else {\n\t        height = max$6(initialBounds.height - delta.y, 5);\n\n\t        attr$1(element, {\n\t          height: height,\n\t          y: initialBounds.y + initialBounds.height - height\n\t        });\n\t      }\n\t    });\n\n\t  });\n\n\t  // remove move/resize previews\n\t  eventBus.on('spaceTool.cleanup', function(event) {\n\n\t    var context = event.context,\n\t        movingShapes = context.movingShapes,\n\t        movingConnections = context.movingConnections,\n\t        resizingShapes = context.resizingShapes,\n\t        line = context.line,\n\t        dragGroup = context.dragGroup,\n\t        frameGroup = context.frameGroup;\n\n\t    // moving shapes\n\t    forEach(movingShapes, function(shape) {\n\t      canvas.removeMarker(shape, MARKER_DRAGGING);\n\t    });\n\n\t    // moving connections\n\t    forEach(movingConnections, function(connection) {\n\t      canvas.removeMarker(connection, MARKER_DRAGGING);\n\t    });\n\n\t    if (dragGroup) {\n\t      remove$1(line);\n\t      remove$1(dragGroup);\n\t    }\n\n\t    forEach(resizingShapes, function(shape) {\n\t      canvas.removeMarker(shape, MARKER_RESIZING$1);\n\t    });\n\n\t    if (frameGroup) {\n\t      remove$1(frameGroup);\n\t    }\n\t  });\n\t}\n\n\tSpaceToolPreview.$inject = [\n\t  'eventBus',\n\t  'elementRegistry',\n\t  'canvas',\n\t  'styles',\n\t  'previewSupport'\n\t];\n\n\n\t// helpers //////////////////////\n\n\t/**\n\t * Checks if an element is a connection.\n\t */\n\tfunction isConnection$5(element) {\n\t  return element.waypoints;\n\t}\n\n\tvar SpaceToolModule = {\n\t  __init__: ['spaceToolPreview'],\n\t  __depends__: [\n\t    DraggingModule,\n\t    RulesModule,\n\t    ToolManagerModule,\n\t    PreviewSupportModule\n\t  ],\n\t  spaceTool: ['type', SpaceTool ],\n\t  spaceToolPreview: ['type', SpaceToolPreview ]\n\t};\n\n\tfunction BpmnFactory(moddle) {\n\t  this._model = moddle;\n\t}\n\n\tBpmnFactory.$inject = [ 'moddle' ];\n\n\n\tBpmnFactory.prototype._needsId = function(element) {\n\t  return isAny(element, [\n\t    'bpmn:RootElement',\n\t    'bpmn:FlowElement',\n\t    'bpmn:MessageFlow',\n\t    'bpmn:DataAssociation',\n\t    'bpmn:Artifact',\n\t    'bpmn:Participant',\n\t    'bpmn:Lane',\n\t    'bpmn:LaneSet',\n\t    'bpmn:Process',\n\t    'bpmn:Collaboration',\n\t    'bpmndi:BPMNShape',\n\t    'bpmndi:BPMNEdge',\n\t    'bpmndi:BPMNDiagram',\n\t    'bpmndi:BPMNPlane',\n\t    'bpmn:Property',\n\t    'bpmn:CategoryValue'\n\t  ]);\n\t};\n\n\tBpmnFactory.prototype._ensureId = function(element) {\n\n\t  // generate semantic ids for elements\n\t  // bpmn:SequenceFlow -> SequenceFlow_ID\n\t  var prefix;\n\n\t  if (is$1(element, 'bpmn:Activity')) {\n\t    prefix = 'Activity';\n\t  } else if (is$1(element, 'bpmn:Event')) {\n\t    prefix = 'Event';\n\t  } else if (is$1(element, 'bpmn:Gateway')) {\n\t    prefix = 'Gateway';\n\t  } else if (isAny(element, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ])) {\n\t    prefix = 'Flow';\n\t  } else {\n\t    prefix = (element.$type || '').replace(/^[^:]*:/g, '');\n\t  }\n\n\t  prefix += '_';\n\n\t  if (!element.id && this._needsId(element)) {\n\t    element.id = this._model.ids.nextPrefixed(prefix, element);\n\t  }\n\t};\n\n\n\tBpmnFactory.prototype.create = function(type, attrs) {\n\t  var element = this._model.create(type, attrs || {});\n\n\t  this._ensureId(element);\n\n\t  return element;\n\t};\n\n\n\tBpmnFactory.prototype.createDiLabel = function() {\n\t  return this.create('bpmndi:BPMNLabel', {\n\t    bounds: this.createDiBounds()\n\t  });\n\t};\n\n\n\tBpmnFactory.prototype.createDiShape = function(semantic, bounds, attrs) {\n\n\t  return this.create('bpmndi:BPMNShape', assign({\n\t    bpmnElement: semantic,\n\t    bounds: this.createDiBounds(bounds)\n\t  }, attrs));\n\t};\n\n\n\tBpmnFactory.prototype.createDiBounds = function(bounds) {\n\t  return this.create('dc:Bounds', bounds);\n\t};\n\n\n\tBpmnFactory.prototype.createDiWaypoints = function(waypoints) {\n\t  var self = this;\n\n\t  return map(waypoints, function(pos) {\n\t    return self.createDiWaypoint(pos);\n\t  });\n\t};\n\n\tBpmnFactory.prototype.createDiWaypoint = function(point) {\n\t  return this.create('dc:Point', pick(point, [ 'x', 'y' ]));\n\t};\n\n\n\tBpmnFactory.prototype.createDiEdge = function(semantic, waypoints, attrs) {\n\t  return this.create('bpmndi:BPMNEdge', assign({\n\t    bpmnElement: semantic\n\t  }, attrs));\n\t};\n\n\tBpmnFactory.prototype.createDiPlane = function(semantic) {\n\t  return this.create('bpmndi:BPMNPlane', {\n\t    bpmnElement: semantic\n\t  });\n\t};\n\n\t/**\n\t * A handler responsible for updating the underlying BPMN 2.0 XML + DI\n\t * once changes on the diagram happen\n\t */\n\tfunction BpmnUpdater(\n\t    eventBus, bpmnFactory, connectionDocking,\n\t    translate) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  this._bpmnFactory = bpmnFactory;\n\t  this._translate = translate;\n\n\t  var self = this;\n\n\n\n\t  // connection cropping //////////////////////\n\n\t  // crop connection ends during create/update\n\t  function cropConnection(e) {\n\t    var context = e.context,\n\t        hints = context.hints || {},\n\t        connection;\n\n\t    if (!context.cropped && hints.createElementsBehavior !== false) {\n\t      connection = context.connection;\n\t      connection.waypoints = connectionDocking.getCroppedWaypoints(connection);\n\t      context.cropped = true;\n\t    }\n\t  }\n\n\t  this.executed([\n\t    'connection.layout',\n\t    'connection.create'\n\t  ], cropConnection);\n\n\t  this.reverted([ 'connection.layout' ], function(e) {\n\t    delete e.context.cropped;\n\t  });\n\n\n\n\t  // BPMN + DI update //////////////////////\n\n\n\t  // update parent\n\t  function updateParent(e) {\n\t    var context = e.context;\n\n\t    self.updateParent(context.shape || context.connection, context.oldParent);\n\t  }\n\n\t  function reverseUpdateParent(e) {\n\t    var context = e.context;\n\n\t    var element = context.shape || context.connection,\n\n\t        // oldParent is the (old) new parent, because we are undoing\n\t        oldParent = context.parent || context.newParent;\n\n\t    self.updateParent(element, oldParent);\n\t  }\n\n\t  this.executed([\n\t    'shape.move',\n\t    'shape.create',\n\t    'shape.delete',\n\t    'connection.create',\n\t    'connection.move',\n\t    'connection.delete'\n\t  ], ifBpmn(updateParent));\n\n\t  this.reverted([\n\t    'shape.move',\n\t    'shape.create',\n\t    'shape.delete',\n\t    'connection.create',\n\t    'connection.move',\n\t    'connection.delete'\n\t  ], ifBpmn(reverseUpdateParent));\n\n\t  /*\n\t   * ## Updating Parent\n\t   *\n\t   * When morphing a Process into a Collaboration or vice-versa,\n\t   * make sure that both the *semantic* and *di* parent of each element\n\t   * is updated.\n\t   *\n\t   */\n\t  function updateRoot(event) {\n\t    var context = event.context,\n\t        oldRoot = context.oldRoot,\n\t        children = oldRoot.children;\n\n\t    forEach(children, function(child) {\n\t      if (is$1(child, 'bpmn:BaseElement')) {\n\t        self.updateParent(child);\n\t      }\n\t    });\n\t  }\n\n\t  this.executed([ 'canvas.updateRoot' ], updateRoot);\n\t  this.reverted([ 'canvas.updateRoot' ], updateRoot);\n\n\n\t  // update bounds\n\t  function updateBounds(e) {\n\t    var shape = e.context.shape;\n\n\t    if (!is$1(shape, 'bpmn:BaseElement')) {\n\t      return;\n\t    }\n\n\t    self.updateBounds(shape);\n\t  }\n\n\t  this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {\n\n\t    // exclude labels because they're handled separately during shape.changed\n\t    if (event.context.shape.type === 'label') {\n\t      return;\n\t    }\n\n\t    updateBounds(event);\n\t  }));\n\n\t  this.reverted([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {\n\n\t    // exclude labels because they're handled separately during shape.changed\n\t    if (event.context.shape.type === 'label') {\n\t      return;\n\t    }\n\n\t    updateBounds(event);\n\t  }));\n\n\t  // Handle labels separately. This is necessary, because the label bounds have to be updated\n\t  // every time its shape changes, not only on move, create and resize.\n\t  eventBus.on('shape.changed', function(event) {\n\t    if (event.element.type === 'label') {\n\t      updateBounds({ context: { shape: event.element } });\n\t    }\n\t  });\n\n\t  // attach / detach connection\n\t  function updateConnection(e) {\n\t    self.updateConnection(e.context);\n\t  }\n\n\t  this.executed([\n\t    'connection.create',\n\t    'connection.move',\n\t    'connection.delete',\n\t    'connection.reconnect'\n\t  ], ifBpmn(updateConnection));\n\n\t  this.reverted([\n\t    'connection.create',\n\t    'connection.move',\n\t    'connection.delete',\n\t    'connection.reconnect'\n\t  ], ifBpmn(updateConnection));\n\n\n\t  // update waypoints\n\t  function updateConnectionWaypoints(e) {\n\t    self.updateConnectionWaypoints(e.context.connection);\n\t  }\n\n\t  this.executed([\n\t    'connection.layout',\n\t    'connection.move',\n\t    'connection.updateWaypoints',\n\t  ], ifBpmn(updateConnectionWaypoints));\n\n\t  this.reverted([\n\t    'connection.layout',\n\t    'connection.move',\n\t    'connection.updateWaypoints',\n\t  ], ifBpmn(updateConnectionWaypoints));\n\n\t  // update conditional/default flows\n\t  this.executed('connection.reconnect', ifBpmn(function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        oldSource = context.oldSource,\n\t        newSource = context.newSource,\n\t        connectionBo = getBusinessObject(connection),\n\t        oldSourceBo = getBusinessObject(oldSource),\n\t        newSourceBo = getBusinessObject(newSource);\n\n\t    // remove condition from connection on reconnect to new source\n\t    // if new source can NOT have condional sequence flow\n\t    if (connectionBo.conditionExpression && !isAny(newSourceBo, [\n\t      'bpmn:Activity',\n\t      'bpmn:ExclusiveGateway',\n\t      'bpmn:InclusiveGateway'\n\t    ])) {\n\t      context.oldConditionExpression = connectionBo.conditionExpression;\n\n\t      delete connectionBo.conditionExpression;\n\t    }\n\n\t    // remove default from old source flow on reconnect to new source\n\t    // if source changed\n\t    if (oldSource !== newSource && oldSourceBo.default === connectionBo) {\n\t      context.oldDefault = oldSourceBo.default;\n\n\t      delete oldSourceBo.default;\n\t    }\n\t  }));\n\n\t  this.reverted('connection.reconnect', ifBpmn(function(event) {\n\t    var context = event.context,\n\t        connection = context.connection,\n\t        oldSource = context.oldSource,\n\t        newSource = context.newSource,\n\t        connectionBo = getBusinessObject(connection),\n\t        oldSourceBo = getBusinessObject(oldSource),\n\t        newSourceBo = getBusinessObject(newSource);\n\n\t    // add condition to connection on revert reconnect to new source\n\t    if (context.oldConditionExpression) {\n\t      connectionBo.conditionExpression = context.oldConditionExpression;\n\t    }\n\n\t    // add default to old source on revert reconnect to new source\n\t    if (context.oldDefault) {\n\t      oldSourceBo.default = context.oldDefault;\n\n\t      delete newSourceBo.default;\n\t    }\n\t  }));\n\n\t  // update attachments\n\t  function updateAttachment(e) {\n\t    self.updateAttachment(e.context);\n\t  }\n\n\t  this.executed([ 'element.updateAttachment' ], ifBpmn(updateAttachment));\n\t  this.reverted([ 'element.updateAttachment' ], ifBpmn(updateAttachment));\n\t}\n\n\tinherits_browser(BpmnUpdater, CommandInterceptor);\n\n\tBpmnUpdater.$inject = [\n\t  'eventBus',\n\t  'bpmnFactory',\n\t  'connectionDocking',\n\t  'translate'\n\t];\n\n\n\t// implementation //////////////////////\n\n\tBpmnUpdater.prototype.updateAttachment = function(context) {\n\n\t  var shape = context.shape,\n\t      businessObject = shape.businessObject,\n\t      host = shape.host;\n\n\t  businessObject.attachedToRef = host && host.businessObject;\n\t};\n\n\tBpmnUpdater.prototype.updateParent = function(element, oldParent) {\n\n\t  // do not update BPMN 2.0 label parent\n\t  if (element instanceof Label) {\n\t    return;\n\t  }\n\n\t  // data stores in collaborations are handled separately by DataStoreBehavior\n\t  if (is$1(element, 'bpmn:DataStoreReference') &&\n\t      element.parent &&\n\t      is$1(element.parent, 'bpmn:Collaboration')) {\n\t    return;\n\t  }\n\n\t  var parentShape = element.parent;\n\n\t  var businessObject = element.businessObject,\n\t      parentBusinessObject = parentShape && parentShape.businessObject,\n\t      parentDi = parentBusinessObject && parentBusinessObject.di;\n\n\t  if (is$1(element, 'bpmn:FlowNode')) {\n\t    this.updateFlowNodeRefs(businessObject, parentBusinessObject, oldParent && oldParent.businessObject);\n\t  }\n\n\t  if (is$1(element, 'bpmn:DataOutputAssociation')) {\n\t    if (element.source) {\n\t      parentBusinessObject = element.source.businessObject;\n\t    } else {\n\t      parentBusinessObject = null;\n\t    }\n\t  }\n\n\t  if (is$1(element, 'bpmn:DataInputAssociation')) {\n\t    if (element.target) {\n\t      parentBusinessObject = element.target.businessObject;\n\t    } else {\n\t      parentBusinessObject = null;\n\t    }\n\t  }\n\n\t  this.updateSemanticParent(businessObject, parentBusinessObject);\n\n\t  if (is$1(element, 'bpmn:DataObjectReference') && businessObject.dataObjectRef) {\n\t    this.updateSemanticParent(businessObject.dataObjectRef, parentBusinessObject);\n\t  }\n\n\t  this.updateDiParent(businessObject.di, parentDi);\n\t};\n\n\n\tBpmnUpdater.prototype.updateBounds = function(shape) {\n\n\t  var di = shape.businessObject.di;\n\n\t  var target = (shape instanceof Label) ? this._getLabel(di) : di;\n\n\t  var bounds = target.bounds;\n\n\t  if (!bounds) {\n\t    bounds = this._bpmnFactory.createDiBounds();\n\t    target.set('bounds', bounds);\n\t  }\n\n\t  assign(bounds, {\n\t    x: shape.x,\n\t    y: shape.y,\n\t    width: shape.width,\n\t    height: shape.height\n\t  });\n\t};\n\n\tBpmnUpdater.prototype.updateFlowNodeRefs = function(businessObject, newContainment, oldContainment) {\n\n\t  if (oldContainment === newContainment) {\n\t    return;\n\t  }\n\n\t  var oldRefs, newRefs;\n\n\t  if (is$1 (oldContainment, 'bpmn:Lane')) {\n\t    oldRefs = oldContainment.get('flowNodeRef');\n\t    remove$2(oldRefs, businessObject);\n\t  }\n\n\t  if (is$1(newContainment, 'bpmn:Lane')) {\n\t    newRefs = newContainment.get('flowNodeRef');\n\t    add$1(newRefs, businessObject);\n\t  }\n\t};\n\n\n\t// update existing sourceElement and targetElement di information\n\tBpmnUpdater.prototype.updateDiConnection = function(di, newSource, newTarget) {\n\n\t  if (di.sourceElement && di.sourceElement.bpmnElement !== newSource) {\n\t    di.sourceElement = newSource && newSource.di;\n\t  }\n\n\t  if (di.targetElement && di.targetElement.bpmnElement !== newTarget) {\n\t    di.targetElement = newTarget && newTarget.di;\n\t  }\n\n\t};\n\n\n\tBpmnUpdater.prototype.updateDiParent = function(di, parentDi) {\n\n\t  if (parentDi && !is$1(parentDi, 'bpmndi:BPMNPlane')) {\n\t    parentDi = parentDi.$parent;\n\t  }\n\n\t  if (di.$parent === parentDi) {\n\t    return;\n\t  }\n\n\t  var planeElements = (parentDi || di.$parent).get('planeElement');\n\n\t  if (parentDi) {\n\t    planeElements.push(di);\n\t    di.$parent = parentDi;\n\t  } else {\n\t    remove$2(planeElements, di);\n\t    di.$parent = null;\n\t  }\n\t};\n\n\tfunction getDefinitions(element) {\n\t  while (element && !is$1(element, 'bpmn:Definitions')) {\n\t    element = element.$parent;\n\t  }\n\n\t  return element;\n\t}\n\n\tBpmnUpdater.prototype.getLaneSet = function(container) {\n\n\t  var laneSet, laneSets;\n\n\t  // bpmn:Lane\n\t  if (is$1(container, 'bpmn:Lane')) {\n\t    laneSet = container.childLaneSet;\n\n\t    if (!laneSet) {\n\t      laneSet = this._bpmnFactory.create('bpmn:LaneSet');\n\t      container.childLaneSet = laneSet;\n\t      laneSet.$parent = container;\n\t    }\n\n\t    return laneSet;\n\t  }\n\n\t  // bpmn:Participant\n\t  if (is$1(container, 'bpmn:Participant')) {\n\t    container = container.processRef;\n\t  }\n\n\t  // bpmn:FlowElementsContainer\n\t  laneSets = container.get('laneSets');\n\t  laneSet = laneSets[0];\n\n\t  if (!laneSet) {\n\t    laneSet = this._bpmnFactory.create('bpmn:LaneSet');\n\t    laneSet.$parent = container;\n\t    laneSets.push(laneSet);\n\t  }\n\n\t  return laneSet;\n\t};\n\n\tBpmnUpdater.prototype.updateSemanticParent = function(businessObject, newParent, visualParent) {\n\n\t  var containment,\n\t      translate = this._translate;\n\n\t  if (businessObject.$parent === newParent) {\n\t    return;\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:DataInput') || is$1(businessObject, 'bpmn:DataOutput')) {\n\n\t    if (is$1(newParent, 'bpmn:Participant') && 'processRef' in newParent) {\n\t      newParent = newParent.processRef;\n\t    }\n\n\t    // already in correct ioSpecification\n\t    if ('ioSpecification' in newParent && newParent.ioSpecification === businessObject.$parent) {\n\t      return;\n\t    }\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:Lane')) {\n\n\t    if (newParent) {\n\t      newParent = this.getLaneSet(newParent);\n\t    }\n\n\t    containment = 'lanes';\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:FlowElement')) {\n\n\t    if (newParent) {\n\n\t      if (is$1(newParent, 'bpmn:Participant')) {\n\t        newParent = newParent.processRef;\n\t      } else\n\n\t      if (is$1(newParent, 'bpmn:Lane')) {\n\t        do {\n\n\t          // unwrap Lane -> LaneSet -> (Lane | FlowElementsContainer)\n\t          newParent = newParent.$parent.$parent;\n\t        } while (is$1(newParent, 'bpmn:Lane'));\n\n\t      }\n\t    }\n\n\t    containment = 'flowElements';\n\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:Artifact')) {\n\n\t    while (newParent &&\n\t           !is$1(newParent, 'bpmn:Process') &&\n\t           !is$1(newParent, 'bpmn:SubProcess') &&\n\t           !is$1(newParent, 'bpmn:Collaboration')) {\n\n\t      if (is$1(newParent, 'bpmn:Participant')) {\n\t        newParent = newParent.processRef;\n\t        break;\n\t      } else {\n\t        newParent = newParent.$parent;\n\t      }\n\t    }\n\n\t    containment = 'artifacts';\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:MessageFlow')) {\n\t    containment = 'messageFlows';\n\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:Participant')) {\n\t    containment = 'participants';\n\n\t    // make sure the participants process is properly attached / detached\n\t    // from the XML document\n\n\t    var process = businessObject.processRef,\n\t        definitions;\n\n\t    if (process) {\n\t      definitions = getDefinitions(businessObject.$parent || newParent);\n\n\t      if (businessObject.$parent) {\n\t        remove$2(definitions.get('rootElements'), process);\n\t        process.$parent = null;\n\t      }\n\n\t      if (newParent) {\n\t        add$1(definitions.get('rootElements'), process);\n\t        process.$parent = definitions;\n\t      }\n\t    }\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {\n\t    containment = 'dataOutputAssociations';\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:DataInputAssociation')) {\n\t    containment = 'dataInputAssociations';\n\t  }\n\n\t  if (!containment) {\n\t    throw new Error(translate(\n\t      'no parent for {element} in {parent}',\n\t      {\n\t        element: businessObject.id,\n\t        parent: newParent.id\n\t      }\n\t    ));\n\t  }\n\n\t  var children;\n\n\t  if (businessObject.$parent) {\n\n\t    // remove from old parent\n\t    children = businessObject.$parent.get(containment);\n\t    remove$2(children, businessObject);\n\t  }\n\n\t  if (!newParent) {\n\t    businessObject.$parent = null;\n\t  } else {\n\n\t    // add to new parent\n\t    children = newParent.get(containment);\n\t    children.push(businessObject);\n\t    businessObject.$parent = newParent;\n\t  }\n\n\t  if (visualParent) {\n\t    var diChildren = visualParent.get(containment);\n\n\t    remove$2(children, businessObject);\n\n\t    if (newParent) {\n\n\t      if (!diChildren) {\n\t        diChildren = [];\n\t        newParent.set(containment, diChildren);\n\t      }\n\n\t      diChildren.push(businessObject);\n\t    }\n\t  }\n\t};\n\n\n\tBpmnUpdater.prototype.updateConnectionWaypoints = function(connection) {\n\t  connection.businessObject.di.set('waypoint', this._bpmnFactory.createDiWaypoints(connection.waypoints));\n\t};\n\n\n\tBpmnUpdater.prototype.updateConnection = function(context) {\n\n\t  var connection = context.connection,\n\t      businessObject = getBusinessObject(connection),\n\t      newSource = getBusinessObject(connection.source),\n\t      newTarget = getBusinessObject(connection.target),\n\t      visualParent;\n\n\t  if (!is$1(businessObject, 'bpmn:DataAssociation')) {\n\n\t    var inverseSet = is$1(businessObject, 'bpmn:SequenceFlow');\n\n\t    if (businessObject.sourceRef !== newSource) {\n\t      if (inverseSet) {\n\t        remove$2(businessObject.sourceRef && businessObject.sourceRef.get('outgoing'), businessObject);\n\n\t        if (newSource && newSource.get('outgoing')) {\n\t          newSource.get('outgoing').push(businessObject);\n\t        }\n\t      }\n\n\t      businessObject.sourceRef = newSource;\n\t    }\n\n\t    if (businessObject.targetRef !== newTarget) {\n\t      if (inverseSet) {\n\t        remove$2(businessObject.targetRef && businessObject.targetRef.get('incoming'), businessObject);\n\n\t        if (newTarget && newTarget.get('incoming')) {\n\t          newTarget.get('incoming').push(businessObject);\n\t        }\n\t      }\n\n\t      businessObject.targetRef = newTarget;\n\t    }\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:DataInputAssociation')) {\n\n\t    // handle obnoxious isMsome sourceRef\n\t    businessObject.get('sourceRef')[0] = newSource;\n\n\t    visualParent = context.parent || context.newParent || newTarget;\n\n\t    this.updateSemanticParent(businessObject, newTarget, visualParent);\n\t  } else\n\n\t  if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {\n\t    visualParent = context.parent || context.newParent || newSource;\n\n\t    this.updateSemanticParent(businessObject, newSource, visualParent);\n\n\t    // targetRef = new target\n\t    businessObject.targetRef = newTarget;\n\t  }\n\n\t  this.updateConnectionWaypoints(connection);\n\n\t  this.updateDiConnection(businessObject.di, newSource, newTarget);\n\t};\n\n\n\t// helpers //////////////////////\n\n\tBpmnUpdater.prototype._getLabel = function(di) {\n\t  if (!di.label) {\n\t    di.label = this._bpmnFactory.createDiLabel();\n\t  }\n\n\t  return di.label;\n\t};\n\n\n\t/**\n\t * Make sure the event listener is only called\n\t * if the touched element is a BPMN element.\n\t *\n\t * @param  {Function} fn\n\t * @return {Function} guarded function\n\t */\n\tfunction ifBpmn(fn) {\n\n\t  return function(event) {\n\n\t    var context = event.context,\n\t        element = context.shape || context.connection;\n\n\t    if (is$1(element, 'bpmn:BaseElement')) {\n\t      fn(event);\n\t    }\n\t  };\n\t}\n\n\t/**\n\t * A bpmn-aware factory for diagram-js shapes\n\t */\n\tfunction ElementFactory$1(bpmnFactory, moddle, translate) {\n\t  ElementFactory.call(this);\n\n\t  this._bpmnFactory = bpmnFactory;\n\t  this._moddle = moddle;\n\t  this._translate = translate;\n\t}\n\n\tinherits_browser(ElementFactory$1, ElementFactory);\n\n\tElementFactory$1.$inject = [\n\t  'bpmnFactory',\n\t  'moddle',\n\t  'translate'\n\t];\n\n\tElementFactory$1.prototype.baseCreate = ElementFactory.prototype.create;\n\n\tElementFactory$1.prototype.create = function(elementType, attrs) {\n\n\t  // no special magic for labels,\n\t  // we assume their businessObjects have already been created\n\t  // and wired via attrs\n\t  if (elementType === 'label') {\n\t    return this.baseCreate(elementType, assign({ type: 'label' }, DEFAULT_LABEL_SIZE$1, attrs));\n\t  }\n\n\t  return this.createBpmnElement(elementType, attrs);\n\t};\n\n\tElementFactory$1.prototype.createBpmnElement = function(elementType, attrs) {\n\t  var size,\n\t      translate = this._translate;\n\n\t  attrs = attrs || {};\n\n\t  var businessObject = attrs.businessObject;\n\n\t  if (!businessObject) {\n\t    if (!attrs.type) {\n\t      throw new Error(translate('no shape type specified'));\n\t    }\n\n\t    businessObject = this._bpmnFactory.create(attrs.type);\n\t  }\n\n\t  if (!businessObject.di) {\n\t    if (elementType === 'root') {\n\t      businessObject.di = this._bpmnFactory.createDiPlane(businessObject, [], {\n\t        id: businessObject.id + '_di'\n\t      });\n\t    } else\n\t    if (elementType === 'connection') {\n\t      businessObject.di = this._bpmnFactory.createDiEdge(businessObject, [], {\n\t        id: businessObject.id + '_di'\n\t      });\n\t    } else {\n\t      businessObject.di = this._bpmnFactory.createDiShape(businessObject, {}, {\n\t        id: businessObject.id + '_di'\n\t      });\n\t    }\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:Group')) {\n\t    attrs = assign({\n\t      isFrame: true\n\t    }, attrs);\n\t  }\n\n\t  if (attrs.di) {\n\t    assign(businessObject.di, attrs.di);\n\n\t    delete attrs.di;\n\t  }\n\n\t  applyAttributes(businessObject, attrs, [\n\t    'processRef',\n\t    'isInterrupting',\n\t    'associationDirection',\n\t    'isForCompensation'\n\t  ]);\n\n\t  if (attrs.isExpanded) {\n\t    applyAttribute(businessObject.di, attrs, 'isExpanded');\n\t  }\n\n\t  if (is$1(businessObject, 'bpmn:ExclusiveGateway')) {\n\t    businessObject.di.isMarkerVisible = true;\n\t  }\n\n\t  var eventDefinitions,\n\t      newEventDefinition;\n\n\t  if (attrs.eventDefinitionType) {\n\t    eventDefinitions = businessObject.get('eventDefinitions') || [];\n\t    newEventDefinition = this._bpmnFactory.create(attrs.eventDefinitionType, attrs.eventDefinitionAttrs);\n\n\t    if (attrs.eventDefinitionType === 'bpmn:ConditionalEventDefinition') {\n\t      newEventDefinition.condition = this._bpmnFactory.create('bpmn:FormalExpression');\n\t    }\n\n\t    eventDefinitions.push(newEventDefinition);\n\n\t    newEventDefinition.$parent = businessObject;\n\t    businessObject.eventDefinitions = eventDefinitions;\n\n\t    delete attrs.eventDefinitionType;\n\t  }\n\n\t  size = this._getDefaultSize(businessObject);\n\n\t  attrs = assign({\n\t    businessObject: businessObject,\n\t    id: businessObject.id\n\t  }, size, attrs);\n\n\t  return this.baseCreate(elementType, attrs);\n\t};\n\n\n\tElementFactory$1.prototype._getDefaultSize = function(semantic) {\n\n\t  if (is$1(semantic, 'bpmn:SubProcess')) {\n\n\t    if (isExpanded(semantic)) {\n\t      return { width: 350, height: 200 };\n\t    } else {\n\t      return { width: 100, height: 80 };\n\t    }\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Task')) {\n\t    return { width: 100, height: 80 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Gateway')) {\n\t    return { width: 50, height: 50 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Event')) {\n\t    return { width: 36, height: 36 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Participant')) {\n\t    if (isExpanded(semantic)) {\n\t      return { width: 600, height: 250 };\n\t    } else {\n\t      return { width: 400, height: 60 };\n\t    }\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Lane')) {\n\t    return { width: 400, height: 100 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:DataObjectReference')) {\n\t    return { width: 36, height: 50 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:DataStoreReference')) {\n\t    return { width: 50, height: 50 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:TextAnnotation')) {\n\t    return { width: 100, height: 30 };\n\t  }\n\n\t  if (is$1(semantic, 'bpmn:Group')) {\n\t    return { width: 300, height: 300 };\n\t  }\n\n\t  return { width: 100, height: 80 };\n\t};\n\n\n\t/**\n\t * Create participant.\n\t *\n\t * @param {boolean|Object} [attrs] attrs\n\t *\n\t * @returns {djs.model.Shape}\n\t */\n\tElementFactory$1.prototype.createParticipantShape = function(attrs) {\n\n\t  if (!isObject(attrs)) {\n\t    attrs = { isExpanded: attrs };\n\t  }\n\n\t  attrs = assign({ type: 'bpmn:Participant' }, attrs || {});\n\n\t  // participants are expanded by default\n\t  if (attrs.isExpanded !== false) {\n\t    attrs.processRef = this._bpmnFactory.create('bpmn:Process');\n\t  }\n\n\t  return this.createShape(attrs);\n\t};\n\n\n\t// helpers //////////////////////\n\n\t/**\n\t * Apply attributes from a map to the given element,\n\t * remove attribute from the map on application.\n\t *\n\t * @param {Base} element\n\t * @param {Object} attrs (in/out map of attributes)\n\t * @param {Array<string>} attributeNames name of attributes to apply\n\t */\n\tfunction applyAttributes(element, attrs, attributeNames) {\n\n\t  forEach(attributeNames, function(property) {\n\t    if (attrs[property] !== undefined) {\n\t      applyAttribute(element, attrs, property);\n\t    }\n\t  });\n\t}\n\n\t/**\n\t * Apply named property to element and drain it from the attrs\n\t * collection.\n\t *\n\t * @param {Base} element\n\t * @param {Object} attrs (in/out map of attributes)\n\t * @param {string} attributeName to apply\n\t */\n\tfunction applyAttribute(element, attrs, attributeName) {\n\t  element[attributeName] = attrs[attributeName];\n\n\t  delete attrs[attributeName];\n\t}\n\n\t/**\n\t * A handler that align elements in a certain way.\n\t *\n\t */\n\tfunction AlignElements$1(modeling, canvas) {\n\t  this._modeling = modeling;\n\t  this._canvas = canvas;\n\t}\n\n\tAlignElements$1.$inject = [ 'modeling', 'canvas' ];\n\n\n\tAlignElements$1.prototype.preExecute = function(context) {\n\t  var modeling = this._modeling;\n\n\t  var elements = context.elements,\n\t      alignment = context.alignment;\n\n\n\t  forEach(elements, function(element) {\n\t    var delta = {\n\t      x: 0,\n\t      y: 0\n\t    };\n\n\t    if (alignment.left) {\n\t      delta.x = alignment.left - element.x;\n\n\t    } else if (alignment.right) {\n\t      delta.x = (alignment.right - element.width) - element.x;\n\n\t    } else if (alignment.center) {\n\t      delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;\n\n\t    } else if (alignment.top) {\n\t      delta.y = alignment.top - element.y;\n\n\t    } else if (alignment.bottom) {\n\t      delta.y = (alignment.bottom - element.height) - element.y;\n\n\t    } else if (alignment.middle) {\n\t      delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;\n\t    }\n\n\t    modeling.moveElements([ element ], delta, element.parent);\n\t  });\n\t};\n\n\tAlignElements$1.prototype.postExecute = function(context) {\n\n\t};\n\n\t/**\n\t * A handler that implements reversible appending of shapes\n\t * to a source shape.\n\t *\n\t * @param {canvas} Canvas\n\t * @param {elementFactory} ElementFactory\n\t * @param {modeling} Modeling\n\t */\n\tfunction AppendShapeHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tAppendShapeHandler.$inject = [ 'modeling' ];\n\n\n\t// api //////////////////////\n\n\n\t/**\n\t * Creates a new shape\n\t *\n\t * @param {Object} context\n\t * @param {ElementDescriptor} context.shape the new shape\n\t * @param {ElementDescriptor} context.source the source object\n\t * @param {ElementDescriptor} context.parent the parent object\n\t * @param {Point} context.position position of the new element\n\t */\n\tAppendShapeHandler.prototype.preExecute = function(context) {\n\n\t  var source = context.source;\n\n\t  if (!source) {\n\t    throw new Error('source required');\n\t  }\n\n\t  var target = context.target || source.parent,\n\t      shape = context.shape,\n\t      hints = context.hints || {};\n\n\t  shape = context.shape =\n\t    this._modeling.createShape(\n\t      shape,\n\t      context.position,\n\t      target, { attach: hints.attach });\n\n\t  context.shape = shape;\n\t};\n\n\tAppendShapeHandler.prototype.postExecute = function(context) {\n\t  var hints = context.hints || {};\n\n\t  if (!existsConnection(context.source, context.shape)) {\n\n\t    // create connection\n\t    if (hints.connectionTarget === context.source) {\n\t      this._modeling.connect(context.shape, context.source, context.connection);\n\t    } else {\n\t      this._modeling.connect(context.source, context.shape, context.connection);\n\t    }\n\t  }\n\t};\n\n\n\tfunction existsConnection(source, target) {\n\t  return some(source.outgoing, function(c) {\n\t    return c.target === target;\n\t  });\n\t}\n\n\tfunction CreateConnectionHandler(canvas, layouter) {\n\t  this._canvas = canvas;\n\t  this._layouter = layouter;\n\t}\n\n\tCreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];\n\n\n\t// api //////////////////////\n\n\n\t/**\n\t * Appends a shape to a target shape\n\t *\n\t * @param {Object} context\n\t * @param {djs.element.Base} context.source the source object\n\t * @param {djs.element.Base} context.target the parent object\n\t * @param {Point} context.position position of the new element\n\t */\n\tCreateConnectionHandler.prototype.execute = function(context) {\n\n\t  var connection = context.connection,\n\t      source = context.source,\n\t      target = context.target,\n\t      parent = context.parent,\n\t      parentIndex = context.parentIndex,\n\t      hints = context.hints;\n\n\t  if (!source || !target) {\n\t    throw new Error('source and target required');\n\t  }\n\n\t  if (!parent) {\n\t    throw new Error('parent required');\n\t  }\n\n\t  connection.source = source;\n\t  connection.target = target;\n\n\t  if (!connection.waypoints) {\n\t    connection.waypoints = this._layouter.layoutConnection(connection, hints);\n\t  }\n\n\t  // add connection\n\t  this._canvas.addConnection(connection, parent, parentIndex);\n\n\t  return connection;\n\t};\n\n\tCreateConnectionHandler.prototype.revert = function(context) {\n\t  var connection = context.connection;\n\n\t  this._canvas.removeConnection(connection);\n\n\t  connection.source = null;\n\t  connection.target = null;\n\n\t  return connection;\n\t};\n\n\tvar round$8 = Math.round;\r\n\r\n\tfunction CreateElementsHandler(modeling) {\r\n\t  this._modeling = modeling;\r\n\t}\r\n\r\n\tCreateElementsHandler.$inject = [\r\n\t  'modeling'\r\n\t];\r\n\r\n\tCreateElementsHandler.prototype.preExecute = function(context) {\r\n\t  var elements = context.elements,\r\n\t      parent = context.parent,\r\n\t      parentIndex = context.parentIndex,\r\n\t      position = context.position,\r\n\t      hints = context.hints;\r\n\r\n\t  var modeling = this._modeling;\r\n\r\n\t  // make sure each element has x and y\r\n\t  forEach(elements, function(element) {\r\n\t    if (!isNumber(element.x)) {\r\n\t      element.x = 0;\r\n\t    }\r\n\r\n\t    if (!isNumber(element.y)) {\r\n\t      element.y = 0;\r\n\t    }\r\n\t  });\r\n\r\n\t  var bbox = getBBox(elements);\r\n\r\n\t  // center elements around position\r\n\t  forEach(elements, function(element) {\r\n\t    if (isConnection$6(element)) {\r\n\t      element.waypoints = map(element.waypoints, function(waypoint) {\r\n\t        return {\r\n\t          x: round$8(waypoint.x - bbox.x - bbox.width / 2 + position.x),\r\n\t          y: round$8(waypoint.y - bbox.y - bbox.height / 2 + position.y)\r\n\t        };\r\n\t      });\r\n\t    }\r\n\r\n\t    assign(element, {\r\n\t      x: round$8(element.x - bbox.x - bbox.width / 2 + position.x),\r\n\t      y: round$8(element.y - bbox.y - bbox.height / 2 + position.y)\r\n\t    });\r\n\t  });\r\n\r\n\t  var parents = getParents(elements);\r\n\r\n\t  var cache = {};\r\n\r\n\t  forEach(elements, function(element) {\r\n\t    if (isConnection$6(element)) {\r\n\t      cache[ element.id ] = isNumber(parentIndex) ?\r\n\t        modeling.createConnection(\r\n\t          cache[ element.source.id ],\r\n\t          cache[ element.target.id ],\r\n\t          parentIndex,\r\n\t          element,\r\n\t          element.parent || parent,\r\n\t          hints\r\n\t        ) :\r\n\t        modeling.createConnection(\r\n\t          cache[ element.source.id ],\r\n\t          cache[ element.target.id ],\r\n\t          element,\r\n\t          element.parent || parent,\r\n\t          hints\r\n\t        );\r\n\r\n\t      return;\r\n\t    }\r\n\r\n\t    var createShapeHints = assign({}, hints);\r\n\r\n\t    if (parents.indexOf(element) === -1) {\r\n\t      createShapeHints.autoResize = false;\r\n\t    }\r\n\r\n\t    cache[ element.id ] = isNumber(parentIndex) ?\r\n\t      modeling.createShape(\r\n\t        element,\r\n\t        pick(element, [ 'x', 'y', 'width', 'height' ]),\r\n\t        element.parent || parent,\r\n\t        parentIndex,\r\n\t        createShapeHints\r\n\t      ) :\r\n\t      modeling.createShape(\r\n\t        element,\r\n\t        pick(element, [ 'x', 'y', 'width', 'height' ]),\r\n\t        element.parent || parent,\r\n\t        createShapeHints\r\n\t      );\r\n\t  });\r\n\r\n\t  context.elements = values(cache);\r\n\t};\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction isConnection$6(element) {\r\n\t  return !!element.waypoints;\r\n\t}\n\n\tvar round$9 = Math.round;\n\n\n\t/**\n\t * A handler that implements reversible addition of shapes.\n\t *\n\t * @param {canvas} Canvas\n\t */\n\tfunction CreateShapeHandler(canvas) {\n\t  this._canvas = canvas;\n\t}\n\n\tCreateShapeHandler.$inject = [ 'canvas' ];\n\n\n\t// api //////////////////////\n\n\n\t/**\n\t * Appends a shape to a target shape\n\t *\n\t * @param {Object} context\n\t * @param {djs.model.Base} context.parent the parent object\n\t * @param {Point} context.position position of the new element\n\t */\n\tCreateShapeHandler.prototype.execute = function(context) {\n\n\t  var shape = context.shape,\n\t      positionOrBounds = context.position,\n\t      parent = context.parent,\n\t      parentIndex = context.parentIndex;\n\n\t  if (!parent) {\n\t    throw new Error('parent required');\n\t  }\n\n\t  if (!positionOrBounds) {\n\t    throw new Error('position required');\n\t  }\n\n\t  // (1) add at event center position _or_ at given bounds\n\t  if (positionOrBounds.width !== undefined) {\n\t    assign(shape, positionOrBounds);\n\t  } else {\n\t    assign(shape, {\n\t      x: positionOrBounds.x - round$9(shape.width / 2),\n\t      y: positionOrBounds.y - round$9(shape.height / 2)\n\t    });\n\t  }\n\n\t  // (2) add to canvas\n\t  this._canvas.addShape(shape, parent, parentIndex);\n\n\t  return shape;\n\t};\n\n\n\t/**\n\t * Undo append by removing the shape\n\t */\n\tCreateShapeHandler.prototype.revert = function(context) {\n\n\t  var shape = context.shape;\n\n\t  // (3) remove form canvas\n\t  this._canvas.removeShape(shape);\n\n\t  return shape;\n\t};\n\n\t/**\n\t * A handler that attaches a label to a given target shape.\n\t *\n\t * @param {Canvas} canvas\n\t */\n\tfunction CreateLabelHandler(canvas) {\n\t  CreateShapeHandler.call(this, canvas);\n\t}\n\n\tinherits_browser(CreateLabelHandler, CreateShapeHandler);\n\n\tCreateLabelHandler.$inject = [ 'canvas' ];\n\n\n\t// api //////////////////////\n\n\n\tvar originalExecute = CreateShapeHandler.prototype.execute;\n\n\t/**\n\t * Appends a label to a target shape.\n\t *\n\t * @method CreateLabelHandler#execute\n\t *\n\t * @param {Object} context\n\t * @param {ElementDescriptor} context.target the element the label is attached to\n\t * @param {ElementDescriptor} context.parent the parent object\n\t * @param {Point} context.position position of the new element\n\t */\n\tCreateLabelHandler.prototype.execute = function(context) {\n\n\t  var label = context.shape;\n\n\t  ensureValidDimensions(label);\n\n\t  label.labelTarget = context.labelTarget;\n\n\t  return originalExecute.call(this, context);\n\t};\n\n\tvar originalRevert = CreateShapeHandler.prototype.revert;\n\n\t/**\n\t * Undo append by removing the shape\n\t */\n\tCreateLabelHandler.prototype.revert = function(context) {\n\t  context.shape.labelTarget = null;\n\n\t  return originalRevert.call(this, context);\n\t};\n\n\n\t// helpers //////////////////////\n\n\tfunction ensureValidDimensions(label) {\n\n\t  // make sure a label has valid { width, height } dimensions\n\t  [ 'width', 'height' ].forEach(function(prop) {\n\t    if (typeof label[prop] === 'undefined') {\n\t      label[prop] = 0;\n\t    }\n\t  });\n\t}\n\n\t/**\n\t * A handler that implements reversible deletion of Connections.\n\t */\n\tfunction DeleteConnectionHandler(canvas, modeling) {\n\t  this._canvas = canvas;\n\t  this._modeling = modeling;\n\t}\n\n\tDeleteConnectionHandler.$inject = [\n\t  'canvas',\n\t  'modeling'\n\t];\n\n\n\tDeleteConnectionHandler.prototype.execute = function(context) {\n\n\t  var connection = context.connection,\n\t      parent = connection.parent;\n\n\t  context.parent = parent;\n\n\t  // remember containment\n\t  context.parentIndex = indexOf$1(parent.children, connection);\n\n\t  context.source = connection.source;\n\t  context.target = connection.target;\n\n\t  this._canvas.removeConnection(connection);\n\n\t  connection.source = null;\n\t  connection.target = null;\n\n\t  return connection;\n\t};\n\n\t/**\n\t * Command revert implementation.\n\t */\n\tDeleteConnectionHandler.prototype.revert = function(context) {\n\n\t  var connection = context.connection,\n\t      parent = context.parent,\n\t      parentIndex = context.parentIndex;\n\n\t  connection.source = context.source;\n\t  connection.target = context.target;\n\n\t  // restore containment\n\t  add$1(parent.children, connection, parentIndex);\n\n\t  this._canvas.addConnection(connection, parent);\n\n\t  return connection;\n\t};\n\n\tfunction DeleteElementsHandler(modeling, elementRegistry) {\n\t  this._modeling = modeling;\n\t  this._elementRegistry = elementRegistry;\n\t}\n\n\tDeleteElementsHandler.$inject = [\n\t  'modeling',\n\t  'elementRegistry'\n\t];\n\n\n\tDeleteElementsHandler.prototype.postExecute = function(context) {\n\n\t  var modeling = this._modeling,\n\t      elementRegistry = this._elementRegistry,\n\t      elements = context.elements;\n\n\t  forEach(elements, function(element) {\n\n\t    // element may have been removed with previous\n\t    // remove operations already (e.g. in case of nesting)\n\t    if (!elementRegistry.get(element.id)) {\n\t      return;\n\t    }\n\n\t    if (element.waypoints) {\n\t      modeling.removeConnection(element);\n\t    } else {\n\t      modeling.removeShape(element);\n\t    }\n\t  });\n\t};\n\n\t/**\n\t * A handler that implements reversible deletion of shapes.\n\t *\n\t */\n\tfunction DeleteShapeHandler(canvas, modeling) {\n\t  this._canvas = canvas;\n\t  this._modeling = modeling;\n\t}\n\n\tDeleteShapeHandler.$inject = [ 'canvas', 'modeling' ];\n\n\n\t/**\n\t * - Remove connections\n\t * - Remove all direct children\n\t */\n\tDeleteShapeHandler.prototype.preExecute = function(context) {\n\n\t  var modeling = this._modeling;\n\n\t  var shape = context.shape;\n\n\t  // remove connections\n\t  saveClear(shape.incoming, function(connection) {\n\n\t    // To make sure that the connection isn't removed twice\n\t    // For example if a container is removed\n\t    modeling.removeConnection(connection, { nested: true });\n\t  });\n\n\t  saveClear(shape.outgoing, function(connection) {\n\t    modeling.removeConnection(connection, { nested: true });\n\t  });\n\n\t  // remove child shapes and connections\n\t  saveClear(shape.children, function(child) {\n\t    if (isConnection$7(child)) {\n\t      modeling.removeConnection(child, { nested: true });\n\t    } else {\n\t      modeling.removeShape(child, { nested: true });\n\t    }\n\t  });\n\t};\n\n\t/**\n\t * Remove shape and remember the parent\n\t */\n\tDeleteShapeHandler.prototype.execute = function(context) {\n\t  var canvas = this._canvas;\n\n\t  var shape = context.shape,\n\t      oldParent = shape.parent;\n\n\t  context.oldParent = oldParent;\n\n\t  // remove containment\n\t  context.oldParentIndex = indexOf$1(oldParent.children, shape);\n\n\t  // remove shape\n\t  canvas.removeShape(shape);\n\n\t  return shape;\n\t};\n\n\n\t/**\n\t * Command revert implementation\n\t */\n\tDeleteShapeHandler.prototype.revert = function(context) {\n\n\t  var canvas = this._canvas;\n\n\t  var shape = context.shape,\n\t      oldParent = context.oldParent,\n\t      oldParentIndex = context.oldParentIndex;\n\n\t  // restore containment\n\t  add$1(oldParent.children, shape, oldParentIndex);\n\n\t  canvas.addShape(shape, oldParent);\n\n\t  return shape;\n\t};\n\n\tfunction isConnection$7(element) {\n\t  return element.waypoints;\n\t}\n\n\t/**\n\t * A handler that distributes elements evenly.\n\t */\n\tfunction DistributeElements$1(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tDistributeElements$1.$inject = [ 'modeling' ];\n\n\tvar OFF_AXIS = {\n\t  x: 'y',\n\t  y: 'x'\n\t};\n\n\tDistributeElements$1.prototype.preExecute = function(context) {\n\t  var modeling = this._modeling;\n\n\t  var groups = context.groups,\n\t      axis = context.axis,\n\t      dimension = context.dimension;\n\n\t  function updateRange(group, element) {\n\t    group.range.min = Math.min(element[axis], group.range.min);\n\t    group.range.max = Math.max(element[axis] + element[dimension], group.range.max);\n\t  }\n\n\t  function center(element) {\n\t    return element[axis] + element[dimension] / 2;\n\t  }\n\n\t  function lastIdx(arr) {\n\t    return arr.length - 1;\n\t  }\n\n\t  function rangeDiff(range) {\n\t    return range.max - range.min;\n\t  }\n\n\t  function centerElement(refCenter, element) {\n\t    var delta = { y: 0 };\n\n\t    delta[axis] = refCenter - center(element);\n\n\t    if (delta[axis]) {\n\n\t      delta[OFF_AXIS[axis]] = 0;\n\n\t      modeling.moveElements([ element ], delta, element.parent);\n\t    }\n\t  }\n\n\t  var firstGroup = groups[0],\n\t      lastGroupIdx = lastIdx(groups),\n\t      lastGroup = groups[ lastGroupIdx ];\n\n\t  var margin,\n\t      spaceInBetween,\n\t      groupsSize = 0; // the size of each range\n\n\t  forEach(groups, function(group, idx) {\n\t    var sortedElements,\n\t        refElem,\n\t        refCenter;\n\n\t    if (group.elements.length < 2) {\n\t      if (idx && idx !== groups.length - 1) {\n\t        updateRange(group, group.elements[0]);\n\n\t        groupsSize += rangeDiff(group.range);\n\t      }\n\t      return;\n\t    }\n\n\t    sortedElements = sortBy(group.elements, axis);\n\n\t    refElem = sortedElements[0];\n\n\t    if (idx === lastGroupIdx) {\n\t      refElem = sortedElements[lastIdx(sortedElements)];\n\t    }\n\n\t    refCenter = center(refElem);\n\n\t    // wanna update the ranges after the shapes have been centered\n\t    group.range = null;\n\n\t    forEach(sortedElements, function(element) {\n\n\t      centerElement(refCenter, element);\n\n\t      if (group.range === null) {\n\t        group.range = {\n\t          min: element[axis],\n\t          max: element[axis] + element[dimension]\n\t        };\n\n\t        return;\n\t      }\n\n\t      // update group's range after centering the range elements\n\t      updateRange(group, element);\n\t    });\n\n\t    if (idx && idx !== groups.length - 1) {\n\t      groupsSize += rangeDiff(group.range);\n\t    }\n\t  });\n\n\t  spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);\n\n\t  margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));\n\n\t  if (margin < groups.length - 1) {\n\t    return;\n\t  }\n\n\t  forEach(groups, function(group, groupIdx) {\n\t    var delta = {},\n\t        prevGroup;\n\n\t    if (group === firstGroup || group === lastGroup) {\n\t      return;\n\t    }\n\n\t    prevGroup = groups[groupIdx - 1];\n\n\t    group.range.max = 0;\n\n\t    forEach(group.elements, function(element, idx) {\n\t      delta[OFF_AXIS[axis]] = 0;\n\t      delta[axis] = (prevGroup.range.max - element[axis]) + margin;\n\n\t      if (group.range.min !== element[axis]) {\n\t        delta[axis] += element[axis] - group.range.min;\n\t      }\n\n\t      if (delta[axis]) {\n\t        modeling.moveElements([ element ], delta, element.parent);\n\t      }\n\n\t      group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);\n\t    });\n\t  });\n\t};\n\n\tDistributeElements$1.prototype.postExecute = function(context) {\n\n\t};\n\n\t/**\n\t * A handler that implements reversible moving of shapes.\n\t */\n\tfunction LayoutConnectionHandler(layouter, canvas) {\n\t  this._layouter = layouter;\n\t  this._canvas = canvas;\n\t}\n\n\tLayoutConnectionHandler.$inject = [ 'layouter', 'canvas' ];\n\n\tLayoutConnectionHandler.prototype.execute = function(context) {\n\n\t  var connection = context.connection;\n\n\t  var oldWaypoints = connection.waypoints;\n\n\t  assign(context, {\n\t    oldWaypoints: oldWaypoints\n\t  });\n\n\t  connection.waypoints = this._layouter.layoutConnection(connection, context.hints);\n\n\t  return connection;\n\t};\n\n\tLayoutConnectionHandler.prototype.revert = function(context) {\n\n\t  var connection = context.connection;\n\n\t  connection.waypoints = context.oldWaypoints;\n\n\t  return connection;\n\t};\n\n\t/**\n\t * A handler that implements reversible moving of connections.\n\t *\n\t * The handler differs from the layout connection handler in a sense\n\t * that it preserves the connection layout.\n\t */\n\tfunction MoveConnectionHandler() { }\n\n\n\tMoveConnectionHandler.prototype.execute = function(context) {\n\n\t  var connection = context.connection,\n\t      delta = context.delta;\n\n\t  var newParent = context.newParent || connection.parent,\n\t      newParentIndex = context.newParentIndex,\n\t      oldParent = connection.parent;\n\n\t  // save old parent in context\n\t  context.oldParent = oldParent;\n\t  context.oldParentIndex = remove$2(oldParent.children, connection);\n\n\t  // add to new parent at position\n\t  add$1(newParent.children, connection, newParentIndex);\n\n\t  // update parent\n\t  connection.parent = newParent;\n\n\t  // update waypoint positions\n\t  forEach(connection.waypoints, function(p) {\n\t    p.x += delta.x;\n\t    p.y += delta.y;\n\n\t    if (p.original) {\n\t      p.original.x += delta.x;\n\t      p.original.y += delta.y;\n\t    }\n\t  });\n\n\t  return connection;\n\t};\n\n\tMoveConnectionHandler.prototype.revert = function(context) {\n\n\t  var connection = context.connection,\n\t      newParent = connection.parent,\n\t      oldParent = context.oldParent,\n\t      oldParentIndex = context.oldParentIndex,\n\t      delta = context.delta;\n\n\t  // remove from newParent\n\t  remove$2(newParent.children, connection);\n\n\t  // restore previous location in old parent\n\t  add$1(oldParent.children, connection, oldParentIndex);\n\n\t  // restore parent\n\t  connection.parent = oldParent;\n\n\t  // revert to old waypoint positions\n\t  forEach(connection.waypoints, function(p) {\n\t    p.x -= delta.x;\n\t    p.y -= delta.y;\n\n\t    if (p.original) {\n\t      p.original.x -= delta.x;\n\t      p.original.y -= delta.y;\n\t    }\n\t  });\n\n\t  return connection;\n\t};\n\n\tfunction getResizedSourceAnchor(connection, shape, oldBounds) {\n\n\t  var waypoints = safeGetWaypoints(connection),\n\t      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n\t      oldAnchor = waypoints[0];\n\n\t  // new anchor is the last waypoint enclosed be resized source\n\t  if (waypointsInsideNewBounds.length) {\n\t    return waypointsInsideNewBounds[ waypointsInsideNewBounds.length - 1 ];\n\t  }\n\n\t  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n\t}\n\n\n\tfunction getResizedTargetAnchor(connection, shape, oldBounds) {\n\n\t  var waypoints = safeGetWaypoints(connection),\n\t      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n\t      oldAnchor = waypoints[waypoints.length - 1];\n\n\t  // new anchor is the first waypoint enclosed be resized target\n\t  if (waypointsInsideNewBounds.length) {\n\t    return waypointsInsideNewBounds[ 0 ];\n\t  }\n\n\t  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n\t}\n\n\n\tfunction getMovedSourceAnchor(connection, source, moveDelta) {\n\n\t  var waypoints = safeGetWaypoints(connection),\n\t      oldBounds = subtract(source, moveDelta),\n\t      oldAnchor = waypoints[ 0 ];\n\n\t  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);\n\t}\n\n\n\tfunction getMovedTargetAnchor(connection, target, moveDelta) {\n\n\t  var waypoints = safeGetWaypoints(connection),\n\t      oldBounds = subtract(target, moveDelta),\n\t      oldAnchor = waypoints[ waypoints.length - 1 ];\n\n\t  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);\n\t}\n\n\n\t// helpers //////////////////////\n\n\tfunction subtract(bounds, delta) {\n\t  return {\n\t    x: bounds.x - delta.x,\n\t    y: bounds.y - delta.y,\n\t    width: bounds.width,\n\t    height: bounds.height\n\t  };\n\t}\n\n\n\t/**\n\t * Return waypoints of given connection; throw if non exists (should not happen!!).\n\t *\n\t * @param {Connection} connection\n\t *\n\t * @return {Array<Point>}\n\t */\n\tfunction safeGetWaypoints(connection) {\n\n\t  var waypoints = connection.waypoints;\n\n\t  if (!waypoints.length) {\n\t    throw new Error('connection#' + connection.id + ': no waypoints');\n\t  }\n\n\t  return waypoints;\n\t}\n\n\tfunction getWaypointsInsideBounds(waypoints, bounds) {\n\t  var originalWaypoints = map(waypoints, getOriginal$1);\n\n\t  return filter(originalWaypoints, function(waypoint) {\n\t    return isInsideBounds(waypoint, bounds);\n\t  });\n\t}\n\n\t/**\n\t * Checks if point is inside bounds, incl. edges.\n\t *\n\t * @param {Point} point\n\t * @param {Bounds} bounds\n\t */\n\tfunction isInsideBounds(point, bounds) {\n\t  return getOrientation(bounds, point, 1) === 'intersect';\n\t}\n\n\tfunction getOriginal$1(point) {\n\t  return point.original || point;\n\t}\n\n\tfunction MoveClosure() {\n\n\t  this.allShapes = {};\n\t  this.allConnections = {};\n\n\t  this.enclosedElements = {};\n\t  this.enclosedConnections = {};\n\n\t  this.topLevel = {};\n\t}\n\n\n\tMoveClosure.prototype.add = function(element, isTopLevel) {\n\t  return this.addAll([ element ], isTopLevel);\n\t};\n\n\n\tMoveClosure.prototype.addAll = function(elements, isTopLevel) {\n\n\t  var newClosure = getClosure(elements, !!isTopLevel, this);\n\n\t  assign(this, newClosure);\n\n\t  return this;\n\t};\n\n\t/**\n\t * A helper that is able to carry out serialized move\n\t * operations on multiple elements.\n\t *\n\t * @param {Modeling} modeling\n\t */\n\tfunction MoveHelper(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\t/**\n\t * Move the specified elements and all children by the given delta.\n\t *\n\t * This moves all enclosed connections, too and layouts all affected\n\t * external connections.\n\t *\n\t * @param  {Array<djs.model.Base>} elements\n\t * @param  {Point} delta\n\t * @param  {djs.model.Base} newParent applied to the first level of shapes\n\t *\n\t * @return {Array<djs.model.Base>} list of touched elements\n\t */\n\tMoveHelper.prototype.moveRecursive = function(elements, delta, newParent) {\n\t  if (!elements) {\n\t    return [];\n\t  } else {\n\t    return this.moveClosure(this.getClosure(elements), delta, newParent);\n\t  }\n\t};\n\n\t/**\n\t * Move the given closure of elmements.\n\t *\n\t * @param {Object} closure\n\t * @param {Point} delta\n\t * @param {djs.model.Base} [newParent]\n\t * @param {djs.model.Base} [newHost]\n\t */\n\tMoveHelper.prototype.moveClosure = function(closure, delta, newParent, newHost, primaryShape) {\n\t  var modeling = this._modeling;\n\n\t  var allShapes = closure.allShapes,\n\t      allConnections = closure.allConnections,\n\t      enclosedConnections = closure.enclosedConnections,\n\t      topLevel = closure.topLevel,\n\t      keepParent = false;\n\n\t  if (primaryShape && primaryShape.parent === newParent) {\n\t    keepParent = true;\n\t  }\n\n\t  // move all shapes\n\t  forEach(allShapes, function(shape) {\n\n\t    // move the element according to the given delta\n\t    modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {\n\t      recurse: false,\n\t      layout: false\n\t    });\n\t  });\n\n\t  // move all child connections / layout external connections\n\t  forEach(allConnections, function(c) {\n\n\t    var sourceMoved = !!allShapes[c.source.id],\n\t        targetMoved = !!allShapes[c.target.id];\n\n\t    if (enclosedConnections[c.id] && sourceMoved && targetMoved) {\n\t      modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);\n\t    } else {\n\t      modeling.layoutConnection(c, {\n\t        connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),\n\t        connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)\n\t      });\n\t    }\n\t  });\n\t};\n\n\t/**\n\t * Returns the closure for the selected elements\n\t *\n\t * @param  {Array<djs.model.Base>} elements\n\t * @return {MoveClosure} closure\n\t */\n\tMoveHelper.prototype.getClosure = function(elements) {\n\t  return new MoveClosure().addAll(elements, true);\n\t};\n\n\t/**\n\t * A handler that implements reversible moving of shapes.\n\t */\n\tfunction MoveElementsHandler(modeling) {\n\t  this._helper = new MoveHelper(modeling);\n\t}\n\n\tMoveElementsHandler.$inject = [ 'modeling' ];\n\n\tMoveElementsHandler.prototype.preExecute = function(context) {\n\t  context.closure = this._helper.getClosure(context.shapes);\n\t};\n\n\tMoveElementsHandler.prototype.postExecute = function(context) {\n\n\t  var hints = context.hints,\n\t      primaryShape;\n\n\t  if (hints && hints.primaryShape) {\n\t    primaryShape = hints.primaryShape;\n\t    hints.oldParent = primaryShape.parent;\n\t  }\n\n\t  this._helper.moveClosure(\n\t    context.closure,\n\t    context.delta,\n\t    context.newParent,\n\t    context.newHost,\n\t    primaryShape\n\t  );\n\t};\n\n\t/**\n\t * A handler that implements reversible moving of shapes.\n\t */\n\tfunction MoveShapeHandler(modeling) {\n\t  this._modeling = modeling;\n\n\t  this._helper = new MoveHelper(modeling);\n\t}\n\n\tMoveShapeHandler.$inject = [ 'modeling' ];\n\n\n\tMoveShapeHandler.prototype.execute = function(context) {\n\n\t  var shape = context.shape,\n\t      delta = context.delta,\n\t      newParent = context.newParent || shape.parent,\n\t      newParentIndex = context.newParentIndex,\n\t      oldParent = shape.parent;\n\n\t  context.oldBounds = pick(shape, [ 'x', 'y', 'width', 'height']);\n\n\t  // save old parent in context\n\t  context.oldParent = oldParent;\n\t  context.oldParentIndex = remove$2(oldParent.children, shape);\n\n\t  // add to new parent at position\n\t  add$1(newParent.children, shape, newParentIndex);\n\n\t  // update shape parent + position\n\t  assign(shape, {\n\t    parent: newParent,\n\t    x: shape.x + delta.x,\n\t    y: shape.y + delta.y\n\t  });\n\n\t  return shape;\n\t};\n\n\tMoveShapeHandler.prototype.postExecute = function(context) {\n\n\t  var shape = context.shape,\n\t      delta = context.delta,\n\t      hints = context.hints;\n\n\t  var modeling = this._modeling;\n\n\t  if (hints.layout !== false) {\n\n\t    forEach(shape.incoming, function(c) {\n\t      modeling.layoutConnection(c, {\n\t        connectionEnd: getMovedTargetAnchor(c, shape, delta)\n\t      });\n\t    });\n\n\t    forEach(shape.outgoing, function(c) {\n\t      modeling.layoutConnection(c, {\n\t        connectionStart: getMovedSourceAnchor(c, shape, delta)\n\t      });\n\t    });\n\t  }\n\n\t  if (hints.recurse !== false) {\n\t    this.moveChildren(context);\n\t  }\n\t};\n\n\tMoveShapeHandler.prototype.revert = function(context) {\n\n\t  var shape = context.shape,\n\t      oldParent = context.oldParent,\n\t      oldParentIndex = context.oldParentIndex,\n\t      delta = context.delta;\n\n\t  // restore previous location in old parent\n\t  add$1(oldParent.children, shape, oldParentIndex);\n\n\t  // revert to old position and parent\n\t  assign(shape, {\n\t    parent: oldParent,\n\t    x: shape.x - delta.x,\n\t    y: shape.y - delta.y\n\t  });\n\n\t  return shape;\n\t};\n\n\tMoveShapeHandler.prototype.moveChildren = function(context) {\n\n\t  var delta = context.delta,\n\t      shape = context.shape;\n\n\t  this._helper.moveRecursive(shape.children, delta, null);\n\t};\n\n\tMoveShapeHandler.prototype.getNewParent = function(context) {\n\t  return context.newParent || context.shape.parent;\n\t};\n\n\t/**\n\t * Reconnect connection handler\n\t */\n\tfunction ReconnectConnectionHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tReconnectConnectionHandler.$inject = [ 'modeling' ];\n\n\tReconnectConnectionHandler.prototype.execute = function(context) {\n\t  var newSource = context.newSource,\n\t      newTarget = context.newTarget,\n\t      connection = context.connection,\n\t      dockingOrPoints = context.dockingOrPoints;\n\n\t  if (!newSource && !newTarget) {\n\t    throw new Error('newSource or newTarget required');\n\t  }\n\n\t  if (isArray(dockingOrPoints)) {\n\t    context.oldWaypoints = connection.waypoints;\n\t    connection.waypoints = dockingOrPoints;\n\t  }\n\n\t  if (newSource) {\n\t    context.oldSource = connection.source;\n\t    connection.source = newSource;\n\t  }\n\n\t  if (newTarget) {\n\t    context.oldTarget = connection.target;\n\t    connection.target = newTarget;\n\t  }\n\n\t  return connection;\n\t};\n\n\tReconnectConnectionHandler.prototype.postExecute = function(context) {\n\t  var connection = context.connection,\n\t      newSource = context.newSource,\n\t      newTarget = context.newTarget,\n\t      dockingOrPoints = context.dockingOrPoints,\n\t      hints = context.hints || {};\n\n\t  var layoutConnectionHints = {};\n\n\t  if (hints.connectionStart) {\n\t    layoutConnectionHints.connectionStart = hints.connectionStart;\n\t  }\n\n\t  if (hints.connectionEnd) {\n\t    layoutConnectionHints.connectionEnd = hints.connectionEnd;\n\t  }\n\n\t  if (hints.layoutConnection === false) {\n\t    return;\n\t  }\n\n\t  if (newSource && (!newTarget || hints.docking === 'source')) {\n\t    layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart\n\t      || getDocking$2(isArray(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);\n\t  }\n\n\t  if (newTarget && (!newSource || hints.docking === 'target')) {\n\t    layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd\n\t      || getDocking$2(isArray(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);\n\t  }\n\n\t  if (hints.newWaypoints) {\n\t    layoutConnectionHints.waypoints = hints.newWaypoints;\n\t  }\n\n\t  this._modeling.layoutConnection(connection, layoutConnectionHints);\n\t};\n\n\tReconnectConnectionHandler.prototype.revert = function(context) {\n\t  var oldSource = context.oldSource,\n\t      oldTarget = context.oldTarget,\n\t      oldWaypoints = context.oldWaypoints,\n\t      connection = context.connection;\n\n\t  if (oldSource) {\n\t    connection.source = oldSource;\n\t  }\n\n\t  if (oldTarget) {\n\t    connection.target = oldTarget;\n\t  }\n\n\t  if (oldWaypoints) {\n\t    connection.waypoints = oldWaypoints;\n\t  }\n\n\t  return connection;\n\t};\n\n\n\n\t// helpers //////////\n\n\tfunction getDocking$2(point) {\n\t  return point.original || point;\n\t}\n\n\t/**\n\t * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will\n\t * be kept if possible.\n\t *\n\t * @class\n\t * @constructor\n\t *\n\t * @param {Modeling} modeling\n\t * @param {Rules} rules\n\t */\n\tfunction ReplaceShapeHandler(modeling, rules) {\n\t  this._modeling = modeling;\n\t  this._rules = rules;\n\t}\n\n\tReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];\n\n\n\t/**\n\t * Add new shape.\n\t *\n\t * @param {Object} context\n\t * @param {djs.model.Shape} context.oldShape\n\t * @param {Object} context.newData\n\t * @param {string} context.newData.type\n\t * @param {number} context.newData.x\n\t * @param {number} context.newData.y\n\t * @param {Object} [hints]\n\t */\n\tReplaceShapeHandler.prototype.preExecute = function(context) {\n\t  var self = this,\n\t      modeling = this._modeling,\n\t      rules = this._rules;\n\n\t  var oldShape = context.oldShape,\n\t      newData = context.newData,\n\t      hints = context.hints || {},\n\t      newShape;\n\n\t  function canReconnect(source, target, connection) {\n\t    return rules.allowed('connection.reconnect', {\n\t      connection: connection,\n\t      source: source,\n\t      target: target\n\t    });\n\t  }\n\n\t  // (1) add new shape at given position\n\t  var position = {\n\t    x: newData.x,\n\t    y: newData.y\n\t  };\n\n\t  var oldBounds = {\n\t    x: oldShape.x,\n\t    y: oldShape.y,\n\t    width: oldShape.width,\n\t    height: oldShape.height\n\t  };\n\n\t  newShape = context.newShape =\n\t    context.newShape ||\n\t    self.createShape(newData, position, oldShape.parent, hints);\n\n\t  // (2) update host\n\t  if (oldShape.host) {\n\t    modeling.updateAttachment(newShape, oldShape.host);\n\t  }\n\n\t  // (3) adopt all children from old shape\n\t  var children;\n\n\t  if (hints.moveChildren !== false) {\n\t    children = oldShape.children.slice();\n\n\t    modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);\n\t  }\n\n\t  // (4) reconnect connections to new shape if possible\n\t  var incoming = oldShape.incoming.slice(),\n\t      outgoing = oldShape.outgoing.slice();\n\n\t  forEach(incoming, function(connection) {\n\t    var source = connection.source,\n\t        allowed = canReconnect(source, newShape, connection);\n\n\t    if (allowed) {\n\t      self.reconnectEnd(\n\t        connection, newShape,\n\t        getResizedTargetAnchor(connection, newShape, oldBounds),\n\t        hints\n\t      );\n\t    }\n\t  });\n\n\t  forEach(outgoing, function(connection) {\n\t    var target = connection.target,\n\t        allowed = canReconnect(newShape, target, connection);\n\n\t    if (allowed) {\n\t      self.reconnectStart(\n\t        connection, newShape,\n\t        getResizedSourceAnchor(connection, newShape, oldBounds),\n\t        hints\n\t      );\n\t    }\n\t  });\n\t};\n\n\n\t/**\n\t * Remove old shape.\n\t */\n\tReplaceShapeHandler.prototype.postExecute = function(context) {\n\t  var oldShape = context.oldShape;\n\n\t  this._modeling.removeShape(oldShape);\n\t};\n\n\n\tReplaceShapeHandler.prototype.execute = function(context) {};\n\n\n\tReplaceShapeHandler.prototype.revert = function(context) {};\n\n\n\tReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {\n\t  return this._modeling.createShape(shape, position, target, hints);\n\t};\n\n\n\tReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {\n\t  this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);\n\t};\n\n\n\tReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {\n\t  this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);\n\t};\n\n\t/**\n\t * A handler that implements reversible resizing of shapes.\n\t *\n\t * @param {Modeling} modeling\n\t */\n\tfunction ResizeShapeHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tResizeShapeHandler.$inject = [ 'modeling' ];\n\n\t/**\n\t * {\n\t *   shape: {....}\n\t *   newBounds: {\n\t *     width:  20,\n\t *     height: 40,\n\t *     x:       5,\n\t *     y:      10\n\t *   }\n\t *\n\t * }\n\t */\n\tResizeShapeHandler.prototype.execute = function(context) {\n\t  var shape = context.shape,\n\t      newBounds = context.newBounds,\n\t      minBounds = context.minBounds;\n\n\t  if (newBounds.x === undefined || newBounds.y === undefined ||\n\t      newBounds.width === undefined || newBounds.height === undefined) {\n\t    throw new Error('newBounds must have {x, y, width, height} properties');\n\t  }\n\n\t  if (minBounds && (newBounds.width < minBounds.width\n\t    || newBounds.height < minBounds.height)) {\n\t    throw new Error('width and height cannot be less than minimum height and width');\n\t  } else if (!minBounds\n\t    && newBounds.width < 10 || newBounds.height < 10) {\n\t    throw new Error('width and height cannot be less than 10px');\n\t  }\n\n\t  // save old bbox in context\n\t  context.oldBounds = {\n\t    width:  shape.width,\n\t    height: shape.height,\n\t    x:      shape.x,\n\t    y:      shape.y\n\t  };\n\n\t  // update shape\n\t  assign(shape, {\n\t    width:  newBounds.width,\n\t    height: newBounds.height,\n\t    x:      newBounds.x,\n\t    y:      newBounds.y\n\t  });\n\n\t  return shape;\n\t};\n\n\tResizeShapeHandler.prototype.postExecute = function(context) {\n\t  var modeling = this._modeling;\n\n\t  var shape = context.shape,\n\t      oldBounds = context.oldBounds,\n\t      hints = context.hints || {};\n\n\t  if (hints.layout === false) {\n\t    return;\n\t  }\n\n\t  forEach(shape.incoming, function(c) {\n\t    modeling.layoutConnection(c, {\n\t      connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)\n\t    });\n\t  });\n\n\t  forEach(shape.outgoing, function(c) {\n\t    modeling.layoutConnection(c, {\n\t      connectionStart: getResizedSourceAnchor(c, shape, oldBounds)\n\t    });\n\t  });\n\n\t};\n\n\tResizeShapeHandler.prototype.revert = function(context) {\n\n\t  var shape = context.shape,\n\t      oldBounds = context.oldBounds;\n\n\t  // restore previous bbox\n\t  assign(shape, {\n\t    width:  oldBounds.width,\n\t    height: oldBounds.height,\n\t    x:      oldBounds.x,\n\t    y:      oldBounds.y\n\t  });\n\n\t  return shape;\n\t};\n\n\t/**\n\t * Add or remove space by moving and resizing shapes and updating connection waypoints.\n\t */\n\tfunction SpaceToolHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tSpaceToolHandler.$inject = [ 'modeling' ];\n\n\tSpaceToolHandler.prototype.preExecute = function(context) {\n\t  var delta = context.delta,\n\t      direction = context.direction,\n\t      movingShapes = context.movingShapes,\n\t      resizingShapes = context.resizingShapes,\n\t      start = context.start,\n\t      oldBounds = {};\n\n\t  // (1) move shapes\n\t  this.moveShapes(movingShapes, delta);\n\n\t  // (2a) save old bounds of resized shapes\n\t  forEach(resizingShapes, function(shape) {\n\t    oldBounds[shape.id] = getBounds(shape);\n\t  });\n\n\t  // (2b) resize shapes\n\t  this.resizeShapes(resizingShapes, delta, direction);\n\n\t  // (3) update connection waypoints\n\t  this.updateConnectionWaypoints(\n\t    getWaypointsUpdatingConnections(movingShapes, resizingShapes),\n\t    delta,\n\t    direction,\n\t    start,\n\t    movingShapes,\n\t    resizingShapes,\n\t    oldBounds\n\t  );\n\t};\n\n\tSpaceToolHandler.prototype.execute = function() {};\n\tSpaceToolHandler.prototype.revert = function() {};\n\n\tSpaceToolHandler.prototype.moveShapes = function(shapes, delta) {\n\t  var self = this;\n\n\t  forEach(shapes, function(element) {\n\t    self._modeling.moveShape(element, delta, null, {\n\t      autoResize: false,\n\t      layout: false,\n\t      recurse: false\n\t    });\n\t  });\n\t};\n\n\tSpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {\n\t  var self = this;\n\n\t  forEach(shapes, function(shape) {\n\t    var newBounds = resizeBounds$1(shape, direction, delta);\n\n\t    self._modeling.resizeShape(shape, newBounds, null, {\n\t      attachSupport: false,\n\t      autoResize: false,\n\t      layout: false\n\t    });\n\t  });\n\t};\n\n\t/**\n\t * Update connections waypoints according to the rules:\n\t *   1. Both source and target are moved/resized => move waypoints by the delta\n\t *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end\n\t */\n\tSpaceToolHandler.prototype.updateConnectionWaypoints = function(\n\t    connections,\n\t    delta,\n\t    direction,\n\t    start,\n\t    movingShapes,\n\t    resizingShapes,\n\t    oldBounds\n\t) {\n\t  var self = this,\n\t      affectedShapes = movingShapes.concat(resizingShapes);\n\n\t  forEach(connections, function(connection) {\n\t    var source = connection.source,\n\t        target = connection.target,\n\t        waypoints = copyWaypoints$1(connection),\n\t        axis = getAxisFromDirection(direction),\n\t        layoutHints = {\n\t          labelBehavior: false\n\t        };\n\n\t    if (includes$5(affectedShapes, source) && includes$5(affectedShapes, target)) {\n\n\t      // move waypoints\n\t      waypoints = map(waypoints, function(waypoint) {\n\t        if (shouldMoveWaypoint(waypoint, start, direction)) {\n\n\t          // move waypoint\n\t          waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];\n\t        }\n\n\t        if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {\n\n\t          // move waypoint original\n\t          waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];\n\t        }\n\n\t        return waypoint;\n\t      });\n\n\t      self._modeling.updateWaypoints(connection, waypoints, {\n\t        labelBehavior: false\n\t      });\n\t    } else if (includes$5(affectedShapes, source) || includes$5(affectedShapes, target)) {\n\n\t      // re-layout connection with moved start/end\n\t      if (includes$5(movingShapes, source)) {\n\t        layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);\n\t      } else if (includes$5(movingShapes, target)) {\n\t        layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);\n\t      } else if (includes$5(resizingShapes, source)) {\n\t        layoutHints.connectionStart = getResizedSourceAnchor(\n\t          connection, source, oldBounds[source.id]\n\t        );\n\t      } else if (includes$5(resizingShapes, target)) {\n\t        layoutHints.connectionEnd = getResizedTargetAnchor(\n\t          connection, target, oldBounds[target.id]\n\t        );\n\t      }\n\n\t      self._modeling.layoutConnection(connection, layoutHints);\n\t    }\n\t  });\n\t};\n\n\n\t// helpers //////////\n\n\tfunction copyWaypoint$1(waypoint) {\n\t  return assign({}, waypoint);\n\t}\n\n\tfunction copyWaypoints$1(connection) {\n\t  return map(connection.waypoints, function(waypoint) {\n\n\t    waypoint = copyWaypoint$1(waypoint);\n\n\t    if (waypoint.original) {\n\t      waypoint.original = copyWaypoint$1(waypoint.original);\n\t    }\n\n\t    return waypoint;\n\t  });\n\t}\n\n\tfunction getAxisFromDirection(direction) {\n\t  switch (direction) {\n\t  case 'n':\n\t    return 'y';\n\t  case 'w':\n\t    return 'x';\n\t  case 's':\n\t    return 'y';\n\t  case 'e':\n\t    return 'x';\n\t  }\n\t}\n\n\tfunction shouldMoveWaypoint(waypoint, start, direction) {\n\t  var relevantAxis = getAxisFromDirection(direction);\n\n\t  if (/e|s/.test(direction)) {\n\t    return waypoint[ relevantAxis ] > start;\n\t  } else if (/n|w/.test(direction)) {\n\t    return waypoint[ relevantAxis ] < start;\n\t  }\n\t}\n\n\tfunction includes$5(array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\tfunction getBounds(shape) {\n\t  return {\n\t    x: shape.x,\n\t    y: shape.y,\n\t    height: shape.height,\n\t    width: shape.width\n\t  };\n\t}\n\n\t/**\n\t * A handler that toggles the collapsed state of an element\n\t * and the visibility of all its children.\n\t *\n\t * @param {Modeling} modeling\n\t */\n\tfunction ToggleShapeCollapseHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tToggleShapeCollapseHandler.$inject = [ 'modeling' ];\n\n\n\tToggleShapeCollapseHandler.prototype.execute = function(context) {\n\n\t  var shape = context.shape,\n\t      children = shape.children;\n\n\t  // recursively remember previous visibility of children\n\t  context.oldChildrenVisibility = getElementsVisibilityRecursive(children);\n\n\t  // toggle state\n\t  shape.collapsed = !shape.collapsed;\n\n\t  // recursively hide/show children\n\t  var result = setHiddenRecursive(children, shape.collapsed);\n\n\t  return [shape].concat(result);\n\t};\n\n\n\tToggleShapeCollapseHandler.prototype.revert = function(context) {\n\n\t  var shape = context.shape,\n\t      oldChildrenVisibility = context.oldChildrenVisibility;\n\n\t  var children = shape.children;\n\n\t  // recursively set old visability of children\n\t  var result = restoreVisibilityRecursive(children, oldChildrenVisibility);\n\n\t  // retoggle state\n\t  shape.collapsed = !shape.collapsed;\n\n\t  return [shape].concat(result);\n\t};\n\n\n\t// helpers //////////////////////\n\n\t/**\n\t * Return a map { elementId -> hiddenState}.\n\t *\n\t * @param {Array<djs.model.Shape>} elements\n\t *\n\t * @return {Object}\n\t */\n\tfunction getElementsVisibilityRecursive(elements) {\n\n\t  var result = {};\n\n\t  forEach(elements, function(element) {\n\t    result[element.id] = element.hidden;\n\n\t    if (element.children) {\n\t      result = assign({}, result, getElementsVisibilityRecursive(element.children));\n\t    }\n\t  });\n\n\t  return result;\n\t}\n\n\n\tfunction setHiddenRecursive(elements, newHidden) {\n\t  var result = [];\n\t  forEach(elements, function(element) {\n\t    element.hidden = newHidden;\n\n\t    result = result.concat(element);\n\n\t    if (element.children) {\n\t      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));\n\t    }\n\t  });\n\n\t  return result;\n\t}\n\n\tfunction restoreVisibilityRecursive(elements, lastState) {\n\t  var result = [];\n\t  forEach(elements, function(element) {\n\t    element.hidden = lastState[element.id];\n\n\t    result = result.concat(element);\n\n\t    if (element.children) {\n\t      result = result.concat(restoreVisibilityRecursive(element.children, lastState));\n\t    }\n\t  });\n\n\t  return result;\n\t}\n\n\t/**\n\t * A handler that implements reversible attaching/detaching of shapes.\n\t */\n\tfunction UpdateAttachmentHandler(modeling) {\n\t  this._modeling = modeling;\n\t}\n\n\tUpdateAttachmentHandler.$inject = [ 'modeling' ];\n\n\n\tUpdateAttachmentHandler.prototype.execute = function(context) {\n\t  var shape = context.shape,\n\t      newHost = context.newHost,\n\t      oldHost = shape.host;\n\n\t  // (0) detach from old host\n\t  context.oldHost = oldHost;\n\t  context.attacherIdx = removeAttacher(oldHost, shape);\n\n\t  // (1) attach to new host\n\t  addAttacher(newHost, shape);\n\n\t  // (2) update host\n\t  shape.host = newHost;\n\n\t  return shape;\n\t};\n\n\tUpdateAttachmentHandler.prototype.revert = function(context) {\n\t  var shape = context.shape,\n\t      newHost = context.newHost,\n\t      oldHost = context.oldHost,\n\t      attacherIdx = context.attacherIdx;\n\n\t  // (2) update host\n\t  shape.host = oldHost;\n\n\t  // (1) attach to new host\n\t  removeAttacher(newHost, shape);\n\n\t  // (0) detach from old host\n\t  addAttacher(oldHost, shape, attacherIdx);\n\n\t  return shape;\n\t};\n\n\n\tfunction removeAttacher(host, attacher) {\n\n\t  // remove attacher from host\n\t  return remove$2(host && host.attachers, attacher);\n\t}\n\n\tfunction addAttacher(host, attacher, idx) {\n\n\t  if (!host) {\n\t    return;\n\t  }\n\n\t  var attachers = host.attachers;\n\n\t  if (!attachers) {\n\t    host.attachers = attachers = [];\n\t  }\n\n\t  add$1(attachers, attacher, idx);\n\t}\n\n\tfunction UpdateWaypointsHandler() { }\n\n\tUpdateWaypointsHandler.prototype.execute = function(context) {\n\n\t  var connection = context.connection,\n\t      newWaypoints = context.newWaypoints;\n\n\t  context.oldWaypoints = connection.waypoints;\n\n\t  connection.waypoints = newWaypoints;\n\n\t  return connection;\n\t};\n\n\tUpdateWaypointsHandler.prototype.revert = function(context) {\n\n\t  var connection = context.connection,\n\t      oldWaypoints = context.oldWaypoints;\n\n\t  connection.waypoints = oldWaypoints;\n\n\t  return connection;\n\t};\n\n\t/**\n\t * The basic modeling entry point.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementFactory} elementFactory\n\t * @param {CommandStack} commandStack\n\t */\n\tfunction Modeling(eventBus, elementFactory, commandStack) {\n\t  this._eventBus = eventBus;\n\t  this._elementFactory = elementFactory;\n\t  this._commandStack = commandStack;\n\n\t  var self = this;\n\n\t  eventBus.on('diagram.init', function() {\n\n\t    // register modeling handlers\n\t    self.registerHandlers(commandStack);\n\t  });\n\t}\n\n\tModeling.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];\n\n\n\tModeling.prototype.getHandlers = function() {\n\t  return {\n\t    'shape.append': AppendShapeHandler,\n\t    'shape.create': CreateShapeHandler,\n\t    'shape.delete': DeleteShapeHandler,\n\t    'shape.move': MoveShapeHandler,\n\t    'shape.resize': ResizeShapeHandler,\n\t    'shape.replace': ReplaceShapeHandler,\n\t    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n\n\t    'spaceTool': SpaceToolHandler,\n\n\t    'label.create': CreateLabelHandler,\n\n\t    'connection.create': CreateConnectionHandler,\n\t    'connection.delete': DeleteConnectionHandler,\n\t    'connection.move': MoveConnectionHandler,\n\t    'connection.layout': LayoutConnectionHandler,\n\n\t    'connection.updateWaypoints': UpdateWaypointsHandler,\n\n\t    'connection.reconnect': ReconnectConnectionHandler,\n\n\t    'elements.create': CreateElementsHandler,\n\t    'elements.move': MoveElementsHandler,\n\t    'elements.delete': DeleteElementsHandler,\n\n\t    'elements.distribute': DistributeElements$1,\n\t    'elements.align': AlignElements$1,\n\n\t    'element.updateAttachment': UpdateAttachmentHandler\n\t  };\n\t};\n\n\t/**\n\t * Register handlers with the command stack\n\t *\n\t * @param {CommandStack} commandStack\n\t */\n\tModeling.prototype.registerHandlers = function(commandStack) {\n\t  forEach(this.getHandlers(), function(handler, id) {\n\t    commandStack.registerHandler(id, handler);\n\t  });\n\t};\n\n\n\t// modeling helpers //////////////////////\n\n\tModeling.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {\n\n\t  if (typeof newParentIndex === 'object') {\n\t    hints = newParentIndex;\n\t    newParentIndex = null;\n\t  }\n\n\t  var context = {\n\t    shape: shape,\n\t    delta:  delta,\n\t    newParent: newParent,\n\t    newParentIndex: newParentIndex,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('shape.move', context);\n\t};\n\n\n\t/**\n\t * Update the attachment of the given shape.\n\t *\n\t * @param {djs.mode.Base} shape\n\t * @param {djs.model.Base} [newHost]\n\t */\n\tModeling.prototype.updateAttachment = function(shape, newHost) {\n\t  var context = {\n\t    shape: shape,\n\t    newHost: newHost\n\t  };\n\n\t  this._commandStack.execute('element.updateAttachment', context);\n\t};\n\n\n\t/**\n\t * Move a number of shapes to a new target, either setting it as\n\t * the new parent or attaching it.\n\t *\n\t * @param {Array<djs.mode.Base>} shapes\n\t * @param {Point} delta\n\t * @param {djs.model.Base} [target]\n\t * @param {Object} [hints]\n\t * @param {boolean} [hints.attach=false]\n\t */\n\tModeling.prototype.moveElements = function(shapes, delta, target, hints) {\n\n\t  hints = hints || {};\n\n\t  var attach = hints.attach;\n\n\t  var newParent = target,\n\t      newHost;\n\n\t  if (attach === true) {\n\t    newHost = target;\n\t    newParent = target.parent;\n\t  } else\n\n\t  if (attach === false) {\n\t    newHost = null;\n\t  }\n\n\t  var context = {\n\t    shapes: shapes,\n\t    delta: delta,\n\t    newParent: newParent,\n\t    newHost: newHost,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('elements.move', context);\n\t};\n\n\n\tModeling.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {\n\n\t  if (typeof newParentIndex === 'object') {\n\t    hints = newParentIndex;\n\t    newParentIndex = undefined;\n\t  }\n\n\t  var context = {\n\t    connection: connection,\n\t    delta: delta,\n\t    newParent: newParent,\n\t    newParentIndex: newParentIndex,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('connection.move', context);\n\t};\n\n\n\tModeling.prototype.layoutConnection = function(connection, hints) {\n\t  var context = {\n\t    connection: connection,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('connection.layout', context);\n\t};\n\n\n\t/**\n\t * Create connection.\n\t *\n\t * @param {djs.model.Base} source\n\t * @param {djs.model.Base} target\n\t * @param {number} [parentIndex]\n\t * @param {Object|djs.model.Connection} connection\n\t * @param {djs.model.Base} parent\n\t * @param {Object} hints\n\t *\n\t * @return {djs.model.Connection} the created connection.\n\t */\n\tModeling.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {\n\n\t  if (typeof parentIndex === 'object') {\n\t    hints = parent;\n\t    parent = connection;\n\t    connection = parentIndex;\n\t    parentIndex = undefined;\n\t  }\n\n\t  connection = this._create('connection', connection);\n\n\t  var context = {\n\t    source: source,\n\t    target: target,\n\t    parent: parent,\n\t    parentIndex: parentIndex,\n\t    connection: connection,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('connection.create', context);\n\n\t  return context.connection;\n\t};\n\n\n\t/**\n\t * Create a shape at the specified position.\n\t *\n\t * @param {djs.model.Shape|Object} shape\n\t * @param {Point} position\n\t * @param {djs.model.Shape|djs.model.Root} target\n\t * @param {number} [parentIndex] position in parents children list\n\t * @param {Object} [hints]\n\t * @param {boolean} [hints.attach] whether to attach to target or become a child\n\t *\n\t * @return {djs.model.Shape} the created shape\n\t */\n\tModeling.prototype.createShape = function(shape, position, target, parentIndex, hints) {\n\n\t  if (typeof parentIndex !== 'number') {\n\t    hints = parentIndex;\n\t    parentIndex = undefined;\n\t  }\n\n\t  hints = hints || {};\n\n\t  var attach = hints.attach,\n\t      parent,\n\t      host;\n\n\t  shape = this._create('shape', shape);\n\n\t  if (attach) {\n\t    parent = target.parent;\n\t    host = target;\n\t  } else {\n\t    parent = target;\n\t  }\n\n\t  var context = {\n\t    position: position,\n\t    shape: shape,\n\t    parent: parent,\n\t    parentIndex: parentIndex,\n\t    host: host,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('shape.create', context);\n\n\t  return context.shape;\n\t};\n\n\n\tModeling.prototype.createElements = function(elements, position, parent, parentIndex, hints) {\n\t  if (!isArray(elements)) {\n\t    elements = [ elements ];\n\t  }\n\n\t  if (typeof parentIndex !== 'number') {\n\t    hints = parentIndex;\n\t    parentIndex = undefined;\n\t  }\n\n\t  hints = hints || {};\n\n\t  var context = {\n\t    position: position,\n\t    elements: elements,\n\t    parent: parent,\n\t    parentIndex: parentIndex,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('elements.create', context);\n\n\t  return context.elements;\n\t};\n\n\n\tModeling.prototype.createLabel = function(labelTarget, position, label, parent) {\n\n\t  label = this._create('label', label);\n\n\t  var context = {\n\t    labelTarget: labelTarget,\n\t    position: position,\n\t    parent: parent || labelTarget.parent,\n\t    shape: label\n\t  };\n\n\t  this._commandStack.execute('label.create', context);\n\n\t  return context.shape;\n\t};\n\n\n\t/**\n\t * Append shape to given source, drawing a connection\n\t * between source and the newly created shape.\n\t *\n\t * @param {djs.model.Shape} source\n\t * @param {djs.model.Shape|Object} shape\n\t * @param {Point} position\n\t * @param {djs.model.Shape} target\n\t * @param {Object} [hints]\n\t * @param {boolean} [hints.attach]\n\t * @param {djs.model.Connection|Object} [hints.connection]\n\t * @param {djs.model.Base} [hints.connectionParent]\n\t *\n\t * @return {djs.model.Shape} the newly created shape\n\t */\n\tModeling.prototype.appendShape = function(source, shape, position, target, hints) {\n\n\t  hints = hints || {};\n\n\t  shape = this._create('shape', shape);\n\n\t  var context = {\n\t    source: source,\n\t    position: position,\n\t    target: target,\n\t    shape: shape,\n\t    connection: hints.connection,\n\t    connectionParent: hints.connectionParent,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('shape.append', context);\n\n\t  return context.shape;\n\t};\n\n\n\tModeling.prototype.removeElements = function(elements) {\n\t  var context = {\n\t    elements: elements\n\t  };\n\n\t  this._commandStack.execute('elements.delete', context);\n\t};\n\n\n\tModeling.prototype.distributeElements = function(groups, axis, dimension) {\n\t  var context = {\n\t    groups: groups,\n\t    axis: axis,\n\t    dimension: dimension\n\t  };\n\n\t  this._commandStack.execute('elements.distribute', context);\n\t};\n\n\n\tModeling.prototype.removeShape = function(shape, hints) {\n\t  var context = {\n\t    shape: shape,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('shape.delete', context);\n\t};\n\n\n\tModeling.prototype.removeConnection = function(connection, hints) {\n\t  var context = {\n\t    connection: connection,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('connection.delete', context);\n\t};\n\n\tModeling.prototype.replaceShape = function(oldShape, newShape, hints) {\n\t  var context = {\n\t    oldShape: oldShape,\n\t    newData: newShape,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('shape.replace', context);\n\n\t  return context.newShape;\n\t};\n\n\tModeling.prototype.alignElements = function(elements, alignment) {\n\t  var context = {\n\t    elements: elements,\n\t    alignment: alignment\n\t  };\n\n\t  this._commandStack.execute('elements.align', context);\n\t};\n\n\tModeling.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {\n\t  var context = {\n\t    shape: shape,\n\t    newBounds: newBounds,\n\t    minBounds: minBounds,\n\t    hints: hints\n\t  };\n\n\t  this._commandStack.execute('shape.resize', context);\n\t};\n\n\tModeling.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {\n\t  var context = {\n\t    delta: delta,\n\t    direction: direction,\n\t    movingShapes: movingShapes,\n\t    resizingShapes: resizingShapes,\n\t    start: start\n\t  };\n\n\t  this._commandStack.execute('spaceTool', context);\n\t};\n\n\tModeling.prototype.updateWaypoints = function(connection, newWaypoints, hints) {\n\t  var context = {\n\t    connection: connection,\n\t    newWaypoints: newWaypoints,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('connection.updateWaypoints', context);\n\t};\n\n\tModeling.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {\n\t  var context = {\n\t    connection: connection,\n\t    newSource: source,\n\t    newTarget: target,\n\t    dockingOrPoints: dockingOrPoints,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('connection.reconnect', context);\n\t};\n\n\tModeling.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {\n\t  if (!hints) {\n\t    hints = {};\n\t  }\n\n\t  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {\n\t    docking: 'source'\n\t  }));\n\t};\n\n\tModeling.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {\n\t  if (!hints) {\n\t    hints = {};\n\t  }\n\n\t  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {\n\t    docking: 'target'\n\t  }));\n\t};\n\n\tModeling.prototype.connect = function(source, target, attrs, hints) {\n\t  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n\t};\n\n\tModeling.prototype._create = function(type, attrs) {\n\t  if (attrs instanceof Base) {\n\t    return attrs;\n\t  } else {\n\t    return this._elementFactory.create(type, attrs);\n\t  }\n\t};\n\n\tModeling.prototype.toggleCollapse = function(shape, hints) {\n\t  var context = {\n\t    shape: shape,\n\t    hints: hints || {}\n\t  };\n\n\t  this._commandStack.execute('shape.toggleCollapse', context);\n\t};\n\n\tvar DEFAULT_FLOW = 'default',\n\t    ID = 'id',\n\t    DI = 'di';\n\n\tvar NULL_DIMENSIONS = {\n\t  width: 0,\n\t  height: 0\n\t};\n\n\t/**\n\t * A handler that implements a BPMN 2.0 property update.\n\t *\n\t * This should be used to set simple properties on elements with\n\t * an underlying BPMN business object.\n\t *\n\t * Use respective diagram-js provided handlers if you would\n\t * like to perform automated modeling.\n\t */\n\tfunction UpdatePropertiesHandler(\n\t    elementRegistry, moddle, translate,\n\t    modeling, textRenderer) {\n\n\t  this._elementRegistry = elementRegistry;\n\t  this._moddle = moddle;\n\t  this._translate = translate;\n\t  this._modeling = modeling;\n\t  this._textRenderer = textRenderer;\n\t}\n\n\tUpdatePropertiesHandler.$inject = [\n\t  'elementRegistry',\n\t  'moddle',\n\t  'translate',\n\t  'modeling',\n\t  'textRenderer'\n\t];\n\n\n\t// api //////////////////////\n\n\t/**\n\t * Updates a BPMN element with a list of new properties\n\t *\n\t * @param {Object} context\n\t * @param {djs.model.Base} context.element the element to update\n\t * @param {Object} context.properties a list of properties to set on the element's\n\t *                                    businessObject (the BPMN model element)\n\t *\n\t * @return {Array<djs.model.Base>} the updated element\n\t */\n\tUpdatePropertiesHandler.prototype.execute = function(context) {\n\n\t  var element = context.element,\n\t      changed = [ element ],\n\t      translate = this._translate;\n\n\t  if (!element) {\n\t    throw new Error(translate('element required'));\n\t  }\n\n\t  var elementRegistry = this._elementRegistry,\n\t      ids = this._moddle.ids;\n\n\t  var businessObject = element.businessObject,\n\t      properties = unwrapBusinessObjects(context.properties),\n\t      oldProperties = context.oldProperties || getProperties(businessObject, properties);\n\n\t  if (isIdChange(properties, businessObject)) {\n\t    ids.unclaim(businessObject[ID]);\n\n\t    elementRegistry.updateId(element, properties[ID]);\n\n\t    ids.claim(properties[ID], businessObject);\n\t  }\n\n\t  // correctly indicate visual changes on default flow updates\n\t  if (DEFAULT_FLOW in properties) {\n\n\t    if (properties[DEFAULT_FLOW]) {\n\t      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n\t    }\n\n\t    if (businessObject[DEFAULT_FLOW]) {\n\t      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n\t    }\n\t  }\n\n\t  // update properties\n\t  setProperties(businessObject, properties);\n\n\t  // store old values\n\t  context.oldProperties = oldProperties;\n\t  context.changed = changed;\n\n\t  // indicate changed on objects affected by the update\n\t  return changed;\n\t};\n\n\n\tUpdatePropertiesHandler.prototype.postExecute = function(context) {\n\t  var element = context.element,\n\t      label = element.label;\n\n\t  var text = label && getBusinessObject(label).name;\n\n\t  if (!text) {\n\t    return;\n\t  }\n\n\t  // get layouted text bounds and resize external\n\t  // external label accordingly\n\t  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n\t  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n\t};\n\n\t/**\n\t * Reverts the update on a BPMN elements properties.\n\t *\n\t * @param  {Object} context\n\t *\n\t * @return {djs.model.Base} the updated element\n\t */\n\tUpdatePropertiesHandler.prototype.revert = function(context) {\n\n\t  var element = context.element,\n\t      properties = context.properties,\n\t      oldProperties = context.oldProperties,\n\t      businessObject = element.businessObject,\n\t      elementRegistry = this._elementRegistry,\n\t      ids = this._moddle.ids;\n\n\t  // update properties\n\t  setProperties(businessObject, oldProperties);\n\n\t  if (isIdChange(properties, businessObject)) {\n\t    ids.unclaim(properties[ID]);\n\n\t    elementRegistry.updateId(element, oldProperties[ID]);\n\n\t    ids.claim(oldProperties[ID], businessObject);\n\t  }\n\n\t  return context.changed;\n\t};\n\n\n\tfunction isIdChange(properties, businessObject) {\n\t  return ID in properties && properties[ID] !== businessObject[ID];\n\t}\n\n\n\tfunction getProperties(businessObject, properties) {\n\t  var propertyNames = keys(properties);\n\n\t  return reduce(propertyNames, function(result, key) {\n\n\t    // handle DI separately\n\t    if (key !== DI) {\n\t      result[key] = businessObject.get(key);\n\t    } else {\n\t      result[key] = getDiProperties(businessObject.di, keys(properties.di));\n\t    }\n\n\t    return result;\n\t  }, {});\n\t}\n\n\n\tfunction getDiProperties(di, propertyNames) {\n\t  return reduce(propertyNames, function(result, key) {\n\t    result[key] = di.get(key);\n\n\t    return result;\n\t  }, {});\n\t}\n\n\n\tfunction setProperties(businessObject, properties) {\n\t  forEach(properties, function(value, key) {\n\n\t    if (key !== DI) {\n\t      businessObject.set(key, value);\n\t    } else {\n\n\t      // only update, if businessObject.di exists\n\t      if (businessObject.di) {\n\t        setDiProperties(businessObject.di, value);\n\t      }\n\t    }\n\t  });\n\t}\n\n\n\tfunction setDiProperties(di, properties) {\n\t  forEach(properties, function(value, key) {\n\t    di.set(key, value);\n\t  });\n\t}\n\n\n\tvar referencePropertyNames = [ 'default' ];\n\n\t/**\n\t * Make sure we unwrap the actual business object\n\t * behind diagram element that may have been\n\t * passed as arguments.\n\t *\n\t * @param  {Object} properties\n\t *\n\t * @return {Object} unwrappedProps\n\t */\n\tfunction unwrapBusinessObjects(properties) {\n\n\t  var unwrappedProps = assign({}, properties);\n\n\t  referencePropertyNames.forEach(function(name) {\n\t    if (name in properties) {\n\t      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n\t    }\n\t  });\n\n\t  return unwrappedProps;\n\t}\n\n\tfunction UpdateCanvasRootHandler(canvas, modeling) {\n\t  this._canvas = canvas;\n\t  this._modeling = modeling;\n\t}\n\n\tUpdateCanvasRootHandler.$inject = [\n\t  'canvas',\n\t  'modeling'\n\t];\n\n\n\tUpdateCanvasRootHandler.prototype.execute = function(context) {\n\n\t  var canvas = this._canvas;\n\n\t  var newRoot = context.newRoot,\n\t      newRootBusinessObject = newRoot.businessObject,\n\t      oldRoot = canvas.getRootElement(),\n\t      oldRootBusinessObject = oldRoot.businessObject,\n\t      bpmnDefinitions = oldRootBusinessObject.$parent,\n\t      diPlane = oldRootBusinessObject.di;\n\n\t  // (1) replace process old <> new root\n\t  canvas.setRootElement(newRoot, true);\n\n\t  // (2) update root elements\n\t  add$1(bpmnDefinitions.rootElements, newRootBusinessObject);\n\t  newRootBusinessObject.$parent = bpmnDefinitions;\n\n\t  remove$2(bpmnDefinitions.rootElements, oldRootBusinessObject);\n\t  oldRootBusinessObject.$parent = null;\n\n\t  // (3) wire di\n\t  oldRootBusinessObject.di = null;\n\n\t  diPlane.bpmnElement = newRootBusinessObject;\n\t  newRootBusinessObject.di = diPlane;\n\n\t  context.oldRoot = oldRoot;\n\n\t  // TODO(nikku): return changed elements?\n\t  // return [ newRoot, oldRoot ];\n\t};\n\n\n\tUpdateCanvasRootHandler.prototype.revert = function(context) {\n\n\t  var canvas = this._canvas;\n\n\t  var newRoot = context.newRoot,\n\t      newRootBusinessObject = newRoot.businessObject,\n\t      oldRoot = context.oldRoot,\n\t      oldRootBusinessObject = oldRoot.businessObject,\n\t      bpmnDefinitions = newRootBusinessObject.$parent,\n\t      diPlane = newRootBusinessObject.di;\n\n\t  // (1) replace process old <> new root\n\t  canvas.setRootElement(oldRoot, true);\n\n\t  // (2) update root elements\n\t  remove$2(bpmnDefinitions.rootElements, newRootBusinessObject);\n\t  newRootBusinessObject.$parent = null;\n\n\t  add$1(bpmnDefinitions.rootElements, oldRootBusinessObject);\n\t  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n\t  // (3) wire di\n\t  newRootBusinessObject.di = null;\n\n\t  diPlane.bpmnElement = oldRootBusinessObject;\n\t  oldRootBusinessObject.di = diPlane;\n\n\t  // TODO(nikku): return changed elements?\n\t  // return [ newRoot, oldRoot ];\n\t};\n\n\t/**\n\t * A handler that allows us to add a new lane\n\t * above or below an existing one.\n\t *\n\t * @param {Modeling} modeling\n\t * @param {SpaceTool} spaceTool\n\t */\n\tfunction AddLaneHandler(modeling, spaceTool) {\n\t  this._modeling = modeling;\n\t  this._spaceTool = spaceTool;\n\t}\n\n\tAddLaneHandler.$inject = [\n\t  'modeling',\n\t  'spaceTool'\n\t];\n\n\n\tAddLaneHandler.prototype.preExecute = function(context) {\n\n\t  var spaceTool = this._spaceTool,\n\t      modeling = this._modeling;\n\n\t  var shape = context.shape,\n\t      location = context.location;\n\n\t  var lanesRoot = getLanesRoot(shape);\n\n\t  var isRoot = lanesRoot === shape,\n\t      laneParent = isRoot ? shape : shape.parent;\n\n\t  var existingChildLanes = getChildLanes(laneParent);\n\n\t  // (0) add a lane if we currently got none and are adding to root\n\t  if (!existingChildLanes.length) {\n\t    modeling.createShape({ type: 'bpmn:Lane' }, {\n\t      x: shape.x + LANE_INDENTATION,\n\t      y: shape.y,\n\t      width: shape.width - LANE_INDENTATION,\n\t      height: shape.height\n\t    }, laneParent);\n\t  }\n\n\t  // (1) collect affected elements to create necessary space\n\t  var allAffected = [];\n\n\t  eachElement(lanesRoot, function(element) {\n\t    allAffected.push(element);\n\n\t    // handle element labels in the diagram root\n\t    if (element.label) {\n\t      allAffected.push(element.label);\n\t    }\n\n\t    if (element === shape) {\n\t      return [];\n\t    }\n\n\t    return filter(element.children, function(c) {\n\t      return c !== shape;\n\t    });\n\t  });\n\n\t  var offset = location === 'top' ? -120 : 120,\n\t      lanePosition = location === 'top' ? shape.y : shape.y + shape.height,\n\t      spacePos = lanePosition + (location === 'top' ? 10 : -10),\n\t      direction = location === 'top' ? 'n' : 's';\n\n\t  var adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);\n\n\t  spaceTool.makeSpace(\n\t    adjustments.movingShapes,\n\t    adjustments.resizingShapes,\n\t    { x: 0, y: offset },\n\t    direction,\n\t    spacePos\n\t  );\n\n\t  // (2) create new lane at open space\n\t  context.newLane = modeling.createShape({ type: 'bpmn:Lane' }, {\n\t    x: shape.x + (isRoot ? LANE_INDENTATION : 0),\n\t    y: lanePosition - (location === 'top' ? 120 : 0),\n\t    width: shape.width - (isRoot ? LANE_INDENTATION : 0),\n\t    height: 120\n\t  }, laneParent);\n\t};\n\n\t/**\n\t * A handler that splits a lane into a number of sub-lanes,\n\t * creating new sub lanes, if necessary.\n\t *\n\t * @param {Modeling} modeling\n\t */\n\tfunction SplitLaneHandler(modeling, translate) {\n\t  this._modeling = modeling;\n\t  this._translate = translate;\n\t}\n\n\tSplitLaneHandler.$inject = [\n\t  'modeling',\n\t  'translate'\n\t];\n\n\n\tSplitLaneHandler.prototype.preExecute = function(context) {\n\n\t  var modeling = this._modeling,\n\t      translate = this._translate;\n\n\t  var shape = context.shape,\n\t      newLanesCount = context.count;\n\n\t  var childLanes = getChildLanes(shape),\n\t      existingLanesCount = childLanes.length;\n\n\t  if (existingLanesCount > newLanesCount) {\n\t    throw new Error(translate('more than {count} child lanes', { count: newLanesCount }));\n\t  }\n\n\t  var newLanesHeight = Math.round(shape.height / newLanesCount);\n\n\t  // Iterate from top to bottom in child lane order,\n\t  // resizing existing lanes and creating new ones\n\t  // so that they split the parent proportionally.\n\t  //\n\t  // Due to rounding related errors, the bottom lane\n\t  // needs to take up all the remaining space.\n\t  var laneY,\n\t      laneHeight,\n\t      laneBounds,\n\t      newLaneAttrs,\n\t      idx;\n\n\t  for (idx = 0; idx < newLanesCount; idx++) {\n\n\t    laneY = shape.y + idx * newLanesHeight;\n\n\t    // if bottom lane\n\t    if (idx === newLanesCount - 1) {\n\t      laneHeight = shape.height - (newLanesHeight * idx);\n\t    } else {\n\t      laneHeight = newLanesHeight;\n\t    }\n\n\t    laneBounds = {\n\t      x: shape.x + LANE_INDENTATION,\n\t      y: laneY,\n\t      width: shape.width - LANE_INDENTATION,\n\t      height: laneHeight\n\t    };\n\n\t    if (idx < existingLanesCount) {\n\n\t      // resize existing lane\n\t      modeling.resizeShape(childLanes[idx], laneBounds);\n\t    } else {\n\n\t      // create a new lane at position\n\t      newLaneAttrs = {\n\t        type: 'bpmn:Lane'\n\t      };\n\n\t      modeling.createShape(newLaneAttrs, laneBounds, shape);\n\t    }\n\t  }\n\t};\n\n\t/**\n\t * A handler that resizes a lane.\n\t *\n\t * @param {Modeling} modeling\n\t */\n\tfunction ResizeLaneHandler(modeling, spaceTool) {\n\t  this._modeling = modeling;\n\t  this._spaceTool = spaceTool;\n\t}\n\n\tResizeLaneHandler.$inject = [\n\t  'modeling',\n\t  'spaceTool'\n\t];\n\n\n\tResizeLaneHandler.prototype.preExecute = function(context) {\n\n\t  var shape = context.shape,\n\t      newBounds = context.newBounds,\n\t      balanced = context.balanced;\n\n\t  if (balanced !== false) {\n\t    this.resizeBalanced(shape, newBounds);\n\t  } else {\n\t    this.resizeSpace(shape, newBounds);\n\t  }\n\t};\n\n\n\t/**\n\t * Resize balanced, adjusting next / previous lane sizes.\n\t *\n\t * @param {djs.model.Shape} shape\n\t * @param {Bounds} newBounds\n\t */\n\tResizeLaneHandler.prototype.resizeBalanced = function(shape, newBounds) {\n\n\t  var modeling = this._modeling;\n\n\t  var resizeNeeded = computeLanesResize(shape, newBounds);\n\n\t  // resize the lane\n\t  modeling.resizeShape(shape, newBounds);\n\n\t  // resize other lanes as needed\n\t  resizeNeeded.forEach(function(r) {\n\t    modeling.resizeShape(r.shape, r.newBounds);\n\t  });\n\t};\n\n\n\t/**\n\t * Resize, making actual space and moving below / above elements.\n\t *\n\t * @param {djs.model.Shape} shape\n\t * @param {Bounds} newBounds\n\t */\n\tResizeLaneHandler.prototype.resizeSpace = function(shape, newBounds) {\n\t  var spaceTool = this._spaceTool;\n\n\t  var shapeTrbl = asTRBL(shape),\n\t      newTrbl = asTRBL(newBounds);\n\n\t  var trblDiff = substractTRBL(newTrbl, shapeTrbl);\n\n\t  var lanesRoot = getLanesRoot(shape);\n\n\t  var allAffected = [],\n\t      allLanes = [];\n\n\t  eachElement(lanesRoot, function(element) {\n\t    allAffected.push(element);\n\n\t    if (is$1(element, 'bpmn:Lane') || is$1(element, 'bpmn:Participant')) {\n\t      allLanes.push(element);\n\t    }\n\n\t    return element.children;\n\t  });\n\n\t  var change,\n\t      spacePos,\n\t      direction,\n\t      offset,\n\t      adjustments;\n\n\t  if (trblDiff.bottom || trblDiff.top) {\n\n\t    change = trblDiff.bottom || trblDiff.top;\n\t    spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);\n\t    direction = trblDiff.bottom ? 's' : 'n';\n\n\t    offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;\n\n\t    adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);\n\n\t    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: 0, y: change }, direction);\n\t  }\n\n\n\t  if (trblDiff.left || trblDiff.right) {\n\n\t    change = trblDiff.right || trblDiff.left;\n\t    spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);\n\t    direction = trblDiff.right ? 'e' : 'w';\n\n\t    offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;\n\n\t    adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);\n\n\t    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: change, y: 0 }, direction);\n\t  }\n\t};\n\n\tvar FLOW_NODE_REFS_ATTR = 'flowNodeRef',\n\t    LANES_ATTR = 'lanes';\n\n\n\t/**\n\t * A handler that updates lane refs on changed elements\n\t */\n\tfunction UpdateFlowNodeRefsHandler(elementRegistry) {\n\t  this._elementRegistry = elementRegistry;\n\t}\n\n\tUpdateFlowNodeRefsHandler.$inject = [\n\t  'elementRegistry'\n\t];\n\n\n\tUpdateFlowNodeRefsHandler.prototype.computeUpdates = function(flowNodeShapes, laneShapes) {\n\n\t  var handledNodes = [];\n\n\t  var updates = [];\n\n\t  var participantCache = {};\n\n\t  var allFlowNodeShapes = [];\n\n\t  function isInLaneShape(element, laneShape) {\n\n\t    var laneTrbl = asTRBL(laneShape);\n\n\t    var elementMid = {\n\t      x: element.x + element.width / 2,\n\t      y: element.y + element.height / 2\n\t    };\n\n\t    return elementMid.x > laneTrbl.left &&\n\t           elementMid.x < laneTrbl.right &&\n\t           elementMid.y > laneTrbl.top &&\n\t           elementMid.y < laneTrbl.bottom;\n\t  }\n\n\t  function addFlowNodeShape(flowNodeShape) {\n\t    if (handledNodes.indexOf(flowNodeShape) === -1) {\n\t      allFlowNodeShapes.push(flowNodeShape);\n\t      handledNodes.push(flowNodeShape);\n\t    }\n\t  }\n\n\t  function getAllLaneShapes(flowNodeShape) {\n\n\t    var root = getLanesRoot(flowNodeShape);\n\n\t    if (!participantCache[root.id]) {\n\t      participantCache[root.id] = collectLanes(root);\n\t    }\n\n\t    return participantCache[root.id];\n\t  }\n\n\t  function getNewLanes(flowNodeShape) {\n\t    if (!flowNodeShape.parent) {\n\t      return [];\n\t    }\n\n\t    var allLaneShapes = getAllLaneShapes(flowNodeShape);\n\n\t    return allLaneShapes.filter(function(l) {\n\t      return isInLaneShape(flowNodeShape, l);\n\t    }).map(function(shape) {\n\t      return shape.businessObject;\n\t    });\n\t  }\n\n\t  laneShapes.forEach(function(laneShape) {\n\t    var root = getLanesRoot(laneShape);\n\n\t    if (!root || handledNodes.indexOf(root) !== -1) {\n\t      return;\n\t    }\n\n\t    var children = root.children.filter(function(c) {\n\t      return is$1(c, 'bpmn:FlowNode');\n\t    });\n\n\t    children.forEach(addFlowNodeShape);\n\n\t    handledNodes.push(root);\n\t  });\n\n\t  flowNodeShapes.forEach(addFlowNodeShape);\n\n\n\t  allFlowNodeShapes.forEach(function(flowNodeShape) {\n\n\t    var flowNode = flowNodeShape.businessObject;\n\n\t    var lanes = flowNode.get(LANES_ATTR),\n\t        remove = lanes.slice(),\n\t        add = getNewLanes(flowNodeShape);\n\n\t    updates.push({ flowNode: flowNode, remove: remove, add: add });\n\t  });\n\n\t  laneShapes.forEach(function(laneShape) {\n\n\t    var lane = laneShape.businessObject;\n\n\t    // lane got removed XX-)\n\t    if (!laneShape.parent) {\n\t      lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {\n\t        updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });\n\t      });\n\t    }\n\t  });\n\n\t  return updates;\n\t};\n\n\tUpdateFlowNodeRefsHandler.prototype.execute = function(context) {\n\n\t  var updates = context.updates;\n\n\t  if (!updates) {\n\t    updates = context.updates = this.computeUpdates(context.flowNodeShapes, context.laneShapes);\n\t  }\n\n\n\t  updates.forEach(function(update) {\n\n\t    var flowNode = update.flowNode,\n\t        lanes = flowNode.get(LANES_ATTR);\n\n\t    // unwire old\n\t    update.remove.forEach(function(oldLane) {\n\t      remove$2(lanes, oldLane);\n\t      remove$2(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n\t    });\n\n\t    // wire new\n\t    update.add.forEach(function(newLane) {\n\t      add$1(lanes, newLane);\n\t      add$1(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n\t    });\n\t  });\n\n\t  // TODO(nikku): return changed elements\n\t  // return [ ... ];\n\t};\n\n\n\tUpdateFlowNodeRefsHandler.prototype.revert = function(context) {\n\n\t  var updates = context.updates;\n\n\t  updates.forEach(function(update) {\n\n\t    var flowNode = update.flowNode,\n\t        lanes = flowNode.get(LANES_ATTR);\n\n\t    // unwire new\n\t    update.add.forEach(function(newLane) {\n\t      remove$2(lanes, newLane);\n\t      remove$2(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n\t    });\n\n\t    // wire old\n\t    update.remove.forEach(function(oldLane) {\n\t      add$1(lanes, oldLane);\n\t      add$1(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n\t    });\n\t  });\n\n\t  // TODO(nikku): return changed elements\n\t  // return [ ... ];\n\t};\n\n\tfunction IdClaimHandler(moddle) {\n\t  this._moddle = moddle;\n\t}\n\n\tIdClaimHandler.$inject = [ 'moddle' ];\n\n\n\tIdClaimHandler.prototype.execute = function(context) {\n\t  var ids = this._moddle.ids,\n\t      id = context.id,\n\t      element = context.element,\n\t      claiming = context.claiming;\n\n\t  if (claiming) {\n\t    ids.claim(id, element);\n\t  } else {\n\t    ids.unclaim(id);\n\t  }\n\t};\n\n\t/**\n\t * Command revert implementation.\n\t */\n\tIdClaimHandler.prototype.revert = function(context) {\n\t  var ids = this._moddle.ids,\n\t      id = context.id,\n\t      element = context.element,\n\t      claiming = context.claiming;\n\n\t  if (claiming) {\n\t    ids.unclaim(id);\n\t  } else {\n\t    ids.claim(id, element);\n\t  }\n\t};\n\n\tvar DEFAULT_COLORS = {\r\n\t  fill: undefined,\r\n\t  stroke: undefined\r\n\t};\r\n\r\n\r\n\tfunction SetColorHandler(commandStack) {\r\n\t  this._commandStack = commandStack;\r\n\t}\r\n\r\n\tSetColorHandler.$inject = [\r\n\t  'commandStack'\r\n\t];\r\n\r\n\r\n\tSetColorHandler.prototype.postExecute = function(context) {\r\n\t  var elements = context.elements,\r\n\t      colors = context.colors || DEFAULT_COLORS;\r\n\r\n\t  var self = this;\r\n\r\n\t  var di = {};\r\n\r\n\t  if ('fill' in colors) {\r\n\t    assign(di, { fill: colors.fill });\r\n\t  }\r\n\r\n\t  if ('stroke' in colors) {\r\n\t    assign(di, { stroke: colors.stroke });\r\n\t  }\r\n\r\n\t  forEach(elements, function(element) {\r\n\r\n\t    self._commandStack.execute('element.updateProperties', {\r\n\t      element: element,\r\n\t      properties: {\r\n\t        di: di\r\n\t      }\r\n\t    });\r\n\t  });\r\n\r\n\t};\n\n\tvar NULL_DIMENSIONS$1 = {\n\t  width: 0,\n\t  height: 0\n\t};\n\n\n\t/**\n\t * A handler that updates the text of a BPMN element.\n\t */\n\tfunction UpdateLabelHandler(modeling, textRenderer) {\n\n\t  /**\n\t   * Set the label and return the changed elements.\n\t   *\n\t   * Element parameter can be label itself or connection (i.e. sequence flow).\n\t   *\n\t   * @param {djs.model.Base} element\n\t   * @param {string} text\n\t   */\n\t  function setText(element, text) {\n\n\t    // external label if present\n\t    var label = element.label || element;\n\n\t    var labelTarget = element.labelTarget || element;\n\n\t    setLabel(label, text);\n\n\t    return [ label, labelTarget ];\n\t  }\n\n\t  function preExecute(ctx) {\n\t    var element = ctx.element,\n\t        businessObject = element.businessObject,\n\t        newLabel = ctx.newLabel;\n\n\t    if (!isLabel(element)\n\t        && isLabelExternal(element)\n\t        && !hasExternalLabel(element)\n\t        && !isEmptyText$1(newLabel)) {\n\n\t      // create label\n\t      var paddingTop = 7;\n\n\t      var labelCenter = getExternalLabelMid(element);\n\n\t      labelCenter = {\n\t        x: labelCenter.x,\n\t        y: labelCenter.y + paddingTop\n\t      };\n\n\t      modeling.createLabel(element, labelCenter, {\n\t        id: businessObject.id + '_label',\n\t        businessObject: businessObject\n\t      });\n\t    }\n\t  }\n\n\t  function execute(ctx) {\n\t    ctx.oldLabel = getLabel(ctx.element);\n\t    return setText(ctx.element, ctx.newLabel);\n\t  }\n\n\t  function revert(ctx) {\n\t    return setText(ctx.element, ctx.oldLabel);\n\t  }\n\n\t  function postExecute(ctx) {\n\t    var element = ctx.element,\n\t        label = element.label || element,\n\t        newLabel = ctx.newLabel,\n\t        newBounds = ctx.newBounds,\n\t        hints = ctx.hints || {};\n\n\t    // ignore internal labels for elements except text annotations\n\t    if (!isLabel(label) && !is$1(label, 'bpmn:TextAnnotation')) {\n\t      return;\n\t    }\n\n\t    if (isLabel(label) && isEmptyText$1(newLabel)) {\n\n\t      if (hints.removeShape !== false) {\n\t        modeling.removeShape(label, { unsetLabel: false });\n\t      }\n\n\t      return;\n\t    }\n\n\t    var text = getLabel(label);\n\n\t    // resize element based on label _or_ pre-defined bounds\n\t    if (typeof newBounds === 'undefined') {\n\t      newBounds = textRenderer.getExternalLabelBounds(label, text);\n\t    }\n\n\t    // setting newBounds to false or _null_ will\n\t    // disable the postExecute resize operation\n\t    if (newBounds) {\n\t      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS$1);\n\t    }\n\t  }\n\n\t  // API\n\n\t  this.preExecute = preExecute;\n\t  this.execute = execute;\n\t  this.revert = revert;\n\t  this.postExecute = postExecute;\n\t}\n\n\tUpdateLabelHandler.$inject = [\n\t  'modeling',\n\t  'textRenderer'\n\t];\n\n\n\t// helpers ///////////////////////\n\n\tfunction isEmptyText$1(label) {\n\t  return !label || !label.trim();\n\t}\n\n\t/**\n\t * BPMN 2.0 modeling features activator\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementFactory} elementFactory\n\t * @param {CommandStack} commandStack\n\t * @param {BpmnRules} bpmnRules\n\t */\n\tfunction Modeling$1(\n\t    eventBus, elementFactory, commandStack,\n\t    bpmnRules) {\n\n\t  Modeling.call(this, eventBus, elementFactory, commandStack);\n\n\t  this._bpmnRules = bpmnRules;\n\t}\n\n\tinherits_browser(Modeling$1, Modeling);\n\n\tModeling$1.$inject = [\n\t  'eventBus',\n\t  'elementFactory',\n\t  'commandStack',\n\t  'bpmnRules'\n\t];\n\n\n\tModeling$1.prototype.getHandlers = function() {\n\t  var handlers = Modeling.prototype.getHandlers.call(this);\n\n\t  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n\t  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n\t  handlers['lane.add'] = AddLaneHandler;\n\t  handlers['lane.resize'] = ResizeLaneHandler;\n\t  handlers['lane.split'] = SplitLaneHandler;\n\t  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n\t  handlers['id.updateClaim'] = IdClaimHandler;\n\t  handlers['element.setColor'] = SetColorHandler;\n\t  handlers['element.updateLabel'] = UpdateLabelHandler;\n\n\t  return handlers;\n\t};\n\n\n\tModeling$1.prototype.updateLabel = function(element, newLabel, newBounds, hints) {\n\t  this._commandStack.execute('element.updateLabel', {\n\t    element: element,\n\t    newLabel: newLabel,\n\t    newBounds: newBounds,\n\t    hints: hints || {}\n\t  });\n\t};\n\n\n\tModeling$1.prototype.connect = function(source, target, attrs, hints) {\n\n\t  var bpmnRules = this._bpmnRules;\n\n\t  if (!attrs) {\n\t    attrs = bpmnRules.canConnect(source, target);\n\t  }\n\n\t  if (!attrs) {\n\t    return;\n\t  }\n\n\t  return this.createConnection(source, target, attrs, source.parent, hints);\n\t};\n\n\n\tModeling$1.prototype.updateProperties = function(element, properties) {\n\t  this._commandStack.execute('element.updateProperties', {\n\t    element: element,\n\t    properties: properties\n\t  });\n\t};\n\n\tModeling$1.prototype.resizeLane = function(laneShape, newBounds, balanced) {\n\t  this._commandStack.execute('lane.resize', {\n\t    shape: laneShape,\n\t    newBounds: newBounds,\n\t    balanced: balanced\n\t  });\n\t};\n\n\tModeling$1.prototype.addLane = function(targetLaneShape, location) {\n\t  var context = {\n\t    shape: targetLaneShape,\n\t    location: location\n\t  };\n\n\t  this._commandStack.execute('lane.add', context);\n\n\t  return context.newLane;\n\t};\n\n\tModeling$1.prototype.splitLane = function(targetLane, count) {\n\t  this._commandStack.execute('lane.split', {\n\t    shape: targetLane,\n\t    count: count\n\t  });\n\t};\n\n\t/**\n\t * Transform the current diagram into a collaboration.\n\t *\n\t * @return {djs.model.Root} the new root element\n\t */\n\tModeling$1.prototype.makeCollaboration = function() {\n\n\t  var collaborationElement = this._create('root', {\n\t    type: 'bpmn:Collaboration'\n\t  });\n\n\t  var context = {\n\t    newRoot: collaborationElement\n\t  };\n\n\t  this._commandStack.execute('canvas.updateRoot', context);\n\n\t  return collaborationElement;\n\t};\n\n\tModeling$1.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {\n\n\t  this._commandStack.execute('lane.updateRefs', {\n\t    flowNodeShapes: flowNodeShapes,\n\t    laneShapes: laneShapes\n\t  });\n\t};\n\n\t/**\n\t * Transform the current diagram into a process.\n\t *\n\t * @return {djs.model.Root} the new root element\n\t */\n\tModeling$1.prototype.makeProcess = function() {\n\n\t  var processElement = this._create('root', {\n\t    type: 'bpmn:Process'\n\t  });\n\n\t  var context = {\n\t    newRoot: processElement\n\t  };\n\n\t  this._commandStack.execute('canvas.updateRoot', context);\n\t};\n\n\n\tModeling$1.prototype.claimId = function(id, moddleElement) {\n\t  this._commandStack.execute('id.updateClaim', {\n\t    id: id,\n\t    element: moddleElement,\n\t    claiming: true\n\t  });\n\t};\n\n\n\tModeling$1.prototype.unclaimId = function(id, moddleElement) {\n\t  this._commandStack.execute('id.updateClaim', {\n\t    id: id,\n\t    element: moddleElement\n\t  });\n\t};\n\n\tModeling$1.prototype.setColor = function(elements, colors) {\n\t  if (!elements.length) {\n\t    elements = [ elements ];\n\t  }\n\n\t  this._commandStack.execute('element.setColor', {\n\t    elements: elements,\n\t    colors: colors\n\t  });\n\t};\n\n\t/**\n\t * A base connection layouter implementation\n\t * that layouts the connection by directly connecting\n\t * mid(source) + mid(target).\n\t */\n\tfunction BaseLayouter() {}\n\n\n\t/**\n\t * Return the new layouted waypoints for the given connection.\n\t *\n\t * The connection passed is still unchanged; you may figure out about\n\t * the new connection start / end via the layout hints provided.\n\t *\n\t * @param {djs.model.Connection} connection\n\t * @param {Object} [hints]\n\t * @param {Point} [hints.connectionStart]\n\t * @param {Point} [hints.connectionEnd]\n\t * @param {Point} [hints.source]\n\t * @param {Point} [hints.target]\n\t *\n\t * @return {Array<Point>} the layouted connection waypoints\n\t */\n\tBaseLayouter.prototype.layoutConnection = function(connection, hints) {\n\n\t  hints = hints || {};\n\n\t  return [\n\t    hints.connectionStart || getMid(hints.source || connection.source),\n\t    hints.connectionEnd || getMid(hints.target || connection.target)\n\t  ];\n\t};\n\n\tvar MIN_SEGMENT_LENGTH = 20,\n\t    POINT_ORIENTATION_PADDING = 5;\n\n\tvar round$a = Math.round;\n\n\tvar INTERSECTION_THRESHOLD$1 = 20,\n\t    ORIENTATION_THRESHOLD = {\n\t      'h:h': 20,\n\t      'v:v': 20,\n\t      'h:v': -10,\n\t      'v:h': -10\n\t    };\n\n\tfunction needsTurn(orientation, startDirection) {\n\t  return !{\n\t    t: /top/,\n\t    r: /right/,\n\t    b: /bottom/,\n\t    l: /left/,\n\t    h: /./,\n\t    v: /./\n\t  }[startDirection].test(orientation);\n\t}\n\n\tfunction canLayoutStraight(direction, targetOrientation) {\n\t  return {\n\t    t: /top/,\n\t    r: /right/,\n\t    b: /bottom/,\n\t    l: /left/,\n\t    h: /left|right/,\n\t    v: /top|bottom/\n\t  }[direction].test(targetOrientation);\n\t}\n\n\tfunction getSegmentBendpoints(a, b, directions) {\n\t  var orientation = getOrientation(b, a, POINT_ORIENTATION_PADDING);\n\n\t  var startDirection = directions.split(':')[0];\n\n\t  var xmid = round$a((b.x - a.x) / 2 + a.x),\n\t      ymid = round$a((b.y - a.y) / 2 + a.y);\n\n\t  var segmentEnd, segmentDirections;\n\n\t  var layoutStraight = canLayoutStraight(startDirection, orientation),\n\t      layoutHorizontal = /h|r|l/.test(startDirection),\n\t      layoutTurn = false;\n\n\t  var turnNextDirections = false;\n\n\t  if (layoutStraight) {\n\t    segmentEnd = layoutHorizontal ? { x: xmid, y: a.y } : { x: a.x, y: ymid };\n\n\t    segmentDirections = layoutHorizontal ? 'h:h' : 'v:v';\n\t  } else {\n\t    layoutTurn = needsTurn(orientation, startDirection);\n\n\t    segmentDirections = layoutHorizontal ? 'h:v' : 'v:h';\n\n\t    if (layoutTurn) {\n\n\t      if (layoutHorizontal) {\n\t        turnNextDirections = ymid === a.y;\n\n\t        segmentEnd = {\n\t          x: a.x + MIN_SEGMENT_LENGTH * (/l/.test(startDirection) ? -1 : 1),\n\t          y: turnNextDirections ? ymid + MIN_SEGMENT_LENGTH : ymid\n\t        };\n\t      } else {\n\t        turnNextDirections = xmid === a.x;\n\n\t        segmentEnd = {\n\t          x: turnNextDirections ? xmid + MIN_SEGMENT_LENGTH : xmid,\n\t          y: a.y + MIN_SEGMENT_LENGTH * (/t/.test(startDirection) ? -1 : 1)\n\t        };\n\t      }\n\n\t    } else {\n\t      segmentEnd = {\n\t        x: xmid,\n\t        y: ymid\n\t      };\n\t    }\n\t  }\n\n\t  return {\n\t    waypoints: getBendpoints(a, segmentEnd, segmentDirections).concat(segmentEnd),\n\t    directions:  segmentDirections,\n\t    turnNextDirections: turnNextDirections\n\t  };\n\t}\n\n\tfunction getStartSegment(a, b, directions) {\n\t  return getSegmentBendpoints(a, b, directions);\n\t}\n\n\tfunction getEndSegment(a, b, directions) {\n\t  var invertedSegment = getSegmentBendpoints(b, a, invertDirections(directions));\n\n\t  return {\n\t    waypoints: invertedSegment.waypoints.slice().reverse(),\n\t    directions: invertDirections(invertedSegment.directions),\n\t    turnNextDirections: invertedSegment.turnNextDirections\n\t  };\n\t}\n\n\tfunction getMidSegment(startSegment, endSegment) {\n\n\t  var startDirection = startSegment.directions.split(':')[1],\n\t      endDirection = endSegment.directions.split(':')[0];\n\n\t  if (startSegment.turnNextDirections) {\n\t    startDirection = startDirection == 'h' ? 'v' : 'h';\n\t  }\n\n\t  if (endSegment.turnNextDirections) {\n\t    endDirection = endDirection == 'h' ? 'v' : 'h';\n\t  }\n\n\t  var directions = startDirection + ':' + endDirection;\n\n\t  var bendpoints = getBendpoints(\n\t    startSegment.waypoints[startSegment.waypoints.length - 1],\n\t    endSegment.waypoints[0],\n\t    directions\n\t  );\n\n\t  return {\n\t    waypoints: bendpoints,\n\t    directions: directions\n\t  };\n\t}\n\n\tfunction invertDirections(directions) {\n\t  return directions.split(':').reverse().join(':');\n\t}\n\n\t/**\n\t * Handle simple layouts with maximum two bendpoints.\n\t */\n\tfunction getSimpleBendpoints(a, b, directions) {\n\n\t  var xmid = round$a((b.x - a.x) / 2 + a.x),\n\t      ymid = round$a((b.y - a.y) / 2 + a.y);\n\n\t  // one point, right or left from a\n\t  if (directions === 'h:v') {\n\t    return [ { x: b.x, y: a.y } ];\n\t  }\n\n\t  // one point, above or below a\n\t  if (directions === 'v:h') {\n\t    return [ { x: a.x, y: b.y } ];\n\t  }\n\n\t  // vertical segment between a and b\n\t  if (directions === 'h:h') {\n\t    return [\n\t      { x: xmid, y: a.y },\n\t      { x: xmid, y: b.y }\n\t    ];\n\t  }\n\n\t  // horizontal segment between a and b\n\t  if (directions === 'v:v') {\n\t    return [\n\t      { x: a.x, y: ymid },\n\t      { x: b.x, y: ymid }\n\t    ];\n\t  }\n\n\t  throw new Error('invalid directions: can only handle varians of [hv]:[hv]');\n\t}\n\n\n\t/**\n\t * Returns the mid points for a manhattan connection between two points.\n\t *\n\t * @example h:h (horizontal:horizontal)\n\t *\n\t * [a]----[x]\n\t *         |\n\t *        [x]----[b]\n\t *\n\t * @example h:v (horizontal:vertical)\n\t *\n\t * [a]----[x]\n\t *         |\n\t *        [b]\n\t *\n\t * @example h:r (horizontal:right)\n\t *\n\t * [a]----[x]\n\t *         |\n\t *    [b]-[x]\n\t *\n\t * @param  {Point} a\n\t * @param  {Point} b\n\t * @param  {string} directions\n\t *\n\t * @return {Array<Point>}\n\t */\n\tfunction getBendpoints(a, b, directions) {\n\t  directions = directions || 'h:h';\n\n\t  if (!isValidDirections(directions)) {\n\t    throw new Error(\n\t      'unknown directions: <' + directions + '>: ' +\n\t      'must be specified as <start>:<end> ' +\n\t      'with start/end in { h,v,t,r,b,l }'\n\t    );\n\t  }\n\n\t  // compute explicit directions, involving trbl dockings\n\t  // using a three segmented layouting algorithm\n\t  if (isExplicitDirections(directions)) {\n\t    var startSegment = getStartSegment(a, b, directions),\n\t        endSegment = getEndSegment(a, b, directions),\n\t        midSegment = getMidSegment(startSegment, endSegment);\n\n\t    return [].concat(\n\t      startSegment.waypoints,\n\t      midSegment.waypoints,\n\t      endSegment.waypoints\n\t    );\n\t  }\n\n\t  // handle simple [hv]:[hv] cases that can be easily computed\n\t  return getSimpleBendpoints(a, b, directions);\n\t}\n\n\t/**\n\t * Create a connection between the two points according\n\t * to the manhattan layout (only horizontal and vertical) edges.\n\t *\n\t * @param {Point} a\n\t * @param {Point} b\n\t *\n\t * @param {string} [directions='h:h'] specifies manhattan directions for each point as {adirection}:{bdirection}.\n\t                   A directionfor a point is either `h` (horizontal) or `v` (vertical)\n\t *\n\t * @return {Array<Point>}\n\t */\n\tfunction connectPoints(a, b, directions) {\n\n\t  var points = getBendpoints(a, b, directions);\n\n\t  points.unshift(a);\n\t  points.push(b);\n\n\t  return withoutRedundantPoints(points);\n\t}\n\n\n\t/**\n\t * Connect two rectangles using a manhattan layouted connection.\n\t *\n\t * @param {Bounds} source source rectangle\n\t * @param {Bounds} target target rectangle\n\t * @param {Point} [start] source docking\n\t * @param {Point} [end] target docking\n\t *\n\t * @param {Object} [hints]\n\t * @param {string} [hints.preserveDocking=source] preserve docking on selected side\n\t * @param {Array<string>} [hints.preferredLayouts]\n\t * @param {Point|boolean} [hints.connectionStart] whether the start changed\n\t * @param {Point|boolean} [hints.connectionEnd] whether the end changed\n\t *\n\t * @return {Array<Point>} connection points\n\t */\n\tfunction connectRectangles(source, target, start, end, hints) {\n\n\t  var preferredLayouts = hints && hints.preferredLayouts || [];\n\n\t  var preferredLayout = without(preferredLayouts, 'straight')[0] || 'h:h';\n\n\t  var threshold = ORIENTATION_THRESHOLD[preferredLayout] || 0;\n\n\t  var orientation = getOrientation(source, target, threshold);\n\n\t  var directions = getDirections(orientation, preferredLayout);\n\n\t  start = start || getMid(source);\n\t  end = end || getMid(target);\n\n\t  var directionSplit = directions.split(':');\n\n\t  // compute actual docking points for start / end\n\t  // this ensures we properly layout only parts of the\n\t  // connection that lies in between the two rectangles\n\t  var startDocking = getDockingPoint(start, source, directionSplit[0], invertOrientation(orientation)),\n\t      endDocking = getDockingPoint(end, target, directionSplit[1], orientation);\n\n\t  return connectPoints(startDocking, endDocking, directions);\n\t}\n\n\n\t/**\n\t * Repair the connection between two rectangles, of which one has been updated.\n\t *\n\t * @param {Bounds} source\n\t * @param {Bounds} target\n\t * @param {Point} [start]\n\t * @param {Point} [end]\n\t * @param {Array<Point>} [waypoints]\n\t * @param {Object} [hints]\n\t * @param {Array<string>} [hints.preferredLayouts] list of preferred layouts\n\t * @param {boolean} [hints.connectionStart]\n\t * @param {boolean} [hints.connectionEnd]\n\t *\n\t * @return {Array<Point>} repaired waypoints\n\t */\n\tfunction repairConnection(source, target, start, end, waypoints, hints) {\n\n\t  if (isArray(start)) {\n\t    waypoints = start;\n\t    hints = end;\n\n\t    start = getMid(source);\n\t    end = getMid(target);\n\t  }\n\n\t  hints = assign({ preferredLayouts: [] }, hints);\n\t  waypoints = waypoints || [];\n\n\t  var preferredLayouts = hints.preferredLayouts,\n\t      preferStraight = preferredLayouts.indexOf('straight') !== -1,\n\t      repairedWaypoints;\n\n\t  // just layout non-existing or simple connections\n\t  // attempt to render straight lines, if required\n\n\t  // attempt to layout a straight line\n\t  repairedWaypoints = preferStraight && tryLayoutStraight(source, target, start, end, hints);\n\n\t  if (repairedWaypoints) {\n\t    return repairedWaypoints;\n\t  }\n\n\t  // try to layout from end\n\t  repairedWaypoints = hints.connectionEnd && tryRepairConnectionEnd(target, source, end, waypoints);\n\n\t  if (repairedWaypoints) {\n\t    return repairedWaypoints;\n\t  }\n\n\t  // try to layout from start\n\t  repairedWaypoints = hints.connectionStart && tryRepairConnectionStart(source, target, start, waypoints);\n\n\t  if (repairedWaypoints) {\n\t    return repairedWaypoints;\n\t  }\n\n\t  // or whether nothing seems to have changed\n\t  if (!hints.connectionStart && !hints.connectionEnd && waypoints && waypoints.length) {\n\t    return waypoints;\n\t  }\n\n\t  // simply reconnect if nothing else worked\n\t  return connectRectangles(source, target, start, end, hints);\n\t}\n\n\n\tfunction inRange(a, start, end) {\n\t  return a >= start && a <= end;\n\t}\n\n\tfunction isInRange(axis, a, b) {\n\t  var size = {\n\t    x: 'width',\n\t    y: 'height'\n\t  };\n\n\t  return inRange(a[axis], b[axis], b[axis] + b[size[axis]]);\n\t}\n\n\t/**\n\t * Layout a straight connection\n\t *\n\t * @param {Bounds} source\n\t * @param {Bounds} target\n\t * @param {Point} start\n\t * @param {Point} end\n\t * @param {Object} [hints]\n\t *\n\t * @return {Array<Point>|null} waypoints if straight layout worked\n\t */\n\tfunction tryLayoutStraight(source, target, start, end, hints) {\n\t  var axis = {},\n\t      primaryAxis,\n\t      orientation;\n\n\t  orientation = getOrientation(source, target);\n\n\t  // only layout a straight connection if shapes are\n\t  // horizontally or vertically aligned\n\t  if (!/^(top|bottom|left|right)$/.test(orientation)) {\n\t    return null;\n\t  }\n\n\t  if (/top|bottom/.test(orientation)) {\n\t    primaryAxis = 'x';\n\t  }\n\n\t  if (/left|right/.test(orientation)) {\n\t    primaryAxis = 'y';\n\t  }\n\n\t  if (hints.preserveDocking === 'target') {\n\n\t    if (!isInRange(primaryAxis, end, source)) {\n\t      return null;\n\t    }\n\n\t    axis[primaryAxis] = end[primaryAxis];\n\n\t    return [\n\t      {\n\t        x: axis.x !== undefined ? axis.x : start.x,\n\t        y: axis.y !== undefined ? axis.y : start.y,\n\t        original: {\n\t          x: axis.x !== undefined ? axis.x : start.x,\n\t          y: axis.y !== undefined ? axis.y : start.y\n\t        }\n\t      },\n\t      {\n\t        x: end.x,\n\t        y: end.y\n\t      }\n\t    ];\n\n\t  } else {\n\n\t    if (!isInRange(primaryAxis, start, target)) {\n\t      return null;\n\t    }\n\n\t    axis[primaryAxis] = start[primaryAxis];\n\n\t    return [\n\t      {\n\t        x: start.x,\n\t        y: start.y\n\t      },\n\t      {\n\t        x: axis.x !== undefined ? axis.x : end.x,\n\t        y: axis.y !== undefined ? axis.y : end.y,\n\t        original: {\n\t          x: axis.x !== undefined ? axis.x : end.x,\n\t          y: axis.y !== undefined ? axis.y : end.y\n\t        }\n\t      }\n\t    ];\n\t  }\n\n\t}\n\n\t/**\n\t * Repair a connection from start.\n\t *\n\t * @param {Bounds} moved\n\t * @param {Bounds} other\n\t * @param {Point} newDocking\n\t * @param {Array<Point>} points originalPoints from moved to other\n\t *\n\t * @return {Array<Point>|null} the repaired points between the two rectangles\n\t */\n\tfunction tryRepairConnectionStart(moved, other, newDocking, points) {\n\t  return _tryRepairConnectionSide(moved, other, newDocking, points);\n\t}\n\n\t/**\n\t * Repair a connection from end.\n\t *\n\t * @param {Bounds} moved\n\t * @param {Bounds} other\n\t * @param {Point} newDocking\n\t * @param {Array<Point>} points originalPoints from moved to other\n\t *\n\t * @return {Array<Point>|null} the repaired points between the two rectangles\n\t */\n\tfunction tryRepairConnectionEnd(moved, other, newDocking, points) {\n\t  var waypoints = points.slice().reverse();\n\n\t  waypoints = _tryRepairConnectionSide(moved, other, newDocking, waypoints);\n\n\t  return waypoints ? waypoints.reverse() : null;\n\t}\n\n\t/**\n\t * Repair a connection from one side that moved.\n\t *\n\t * @param {Bounds} moved\n\t * @param {Bounds} other\n\t * @param {Point} newDocking\n\t * @param {Array<Point>} points originalPoints from moved to other\n\t *\n\t * @return {Array<Point>} the repaired points between the two rectangles\n\t */\n\tfunction _tryRepairConnectionSide(moved, other, newDocking, points) {\n\n\t  function needsRelayout(points) {\n\t    if (points.length < 3) {\n\t      return true;\n\t    }\n\n\t    if (points.length > 4) {\n\t      return false;\n\t    }\n\n\t    // relayout if two points overlap\n\t    // this is most likely due to\n\t    return !!find(points, function(p, idx) {\n\t      var q = points[idx - 1];\n\n\t      return q && pointDistance(p, q) < 3;\n\t    });\n\t  }\n\n\t  function repairBendpoint(candidate, oldPeer, newPeer) {\n\n\t    var alignment = pointsAligned(oldPeer, candidate);\n\n\t    switch (alignment) {\n\t    case 'v':\n\n\t      // repair horizontal alignment\n\t      return { x: newPeer.x, y: candidate.y };\n\t    case 'h':\n\n\t      // repair vertical alignment\n\t      return { x: candidate.x, y: newPeer.y };\n\t    }\n\n\t    return { x: candidate.x, y: candidate. y };\n\t  }\n\n\t  function removeOverlapping(points, a, b) {\n\t    var i;\n\n\t    for (i = points.length - 2; i !== 0; i--) {\n\n\t      // intersects (?) break, remove all bendpoints up to this one and relayout\n\t      if (pointInRect(points[i], a, INTERSECTION_THRESHOLD$1) ||\n\t          pointInRect(points[i], b, INTERSECTION_THRESHOLD$1)) {\n\n\t        // return sliced old connection\n\t        return points.slice(i);\n\t      }\n\t    }\n\n\t    return points;\n\t  }\n\n\t  // (0) only repair what has layoutable bendpoints\n\n\t  // (1) if only one bendpoint and on shape moved onto other shapes axis\n\t  //     (horizontally / vertically), relayout\n\n\t  if (needsRelayout(points)) {\n\t    return null;\n\t  }\n\n\t  var oldDocking = points[0],\n\t      newPoints = points.slice(),\n\t      slicedPoints;\n\n\t  // (2) repair only last line segment and only if it was layouted before\n\n\t  newPoints[0] = newDocking;\n\t  newPoints[1] = repairBendpoint(newPoints[1], oldDocking, newDocking);\n\n\n\t  // (3) if shape intersects with any bendpoint after repair,\n\t  //     remove all segments up to this bendpoint and repair from there\n\t  slicedPoints = removeOverlapping(newPoints, moved, other);\n\n\t  if (slicedPoints !== newPoints) {\n\t    newPoints = _tryRepairConnectionSide(moved, other, newDocking, slicedPoints);\n\t  }\n\n\t  // (4) do NOT repair if repaired bendpoints are aligned\n\t  if (newPoints && pointsAligned(newPoints)) {\n\t    return null;\n\t  }\n\n\t  return newPoints;\n\t}\n\n\n\t/**\n\t * Returns the manhattan directions connecting two rectangles\n\t * with the given orientation.\n\t *\n\t * Will always return the default layout, if it is specific\n\t * regarding sides already (trbl).\n\t *\n\t * @example\n\t *\n\t * getDirections('top'); // -> 'v:v'\n\t * getDirections('intersect'); // -> 't:t'\n\t *\n\t * getDirections('top-right', 'v:h'); // -> 'v:h'\n\t * getDirections('top-right', 'h:h'); // -> 'h:h'\n\t *\n\t *\n\t * @param {string} orientation\n\t * @param {string} defaultLayout\n\t *\n\t * @return {string}\n\t */\n\tfunction getDirections(orientation, defaultLayout) {\n\n\t  // don't override specific trbl directions\n\t  if (isExplicitDirections(defaultLayout)) {\n\t    return defaultLayout;\n\t  }\n\n\t  switch (orientation) {\n\t  case 'intersect':\n\t    return 't:t';\n\n\t  case 'top':\n\t  case 'bottom':\n\t    return 'v:v';\n\n\t  case 'left':\n\t  case 'right':\n\t    return 'h:h';\n\n\t  // 'top-left'\n\t  // 'top-right'\n\t  // 'bottom-left'\n\t  // 'bottom-right'\n\t  default:\n\t    return defaultLayout;\n\t  }\n\t}\n\n\tfunction isValidDirections(directions) {\n\t  return directions && /^h|v|t|r|b|l:h|v|t|r|b|l$/.test(directions);\n\t}\n\n\tfunction isExplicitDirections(directions) {\n\t  return directions && /t|r|b|l/.test(directions);\n\t}\n\n\tfunction invertOrientation(orientation) {\n\t  return {\n\t    'top': 'bottom',\n\t    'bottom': 'top',\n\t    'left': 'right',\n\t    'right': 'left',\n\t    'top-left': 'bottom-right',\n\t    'bottom-right': 'top-left',\n\t    'top-right': 'bottom-left',\n\t    'bottom-left': 'top-right',\n\t  }[orientation];\n\t}\n\n\tfunction getDockingPoint(point, rectangle, dockingDirection, targetOrientation) {\n\n\t  // ensure we end up with a specific docking direction\n\t  // based on the targetOrientation, if <h|v> is being passed\n\n\t  if (dockingDirection === 'h') {\n\t    dockingDirection = /left/.test(targetOrientation) ? 'l' : 'r';\n\t  }\n\n\t  if (dockingDirection === 'v') {\n\t    dockingDirection = /top/.test(targetOrientation) ? 't' : 'b';\n\t  }\n\n\t  if (dockingDirection === 't') {\n\t    return { original: point, x: point.x, y: rectangle.y };\n\t  }\n\n\t  if (dockingDirection === 'r') {\n\t    return { original: point, x: rectangle.x + rectangle.width, y: point.y };\n\t  }\n\n\t  if (dockingDirection === 'b') {\n\t    return { original: point, x: point.x, y: rectangle.y + rectangle.height };\n\t  }\n\n\t  if (dockingDirection === 'l') {\n\t    return { original: point, x: rectangle.x, y: point.y };\n\t  }\n\n\t  throw new Error('unexpected dockingDirection: <' + dockingDirection + '>');\n\t}\n\n\n\t/**\n\t * Return list of waypoints with redundant ones filtered out.\n\t *\n\t * @example\n\t *\n\t * Original points:\n\t *\n\t *   [x] ----- [x] ------ [x]\n\t *                         |\n\t *                        [x] ----- [x] - [x]\n\t *\n\t * Filtered:\n\t *\n\t *   [x] ---------------- [x]\n\t *                         |\n\t *                        [x] ----------- [x]\n\t *\n\t * @param  {Array<Point>} waypoints\n\t *\n\t * @return {Array<Point>}\n\t */\n\tfunction withoutRedundantPoints(waypoints) {\n\t  return waypoints.reduce(function(points, p, idx) {\n\n\t    var previous = points[points.length - 1],\n\t        next = waypoints[idx + 1];\n\n\t    if (!pointsOnLine(previous, next, p, 0)) {\n\t      points.push(p);\n\t    }\n\n\t    return points;\n\t  }, []);\n\t}\n\n\tvar ATTACH_ORIENTATION_PADDING = -10,\n\t    BOUNDARY_TO_HOST_THRESHOLD = 40;\n\n\tvar oppositeOrientationMapping = {\n\t  'top': 'bottom',\n\t  'top-right': 'bottom-left',\n\t  'top-left': 'bottom-right',\n\t  'right': 'left',\n\t  'bottom': 'top',\n\t  'bottom-right': 'top-left',\n\t  'bottom-left': 'top-right',\n\t  'left': 'right'\n\t};\n\n\tvar orientationDirectionMapping = {\n\t  top: 't',\n\t  right: 'r',\n\t  bottom: 'b',\n\t  left: 'l'\n\t};\n\n\n\tfunction BpmnLayouter() {}\n\n\tinherits_browser(BpmnLayouter, BaseLayouter);\n\n\n\tBpmnLayouter.prototype.layoutConnection = function(connection, hints) {\n\t  if (!hints) {\n\t    hints = {};\n\t  }\n\n\t  var source = hints.source || connection.source,\n\t      target = hints.target || connection.target,\n\t      waypoints = hints.waypoints || connection.waypoints,\n\t      connectionStart = hints.connectionStart,\n\t      connectionEnd = hints.connectionEnd;\n\n\t  var manhattanOptions,\n\t      updatedWaypoints;\n\n\t  if (!connectionStart) {\n\t    connectionStart = getConnectionDocking(waypoints && waypoints[ 0 ], source);\n\t  }\n\n\t  if (!connectionEnd) {\n\t    connectionEnd = getConnectionDocking(waypoints && waypoints[ waypoints.length - 1 ], target);\n\t  }\n\n\t  // TODO(nikku): support vertical modeling\n\t  // and invert preferredLayouts accordingly\n\n\t  if (is$1(connection, 'bpmn:Association') ||\n\t      is$1(connection, 'bpmn:DataAssociation')) {\n\n\t    if (waypoints && !isCompensationAssociation(source, target)) {\n\t      return [].concat([ connectionStart ], waypoints.slice(1, -1), [ connectionEnd ]);\n\t    }\n\t  }\n\n\t  if (is$1(connection, 'bpmn:MessageFlow')) {\n\t    manhattanOptions = getMessageFlowManhattanOptions(source, target);\n\t  } else if (is$1(connection, 'bpmn:SequenceFlow') || isCompensationAssociation(source, target)) {\n\n\t    // layout all connection between flow elements h:h, except for\n\t    // (1) outgoing of boundary events -> layout based on attach orientation and target orientation\n\t    // (2) incoming/outgoing of gateways -> v:h for outgoing, h:v for incoming\n\t    // (3) loops\n\t    if (source === target) {\n\t      manhattanOptions = {\n\t        preferredLayouts: getLoopPreferredLayout(source, connection)\n\t      };\n\t    } else if (is$1(source, 'bpmn:BoundaryEvent')) {\n\t      manhattanOptions = {\n\t        preferredLayouts: getBoundaryEventPreferredLayouts(source, target, connectionEnd)\n\t      };\n\t    } else if (isExpandedSubProcess$1(source) || isExpandedSubProcess$1(target)) {\n\t      manhattanOptions = getSubProcessManhattanOptions(source);\n\t    } else if (is$1(source, 'bpmn:Gateway')) {\n\t      manhattanOptions = {\n\t        preferredLayouts: [ 'v:h' ]\n\t      };\n\t    } else if (is$1(target, 'bpmn:Gateway')) {\n\t      manhattanOptions = {\n\t        preferredLayouts: [ 'h:v' ]\n\t      };\n\t    } else {\n\t      manhattanOptions = {\n\t        preferredLayouts: [ 'h:h' ]\n\t      };\n\t    }\n\t  }\n\n\t  if (manhattanOptions) {\n\t    manhattanOptions = assign(manhattanOptions, hints);\n\n\t    updatedWaypoints = withoutRedundantPoints(repairConnection(\n\t      source,\n\t      target,\n\t      connectionStart,\n\t      connectionEnd,\n\t      waypoints,\n\t      manhattanOptions\n\t    ));\n\t  }\n\n\t  return updatedWaypoints || [ connectionStart, connectionEnd ];\n\t};\n\n\n\t// helpers //////////\n\n\tfunction getAttachOrientation(attachedElement) {\n\t  var hostElement = attachedElement.host;\n\n\t  return getOrientation(getMid(attachedElement), hostElement, ATTACH_ORIENTATION_PADDING);\n\t}\n\n\tfunction getMessageFlowManhattanOptions(source, target) {\n\t  return {\n\t    preferredLayouts: [ 'straight', 'v:v' ],\n\t    preserveDocking: getMessageFlowPreserveDocking(source, target)\n\t  };\n\t}\n\n\tfunction getMessageFlowPreserveDocking(source, target) {\n\n\t  // (1) docking element connected to participant has precedence\n\t  if (is$1(target, 'bpmn:Participant')) {\n\t    return 'source';\n\t  }\n\n\t  if (is$1(source, 'bpmn:Participant')) {\n\t    return 'target';\n\t  }\n\n\t  // (2) docking element connected to expanded sub-process has precedence\n\t  if (isExpandedSubProcess$1(target)) {\n\t    return 'source';\n\t  }\n\n\t  if (isExpandedSubProcess$1(source)) {\n\t    return 'target';\n\t  }\n\n\t  // (3) docking event has precedence\n\t  if (is$1(target, 'bpmn:Event')) {\n\t    return 'target';\n\t  }\n\n\t  if (is$1(source, 'bpmn:Event')) {\n\t    return 'source';\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getSubProcessManhattanOptions(source) {\n\t  return {\n\t    preferredLayouts: [ 'straight', 'h:h' ],\n\t    preserveDocking: getSubProcessPreserveDocking(source)\n\t  };\n\t}\n\n\tfunction getSubProcessPreserveDocking(source) {\n\t  return isExpandedSubProcess$1(source) ? 'target' : 'source';\n\t}\n\n\tfunction getConnectionDocking(point, shape) {\n\t  return point ? (point.original || point) : getMid(shape);\n\t}\n\n\tfunction isCompensationAssociation(source, target) {\n\t  return is$1(target, 'bpmn:Activity') &&\n\t    is$1(source, 'bpmn:BoundaryEvent') &&\n\t    target.businessObject.isForCompensation;\n\t}\n\n\tfunction isExpandedSubProcess$1(element) {\n\t  return is$1(element, 'bpmn:SubProcess') && isExpanded(element);\n\t}\n\n\tfunction isSame$1(a, b) {\n\t  return a === b;\n\t}\n\n\tfunction isAnyOrientation(orientation, orientations) {\n\t  return orientations.indexOf(orientation) !== -1;\n\t}\n\n\tfunction getHorizontalOrientation(orientation) {\n\t  var matches = /right|left/.exec(orientation);\n\n\t  return matches && matches[0];\n\t}\n\n\tfunction getVerticalOrientation(orientation) {\n\t  var matches = /top|bottom/.exec(orientation);\n\n\t  return matches && matches[0];\n\t}\n\n\tfunction isOppositeOrientation(a, b) {\n\t  return oppositeOrientationMapping[a] === b;\n\t}\n\n\tfunction isOppositeHorizontalOrientation(a, b) {\n\t  var horizontalOrientation = getHorizontalOrientation(a);\n\n\t  var oppositeHorizontalOrientation = oppositeOrientationMapping[horizontalOrientation];\n\n\t  return b.indexOf(oppositeHorizontalOrientation) !== -1;\n\t}\n\n\tfunction isOppositeVerticalOrientation(a, b) {\n\t  var verticalOrientation = getVerticalOrientation(a);\n\n\t  var oppositeVerticalOrientation = oppositeOrientationMapping[verticalOrientation];\n\n\t  return b.indexOf(oppositeVerticalOrientation) !== -1;\n\t}\n\n\tfunction isHorizontalOrientation(orientation) {\n\t  return orientation === 'right' || orientation === 'left';\n\t}\n\n\tfunction getLoopPreferredLayout(source, connection) {\n\t  var waypoints = connection.waypoints;\n\n\t  var orientation = waypoints && waypoints.length && getOrientation(waypoints[0], source);\n\n\t  if (orientation === 'top') {\n\t    return [ 't:r' ];\n\t  } else if (orientation === 'right') {\n\t    return [ 'r:b' ];\n\t  } else if (orientation === 'left') {\n\t    return [ 'l:t' ];\n\t  }\n\n\t  return [ 'b:l' ];\n\t}\n\n\tfunction getBoundaryEventPreferredLayouts(source, target, end) {\n\t  var sourceMid = getMid(source),\n\t      targetMid = getMid(target),\n\t      attachOrientation = getAttachOrientation(source),\n\t      sourceLayout,\n\t      targetLayout;\n\n\t  var isLoop = isSame$1(source.host, target);\n\n\t  var attachedToSide = isAnyOrientation(attachOrientation, [ 'top', 'right', 'bottom', 'left' ]);\n\n\t  var targetOrientation = getOrientation(targetMid, sourceMid, {\n\t    x: source.width / 2 + target.width / 2,\n\t    y: source.height / 2 + target.height / 2\n\t  });\n\n\t  if (isLoop) {\n\t    return getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end);\n\t  }\n\n\t  // source layout\n\t  sourceLayout = getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide);\n\n\t  // target layout\n\t  targetLayout = getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide);\n\n\t  return [ sourceLayout + ':' + targetLayout ];\n\t}\n\n\tfunction getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end) {\n\t  var orientation = attachedToSide ? attachOrientation : getVerticalOrientation(attachOrientation),\n\t      sourceLayout = orientationDirectionMapping[ orientation ],\n\t      targetLayout;\n\n\t  if (attachedToSide) {\n\t    if (isHorizontalOrientation(attachOrientation)) {\n\t      targetLayout = shouldConnectToSameSide('y', source, target, end) ? 'h' : 'b';\n\t    } else {\n\t      targetLayout = shouldConnectToSameSide('x', source, target, end) ? 'v' : 'l';\n\t    }\n\t  } else {\n\t    targetLayout = 'v';\n\t  }\n\n\t  return [ sourceLayout + ':' + targetLayout ];\n\t}\n\n\tfunction shouldConnectToSameSide(axis, source, target, end) {\n\t  var threshold = BOUNDARY_TO_HOST_THRESHOLD;\n\n\t  return !(\n\t    areCloseOnAxis(axis, end, target, threshold) ||\n\t    areCloseOnAxis(axis, end, {\n\t      x: target.x + target.width,\n\t      y: target.y + target.height\n\t    }, threshold) ||\n\t    areCloseOnAxis(axis, end, getMid(source), threshold)\n\t  );\n\t}\n\n\tfunction areCloseOnAxis(axis, a, b, threshold) {\n\t  return Math.abs(a[ axis ] - b[ axis ]) < threshold;\n\t}\n\n\tfunction getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide) {\n\n\t  // attached to either top, right, bottom or left side\n\t  if (attachedToSide) {\n\t    return orientationDirectionMapping[ attachOrientation ];\n\t  }\n\n\t  // attached to either top-right, top-left, bottom-right or bottom-left corner\n\n\t  // same vertical or opposite horizontal orientation\n\t  if (isSame$1(\n\t    getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)\n\t  ) || isOppositeOrientation(\n\t    getHorizontalOrientation(attachOrientation), getHorizontalOrientation(targetOrientation)\n\t  )) {\n\t    return orientationDirectionMapping[ getVerticalOrientation(attachOrientation) ];\n\t  }\n\n\t  // fallback\n\t  return orientationDirectionMapping[ getHorizontalOrientation(attachOrientation) ];\n\t}\n\n\tfunction getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide) {\n\n\t  // attached to either top, right, bottom or left side\n\t  if (attachedToSide) {\n\t    if (isHorizontalOrientation(attachOrientation)) {\n\n\t      // orientation is right or left\n\n\t      // opposite horizontal orientation or same orientation\n\t      if (\n\t        isOppositeHorizontalOrientation(attachOrientation, targetOrientation) ||\n\t        isSame$1(attachOrientation, targetOrientation)\n\t      ) {\n\t        return 'h';\n\t      }\n\n\t      // fallback\n\t      return 'v';\n\t    } else {\n\n\t      // orientation is top or bottom\n\n\t      // opposite vertical orientation or same orientation\n\t      if (\n\t        isOppositeVerticalOrientation(attachOrientation, targetOrientation) ||\n\t        isSame$1(attachOrientation, targetOrientation)\n\t      ) {\n\t        return 'v';\n\t      }\n\n\t      // fallback\n\t      return 'h';\n\t    }\n\t  }\n\n\t  // attached to either top-right, top-left, bottom-right or bottom-left corner\n\n\t  // orientation is right, left\n\t  // or same vertical orientation but also right or left\n\t  if (isHorizontalOrientation(targetOrientation) ||\n\t    (isSame$1(getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)) &&\n\t      getHorizontalOrientation(targetOrientation))) {\n\t    return 'h';\n\t  } else {\n\t    return 'v';\n\t  }\n\t}\n\n\tfunction dockingToPoint(docking) {\n\n\t  // use the dockings actual point and\n\t  // retain the original docking\n\t  return assign({ original: docking.point.original || docking.point }, docking.actual);\n\t}\n\n\n\t/**\n\t * A {@link ConnectionDocking} that crops connection waypoints based on\n\t * the path(s) of the connection source and target.\n\t *\n\t * @param {djs.core.ElementRegistry} elementRegistry\n\t */\n\tfunction CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n\t  this._elementRegistry = elementRegistry;\n\t  this._graphicsFactory = graphicsFactory;\n\t}\n\n\tCroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];\n\n\n\t/**\n\t * @inheritDoc ConnectionDocking#getCroppedWaypoints\n\t */\n\tCroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {\n\n\t  source = source || connection.source;\n\t  target = target || connection.target;\n\n\t  var sourceDocking = this.getDockingPoint(connection, source, true),\n\t      targetDocking = this.getDockingPoint(connection, target);\n\n\t  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n\n\t  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n\t  croppedWaypoints.push(dockingToPoint(targetDocking));\n\n\t  return croppedWaypoints;\n\t};\n\n\t/**\n\t * Return the connection docking point on the specified shape\n\t *\n\t * @inheritDoc ConnectionDocking#getDockingPoint\n\t */\n\tCroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {\n\n\t  var waypoints = connection.waypoints,\n\t      dockingIdx,\n\t      dockingPoint,\n\t      croppedPoint;\n\n\t  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n\t  dockingPoint = waypoints[dockingIdx];\n\n\t  croppedPoint = this._getIntersection(shape, connection, dockStart);\n\n\t  return {\n\t    point: dockingPoint,\n\t    actual: croppedPoint || dockingPoint,\n\t    idx: dockingIdx\n\t  };\n\t};\n\n\n\t// helpers //////////////////////\n\n\tCroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {\n\n\t  var shapePath = this._getShapePath(shape),\n\t      connectionPath = this._getConnectionPath(connection);\n\n\t  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n\t};\n\n\tCroppingConnectionDocking.prototype._getConnectionPath = function(connection) {\n\t  return this._graphicsFactory.getConnectionPath(connection);\n\t};\n\n\tCroppingConnectionDocking.prototype._getShapePath = function(shape) {\n\t  return this._graphicsFactory.getShapePath(shape);\n\t};\n\n\tCroppingConnectionDocking.prototype._getGfx = function(element) {\n\t  return this._elementRegistry.getGraphics(element);\n\t};\n\n\tvar ModelingModule = {\n\t  __init__: [\n\t    'modeling',\n\t    'bpmnUpdater'\n\t  ],\n\t  __depends__: [\n\t    BehaviorModule,\n\t    RulesModule$1,\n\t    DiOrderingModule,\n\t    OrderingModule,\n\t    ReplaceModule$1,\n\t    CommandModule,\n\t    TooltipsModule,\n\t    LabelSupportModule,\n\t    AttachSupportModule,\n\t    SelectionModule,\n\t    ChangeSupportModule,\n\t    SpaceToolModule\n\t  ],\n\t  bpmnFactory: [ 'type', BpmnFactory ],\n\t  bpmnUpdater: [ 'type', BpmnUpdater ],\n\t  elementFactory: [ 'type', ElementFactory$1 ],\n\t  modeling: [ 'type', Modeling$1 ],\n\t  layouter: [ 'type', BpmnLayouter ],\n\t  connectionDocking: [ 'type', CroppingConnectionDocking ]\n\t};\n\n\tvar LOW_PRIORITY$k = 500,\n\t    MEDIUM_PRIORITY = 1250,\n\t    HIGH_PRIORITY$g = 1500;\n\n\tvar round$b = Math.round;\n\n\tfunction mid$2(element) {\n\t  return {\n\t    x: element.x + round$b(element.width / 2),\n\t    y: element.y + round$b(element.height / 2)\n\t  };\n\t}\n\n\t/**\n\t * A plugin that makes shapes draggable / droppable.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Dragging} dragging\n\t * @param {Modeling} modeling\n\t * @param {Selection} selection\n\t * @param {Rules} rules\n\t */\n\tfunction MoveEvents(\n\t    eventBus, dragging, modeling,\n\t    selection, rules) {\n\n\t  // rules\n\n\t  function canMove(shapes, delta, position, target) {\n\n\t    return rules.allowed('elements.move', {\n\t      shapes: shapes,\n\t      delta: delta,\n\t      position: position,\n\t      target: target\n\t    });\n\t  }\n\n\n\t  // move events\n\n\t  // assign a high priority to this handler to setup the environment\n\t  // others may hook up later, e.g. at default priority and modify\n\t  // the move environment.\n\t  //\n\t  // This sets up the context with\n\t  //\n\t  // * shape: the primary shape being moved\n\t  // * shapes: a list of shapes to be moved\n\t  // * validatedShapes: a list of shapes that are being checked\n\t  //                    against the rules before and during move\n\t  //\n\t  eventBus.on('shape.move.start', HIGH_PRIORITY$g, function(event) {\n\n\t    var context = event.context,\n\t        shape = event.shape,\n\t        shapes = selection.get().slice();\n\n\t    // move only single shape if the dragged element\n\t    // is not part of the current selection\n\t    if (shapes.indexOf(shape) === -1) {\n\t      shapes = [ shape ];\n\t    }\n\n\t    // ensure we remove nested elements in the collection\n\t    // and add attachers for a proper dragger\n\t    shapes = removeNested(shapes);\n\n\t    // attach shapes to drag context\n\t    assign(context, {\n\t      shapes: shapes,\n\t      validatedShapes: shapes,\n\t      shape: shape\n\t    });\n\t  });\n\n\n\t  // assign a high priority to this handler to setup the environment\n\t  // others may hook up later, e.g. at default priority and modify\n\t  // the move environment\n\t  //\n\t  eventBus.on('shape.move.start', MEDIUM_PRIORITY, function(event) {\n\n\t    var context = event.context,\n\t        validatedShapes = context.validatedShapes,\n\t        canExecute;\n\n\t    canExecute = context.canExecute = canMove(validatedShapes);\n\n\t    // check if we can move the elements\n\t    if (!canExecute) {\n\t      return false;\n\t    }\n\t  });\n\n\t  // assign a low priority to this handler\n\t  // to let others modify the move event before we update\n\t  // the context\n\t  //\n\t  eventBus.on('shape.move.move', LOW_PRIORITY$k, function(event) {\n\n\t    var context = event.context,\n\t        validatedShapes = context.validatedShapes,\n\t        hover = event.hover,\n\t        delta = { x: event.dx, y: event.dy },\n\t        position = { x: event.x, y: event.y },\n\t        canExecute;\n\n\t    // check if we can move the elements\n\t    canExecute = canMove(validatedShapes, delta, position, hover);\n\n\t    context.delta = delta;\n\t    context.canExecute = canExecute;\n\n\t    // simply ignore move over\n\t    if (canExecute === null) {\n\t      context.target = null;\n\n\t      return;\n\t    }\n\n\t    context.target = hover;\n\t  });\n\n\t  eventBus.on('shape.move.end', function(event) {\n\n\t    var context = event.context;\n\n\t    var delta = context.delta,\n\t        canExecute = context.canExecute,\n\t        isAttach = canExecute === 'attach',\n\t        shapes = context.shapes;\n\n\t    if (canExecute === false) {\n\t      return false;\n\t    }\n\n\t    // ensure we have actual pixel values deltas\n\t    // (important when zoom level was > 1 during move)\n\t    delta.x = round$b(delta.x);\n\t    delta.y = round$b(delta.y);\n\n\t    if (delta.x === 0 && delta.y === 0) {\n\n\t      // didn't move\n\t      return;\n\t    }\n\n\t    modeling.moveElements(shapes, delta, context.target, {\n\t      primaryShape: context.shape,\n\t      attach: isAttach\n\t    });\n\t  });\n\n\n\t  // move activation\n\n\t  eventBus.on('element.mousedown', function(event) {\n\n\t    var originalEvent = getOriginal(event);\n\n\t    if (!originalEvent) {\n\t      throw new Error('must supply DOM mousedown event');\n\t    }\n\n\t    return start(originalEvent, event.element);\n\t  });\n\n\t  /**\n\t   * Start move.\n\t   *\n\t   * @param {MouseEvent} event\n\t   * @param {djs.model.Shape} shape\n\t   * @param {boolean} [activate]\n\t   * @param {Object} [context]\n\t   */\n\t  function start(event, element, activate, context) {\n\t    if (isObject(activate)) {\n\t      context = activate;\n\t      activate = false;\n\t    }\n\n\t    // do not move connections or the root element\n\t    if (element.waypoints || !element.parent) {\n\t      return;\n\t    }\n\n\t    var referencePoint = mid$2(element);\n\n\t    dragging.init(event, referencePoint, 'shape.move', {\n\t      cursor: 'grabbing',\n\t      autoActivate: activate,\n\t      data: {\n\t        shape: element,\n\t        context: context || {}\n\t      }\n\t    });\n\n\t    // we've handled the event\n\t    return true;\n\t  }\n\n\t  // API\n\n\t  this.start = start;\n\t}\n\n\tMoveEvents.$inject = [\n\t  'eventBus',\n\t  'dragging',\n\t  'modeling',\n\t  'selection',\n\t  'rules'\n\t];\n\n\n\t/**\n\t * Return a filtered list of elements that do not contain\n\t * those nested into others.\n\t *\n\t * @param  {Array<djs.model.Base>} elements\n\t *\n\t * @return {Array<djs.model.Base>} filtered\n\t */\n\tfunction removeNested(elements) {\n\n\t  var ids = groupBy(elements, 'id');\n\n\t  return filter(elements, function(element) {\n\t    while ((element = element.parent)) {\n\n\t      // parent in selection\n\t      if (ids[element.id]) {\n\t        return false;\n\t      }\n\t    }\n\n\t    return true;\n\t  });\n\t}\n\n\tvar LOW_PRIORITY$l = 499;\n\n\tvar MARKER_DRAGGING$1 = 'djs-dragging',\n\t    MARKER_OK$3 = 'drop-ok',\n\t    MARKER_NOT_OK$3 = 'drop-not-ok',\n\t    MARKER_NEW_PARENT$1 = 'new-parent',\n\t    MARKER_ATTACH$2 = 'attach-ok';\n\n\n\t/**\n\t * Provides previews for moving shapes when moving.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {ElementRegistry} elementRegistry\n\t * @param {Canvas} canvas\n\t * @param {Styles} styles\n\t */\n\tfunction MovePreview(\n\t    eventBus, canvas, styles, previewSupport) {\n\n\t  function getVisualDragShapes(shapes) {\n\t    var elements = getAllDraggedElements(shapes);\n\n\t    var filteredElements = removeEdges(elements);\n\n\t    return filteredElements;\n\t  }\n\n\t  function getAllDraggedElements(shapes) {\n\t    var allShapes = selfAndAllChildren(shapes, true);\n\n\t    var allConnections = map(allShapes, function(shape) {\n\t      return (shape.incoming || []).concat(shape.outgoing || []);\n\t    });\n\n\t    return flatten(allShapes.concat(allConnections));\n\t  }\n\n\t  /**\n\t   * Sets drop marker on an element.\n\t   */\n\t  function setMarker(element, marker) {\n\n\t    [ MARKER_ATTACH$2, MARKER_OK$3, MARKER_NOT_OK$3, MARKER_NEW_PARENT$1 ].forEach(function(m) {\n\n\t      if (m === marker) {\n\t        canvas.addMarker(element, m);\n\t      } else {\n\t        canvas.removeMarker(element, m);\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Make an element draggable.\n\t   *\n\t   * @param {Object} context\n\t   * @param {djs.model.Base} element\n\t   * @param {boolean} addMarker\n\t   */\n\t  function makeDraggable(context, element, addMarker) {\n\n\t    previewSupport.addDragger(element, context.dragGroup);\n\n\t    if (addMarker) {\n\t      canvas.addMarker(element, MARKER_DRAGGING$1);\n\t    }\n\n\t    if (context.allDraggedElements) {\n\t      context.allDraggedElements.push(element);\n\t    } else {\n\t      context.allDraggedElements = [ element ];\n\t    }\n\t  }\n\n\t  // assign a low priority to this handler\n\t  // to let others modify the move context before\n\t  // we draw things\n\t  eventBus.on('shape.move.start', LOW_PRIORITY$l, function(event) {\n\t    var context = event.context,\n\t        dragShapes = context.shapes,\n\t        allDraggedElements = context.allDraggedElements;\n\n\t    var visuallyDraggedShapes = getVisualDragShapes(dragShapes);\n\n\t    if (!context.dragGroup) {\n\t      var dragGroup = create('g');\n\n\t      attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));\n\n\t      var defaultLayer = canvas.getDefaultLayer();\n\n\t      append(defaultLayer, dragGroup);\n\n\t      context.dragGroup = dragGroup;\n\t    }\n\n\t    // add previews\n\t    visuallyDraggedShapes.forEach(function(shape) {\n\t      previewSupport.addDragger(shape, context.dragGroup);\n\t    });\n\n\t    // cache all dragged elements / gfx\n\t    // so that we can quickly undo their state changes later\n\t    if (!allDraggedElements) {\n\t      allDraggedElements = getAllDraggedElements(dragShapes);\n\t    } else {\n\t      allDraggedElements = flatten([\n\t        allDraggedElements,\n\t        getAllDraggedElements(dragShapes)\n\t      ]);\n\t    }\n\n\t    // add dragging marker\n\t    forEach(allDraggedElements, function(e) {\n\t      canvas.addMarker(e, MARKER_DRAGGING$1);\n\t    });\n\n\t    context.allDraggedElements = allDraggedElements;\n\n\t    // determine, if any of the dragged elements have different parents\n\t    context.differentParents = haveDifferentParents(dragShapes);\n\t  });\n\n\t  // update previews\n\t  eventBus.on('shape.move.move', LOW_PRIORITY$l, function(event) {\n\n\t    var context = event.context,\n\t        dragGroup = context.dragGroup,\n\t        target = context.target,\n\t        parent = context.shape.parent,\n\t        canExecute = context.canExecute;\n\n\t    if (target) {\n\t      if (canExecute === 'attach') {\n\t        setMarker(target, MARKER_ATTACH$2);\n\t      } else if (context.canExecute && target && target.id !== parent.id) {\n\t        setMarker(target, MARKER_NEW_PARENT$1);\n\t      } else {\n\t        setMarker(target, context.canExecute ? MARKER_OK$3 : MARKER_NOT_OK$3);\n\t      }\n\t    }\n\n\t    translate(dragGroup, event.dx, event.dy);\n\t  });\n\n\t  eventBus.on([ 'shape.move.out', 'shape.move.cleanup' ], function(event) {\n\t    var context = event.context,\n\t        target = context.target;\n\n\t    if (target) {\n\t      setMarker(target, null);\n\t    }\n\t  });\n\n\t  // remove previews\n\t  eventBus.on('shape.move.cleanup', function(event) {\n\n\t    var context = event.context,\n\t        allDraggedElements = context.allDraggedElements,\n\t        dragGroup = context.dragGroup;\n\n\n\t    // remove dragging marker\n\t    forEach(allDraggedElements, function(e) {\n\t      canvas.removeMarker(e, MARKER_DRAGGING$1);\n\t    });\n\n\t    if (dragGroup) {\n\t      remove$1(dragGroup);\n\t    }\n\t  });\n\n\n\t  // API //////////////////////\n\n\t  /**\n\t   * Make an element draggable.\n\t   *\n\t   * @param {Object} context\n\t   * @param {djs.model.Base} element\n\t   * @param {boolean} addMarker\n\t   */\n\t  this.makeDraggable = makeDraggable;\n\t}\n\n\tMovePreview.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'styles',\n\t  'previewSupport'\n\t];\n\n\n\t// helpers //////////////////////\n\n\t/**\n\t * returns elements minus all connections\n\t * where source or target is not elements\n\t */\n\tfunction removeEdges(elements) {\n\n\t  var filteredElements = filter(elements, function(element) {\n\n\t    if (!isConnection$8(element)) {\n\t      return true;\n\t    } else {\n\n\t      return (\n\t        find(elements, matchPattern({ id: element.source.id })) &&\n\t        find(elements, matchPattern({ id: element.target.id }))\n\t      );\n\t    }\n\t  });\n\n\t  return filteredElements;\n\t}\n\n\tfunction haveDifferentParents(elements) {\n\t  return size(groupBy(elements, function(e) { return e.parent && e.parent.id; })) !== 1;\n\t}\n\n\t/**\n\t * Checks if an element is a connection.\n\t */\n\tfunction isConnection$8(element) {\n\t  return element.waypoints;\n\t}\n\n\tvar MoveModule = {\n\t  __depends__: [\n\t    InteractionEventsModule,\n\t    SelectionModule,\n\t    OutlineModule,\n\t    RulesModule,\n\t    DraggingModule,\n\t    PreviewSupportModule\n\t  ],\n\t  __init__: [\n\t    'move',\n\t    'movePreview'\n\t  ],\n\t  move: [ 'type', MoveEvents ],\n\t  movePreview: [ 'type', MovePreview ]\n\t};\n\n\tvar TOGGLE_SELECTOR = '.djs-palette-toggle',\n\t    ENTRY_SELECTOR = '.entry',\n\t    ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;\n\n\tvar PALETTE_OPEN_CLS = 'open',\n\t    PALETTE_TWO_COLUMN_CLS = 'two-column';\n\n\tvar DEFAULT_PRIORITY$5 = 1000;\n\n\n\t/**\n\t * A palette containing modeling elements.\n\t */\n\tfunction Palette(eventBus, canvas) {\n\n\t  this._eventBus = eventBus;\n\t  this._canvas = canvas;\n\n\t  var self = this;\n\n\t  eventBus.on('tool-manager.update', function(event) {\n\t    var tool = event.tool;\n\n\t    self.updateToolHighlight(tool);\n\t  });\n\n\t  eventBus.on('i18n.changed', function() {\n\t    self._update();\n\t  });\n\n\t  eventBus.on('diagram.init', function() {\n\n\t    self._diagramInitialized = true;\n\n\t    self._rebuild();\n\t  });\n\t}\n\n\tPalette.$inject = [ 'eventBus', 'canvas' ];\n\n\n\t/**\n\t * Register a provider with the palette\n\t *\n\t * @param  {number} [priority=1000]\n\t * @param  {PaletteProvider} provider\n\t *\n\t * @example\n\t * const paletteProvider = {\n\t *   getPaletteEntries: function() {\n\t *     return function(entries) {\n\t *       return {\n\t *         ...entries,\n\t *         'entry-1': {\n\t *           label: 'My Entry',\n\t *           action: function() { alert(\"I have been clicked!\"); }\n\t *         }\n\t *       };\n\t *     }\n\t *   }\n\t * };\n\t *\n\t * palette.registerProvider(800, paletteProvider);\n\t */\n\tPalette.prototype.registerProvider = function(priority, provider) {\n\t  if (!provider) {\n\t    provider = priority;\n\t    priority = DEFAULT_PRIORITY$5;\n\t  }\n\n\t  this._eventBus.on('palette.getProviders', priority, function(event) {\n\t    event.providers.push(provider);\n\t  });\n\n\t  this._rebuild();\n\t};\n\n\n\t/**\n\t * Returns the palette entries\n\t *\n\t * @return {Object<string, PaletteEntryDescriptor>} map of entries\n\t */\n\tPalette.prototype.getEntries = function() {\n\t  var providers = this._getProviders();\n\n\t  return providers.reduce(addPaletteEntries, {});\n\t};\n\n\tPalette.prototype._rebuild = function() {\n\n\t  if (!this._diagramInitialized) {\n\t    return;\n\t  }\n\n\t  var providers = this._getProviders();\n\n\t  if (!providers.length) {\n\t    return;\n\t  }\n\n\t  if (!this._container) {\n\t    this._init();\n\t  }\n\n\t  this._update();\n\t};\n\n\t/**\n\t * Initialize\n\t */\n\tPalette.prototype._init = function() {\n\n\t  var self = this;\n\n\t  var eventBus = this._eventBus;\n\n\t  var parentContainer = this._getParentContainer();\n\n\t  var container = this._container = domify(Palette.HTML_MARKUP);\n\n\t  parentContainer.appendChild(container);\n\n\t  delegateEvents.bind(container, ELEMENT_SELECTOR, 'click', function(event) {\n\n\t    var target = event.delegateTarget;\n\n\t    if (matchesSelector(target, TOGGLE_SELECTOR)) {\n\t      return self.toggle();\n\t    }\n\n\t    self.trigger('click', event);\n\t  });\n\n\t  // prevent drag propagation\n\t  componentEvent.bind(container, 'mousedown', function(event) {\n\t    event.stopPropagation();\n\t  });\n\n\t  // prevent drag propagation\n\t  delegateEvents.bind(container, ENTRY_SELECTOR, 'dragstart', function(event) {\n\t    self.trigger('dragstart', event);\n\t  });\n\n\t  eventBus.on('canvas.resized', this._layoutChanged, this);\n\n\t  eventBus.fire('palette.create', {\n\t    container: container\n\t  });\n\t};\n\n\tPalette.prototype._getProviders = function(id) {\n\n\t  var event = this._eventBus.createEvent({\n\t    type: 'palette.getProviders',\n\t    providers: []\n\t  });\n\n\t  this._eventBus.fire(event);\n\n\t  return event.providers;\n\t};\n\n\t/**\n\t * Update palette state.\n\t *\n\t * @param  {Object} [state] { open, twoColumn }\n\t */\n\tPalette.prototype._toggleState = function(state) {\n\n\t  state = state || {};\n\n\t  var parent = this._getParentContainer(),\n\t      container = this._container;\n\n\t  var eventBus = this._eventBus;\n\n\t  var twoColumn;\n\n\t  var cls = classes(container);\n\n\t  if ('twoColumn' in state) {\n\t    twoColumn = state.twoColumn;\n\t  } else {\n\t    twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});\n\t  }\n\n\t  // always update two column\n\t  cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);\n\n\t  if ('open' in state) {\n\t    cls.toggle(PALETTE_OPEN_CLS, state.open);\n\t  }\n\n\t  eventBus.fire('palette.changed', {\n\t    twoColumn: twoColumn,\n\t    open: this.isOpen()\n\t  });\n\t};\n\n\tPalette.prototype._update = function() {\n\n\t  var entriesContainer = query('.djs-palette-entries', this._container),\n\t      entries = this._entries = this.getEntries();\n\n\t  clear(entriesContainer);\n\n\t  forEach(entries, function(entry, id) {\n\n\t    var grouping = entry.group || 'default';\n\n\t    var container = query('[data-group=' + grouping + ']', entriesContainer);\n\t    if (!container) {\n\t      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n\t      entriesContainer.appendChild(container);\n\t    }\n\n\t    var html = entry.html || (\n\t      entry.separator ?\n\t        '<hr class=\"separator\" />' :\n\t        '<div class=\"entry\" draggable=\"true\"></div>');\n\n\n\t    var control = domify(html);\n\t    container.appendChild(control);\n\n\t    if (!entry.separator) {\n\t      attr(control, 'data-action', id);\n\n\t      if (entry.title) {\n\t        attr(control, 'title', entry.title);\n\t      }\n\n\t      if (entry.className) {\n\t        addClasses$1(control, entry.className);\n\t      }\n\n\t      if (entry.imageUrl) {\n\t        control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n\t      }\n\t    }\n\t  });\n\n\t  // open after update\n\t  this.open();\n\t};\n\n\n\t/**\n\t * Trigger an action available on the palette\n\t *\n\t * @param  {string} action\n\t * @param  {Event} event\n\t */\n\tPalette.prototype.trigger = function(action, event, autoActivate) {\n\t  var entries = this._entries,\n\t      entry,\n\t      handler,\n\t      originalEvent,\n\t      button = event.delegateTarget || event.target;\n\n\t  if (!button) {\n\t    return event.preventDefault();\n\t  }\n\n\t  entry = entries[attr(button, 'data-action')];\n\n\t  // when user clicks on the palette and not on an action\n\t  if (!entry) {\n\t    return;\n\t  }\n\n\t  handler = entry.action;\n\n\t  originalEvent = event.originalEvent || event;\n\n\t  // simple action (via callback function)\n\t  if (isFunction(handler)) {\n\t    if (action === 'click') {\n\t      handler(originalEvent, autoActivate);\n\t    }\n\t  } else {\n\t    if (handler[action]) {\n\t      handler[action](originalEvent, autoActivate);\n\t    }\n\t  }\n\n\t  // silence other actions\n\t  event.preventDefault();\n\t};\n\n\tPalette.prototype._layoutChanged = function() {\n\t  this._toggleState({});\n\t};\n\n\t/**\n\t * Do we need to collapse to two columns?\n\t *\n\t * @param {number} availableHeight\n\t * @param {Object} entries\n\t *\n\t * @return {boolean}\n\t */\n\tPalette.prototype._needsCollapse = function(availableHeight, entries) {\n\n\t  // top margin + bottom toggle + bottom margin\n\t  // implementors must override this method if they\n\t  // change the palette styles\n\t  var margin = 20 + 10 + 20;\n\n\t  var entriesHeight = Object.keys(entries).length * 46;\n\n\t  return availableHeight < entriesHeight + margin;\n\t};\n\n\t/**\n\t * Close the palette\n\t */\n\tPalette.prototype.close = function() {\n\n\t  this._toggleState({\n\t    open: false,\n\t    twoColumn: false\n\t  });\n\t};\n\n\n\t/**\n\t * Open the palette\n\t */\n\tPalette.prototype.open = function() {\n\t  this._toggleState({ open: true });\n\t};\n\n\n\tPalette.prototype.toggle = function(open) {\n\t  if (this.isOpen()) {\n\t    this.close();\n\t  } else {\n\t    this.open();\n\t  }\n\t};\n\n\tPalette.prototype.isActiveTool = function(tool) {\n\t  return tool && this._activeTool === tool;\n\t};\n\n\tPalette.prototype.updateToolHighlight = function(name) {\n\t  var entriesContainer,\n\t      toolsContainer;\n\n\t  if (!this._toolsContainer) {\n\t    entriesContainer = query('.djs-palette-entries', this._container);\n\n\t    this._toolsContainer = query('[data-group=tools]', entriesContainer);\n\t  }\n\n\t  toolsContainer = this._toolsContainer;\n\n\t  forEach(toolsContainer.children, function(tool) {\n\t    var actionName = tool.getAttribute('data-action');\n\n\t    if (!actionName) {\n\t      return;\n\t    }\n\n\t    var toolClasses = classes(tool);\n\n\t    actionName = actionName.replace('-tool', '');\n\n\t    if (toolClasses.contains('entry') && actionName === name) {\n\t      toolClasses.add('highlighted-entry');\n\t    } else {\n\t      toolClasses.remove('highlighted-entry');\n\t    }\n\t  });\n\t};\n\n\n\t/**\n\t * Return true if the palette is opened.\n\t *\n\t * @example\n\t *\n\t * palette.open();\n\t *\n\t * if (palette.isOpen()) {\n\t *   // yes, we are open\n\t * }\n\t *\n\t * @return {boolean} true if palette is opened\n\t */\n\tPalette.prototype.isOpen = function() {\n\t  return classes(this._container).has(PALETTE_OPEN_CLS);\n\t};\n\n\t/**\n\t * Get container the palette lives in.\n\t *\n\t * @return {Element}\n\t */\n\tPalette.prototype._getParentContainer = function() {\n\t  return this._canvas.getContainer();\n\t};\n\n\n\t/* markup definition */\n\n\tPalette.HTML_MARKUP =\n\t  '<div class=\"djs-palette\">' +\n\t    '<div class=\"djs-palette-entries\"></div>' +\n\t    '<div class=\"djs-palette-toggle\"></div>' +\n\t  '</div>';\n\n\n\t// helpers //////////////////////\n\n\tfunction addClasses$1(element, classNames) {\n\n\t  var classes$1 = classes(element);\n\n\t  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n\t  actualClassNames.forEach(function(cls) {\n\t    classes$1.add(cls);\n\t  });\n\t}\n\n\tfunction addPaletteEntries(entries, provider) {\n\n\t  var entriesOrUpdater = provider.getPaletteEntries();\n\n\t  if (isFunction(entriesOrUpdater)) {\n\t    return entriesOrUpdater(entries);\n\t  }\n\n\t  forEach(entriesOrUpdater, function(entry, id) {\n\t    entries[id] = entry;\n\t  });\n\n\t  return entries;\n\t}\n\n\tvar PaletteModule = {\n\t  __init__: [ 'palette' ],\n\t  palette: [ 'type', Palette ]\n\t};\n\n\tvar LASSO_TOOL_CURSOR = 'crosshair';\n\n\n\tfunction LassoTool(\n\t    eventBus, canvas, dragging,\n\t    elementRegistry, selection, toolManager) {\n\n\t  this._selection = selection;\n\t  this._dragging = dragging;\n\n\t  var self = this;\n\n\t  // lasso visuals implementation\n\n\t  /**\n\t  * A helper that realizes the selection box visual\n\t  */\n\t  var visuals = {\n\n\t    create: function(context) {\n\t      var container = canvas.getDefaultLayer(),\n\t          frame;\n\n\t      frame = context.frame = create('rect');\n\t      attr$1(frame, {\n\t        class: 'djs-lasso-overlay',\n\t        width:  1,\n\t        height: 1,\n\t        x: 0,\n\t        y: 0\n\t      });\n\n\t      append(container, frame);\n\t    },\n\n\t    update: function(context) {\n\t      var frame = context.frame,\n\t          bbox = context.bbox;\n\n\t      attr$1(frame, {\n\t        x: bbox.x,\n\t        y: bbox.y,\n\t        width: bbox.width,\n\t        height: bbox.height\n\t      });\n\t    },\n\n\t    remove: function(context) {\n\n\t      if (context.frame) {\n\t        remove$1(context.frame);\n\t      }\n\t    }\n\t  };\n\n\t  toolManager.registerTool('lasso', {\n\t    tool: 'lasso.selection',\n\t    dragging: 'lasso'\n\t  });\n\n\t  eventBus.on('lasso.selection.end', function(event) {\n\t    var target = event.originalEvent.target;\n\n\t    // only reactive on diagram click\n\t    // on some occasions, event.hover is not set and we have to check if the target is an svg\n\t    if (!event.hover && !(target instanceof SVGElement)) {\n\t      return;\n\t    }\n\n\t    eventBus.once('lasso.selection.ended', function() {\n\t      self.activateLasso(event.originalEvent, true);\n\t    });\n\t  });\n\n\t  // lasso interaction implementation\n\n\t  eventBus.on('lasso.end', function(event) {\n\n\t    var bbox = toBBox(event);\n\n\t    var elements = elementRegistry.filter(function(element) {\n\t      return element;\n\t    });\n\n\t    self.select(elements, bbox);\n\t  });\n\n\t  eventBus.on('lasso.start', function(event) {\n\n\t    var context = event.context;\n\n\t    context.bbox = toBBox(event);\n\t    visuals.create(context);\n\t  });\n\n\t  eventBus.on('lasso.move', function(event) {\n\n\t    var context = event.context;\n\n\t    context.bbox = toBBox(event);\n\t    visuals.update(context);\n\t  });\n\n\t  eventBus.on('lasso.cleanup', function(event) {\n\n\t    var context = event.context;\n\n\t    visuals.remove(context);\n\t  });\n\n\n\t  // event integration\n\n\t  eventBus.on('element.mousedown', 1500, function(event) {\n\n\t    if (hasSecondaryModifier(event)) {\n\t      self.activateLasso(event.originalEvent);\n\n\t      // we've handled the event\n\t      return true;\n\t    }\n\t  });\n\t}\n\n\tLassoTool.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'dragging',\n\t  'elementRegistry',\n\t  'selection',\n\t  'toolManager'\n\t];\n\n\n\tLassoTool.prototype.activateLasso = function(event, autoActivate) {\n\n\t  this._dragging.init(event, 'lasso', {\n\t    autoActivate: autoActivate,\n\t    cursor: LASSO_TOOL_CURSOR,\n\t    data: {\n\t      context: {}\n\t    }\n\t  });\n\t};\n\n\tLassoTool.prototype.activateSelection = function(event) {\n\n\t  this._dragging.init(event, 'lasso.selection', {\n\t    trapClick: false,\n\t    cursor: LASSO_TOOL_CURSOR,\n\t    data: {\n\t      context: {}\n\t    }\n\t  });\n\t};\n\n\tLassoTool.prototype.select = function(elements, bbox) {\n\t  var selectedElements = getEnclosedElements(elements, bbox);\n\n\t  this._selection.select(values(selectedElements));\n\t};\n\n\tLassoTool.prototype.toggle = function() {\n\t  if (this.isActive()) {\n\t    this._dragging.cancel();\n\t  } else {\n\t    this.activateSelection();\n\t  }\n\t};\n\n\tLassoTool.prototype.isActive = function() {\n\t  var context = this._dragging.context();\n\n\t  return context && /^lasso/.test(context.prefix);\n\t};\n\n\n\n\tfunction toBBox(event) {\n\n\t  var start = {\n\n\t    x: event.x - event.dx,\n\t    y: event.y - event.dy\n\t  };\n\n\t  var end = {\n\t    x: event.x,\n\t    y: event.y\n\t  };\n\n\t  var bbox;\n\n\t  if ((start.x <= end.x && start.y < end.y) ||\n\t      (start.x < end.x && start.y <= end.y)) {\n\n\t    bbox = {\n\t      x: start.x,\n\t      y: start.y,\n\t      width:  end.x - start.x,\n\t      height: end.y - start.y\n\t    };\n\t  } else if ((start.x >= end.x && start.y < end.y) ||\n\t             (start.x > end.x && start.y <= end.y)) {\n\n\t    bbox = {\n\t      x: end.x,\n\t      y: start.y,\n\t      width:  start.x - end.x,\n\t      height: end.y - start.y\n\t    };\n\t  } else if ((start.x <= end.x && start.y > end.y) ||\n\t             (start.x < end.x && start.y >= end.y)) {\n\n\t    bbox = {\n\t      x: start.x,\n\t      y: end.y,\n\t      width:  end.x - start.x,\n\t      height: start.y - end.y\n\t    };\n\t  } else if ((start.x >= end.x && start.y > end.y) ||\n\t             (start.x > end.x && start.y >= end.y)) {\n\n\t    bbox = {\n\t      x: end.x,\n\t      y: end.y,\n\t      width:  start.x - end.x,\n\t      height: start.y - end.y\n\t    };\n\t  } else {\n\n\t    bbox = {\n\t      x: end.x,\n\t      y: end.y,\n\t      width:  0,\n\t      height: 0\n\t    };\n\t  }\n\t  return bbox;\n\t}\n\n\tvar LassoToolModule = {\n\t  __depends__: [\n\t    ToolManagerModule\n\t  ],\n\t  __init__: [ 'lassoTool' ],\n\t  lassoTool: [ 'type', LassoTool ]\n\t};\n\n\tvar HIGH_PRIORITY$h = 1500;\n\tvar HAND_CURSOR = 'grab';\n\n\n\tfunction HandTool(eventBus, canvas, dragging, injector, toolManager) {\n\t  this._dragging = dragging;\n\n\t  var self = this,\n\t      keyboard = injector.get('keyboard', false);\n\n\t  toolManager.registerTool('hand', {\n\t    tool: 'hand',\n\t    dragging: 'hand.move'\n\t  });\n\n\t  eventBus.on('element.mousedown', HIGH_PRIORITY$h, function(event) {\n\t    if (hasPrimaryModifier(event)) {\n\t      this.activateMove(event.originalEvent);\n\n\t      return false;\n\t    }\n\t  }, this);\n\n\t  keyboard && keyboard.addListener(HIGH_PRIORITY$h, function(e) {\n\t    if (!isSpace(e.keyEvent)) {\n\t      return;\n\t    }\n\n\t    if (self.isActive()) {\n\t      return;\n\t    }\n\n\t    function activateMove(event) {\n\t      self.activateMove(event);\n\n\t      window.removeEventListener('mousemove', activateMove);\n\t    }\n\n\t    window.addEventListener('mousemove', activateMove);\n\n\t    function deactivateMove(e) {\n\t      if (!isSpace(e.keyEvent)) {\n\t        return;\n\t      }\n\n\t      window.removeEventListener('mousemove', activateMove);\n\n\t      keyboard.removeListener(deactivateMove, 'keyboard.keyup');\n\n\t      dragging.cancel();\n\t    }\n\n\t    keyboard.addListener(HIGH_PRIORITY$h, deactivateMove, 'keyboard.keyup');\n\t  }, 'keyboard.keydown');\n\n\t  eventBus.on('hand.end', function(event) {\n\t    var target = event.originalEvent.target;\n\n\t    // only reactive on diagram click\n\t    // on some occasions, event.hover is not set and we have to check if the target is an svg\n\t    if (!event.hover && !(target instanceof SVGElement)) {\n\t      return false;\n\t    }\n\n\t    eventBus.once('hand.ended', function() {\n\t      this.activateMove(event.originalEvent, { reactivate: true });\n\t    }, this);\n\n\t  }, this);\n\n\n\t  eventBus.on('hand.move.move', function(event) {\n\t    var scale = canvas.viewbox().scale;\n\n\t    canvas.scroll({\n\t      dx: event.dx * scale,\n\t      dy: event.dy * scale\n\t    });\n\t  });\n\n\t  eventBus.on('hand.move.end', function(event) {\n\t    var context = event.context,\n\t        reactivate = context.reactivate;\n\n\t    // Don't reactivate if the user is using the keyboard keybinding\n\t    if (!hasPrimaryModifier(event) && reactivate) {\n\n\t      eventBus.once('hand.move.ended', function(event) {\n\t        this.activateHand(event.originalEvent, true, true);\n\t      }, this);\n\n\t    }\n\n\t    return false;\n\t  }, this);\n\n\t}\n\n\tHandTool.$inject = [\n\t  'eventBus',\n\t  'canvas',\n\t  'dragging',\n\t  'injector',\n\t  'toolManager'\n\t];\n\n\n\tHandTool.prototype.activateMove = function(event, autoActivate, context) {\n\t  if (typeof autoActivate === 'object') {\n\t    context = autoActivate;\n\t    autoActivate = false;\n\t  }\n\n\t  this._dragging.init(event, 'hand.move', {\n\t    autoActivate: autoActivate,\n\t    cursor: HAND_CURSOR,\n\t    data: {\n\t      context: context || {}\n\t    }\n\t  });\n\t};\n\n\tHandTool.prototype.activateHand = function(event, autoActivate, reactivate) {\n\t  this._dragging.init(event, 'hand', {\n\t    trapClick: false,\n\t    autoActivate: autoActivate,\n\t    cursor: HAND_CURSOR,\n\t    data: {\n\t      context: {\n\t        reactivate: reactivate\n\t      }\n\t    }\n\t  });\n\t};\n\n\tHandTool.prototype.toggle = function() {\n\t  if (this.isActive()) {\n\t    this._dragging.cancel();\n\t  } else {\n\t    this.activateHand();\n\t  }\n\t};\n\n\tHandTool.prototype.isActive = function() {\n\t  var context = this._dragging.context();\n\n\t  if (context) {\n\t    return /^(hand|hand\\.move)$/.test(context.prefix);\n\t  }\n\n\t  return false;\n\t};\n\n\t// helpers //////////\n\n\tfunction isSpace(keyEvent) {\n\t  return isKey(' ', keyEvent);\n\t}\n\n\tvar HandToolModule = {\n\t  __depends__: [\n\t    ToolManagerModule\n\t  ],\n\t  __init__: [ 'handTool' ],\n\t  handTool: [ 'type', HandTool ]\n\t};\n\n\tvar MARKER_OK$4 = 'connect-ok',\n\t    MARKER_NOT_OK$4 = 'connect-not-ok';\n\n\t/**\n\t * @class\n\t * @constructor\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Dragging} dragging\n\t * @param {Connect} connect\n\t * @param {Canvas} canvas\n\t * @param {ToolManager} toolManager\n\t * @param {Rules} rules\n\t */\n\tfunction GlobalConnect(\n\t    eventBus, dragging, connect,\n\t    canvas, toolManager, rules) {\n\n\t  var self = this;\n\n\t  this._dragging = dragging;\n\t  this._rules = rules;\n\n\t  toolManager.registerTool('global-connect', {\n\t    tool: 'global-connect',\n\t    dragging: 'global-connect.drag'\n\t  });\n\n\t  eventBus.on('global-connect.hover', function(event) {\n\t    var context = event.context,\n\t        startTarget = event.hover;\n\n\t    var canStartConnect = context.canStartConnect = self.canStartConnect(startTarget);\n\n\t    // simply ignore hover\n\t    if (canStartConnect === null) {\n\t      return;\n\t    }\n\n\t    context.startTarget = startTarget;\n\n\t    canvas.addMarker(startTarget, canStartConnect ? MARKER_OK$4 : MARKER_NOT_OK$4);\n\t  });\n\n\n\t  eventBus.on([ 'global-connect.out', 'global-connect.cleanup' ], function(event) {\n\t    var startTarget = event.context.startTarget,\n\t        canStartConnect = event.context.canStartConnect;\n\n\t    if (startTarget) {\n\t      canvas.removeMarker(startTarget, canStartConnect ? MARKER_OK$4 : MARKER_NOT_OK$4);\n\t    }\n\t  });\n\n\n\t  eventBus.on([ 'global-connect.ended' ], function(event) {\n\t    var context = event.context,\n\t        startTarget = context.startTarget,\n\t        startPosition = {\n\t          x: event.x,\n\t          y: event.y\n\t        };\n\n\t    var canStartConnect = self.canStartConnect(startTarget);\n\n\t    if (!canStartConnect) {\n\t      return;\n\t    }\n\n\t    eventBus.once('element.out', function() {\n\t      eventBus.once([ 'connect.ended', 'connect.canceled' ], function() {\n\t        eventBus.fire('global-connect.drag.ended');\n\t      });\n\n\t      connect.start(null, startTarget, startPosition);\n\t    });\n\n\t    return false;\n\t  });\n\t}\n\n\tGlobalConnect.$inject = [\n\t  'eventBus',\n\t  'dragging',\n\t  'connect',\n\t  'canvas',\n\t  'toolManager',\n\t  'rules'\n\t];\n\n\t/**\n\t * Initiates tool activity.\n\t */\n\tGlobalConnect.prototype.start = function(event) {\n\t  this._dragging.init(event, 'global-connect', {\n\t    trapClick: false,\n\t    data: {\n\t      context: {}\n\t    }\n\t  });\n\t};\n\n\tGlobalConnect.prototype.toggle = function() {\n\t  if (this.isActive()) {\n\t    this._dragging.cancel();\n\t  } else {\n\t    this.start();\n\t  }\n\t};\n\n\tGlobalConnect.prototype.isActive = function() {\n\t  var context = this._dragging.context();\n\n\t  return context && /^global-connect/.test(context.prefix);\n\t};\n\n\t/**\n\t * Check if source shape can initiate connection.\n\t *\n\t * @param  {Shape} startTarget\n\t * @return {boolean}\n\t */\n\tGlobalConnect.prototype.canStartConnect = function(startTarget) {\n\t  return this._rules.allowed('connection.start', { source: startTarget });\n\t};\n\n\tvar GlobalConnectModule = {\n\t  __depends__: [\n\t    ConnectModule,\n\t    RulesModule,\n\t    DraggingModule,\n\t    ToolManagerModule\n\t  ],\n\t  globalConnect: [ 'type', GlobalConnect ]\n\t};\n\n\t/**\n\t * A palette provider for BPMN 2.0 elements.\n\t */\n\tfunction PaletteProvider(\n\t    palette, create, elementFactory,\n\t    spaceTool, lassoTool, handTool,\n\t    globalConnect, translate) {\n\n\t  this._palette = palette;\n\t  this._create = create;\n\t  this._elementFactory = elementFactory;\n\t  this._spaceTool = spaceTool;\n\t  this._lassoTool = lassoTool;\n\t  this._handTool = handTool;\n\t  this._globalConnect = globalConnect;\n\t  this._translate = translate;\n\n\t  palette.registerProvider(this);\n\t}\n\n\tPaletteProvider.$inject = [\n\t  'palette',\n\t  'create',\n\t  'elementFactory',\n\t  'spaceTool',\n\t  'lassoTool',\n\t  'handTool',\n\t  'globalConnect',\n\t  'translate'\n\t];\n\n\n\tPaletteProvider.prototype.getPaletteEntries = function(element) {\n\n\t  var actions = {},\n\t      create = this._create,\n\t      elementFactory = this._elementFactory,\n\t      spaceTool = this._spaceTool,\n\t      lassoTool = this._lassoTool,\n\t      handTool = this._handTool,\n\t      globalConnect = this._globalConnect,\n\t      translate = this._translate;\n\n\t  function createAction(type, group, className, title, options) {\n\n\t    function createListener(event) {\n\t      var shape = elementFactory.createShape(assign({ type: type }, options));\n\n\t      if (options) {\n\t        shape.businessObject.di.isExpanded = options.isExpanded;\n\t      }\n\n\t      create.start(event, shape);\n\t    }\n\n\t    var shortType = type.replace(/^bpmn:/, '');\n\n\t    return {\n\t      group: group,\n\t      className: className,\n\t      title: title || translate('Create {type}', { type: shortType }),\n\t      action: {\n\t        dragstart: createListener,\n\t        click: createListener\n\t      }\n\t    };\n\t  }\n\n\t  function createSubprocess(event) {\n\t    var subProcess = elementFactory.createShape({\n\t      type: 'bpmn:SubProcess',\n\t      x: 0,\n\t      y: 0,\n\t      isExpanded: true\n\t    });\n\n\t    var startEvent = elementFactory.createShape({\n\t      type: 'bpmn:StartEvent',\n\t      x: 40,\n\t      y: 82,\n\t      parent: subProcess\n\t    });\n\n\t    create.start(event, [ subProcess, startEvent ], {\n\t      hints: {\n\t        autoSelect: [ startEvent ]\n\t      }\n\t    });\n\t  }\n\n\t  function createParticipant(event) {\n\t    create.start(event, elementFactory.createParticipantShape());\n\t  }\n\n\t  assign(actions, {\n\t    'hand-tool': {\n\t      group: 'tools',\n\t      className: 'bpmn-icon-hand-tool',\n\t      title: translate('Activate the hand tool'),\n\t      action: {\n\t        click: function(event) {\n\t          handTool.activateHand(event);\n\t        }\n\t      }\n\t    },\n\t    'lasso-tool': {\n\t      group: 'tools',\n\t      className: 'bpmn-icon-lasso-tool',\n\t      title: translate('Activate the lasso tool'),\n\t      action: {\n\t        click: function(event) {\n\t          lassoTool.activateSelection(event);\n\t        }\n\t      }\n\t    },\n\t    'space-tool': {\n\t      group: 'tools',\n\t      className: 'bpmn-icon-space-tool',\n\t      title: translate('Activate the create/remove space tool'),\n\t      action: {\n\t        click: function(event) {\n\t          spaceTool.activateSelection(event);\n\t        }\n\t      }\n\t    },\n\t    'global-connect-tool': {\n\t      group: 'tools',\n\t      className: 'bpmn-icon-connection-multi',\n\t      title: translate('Activate the global connect tool'),\n\t      action: {\n\t        click: function(event) {\n\t          globalConnect.toggle(event);\n\t        }\n\t      }\n\t    },\n\t    'tool-separator': {\n\t      group: 'tools',\n\t      separator: true\n\t    },\n\t    'create.start-event': createAction(\n\t      'bpmn:StartEvent', 'event', 'bpmn-icon-start-event-none',\n\t      translate('Create StartEvent')\n\t    ),\n\t    'create.intermediate-event': createAction(\n\t      'bpmn:IntermediateThrowEvent', 'event', 'bpmn-icon-intermediate-event-none',\n\t      translate('Create Intermediate/Boundary Event')\n\t    ),\n\t    'create.end-event': createAction(\n\t      'bpmn:EndEvent', 'event', 'bpmn-icon-end-event-none',\n\t      translate('Create EndEvent')\n\t    ),\n\t    'create.exclusive-gateway': createAction(\n\t      'bpmn:ExclusiveGateway', 'gateway', 'bpmn-icon-gateway-none',\n\t      translate('Create Gateway')\n\t    ),\n\t    'create.task': createAction(\n\t      'bpmn:Task', 'activity', 'bpmn-icon-task',\n\t      translate('Create Task')\n\t    ),\n\t    'create.data-object': createAction(\n\t      'bpmn:DataObjectReference', 'data-object', 'bpmn-icon-data-object',\n\t      translate('Create DataObjectReference')\n\t    ),\n\t    'create.data-store': createAction(\n\t      'bpmn:DataStoreReference', 'data-store', 'bpmn-icon-data-store',\n\t      translate('Create DataStoreReference')\n\t    ),\n\t    'create.subprocess-expanded': {\n\t      group: 'activity',\n\t      className: 'bpmn-icon-subprocess-expanded',\n\t      title: translate('Create expanded SubProcess'),\n\t      action: {\n\t        dragstart: createSubprocess,\n\t        click: createSubprocess\n\t      }\n\t    },\n\t    'create.participant-expanded': {\n\t      group: 'collaboration',\n\t      className: 'bpmn-icon-participant',\n\t      title: translate('Create Pool/Participant'),\n\t      action: {\n\t        dragstart: createParticipant,\n\t        click: createParticipant\n\t      }\n\t    },\n\t    'create.group': createAction(\n\t      'bpmn:Group', 'artifact', 'bpmn-icon-group',\n\t      translate('Create Group')\n\t    ),\n\t  });\n\n\t  return actions;\n\t};\n\n\tvar PaletteModule$1 = {\n\t  __depends__: [\n\t    PaletteModule,\n\t    CreateModule,\n\t    SpaceToolModule,\n\t    LassoToolModule,\n\t    HandToolModule,\n\t    GlobalConnectModule,\n\t    translate$2\n\t  ],\n\t  __init__: [ 'paletteProvider' ],\n\t  paletteProvider: [ 'type', PaletteProvider ]\n\t};\n\n\tvar LOW_PRIORITY$m = 250;\n\n\n\tfunction BpmnReplacePreview(\n\t    eventBus, elementRegistry, elementFactory,\n\t    canvas, previewSupport) {\n\n\t  CommandInterceptor.call(this, eventBus);\n\n\t  /**\n\t   * Replace the visuals of all elements in the context which can be replaced\n\t   *\n\t   * @param  {Object} context\n\t   */\n\t  function replaceVisual(context) {\n\n\t    var replacements = context.canExecute.replacements;\n\n\t    forEach(replacements, function(replacement) {\n\n\t      var id = replacement.oldElementId;\n\n\t      var newElement = {\n\t        type: replacement.newElementType\n\t      };\n\n\t      // if the visual of the element is already replaced\n\t      if (context.visualReplacements[id]) {\n\t        return;\n\t      }\n\n\t      var element = elementRegistry.get(id);\n\n\t      assign(newElement, { x: element.x, y: element.y });\n\n\t      // create a temporary shape\n\t      var tempShape = elementFactory.createShape(newElement);\n\n\t      canvas.addShape(tempShape, element.parent);\n\n\t      // select the original SVG element related to the element and hide it\n\t      var gfx = query('[data-element-id=\"' + css_escape(element.id) + '\"]', context.dragGroup);\n\n\t      if (gfx) {\n\t        attr$1(gfx, { display: 'none' });\n\t      }\n\n\t      // clone the gfx of the temporary shape and add it to the drag group\n\t      var dragger = previewSupport.addDragger(tempShape, context.dragGroup);\n\n\t      context.visualReplacements[id] = dragger;\n\n\t      canvas.removeShape(tempShape);\n\t    });\n\t  }\n\n\t  /**\n\t   * Restore the original visuals of the previously replaced elements\n\t   *\n\t   * @param  {Object} context\n\t   */\n\t  function restoreVisual(context) {\n\n\t    var visualReplacements = context.visualReplacements;\n\n\t    forEach(visualReplacements, function(dragger, id) {\n\n\t      var originalGfx = query('[data-element-id=\"' + css_escape(id) + '\"]', context.dragGroup);\n\n\t      if (originalGfx) {\n\t        attr$1(originalGfx, { display: 'inline' });\n\t      }\n\n\t      dragger.remove();\n\n\t      if (visualReplacements[id]) {\n\t        delete visualReplacements[id];\n\t      }\n\t    });\n\t  }\n\n\t  eventBus.on('shape.move.move', LOW_PRIORITY$m, function(event) {\n\n\t    var context = event.context,\n\t        canExecute = context.canExecute;\n\n\t    if (!context.visualReplacements) {\n\t      context.visualReplacements = {};\n\t    }\n\n\t    if (canExecute && canExecute.replacements) {\n\t      replaceVisual(context);\n\t    } else {\n\t      restoreVisual(context);\n\t    }\n\t  });\n\t}\n\n\tBpmnReplacePreview.$inject = [\n\t  'eventBus',\n\t  'elementRegistry',\n\t  'elementFactory',\n\t  'canvas',\n\t  'previewSupport'\n\t];\n\n\tinherits_browser(BpmnReplacePreview, CommandInterceptor);\n\n\tvar ReplacePreviewModule = {\n\t  __depends__: [\n\t    PreviewSupportModule\n\t  ],\n\t  __init__: [ 'bpmnReplacePreview' ],\n\t  bpmnReplacePreview: [ 'type', BpmnReplacePreview ]\n\t};\n\n\tvar HIGHER_PRIORITY$2 = 1250;\r\n\r\n\tvar BOUNDARY_TO_HOST_THRESHOLD$1 = 40;\r\n\r\n\tvar TARGET_BOUNDS_PADDING = 20,\r\n\t    TASK_BOUNDS_PADDING = 10;\r\n\r\n\tvar TARGET_CENTER_PADDING = 20;\r\n\r\n\tvar AXES = [ 'x', 'y' ];\r\n\r\n\tvar abs$7 = Math.abs;\r\n\r\n\t/**\r\n\t * Snap during connect.\r\n\t *\r\n\t * @param {EventBus} eventBus\r\n\t */\r\n\tfunction BpmnConnectSnapping(eventBus) {\r\n\t  eventBus.on([\r\n\t    'connect.hover',\r\n\t    'connect.move',\r\n\t    'connect.end',\r\n\t  ], HIGHER_PRIORITY$2, function(event) {\r\n\t    var context = event.context,\r\n\t        canExecute = context.canExecute,\r\n\t        start = context.start,\r\n\t        hover = context.hover,\r\n\t        source = context.source,\r\n\t        target = context.target;\r\n\r\n\t    // do NOT snap on CMD\r\n\t    if (event.originalEvent && isCmd(event.originalEvent)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (!context.initialConnectionStart) {\r\n\t      context.initialConnectionStart = context.connectionStart;\r\n\t    }\r\n\r\n\t    // snap hover\r\n\t    if (canExecute && hover) {\r\n\t      snapToShape(event, hover, getTargetBoundsPadding(hover));\r\n\t    }\r\n\r\n\t    if (hover && isAnyType(canExecute, [\r\n\t      'bpmn:Association',\r\n\t      'bpmn:DataInputAssociation',\r\n\t      'bpmn:DataOutputAssociation',\r\n\t      'bpmn:SequenceFlow'\r\n\t    ])) {\r\n\t      context.connectionStart = mid(start);\r\n\r\n\t      // snap hover\r\n\t      if (isAny(hover, [ 'bpmn:Event', 'bpmn:Gateway' ])) {\r\n\t        snapToPosition(event, mid(hover));\r\n\t      }\r\n\r\n\t      // snap hover\r\n\t      if (isAny(hover, [ 'bpmn:Task', 'bpmn:SubProcess' ])) {\r\n\t        snapToTargetMid(event, hover);\r\n\t      }\r\n\r\n\t      // snap source and target\r\n\t      if (is$1(source, 'bpmn:BoundaryEvent') && target === source.host) {\r\n\t        snapBoundaryEventLoop(event);\r\n\t      }\r\n\r\n\t    } else if (isType(canExecute, 'bpmn:MessageFlow')) {\r\n\r\n\t      if (is$1(start, 'bpmn:Event')) {\r\n\r\n\t        // snap start\r\n\t        context.connectionStart = mid(start);\r\n\t      }\r\n\r\n\t      if (is$1(hover, 'bpmn:Event')) {\r\n\r\n\t        // snap hover\r\n\t        snapToPosition(event, mid(hover));\r\n\t      }\r\n\r\n\t    } else {\r\n\r\n\t      // un-snap source\r\n\t      context.connectionStart = context.initialConnectionStart;\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tBpmnConnectSnapping.$inject = [ 'eventBus' ];\r\n\r\n\r\n\t// helpers //////////\r\n\r\n\t// snap to target if event in target\r\n\tfunction snapToShape(event, target, padding) {\r\n\t  AXES.forEach(function(axis) {\r\n\t    var dimensionForAxis = getDimensionForAxis(axis, target);\r\n\r\n\t    if (event[ axis ] < target[ axis ] + padding) {\r\n\t      setSnapped(event, axis, target[ axis ] + padding);\r\n\t    } else if (event[ axis ] > target[ axis ] + dimensionForAxis - padding) {\r\n\t      setSnapped(event, axis, target[ axis ] + dimensionForAxis - padding);\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\t// snap to target mid if event in target mid\r\n\tfunction snapToTargetMid(event, target) {\r\n\t  var targetMid = mid(target);\r\n\r\n\t  AXES.forEach(function(axis) {\r\n\t    if (isMid(event, target, axis)) {\r\n\t      setSnapped(event, axis, targetMid[ axis ]);\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\t// snap to prevent loop overlapping boundary event\r\n\tfunction snapBoundaryEventLoop(event) {\r\n\t  var context = event.context,\r\n\t      source = context.source,\r\n\t      target = context.target;\r\n\r\n\t  if (isReverse$2(context)) {\r\n\t    return;\r\n\t  }\r\n\r\n\t  var sourceMid = mid(source),\r\n\t      orientation = getOrientation(sourceMid, target, -10),\r\n\t      axes = [];\r\n\r\n\t  if (/top|bottom/.test(orientation)) {\r\n\t    axes.push('x');\r\n\t  }\r\n\r\n\t  if (/left|right/.test(orientation)) {\r\n\t    axes.push('y');\r\n\t  }\r\n\r\n\t  axes.forEach(function(axis) {\r\n\t    var coordinate = event[ axis ], newCoordinate;\r\n\r\n\t    if (abs$7(coordinate - sourceMid[ axis ]) < BOUNDARY_TO_HOST_THRESHOLD$1) {\r\n\t      if (coordinate > sourceMid[ axis ]) {\r\n\t        newCoordinate = sourceMid[ axis ] + BOUNDARY_TO_HOST_THRESHOLD$1;\r\n\t      }\r\n\t      else {\r\n\t        newCoordinate = sourceMid[ axis ] - BOUNDARY_TO_HOST_THRESHOLD$1;\r\n\t      }\r\n\r\n\t      setSnapped(event, axis, newCoordinate);\r\n\t    }\r\n\t  });\r\n\t}\r\n\r\n\tfunction snapToPosition(event, position) {\r\n\t  setSnapped(event, 'x', position.x);\r\n\t  setSnapped(event, 'y', position.y);\r\n\t}\r\n\r\n\tfunction isType(attrs, type) {\r\n\t  return attrs && attrs.type === type;\r\n\t}\r\n\r\n\tfunction isAnyType(attrs, types) {\r\n\t  return some(types, function(type) {\r\n\t    return isType(attrs, type);\r\n\t  });\r\n\t}\r\n\r\n\tfunction getDimensionForAxis(axis, element) {\r\n\t  return axis === 'x' ? element.width : element.height;\r\n\t}\r\n\r\n\tfunction getTargetBoundsPadding(target) {\r\n\t  if (is$1(target, 'bpmn:Task')) {\r\n\t    return TASK_BOUNDS_PADDING;\r\n\t  } else {\r\n\t    return TARGET_BOUNDS_PADDING;\r\n\t  }\r\n\t}\r\n\r\n\tfunction isMid(event, target, axis) {\r\n\t  return event[ axis ] > target[ axis ] + TARGET_CENTER_PADDING\r\n\t    && event[ axis ] < target[ axis ] + getDimensionForAxis(axis, target) - TARGET_CENTER_PADDING;\r\n\t}\r\n\r\n\tfunction isReverse$2(context) {\r\n\t  var hover = context.hover,\r\n\t      source = context.source;\r\n\r\n\t  return hover && source && hover === source;\r\n\t}\n\n\t/**\n\t * A snap context, containing the (possibly incomplete)\n\t * mappings of drop targets (to identify the snapping)\n\t * to computed snap points.\n\t */\n\tfunction SnapContext() {\n\n\t  /**\n\t   * Map<String, SnapPoints> mapping drop targets to\n\t   * a list of possible snappings.\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._targets = {};\n\n\t  /**\n\t   * Map<String, Point> initial positioning of element\n\t   * regarding various snap directions.\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._snapOrigins = {};\n\n\t  /**\n\t   * List of snap locations\n\t   *\n\t   * @type {Array<string>}\n\t   */\n\t  this._snapLocations = [];\n\n\t  /**\n\t   * Map<String, Array<Point>> of default snapping locations\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._defaultSnaps = {};\n\t}\n\n\n\tSnapContext.prototype.getSnapOrigin = function(snapLocation) {\n\t  return this._snapOrigins[snapLocation];\n\t};\n\n\n\tSnapContext.prototype.setSnapOrigin = function(snapLocation, initialValue) {\n\t  this._snapOrigins[snapLocation] = initialValue;\n\n\t  if (this._snapLocations.indexOf(snapLocation) === -1) {\n\t    this._snapLocations.push(snapLocation);\n\t  }\n\t};\n\n\n\tSnapContext.prototype.addDefaultSnap = function(type, point) {\n\n\t  var snapValues = this._defaultSnaps[type];\n\n\t  if (!snapValues) {\n\t    snapValues = this._defaultSnaps[type] = [];\n\t  }\n\n\t  snapValues.push(point);\n\t};\n\n\t/**\n\t * Return a number of initialized snaps, i.e. snap locations such as\n\t * top-left, mid, bottom-right and so forth.\n\t *\n\t * @return {Array<string>} snapLocations\n\t */\n\tSnapContext.prototype.getSnapLocations = function() {\n\t  return this._snapLocations;\n\t};\n\n\t/**\n\t * Set the snap locations for this context.\n\t *\n\t * The order of locations determines precedence.\n\t *\n\t * @param {Array<string>} snapLocations\n\t */\n\tSnapContext.prototype.setSnapLocations = function(snapLocations) {\n\t  this._snapLocations = snapLocations;\n\t};\n\n\t/**\n\t * Get snap points for a given target\n\t *\n\t * @param {Element|string} target\n\t */\n\tSnapContext.prototype.pointsForTarget = function(target) {\n\n\t  var targetId = target.id || target;\n\n\t  var snapPoints = this._targets[targetId];\n\n\t  if (!snapPoints) {\n\t    snapPoints = this._targets[targetId] = new SnapPoints();\n\t    snapPoints.initDefaults(this._defaultSnaps);\n\t  }\n\n\t  return snapPoints;\n\t};\n\n\n\t/**\n\t * Creates the snap points and initializes them with the\n\t * given default values.\n\t *\n\t * @param {Object<string, Array<Point>>} [defaultPoints]\n\t */\n\tfunction SnapPoints(defaultSnaps) {\n\n\t  /**\n\t   * Map<String, Map<(x|y), Array<number>>> mapping snap locations,\n\t   * i.e. top-left, bottom-right, center to actual snap values.\n\t   *\n\t   * @type {Object}\n\t   */\n\t  this._snapValues = {};\n\t}\n\n\tSnapPoints.prototype.add = function(snapLocation, point) {\n\n\t  var snapValues = this._snapValues[snapLocation];\n\n\t  if (!snapValues) {\n\t    snapValues = this._snapValues[snapLocation] = { x: [], y: [] };\n\t  }\n\n\t  if (snapValues.x.indexOf(point.x) === -1) {\n\t    snapValues.x.push(point.x);\n\t  }\n\n\t  if (snapValues.y.indexOf(point.y) === -1) {\n\t    snapValues.y.push(point.y);\n\t  }\n\t};\n\n\n\tSnapPoints.prototype.snap = function(point, snapLocation, axis, tolerance) {\n\t  var snappingValues = this._snapValues[snapLocation];\n\n\t  return snappingValues && snapTo(point[axis], snappingValues[axis], tolerance);\n\t};\n\n\t/**\n\t * Initialize a number of default snapping points.\n\t *\n\t * @param  {Object} defaultSnaps\n\t */\n\tSnapPoints.prototype.initDefaults = function(defaultSnaps) {\n\n\t  var self = this;\n\n\t  forEach(defaultSnaps || {}, function(snapPoints, snapLocation) {\n\t    forEach(snapPoints, function(point) {\n\t      self.add(snapLocation, point);\n\t    });\n\t  });\n\t};\n\n\tvar HIGHER_PRIORITY$3 = 1250;\r\n\r\n\r\n\t/**\r\n\t * Snap during create and move.\r\n\t *\r\n\t * @param {EventBus} elementRegistry\r\n\t * @param {EventBus} eventBus\r\n\t * @param {Snapping} snapping\r\n\t */\r\n\tfunction CreateMoveSnapping(elementRegistry, eventBus, snapping) {\r\n\t  var self = this;\r\n\r\n\t  this._elementRegistry = elementRegistry;\r\n\r\n\t  eventBus.on([\r\n\t    'create.start',\r\n\t    'shape.move.start'\r\n\t  ], function(event) {\r\n\t    self.initSnap(event);\r\n\t  });\r\n\r\n\t  eventBus.on([\r\n\t    'create.move',\r\n\t    'create.end',\r\n\t    'shape.move.move',\r\n\t    'shape.move.end'\r\n\t  ], HIGHER_PRIORITY$3, function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        snapContext = context.snapContext,\r\n\t        target = context.target;\r\n\r\n\t    if (event.originalEvent && isCmd(event.originalEvent)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (isSnapped(event) || !target) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var snapPoints = snapContext.pointsForTarget(target);\r\n\r\n\t    if (!snapPoints.initialized) {\r\n\t      snapPoints = self.addSnapTargetPoints(snapPoints, shape, target);\r\n\r\n\t      snapPoints.initialized = true;\r\n\t    }\r\n\r\n\t    snapping.snap(event, snapPoints);\r\n\t  });\r\n\r\n\t  eventBus.on([\r\n\t    'create.cleanup',\r\n\t    'shape.move.cleanup'\r\n\t  ], function() {\r\n\t    snapping.hide();\r\n\t  });\r\n\t}\r\n\r\n\tCreateMoveSnapping.$inject = [\r\n\t  'elementRegistry',\r\n\t  'eventBus',\r\n\t  'snapping'\r\n\t];\r\n\r\n\tCreateMoveSnapping.prototype.initSnap = function(event) {\r\n\t  var elementRegistry = this._elementRegistry;\r\n\r\n\t  var context = event.context,\r\n\t      shape = context.shape,\r\n\t      snapContext = context.snapContext;\r\n\r\n\t  if (!snapContext) {\r\n\t    snapContext = context.snapContext = new SnapContext();\r\n\t  }\r\n\r\n\t  var shapeMid;\r\n\r\n\t  if (elementRegistry.get(shape.id)) {\r\n\r\n\t    // move\r\n\t    shapeMid = mid(shape, event);\r\n\t  } else {\r\n\r\n\t    // create\r\n\t    shapeMid = {\r\n\t      x: event.x + mid(shape).x,\r\n\t      y: event.y + mid(shape).y\r\n\t    };\r\n\t  }\r\n\r\n\t  var shapeTopLeft = {\r\n\t        x: shapeMid.x - shape.width / 2,\r\n\t        y: shapeMid.y - shape.height / 2\r\n\t      },\r\n\t      shapeBottomRight = {\r\n\t        x: shapeMid.x + shape.width / 2,\r\n\t        y: shapeMid.y + shape.height / 2\r\n\t      };\r\n\r\n\t  snapContext.setSnapOrigin('mid', {\r\n\t    x: shapeMid.x - event.x,\r\n\t    y: shapeMid.y - event.y\r\n\t  });\r\n\r\n\t  // snap labels to mid only\r\n\t  if (isLabel$5(shape)) {\r\n\t    return snapContext;\r\n\t  }\r\n\r\n\t  snapContext.setSnapOrigin('top-left', {\r\n\t    x: shapeTopLeft.x - event.x,\r\n\t    y: shapeTopLeft.y - event.y\r\n\t  });\r\n\r\n\t  snapContext.setSnapOrigin('bottom-right', {\r\n\t    x: shapeBottomRight.x - event.x,\r\n\t    y: shapeBottomRight.y - event.y\r\n\t  });\r\n\r\n\t  return snapContext;\r\n\t};\r\n\r\n\tCreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {\r\n\t  var snapTargets = this.getSnapTargets(shape, target);\r\n\r\n\t  forEach(snapTargets, function(snapTarget) {\r\n\r\n\t    // handle labels\r\n\t    if (isLabel$5(snapTarget)) {\r\n\r\n\t      if (isLabel$5(shape)) {\r\n\t        snapPoints.add('mid', mid(snapTarget));\r\n\t      }\r\n\r\n\t      return;\r\n\t    }\r\n\r\n\t    // handle connections\r\n\t    if (isConnection$9(snapTarget)) {\r\n\r\n\t      // ignore single segment connections\r\n\t      if (snapTarget.waypoints.length < 3) {\r\n\t        return;\r\n\t      }\r\n\r\n\t      // ignore first and last waypoint\r\n\t      var waypoints = snapTarget.waypoints.slice(1, -1);\r\n\r\n\t      forEach(waypoints, function(waypoint) {\r\n\t        snapPoints.add('mid', waypoint);\r\n\t      });\r\n\r\n\t      return;\r\n\t    }\r\n\r\n\t    // handle shapes\r\n\t    snapPoints.add('mid', mid(snapTarget));\r\n\t  });\r\n\r\n\t  if (!isNumber(shape.x) || !isNumber(shape.y)) {\r\n\t    return snapPoints;\r\n\t  }\r\n\r\n\t  // snap to original position when moving\r\n\t  if (this._elementRegistry.get(shape.id)) {\r\n\t    snapPoints.add('mid', mid(shape));\r\n\t  }\r\n\r\n\t  return snapPoints;\r\n\t};\r\n\r\n\tCreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {\r\n\t  return getChildren$1(target).filter(function(child) {\r\n\t    return !isHidden(child);\r\n\t  });\r\n\t};\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction isConnection$9(element) {\r\n\t  return !!element.waypoints;\r\n\t}\r\n\r\n\tfunction isHidden(element) {\r\n\t  return !!element.hidden;\r\n\t}\r\n\r\n\tfunction isLabel$5(element) {\r\n\t  return !!element.labelTarget;\r\n\t}\n\n\tvar HIGH_PRIORITY$i = 1500;\n\n\n\t/**\n\t * Snap during create and move.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Injector} injector\n\t */\n\tfunction BpmnCreateMoveSnapping(eventBus, injector) {\n\t  injector.invoke(CreateMoveSnapping, this);\n\n\t  // creating first participant\n\t  eventBus.on([ 'create.move', 'create.end' ], HIGH_PRIORITY$i, setSnappedIfConstrained);\n\n\t  // snap boundary events\n\t  eventBus.on([\n\t    'create.move',\n\t    'create.end',\n\t    'shape.move.move',\n\t    'shape.move.end'\n\t  ], HIGH_PRIORITY$i, function(event) {\n\t    var context = event.context,\n\t        canExecute = context.canExecute,\n\t        target = context.target;\n\n\t    var canAttach = canExecute && (canExecute === 'attach' || canExecute.attach);\n\n\t    if (canAttach && !isSnapped(event)) {\n\t      snapBoundaryEvent(event, target);\n\t    }\n\t  });\n\t}\n\n\tinherits_browser(BpmnCreateMoveSnapping, CreateMoveSnapping);\n\n\tBpmnCreateMoveSnapping.$inject = [\n\t  'eventBus',\n\t  'injector'\n\t];\n\n\tBpmnCreateMoveSnapping.prototype.initSnap = function(event) {\n\t  var snapContext = CreateMoveSnapping.prototype.initSnap.call(this, event);\n\n\t  var shape = event.shape;\n\n\t  var isMove = !!this._elementRegistry.get(shape.id);\n\n\t  // snap to docking points\n\t  forEach(shape.outgoing, function(connection) {\n\t    var docking = connection.waypoints[0];\n\n\t    docking = docking.original || docking;\n\n\t    snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));\n\t  });\n\n\t  forEach(shape.incoming, function(connection) {\n\t    var docking = connection.waypoints[connection.waypoints.length - 1];\n\n\t    docking = docking.original || docking;\n\n\t    snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));\n\t  });\n\n\t  if (is$1(shape, 'bpmn:Participant')) {\n\n\t    // snap to borders with higher priority\n\t    snapContext.setSnapLocations([ 'top-left', 'bottom-right', 'mid' ]);\n\t  }\n\n\t  return snapContext;\n\t};\n\n\tBpmnCreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {\n\t  CreateMoveSnapping.prototype.addSnapTargetPoints.call(this, snapPoints, shape, target);\n\n\t  var snapTargets = this.getSnapTargets(shape, target);\n\n\t  forEach(snapTargets, function(snapTarget) {\n\n\t    // handle TRBL alignment\n\t    //\n\t    // * with container elements\n\t    // * with text annotations\n\t    if (isContainer(snapTarget) || areAll([ shape, snapTarget ], 'bpmn:TextAnnotation')) {\n\t      snapPoints.add('top-left', topLeft(snapTarget));\n\t      snapPoints.add('bottom-right', bottomRight(snapTarget));\n\t    }\n\t  });\n\n\t  var elementRegistry = this._elementRegistry;\n\n\t  // snap to docking points if not create mode\n\t  forEach(shape.incoming, function(connection) {\n\t    if (elementRegistry.get(shape.id)) {\n\n\t      if (!includes$6(snapTargets, connection.source)) {\n\t        snapPoints.add('mid', getMid(connection.source));\n\t      }\n\n\t      var docking = connection.waypoints[0];\n\t      snapPoints.add(connection.id + '-docking', docking.original || docking);\n\t    }\n\t  });\n\n\t  forEach(shape.outgoing, function(connection) {\n\t    if (elementRegistry.get(shape.id)) {\n\n\t      if (!includes$6(snapTargets, connection.target)) {\n\t        snapPoints.add('mid', getMid(connection.target));\n\t      }\n\n\t      var docking = connection.waypoints[ connection.waypoints.length - 1 ];\n\n\t      snapPoints.add(connection.id + '-docking', docking.original || docking);\n\t    }\n\t  });\n\n\t  // add sequence flow parents as snap targets\n\t  if (is$1(target, 'bpmn:SequenceFlow')) {\n\t    snapPoints = this.addSnapTargetPoints(snapPoints, shape, target.parent);\n\t  }\n\n\t  return snapPoints;\n\t};\n\n\tBpmnCreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {\n\t  return CreateMoveSnapping.prototype.getSnapTargets.call(this, shape, target)\n\t    .filter(function(snapTarget) {\n\n\t      // do not snap to lanes\n\t      return !is$1(snapTarget, 'bpmn:Lane');\n\t    });\n\t};\n\n\t// helpers //////////\n\n\tfunction snapBoundaryEvent(event, target) {\n\t  var targetTRBL = asTRBL(target);\n\n\t  var direction = getBoundaryAttachment(event, target);\n\n\t  var context = event.context,\n\t      shape = context.shape;\n\n\t  var offset;\n\n\t  if (shape.parent) {\n\t    offset = { x: 0, y: 0 };\n\t  } else {\n\t    offset = getMid(shape);\n\t  }\n\n\t  if (/top/.test(direction)) {\n\t    setSnapped(event, 'y', targetTRBL.top - offset.y);\n\t  } else if (/bottom/.test(direction)) {\n\t    setSnapped(event, 'y', targetTRBL.bottom - offset.y);\n\t  }\n\n\t  if (/left/.test(direction)) {\n\t    setSnapped(event, 'x', targetTRBL.left - offset.x);\n\t  } else if (/right/.test(direction)) {\n\t    setSnapped(event, 'x', targetTRBL.right - offset.x);\n\t  }\n\t}\n\n\tfunction areAll(elements, type) {\n\t  return elements.every(function(el) {\n\t    return is$1(el, type);\n\t  });\n\t}\n\n\tfunction isContainer(element) {\n\t  if (is$1(element, 'bpmn:SubProcess') && isExpanded(element)) {\n\t    return true;\n\t  }\n\n\t  return is$1(element, 'bpmn:Participant');\n\t}\n\n\n\tfunction setSnappedIfConstrained(event) {\n\t  var context = event.context,\n\t      createConstraints = context.createConstraints;\n\n\t  if (!createConstraints) {\n\t    return;\n\t  }\n\n\t  var top = createConstraints.top,\n\t      right = createConstraints.right,\n\t      bottom = createConstraints.bottom,\n\t      left = createConstraints.left;\n\n\t  if ((left && left >= event.x) || (right && right <= event.x)) {\n\t    setSnapped(event, 'x', event.x);\n\t  }\n\n\t  if ((top && top >= event.y) || (bottom && bottom <= event.y)) {\n\t    setSnapped(event, 'y', event.y);\n\t  }\n\t}\n\n\tfunction includes$6(array, value) {\n\t  return array.indexOf(value) !== -1;\n\t}\n\n\tfunction getDockingSnapOrigin(docking, isMove, event) {\n\t  return isMove ? (\n\t    {\n\t      x: docking.x - event.x,\n\t      y: docking.y - event.y\n\t    }\n\t  ) : {\n\t    x: docking.x,\n\t    y: docking.y\n\t  };\n\t}\n\n\tvar HIGHER_PRIORITY$4 = 1250;\r\n\r\n\r\n\t/**\r\n\t * Snap during resize.\r\n\t *\r\n\t * @param {EventBus} eventBus\r\n\t * @param {Snapping} snapping\r\n\t */\r\n\tfunction ResizeSnapping(eventBus, snapping) {\r\n\t  var self = this;\r\n\r\n\t  eventBus.on([ 'resize.start' ], function(event) {\r\n\t    self.initSnap(event);\r\n\t  });\r\n\r\n\t  eventBus.on([\r\n\t    'resize.move',\r\n\t    'resize.end',\r\n\t  ], HIGHER_PRIORITY$4, function(event) {\r\n\t    var context = event.context,\r\n\t        shape = context.shape,\r\n\t        parent = shape.parent,\r\n\t        direction = context.direction,\r\n\t        snapContext = context.snapContext;\r\n\r\n\t    if (event.originalEvent && isCmd(event.originalEvent)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (isSnapped(event)) {\r\n\t      return;\r\n\t    }\r\n\r\n\t    var snapPoints = snapContext.pointsForTarget(parent);\r\n\r\n\t    if (!snapPoints.initialized) {\r\n\t      snapPoints = self.addSnapTargetPoints(snapPoints, shape, parent, direction);\r\n\r\n\t      snapPoints.initialized = true;\r\n\t    }\r\n\r\n\t    if (isHorizontal$3(direction)) {\r\n\t      setSnapped(event, 'x', event.x);\r\n\t    }\r\n\r\n\t    if (isVertical(direction)) {\r\n\t      setSnapped(event, 'y', event.y);\r\n\t    }\r\n\r\n\t    snapping.snap(event, snapPoints);\r\n\t  });\r\n\r\n\t  eventBus.on([ 'resize.cleanup' ], function() {\r\n\t    snapping.hide();\r\n\t  });\r\n\t}\r\n\r\n\tResizeSnapping.prototype.initSnap = function(event) {\r\n\t  var context = event.context,\r\n\t      shape = context.shape,\r\n\t      direction = context.direction,\r\n\t      snapContext = context.snapContext;\r\n\r\n\t  if (!snapContext) {\r\n\t    snapContext = context.snapContext = new SnapContext();\r\n\t  }\r\n\r\n\t  var snapOrigin = getSnapOrigin(shape, direction);\r\n\r\n\t  snapContext.setSnapOrigin('corner', {\r\n\t    x: snapOrigin.x - event.x,\r\n\t    y: snapOrigin.y - event.y\r\n\t  });\r\n\r\n\t  return snapContext;\r\n\t};\r\n\r\n\tResizeSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target, direction) {\r\n\t  var snapTargets = this.getSnapTargets(shape, target);\r\n\r\n\t  forEach(snapTargets, function(snapTarget) {\r\n\t    snapPoints.add('corner', bottomRight(snapTarget));\r\n\t    snapPoints.add('corner', topLeft(snapTarget));\r\n\t  });\r\n\r\n\t  snapPoints.add('corner', getSnapOrigin(shape, direction));\r\n\r\n\t  return snapPoints;\r\n\t};\r\n\r\n\tResizeSnapping.$inject = [\r\n\t  'eventBus',\r\n\t  'snapping'\r\n\t];\r\n\r\n\tResizeSnapping.prototype.getSnapTargets = function(shape, target) {\r\n\t  return getChildren$1(target).filter(function(child) {\r\n\t    return !isAttached(child, shape)\r\n\t      && !isConnection$a(child)\r\n\t      && !isHidden$1(child)\r\n\t      && !isLabel$6(child);\r\n\t  });\r\n\t};\r\n\r\n\t// helpers //////////\r\n\r\n\tfunction getSnapOrigin(shape, direction) {\r\n\t  var mid = getMid(shape),\r\n\t      trbl = asTRBL(shape);\r\n\r\n\t  var snapOrigin = {\r\n\t    x: mid.x,\r\n\t    y: mid.y\r\n\t  };\r\n\r\n\t  if (direction.indexOf('n') !== -1) {\r\n\t    snapOrigin.y = trbl.top;\r\n\t  } else if (direction.indexOf('s') !== -1) {\r\n\t    snapOrigin.y = trbl.bottom;\r\n\t  }\r\n\r\n\t  if (direction.indexOf('e') !== -1) {\r\n\t    snapOrigin.x = trbl.right;\r\n\t  } else if (direction.indexOf('w') !== -1) {\r\n\t    snapOrigin.x = trbl.left;\r\n\t  }\r\n\r\n\t  return snapOrigin;\r\n\t}\r\n\r\n\tfunction isAttached(element, host) {\r\n\t  return element.host === host;\r\n\t}\r\n\r\n\tfunction isConnection$a(element) {\r\n\t  return !!element.waypoints;\r\n\t}\r\n\r\n\tfunction isHidden$1(element) {\r\n\t  return !!element.hidden;\r\n\t}\r\n\r\n\tfunction isLabel$6(element) {\r\n\t  return !!element.labelTarget;\r\n\t}\r\n\r\n\tfunction isHorizontal$3(direction) {\r\n\t  return direction === 'n' || direction === 's';\r\n\t}\r\n\r\n\tfunction isVertical(direction) {\r\n\t  return direction === 'e' || direction === 'w';\r\n\t}\n\n\tvar SNAP_TOLERANCE = 7;\n\n\tvar SNAP_LINE_HIDE_DELAY = 1000;\n\n\n\t/**\n\t * Generic snapping feature.\n\t *\n\t * @param {EventBus} eventBus\n\t * @param {Canvas} canvas\n\t */\n\tfunction Snapping(canvas) {\n\t  this._canvas = canvas;\n\n\t  // delay hide by 1000 seconds since last snap\n\t  this._asyncHide = debounce(bind(this.hide, this), SNAP_LINE_HIDE_DELAY);\n\t}\n\n\tSnapping.$inject = [ 'canvas' ];\n\n\t/**\n\t * Snap an event to given snap points.\n\t *\n\t * @param {Event} event\n\t * @param {SnapPoints} snapPoints\n\t */\n\tSnapping.prototype.snap = function(event, snapPoints) {\n\t  var context = event.context,\n\t      snapContext = context.snapContext,\n\t      snapLocations = snapContext.getSnapLocations();\n\n\t  var snapping = {\n\t    x: isSnapped(event, 'x'),\n\t    y: isSnapped(event, 'y')\n\t  };\n\n\t  forEach(snapLocations, function(location) {\n\t    var snapOrigin = snapContext.getSnapOrigin(location);\n\n\t    var snapCurrent = {\n\t      x: event.x + snapOrigin.x,\n\t      y: event.y + snapOrigin.y\n\t    };\n\n\t    // snap both axis if not snapped already\n\t    forEach([ 'x', 'y' ], function(axis) {\n\t      var locationSnapping;\n\n\t      if (!snapping[axis]) {\n\t        locationSnapping = snapPoints.snap(snapCurrent, location, axis, SNAP_TOLERANCE);\n\n\t        if (locationSnapping !== undefined) {\n\t          snapping[axis] = {\n\t            value: locationSnapping,\n\t            originValue: locationSnapping - snapOrigin[axis]\n\t          };\n\t        }\n\t      }\n\t    });\n\n\t    // no need to continue snapping\n\t    if (snapping.x && snapping.y) {\n\t      return false;\n\t    }\n\t  });\n\n\t  // show snap lines\n\t  this.showSnapLine('vertical', snapping.x && snapping.x.value);\n\t  this.showSnapLine('horizontal', snapping.y && snapping.y.value);\n\n\t  // snap event\n\t  forEach([ 'x', 'y' ], function(axis) {\n\t    var axisSnapping = snapping[axis];\n\n\t    if (isObject(axisSnapping)) {\n\t      setSnapped(event, axis, axisSnapping.originValue);\n\t    }\n\t  });\n\t};\n\n\tSnapping.prototype._createLine = function(orientation) {\n\t  var root = this._canvas.getLayer('snap');\n\n\t  var line = create('path');\n\n\t  attr$1(line, { d: 'M0,0 L0,0' });\n\n\t  classes$1(line).add('djs-snap-line');\n\n\t  append(root, line);\n\n\t  return {\n\t    update: function(position) {\n\n\t      if (!isNumber(position)) {\n\t        attr$1(line, { display: 'none' });\n\t      } else {\n\t        if (orientation === 'horizontal') {\n\t          attr$1(line, {\n\t            d: 'M-100000,' + position + ' L+100000,' + position,\n\t            display: ''\n\t          });\n\t        } else {\n\t          attr$1(line, {\n\t            d: 'M ' + position + ',-100000 L ' + position + ', +100000',\n\t            display: ''\n\t          });\n\t        }\n\t      }\n\t    }\n\t  };\n\t};\n\n\tSnapping.prototype._createSnapLines = function() {\n\t  this._snapLines = {\n\t    horizontal: this._createLine('horizontal'),\n\t    vertical: this._createLine('vertical')\n\t  };\n\t};\n\n\tSnapping.prototype.showSnapLine = function(orientation, position) {\n\n\t  var line = this.getSnapLine(orientation);\n\n\t  if (line) {\n\t    line.update(position);\n\t  }\n\n\t  this._asyncHide();\n\t};\n\n\tSnapping.prototype.getSnapLine = function(orientation) {\n\t  if (!this._snapLines) {\n\t    this._createSnapLines();\n\t  }\n\n\t  return this._snapLines[orientation];\n\t};\n\n\tSnapping.prototype.hide = function() {\n\t  forEach(this._snapLines, function(snapLine) {\n\t    snapLine.update();\n\t  });\n\t};\n\n\tvar SnappingModule = {\n\t  __init__: [\n\t    'createMoveSnapping',\n\t    'resizeSnapping',\n\t    'snapping'\n\t  ],\n\t  createMoveSnapping: [ 'type', CreateMoveSnapping ],\n\t  resizeSnapping: [ 'type', ResizeSnapping ],\n\t  snapping: [ 'type', Snapping ]\n\t};\n\n\tvar SnappingModule$1 = {\n\t  __depends__: [ SnappingModule ],\n\t  __init__: [\n\t    'connectSnapping',\n\t    'createMoveSnapping'\n\t  ],\n\t  connectSnapping: [ 'type', BpmnConnectSnapping ],\n\t  createMoveSnapping: [ 'type', BpmnCreateMoveSnapping ]\n\t};\n\n\t/**\n\t * Provides searching infrastructure\n\t */\n\tfunction SearchPad(canvas, eventBus, overlays, selection) {\n\t  this._open = false;\n\t  this._results = [];\n\t  this._eventMaps = [];\n\n\t  this._canvas = canvas;\n\t  this._eventBus = eventBus;\n\t  this._overlays = overlays;\n\t  this._selection = selection;\n\n\t  // setup elements\n\t  this._container = domify(SearchPad.BOX_HTML);\n\t  this._searchInput = query(SearchPad.INPUT_SELECTOR, this._container);\n\t  this._resultsContainer = query(SearchPad.RESULTS_CONTAINER_SELECTOR, this._container);\n\n\t  // attach search pad\n\t  this._canvas.getContainer().appendChild(this._container);\n\n\t  // cleanup on destroy\n\t  eventBus.on([ 'canvas.destroy', 'diagram.destroy' ], this.close, this);\n\t}\n\n\n\tSearchPad.$inject = [\n\t  'canvas',\n\t  'eventBus',\n\t  'overlays',\n\t  'selection'\n\t];\n\n\n\t/**\n\t * Binds and keeps track of all event listereners\n\t */\n\tSearchPad.prototype._bindEvents = function() {\n\t  var self = this;\n\n\t  function listen(el, selector, type, fn) {\n\t    self._eventMaps.push({\n\t      el: el,\n\t      type: type,\n\t      listener: delegateEvents.bind(el, selector, type, fn)\n\t    });\n\t  }\n\n\t  // close search on clicking anywhere outside\n\t  listen(document, 'html', 'click', function(e) {\n\t    self.close();\n\t  });\n\n\t  // stop event from propagating and closing search\n\t  // focus on input\n\t  listen(this._container, SearchPad.INPUT_SELECTOR, 'click', function(e) {\n\t    e.stopPropagation();\n\t    e.delegateTarget.focus();\n\t  });\n\n\t  // preselect result on hover\n\t  listen(this._container, SearchPad.RESULT_SELECTOR, 'mouseover', function(e) {\n\t    e.stopPropagation();\n\t    self._scrollToNode(e.delegateTarget);\n\t    self._preselect(e.delegateTarget);\n\t  });\n\n\t  // selects desired result on mouse click\n\t  listen(this._container, SearchPad.RESULT_SELECTOR, 'click', function(e) {\n\t    e.stopPropagation();\n\t    self._select(e.delegateTarget);\n\t  });\n\n\t  // prevent cursor in input from going left and right when using up/down to\n\t  // navigate results\n\t  listen(this._container, SearchPad.INPUT_SELECTOR, 'keydown', function(e) {\n\n\t    // up\n\t    if (e.keyCode === 38) {\n\t      e.preventDefault();\n\t    }\n\n\t    // down\n\t    if (e.keyCode === 40) {\n\t      e.preventDefault();\n\t    }\n\t  });\n\n\t  // handle keyboard input\n\t  listen(this._container, SearchPad.INPUT_SELECTOR, 'keyup', function(e) {\n\n\t    // escape\n\t    if (e.keyCode === 27) {\n\t      return self.close();\n\t    }\n\n\t    // enter\n\t    if (e.keyCode === 13) {\n\t      var selected = self._getCurrentResult();\n\n\t      return selected ? self._select(selected) : self.close();\n\t    }\n\n\t    // up\n\t    if (e.keyCode === 38) {\n\t      return self._scrollToDirection(true);\n\t    }\n\n\t    // down\n\t    if (e.keyCode === 40) {\n\t      return self._scrollToDirection();\n\t    }\n\n\t    // left && right\n\t    // do not search while navigating text input\n\t    if (e.keyCode === 37 || e.keyCode === 39) {\n\t      return;\n\t    }\n\n\t    // anything else\n\t    self._search(e.delegateTarget.value);\n\t  });\n\t};\n\n\n\t/**\n\t * Unbinds all previously established listeners\n\t */\n\tSearchPad.prototype._unbindEvents = function() {\n\t  this._eventMaps.forEach(function(m) {\n\t    delegateEvents.unbind(m.el, m.type, m.listener);\n\t  });\n\t};\n\n\n\t/**\n\t * Performs a search for the given pattern.\n\t *\n\t * @param  {string} pattern\n\t */\n\tSearchPad.prototype._search = function(pattern) {\n\t  var self = this;\n\n\t  this._clearResults();\n\n\t  // do not search on empty query\n\t  if (!pattern || pattern === '') {\n\t    return;\n\t  }\n\n\t  var searchResults = this._searchProvider.find(pattern);\n\n\t  if (!searchResults.length) {\n\t    return;\n\t  }\n\n\t  // append new results\n\t  searchResults.forEach(function(result) {\n\t    var id = result.element.id;\n\t    var node = self._createResultNode(result, id);\n\t    self._results[id] = {\n\t      element: result.element,\n\t      node: node\n\t    };\n\t  });\n\n\t  // preselect first result\n\t  var node = query(SearchPad.RESULT_SELECTOR, this._resultsContainer);\n\t  this._scrollToNode(node);\n\t  this._preselect(node);\n\t};\n\n\n\t/**\n\t * Navigate to the previous/next result. Defaults to next result.\n\t * @param  {boolean} previous\n\t */\n\tSearchPad.prototype._scrollToDirection = function(previous) {\n\t  var selected = this._getCurrentResult();\n\t  if (!selected) {\n\t    return;\n\t  }\n\n\t  var node = previous ? selected.previousElementSibling : selected.nextElementSibling;\n\t  if (node) {\n\t    this._scrollToNode(node);\n\t    this._preselect(node);\n\t  }\n\t};\n\n\n\t/**\n\t * Scroll to the node if it is not visible.\n\t *\n\t * @param  {Element} node\n\t */\n\tSearchPad.prototype._scrollToNode = function(node) {\n\t  if (!node || node === this._getCurrentResult()) {\n\t    return;\n\t  }\n\n\t  var nodeOffset = node.offsetTop;\n\t  var containerScroll = this._resultsContainer.scrollTop;\n\n\t  var bottomScroll = nodeOffset - this._resultsContainer.clientHeight + node.clientHeight;\n\n\t  if (nodeOffset < containerScroll) {\n\t    this._resultsContainer.scrollTop = nodeOffset;\n\t  } else if (containerScroll < bottomScroll) {\n\t    this._resultsContainer.scrollTop = bottomScroll;\n\t  }\n\t};\n\n\n\t/**\n\t * Clears all results data.\n\t */\n\tSearchPad.prototype._clearResults = function() {\n\t  clear(this._resultsContainer);\n\n\t  this._results = [];\n\n\t  this._resetOverlay();\n\n\t  this._eventBus.fire('searchPad.cleared');\n\t};\n\n\n\t/**\n\t * Get currently selected result.\n\t *\n\t * @return {Element}\n\t */\n\tSearchPad.prototype._getCurrentResult = function() {\n\t  return query(SearchPad.RESULT_SELECTED_SELECTOR, this._resultsContainer);\n\t};\n\n\n\t/**\n\t * Create result DOM element within results container\n\t * that corresponds to a search result.\n\t *\n\t * 'result' : one of the elements returned by SearchProvider\n\t * 'id' : id attribute value to assign to the new DOM node\n\t * return : created DOM element\n\t *\n\t * @param  {SearchResult} result\n\t * @param  {string} id\n\t * @return {Element}\n\t */\n\tSearchPad.prototype._createResultNode = function(result, id) {\n\t  var node = domify(SearchPad.RESULT_HTML);\n\n\t  // create only if available\n\t  if (result.primaryTokens.length > 0) {\n\t    createInnerTextNode(node, result.primaryTokens, SearchPad.RESULT_PRIMARY_HTML);\n\t  }\n\n\t  // secondary tokens (represent element ID) are allways available\n\t  createInnerTextNode(node, result.secondaryTokens, SearchPad.RESULT_SECONDARY_HTML);\n\n\t  attr(node, SearchPad.RESULT_ID_ATTRIBUTE, id);\n\n\t  this._resultsContainer.appendChild(node);\n\n\t  return node;\n\t};\n\n\n\t/**\n\t * Register search element provider.\n\t *\n\t * SearchProvider.find - provides search function over own elements\n\t *  (pattern) => [{ text: <String>, element: <Element>}, ...]\n\t *\n\t * @param  {SearchProvider} provider\n\t */\n\tSearchPad.prototype.registerProvider = function(provider) {\n\t  this._searchProvider = provider;\n\t};\n\n\n\t/**\n\t * Open search pad.\n\t */\n\tSearchPad.prototype.open = function() {\n\t  if (!this._searchProvider) {\n\t    throw new Error('no search provider registered');\n\t  }\n\n\t  if (this.isOpen()) {\n\t    return;\n\t  }\n\n\t  this._bindEvents();\n\n\t  this._open = true;\n\n\t  classes(this._container).add('open');\n\n\t  this._searchInput.focus();\n\n\t  this._eventBus.fire('searchPad.opened');\n\t};\n\n\n\t/**\n\t * Close search pad.\n\t */\n\tSearchPad.prototype.close = function() {\n\t  if (!this.isOpen()) {\n\t    return;\n\t  }\n\n\t  this._unbindEvents();\n\n\t  this._open = false;\n\n\t  classes(this._container).remove('open');\n\n\t  this._clearResults();\n\n\t  this._searchInput.value = '';\n\t  this._searchInput.blur();\n\n\t  this._resetOverlay();\n\n\t  this._eventBus.fire('searchPad.closed');\n\t};\n\n\n\t/**\n\t * Toggles search pad on/off.\n\t */\n\tSearchPad.prototype.toggle = function() {\n\t  this.isOpen() ? this.close() : this.open();\n\t};\n\n\n\t/**\n\t * Report state of search pad.\n\t */\n\tSearchPad.prototype.isOpen = function() {\n\t  return this._open;\n\t};\n\n\n\t/**\n\t * Preselect result entry.\n\t *\n\t * @param  {Element} element\n\t */\n\tSearchPad.prototype._preselect = function(node) {\n\t  var selectedNode = this._getCurrentResult();\n\n\t  // already selected\n\t  if (node === selectedNode) {\n\t    return;\n\t  }\n\n\t  // removing preselection from current node\n\t  if (selectedNode) {\n\t    classes(selectedNode).remove(SearchPad.RESULT_SELECTED_CLASS);\n\t  }\n\n\t  var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);\n\t  var element = this._results[id].element;\n\n\t  classes(node).add(SearchPad.RESULT_SELECTED_CLASS);\n\n\t  this._resetOverlay(element);\n\n\t  this._centerViewbox(element);\n\n\t  this._selection.select(element);\n\n\t  this._eventBus.fire('searchPad.preselected', element);\n\t};\n\n\n\t/**\n\t * Select result node.\n\t *\n\t * @param  {Element} element\n\t */\n\tSearchPad.prototype._select = function(node) {\n\t  var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);\n\t  var element = this._results[id].element;\n\n\t  this.close();\n\n\t  this._resetOverlay();\n\n\t  this._centerViewbox(element);\n\n\t  this._selection.select(element);\n\n\t  this._eventBus.fire('searchPad.selected', element);\n\t};\n\n\n\t/**\n\t * Center viewbox on the element middle point.\n\t *\n\t * @param  {Element} element\n\t */\n\tSearchPad.prototype._centerViewbox = function(element) {\n\t  var viewbox = this._canvas.viewbox();\n\n\t  var box = getBBox(element);\n\n\t  var newViewbox = {\n\t    x: (box.x + box.width/2) - viewbox.outer.width/2,\n\t    y: (box.y + box.height/2) - viewbox.outer.height/2,\n\t    width: viewbox.outer.width,\n\t    height: viewbox.outer.height\n\t  };\n\n\t  this._canvas.viewbox(newViewbox);\n\n\t  this._canvas.zoom(viewbox.scale);\n\t};\n\n\n\t/**\n\t * Reset overlay removes and, optionally, set\n\t * overlay to a new element.\n\t *\n\t * @param  {Element} element\n\t */\n\tSearchPad.prototype._resetOverlay = function(element) {\n\t  if (this._overlayId) {\n\t    this._overlays.remove(this._overlayId);\n\t  }\n\n\t  if (element) {\n\t    var box = getBBox(element);\n\t    var overlay = constructOverlay(box);\n\t    this._overlayId = this._overlays.add(element, overlay);\n\t  }\n\t};\n\n\n\t/**\n\t * Construct overlay object for the given bounding box.\n\t *\n\t * @param  {BoundingBox} box\n\t * @return {Object}\n\t */\n\tfunction constructOverlay(box) {\n\n\t  var offset = 6;\n\t  var w = box.width + offset * 2;\n\t  var h = box.height + offset * 2;\n\n\t  var styles = [\n\t    'width: '+ w +'px',\n\t    'height: '+ h + 'px'\n\t  ].join('; ');\n\n\t  return {\n\t    position: {\n\t      bottom: h - offset,\n\t      right: w - offset\n\t    },\n\t    show: true,\n\t    html: '<div style=\"' + styles + '\" class=\"' + SearchPad.OVERLAY_CLASS + '\"></div>'\n\t  };\n\t}\n\n\n\t/**\n\t * Creates and appends child node from result tokens and HTML template.\n\t *\n\t * @param  {Element} node\n\t * @param  {Array<Object>} tokens\n\t * @param  {string} template\n\t */\n\tfunction createInnerTextNode(parentNode, tokens, template) {\n\t  var text = createHtmlText(tokens);\n\t  var childNode = domify(template);\n\t  childNode.innerHTML = text;\n\t  parentNode.appendChild(childNode);\n\t}\n\n\t/**\n\t * Create internal HTML markup from result tokens.\n\t * Caters for highlighting pattern matched tokens.\n\t *\n\t * @param  {Array<Object>} tokens\n\t * @return {string}\n\t */\n\tfunction createHtmlText(tokens) {\n\t  var htmlText = '';\n\n\t  tokens.forEach(function(t) {\n\t    if (t.matched) {\n\t      htmlText += '<strong class=\"' + SearchPad.RESULT_HIGHLIGHT_CLASS + '\">' + escapeHTML(t.matched) + '</strong>';\n\t    } else {\n\t      htmlText += escapeHTML(t.normal);\n\t    }\n\t  });\n\n\t  return htmlText !== '' ? htmlText : null;\n\t}\n\n\n\t/**\n\t * CONSTANTS\n\t */\n\tSearchPad.CONTAINER_SELECTOR = '.djs-search-container';\n\tSearchPad.INPUT_SELECTOR = '.djs-search-input input';\n\tSearchPad.RESULTS_CONTAINER_SELECTOR = '.djs-search-results';\n\tSearchPad.RESULT_SELECTOR = '.djs-search-result';\n\tSearchPad.RESULT_SELECTED_CLASS = 'djs-search-result-selected';\n\tSearchPad.RESULT_SELECTED_SELECTOR = '.' + SearchPad.RESULT_SELECTED_CLASS;\n\tSearchPad.RESULT_ID_ATTRIBUTE = 'data-result-id';\n\tSearchPad.RESULT_HIGHLIGHT_CLASS = 'djs-search-highlight';\n\tSearchPad.OVERLAY_CLASS = 'djs-search-overlay';\n\n\tSearchPad.BOX_HTML =\n\t  '<div class=\"djs-search-container djs-draggable djs-scrollable\">' +\n\t    '<div class=\"djs-search-input\">' +\n\t      '<input type=\"text\"/>' +\n\t    '</div>' +\n\t    '<div class=\"djs-search-results\"></div>' +\n\t  '</div>';\n\n\tSearchPad.RESULT_HTML =\n\t  '<div class=\"djs-search-result\"></div>';\n\n\tSearchPad.RESULT_PRIMARY_HTML =\n\t  '<div class=\"djs-search-result-primary\"></div>';\n\n\tSearchPad.RESULT_SECONDARY_HTML =\n\t  '<p class=\"djs-search-result-secondary\"></p>';\n\n\tvar SearchPadModule = {\n\t  __depends__: [\n\t    OverlaysModule,\n\t    SelectionModule\n\t  ],\n\t  searchPad: [ 'type', SearchPad ]\n\t};\n\n\t/**\n\t * Provides ability to search through BPMN elements\n\t */\n\tfunction BpmnSearchProvider(elementRegistry, searchPad, canvas) {\n\n\t  this._elementRegistry = elementRegistry;\n\t  this._canvas = canvas;\n\n\t  searchPad.registerProvider(this);\n\t}\n\n\tBpmnSearchProvider.$inject = [\n\t  'elementRegistry',\n\t  'searchPad',\n\t  'canvas'\n\t];\n\n\n\t/**\n\t * Finds all elements that match given pattern\n\t *\n\t * <Result> :\n\t *  {\n\t *    primaryTokens: <Array<Token>>,\n\t *    secondaryTokens: <Array<Token>>,\n\t *    element: <Element>\n\t *  }\n\t *\n\t * <Token> :\n\t *  {\n\t *    normal|matched: <string>\n\t *  }\n\t *\n\t * @param  {string} pattern\n\t * @return {Array<Result>}\n\t */\n\tBpmnSearchProvider.prototype.find = function(pattern) {\n\t  var rootElement = this._canvas.getRootElement();\n\n\t  var elements = this._elementRegistry.filter(function(element) {\n\t    if (element.labelTarget) {\n\t      return false;\n\t    }\n\t    return true;\n\t  });\n\n\t  // do not include root element\n\t  elements = filter(elements, function(element) {\n\t    return element !== rootElement;\n\t  });\n\n\t  elements = map(elements, function(element) {\n\t    return {\n\t      primaryTokens: matchAndSplit(getLabel(element), pattern),\n\t      secondaryTokens: matchAndSplit(element.id, pattern),\n\t      element: element\n\t    };\n\t  });\n\n\t  // exclude non-matched elements\n\t  elements = filter(elements, function(element) {\n\t    return hasMatched(element.primaryTokens) || hasMatched(element.secondaryTokens);\n\t  });\n\n\t  elements = sortBy(elements, function(element) {\n\t    return getLabel(element.element) + element.element.id;\n\t  });\n\n\t  return elements;\n\t};\n\n\n\tfunction hasMatched(tokens) {\n\t  var matched = filter(tokens, function(t) {\n\t    return !!t.matched;\n\t  });\n\n\t  return matched.length > 0;\n\t}\n\n\n\tfunction matchAndSplit(text, pattern) {\n\t  var tokens = [],\n\t      originalText = text;\n\n\t  if (!text) {\n\t    return tokens;\n\t  }\n\n\t  text = text.toLowerCase();\n\t  pattern = pattern.toLowerCase();\n\n\t  var i = text.indexOf(pattern);\n\n\t  if (i > -1) {\n\t    if (i !== 0) {\n\t      tokens.push({\n\t        normal: originalText.substr(0, i)\n\t      });\n\t    }\n\n\t    tokens.push({\n\t      matched: originalText.substr(i, pattern.length)\n\t    });\n\n\t    if (pattern.length + i < text.length) {\n\t      tokens.push({\n\t        normal: originalText.substr(pattern.length + i, text.length)\n\t      });\n\t    }\n\t  } else {\n\t    tokens.push({\n\t      normal: originalText\n\t    });\n\t  }\n\n\t  return tokens;\n\t}\n\n\tvar SearchModule = {\n\t  __depends__: [\n\t    SearchPadModule\n\t  ],\n\t  __init__: [ 'bpmnSearch'],\n\t  bpmnSearch: [ 'type', BpmnSearchProvider ]\n\t};\n\n\tvar initialDiagram =\n\t  '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n\t  '<bpmn:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n\t                    'xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" ' +\n\t                    'xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" ' +\n\t                    'xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" ' +\n\t                    'targetNamespace=\"http://bpmn.io/schema/bpmn\" ' +\n\t                    'id=\"Definitions_1\">' +\n\t    '<bpmn:process id=\"Process_1\" isExecutable=\"false\">' +\n\t      '<bpmn:startEvent id=\"StartEvent_1\"/>' +\n\t    '</bpmn:process>' +\n\t    '<bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">' +\n\t      '<bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">' +\n\t        '<bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">' +\n\t          '<dc:Bounds height=\"36.0\" width=\"36.0\" x=\"173.0\" y=\"102.0\"/>' +\n\t        '</bpmndi:BPMNShape>' +\n\t      '</bpmndi:BPMNPlane>' +\n\t    '</bpmndi:BPMNDiagram>' +\n\t  '</bpmn:definitions>';\n\n\n\t/**\n\t * A modeler for BPMN 2.0 diagrams.\n\t *\n\t *\n\t * ## Extending the Modeler\n\t *\n\t * In order to extend the viewer pass extension modules to bootstrap via the\n\t * `additionalModules` option. An extension module is an object that exposes\n\t * named services.\n\t *\n\t * The following example depicts the integration of a simple\n\t * logging component that integrates with interaction events:\n\t *\n\t *\n\t * ```javascript\n\t *\n\t * // logging component\n\t * function InteractionLogger(eventBus) {\n\t *   eventBus.on('element.hover', function(event) {\n\t *     console.log()\n\t *   })\n\t * }\n\t *\n\t * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n\t *\n\t * // extension module\n\t * var extensionModule = {\n\t *   __init__: [ 'interactionLogger' ],\n\t *   interactionLogger: [ 'type', InteractionLogger ]\n\t * };\n\t *\n\t * // extend the viewer\n\t * var bpmnModeler = new Modeler({ additionalModules: [ extensionModule ] });\n\t * bpmnModeler.importXML(...);\n\t * ```\n\t *\n\t *\n\t * ## Customizing / Replacing Components\n\t *\n\t * You can replace individual diagram components by redefining them in override modules.\n\t * This works for all components, including those defined in the core.\n\t *\n\t * Pass in override modules via the `options.additionalModules` flag like this:\n\t *\n\t * ```javascript\n\t * function CustomContextPadProvider(contextPad) {\n\t *\n\t *   contextPad.registerProvider(this);\n\t *\n\t *   this.getContextPadEntries = function(element) {\n\t *     // no entries, effectively disable the context pad\n\t *     return {};\n\t *   };\n\t * }\n\t *\n\t * CustomContextPadProvider.$inject = [ 'contextPad' ];\n\t *\n\t * var overrideModule = {\n\t *   contextPadProvider: [ 'type', CustomContextPadProvider ]\n\t * };\n\t *\n\t * var bpmnModeler = new Modeler({ additionalModules: [ overrideModule ]});\n\t * ```\n\t *\n\t * @param {Object} [options] configuration options to pass to the viewer\n\t * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n\t * @param {string|number} [options.width] the width of the viewer\n\t * @param {string|number} [options.height] the height of the viewer\n\t * @param {Object} [options.moddleExtensions] extension packages to provide\n\t * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n\t * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n\t */\n\tfunction Modeler(options) {\n\t  BaseModeler.call(this, options);\n\t}\n\n\tinherits_browser(Modeler, BaseModeler);\n\n\n\tModeler.Viewer = Viewer;\n\tModeler.NavigatedViewer = NavigatedViewer;\n\n\t/**\n\t* The createDiagram result.\n\t*\n\t* @typedef {Object} CreateDiagramResult\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t* The createDiagram error.\n\t*\n\t* @typedef {Error} CreateDiagramError\n\t*\n\t* @property {Array<string>} warnings\n\t*/\n\n\t/**\n\t * Create a new diagram to start modeling.\n\t *\n\t * Returns {Promise<CreateDiagramResult, CreateDiagramError>}\n\t */\n\tModeler.prototype.createDiagram = wrapForCompatibility(function createDiagram() {\n\t  return this.importXML(initialDiagram);\n\t});\n\n\n\tModeler.prototype._interactionModules = [\n\n\t  // non-modeling components\n\t  KeyboardMoveModule,\n\t  MoveCanvasModule,\n\t  TouchModule$1,\n\t  ZoomScrollModule\n\t];\n\n\tModeler.prototype._modelingModules = [\n\n\t  // modeling components\n\t  AlignElementsModule,\n\t  AutoPlaceModule$1,\n\t  AutoScrollModule,\n\t  AutoResizeModule,\n\t  BendpointsModule,\n\t  ConnectModule,\n\t  ConnectionPreviewModule,\n\t  ContextPadModule$1,\n\t  CopyPasteModule$1,\n\t  CreateModule,\n\t  DistributeElementsModule$1,\n\t  EditorActionsModule$1,\n\t  GridSnappingModule$1,\n\t  InteractionEventsModule$1,\n\t  KeyboardModule$1,\n\t  KeyboardMoveSelectionModule,\n\t  LabelEditingModule,\n\t  ModelingModule,\n\t  MoveModule,\n\t  PaletteModule$1,\n\t  ReplacePreviewModule,\n\t  ResizeModule,\n\t  SnappingModule$1,\n\t  SearchModule\n\t];\n\n\n\t// modules the modeler is composed of\n\t//\n\t// - viewer modules\n\t// - interaction modules\n\t// - modeling modules\n\n\tModeler.prototype._modules = [].concat(\n\t  Viewer.prototype._modules,\n\t  Modeler.prototype._interactionModules,\n\t  Modeler.prototype._modelingModules\n\t);\n\n\treturn Modeler;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/bpmn-js/dist/bpmn-modeler.development.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_bpmn_js_dist_bpmn_modeler_development__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/bpmn-js/dist/bpmn-modeler.development */ \"./node_modules/bpmn-js/dist/bpmn-modeler.development.js\");\n/* harmony import */ var _node_modules_bpmn_js_dist_bpmn_modeler_development__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_bpmn_js_dist_bpmn_modeler_development__WEBPACK_IMPORTED_MODULE_0__);\n///////////////////////////////////////\n// INITIALIZATION\n///////////////////////////////////////\n\n/**\n * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page. \n * Code subject to change.\n **/\n\n \n\nif (window.console == null) {\n    window[\"console\"] = {\n        log: function () {}\n    }\n}; // some browsers do not set console\n\nvar Application = function () {\n    // event constants\n    this.prefix = \"--web-\";\n    this.NAVIGATION_CHANGE = \"viewChange\";\n    this.VIEW_NOT_FOUND = \"viewNotFound\";\n    this.VIEW_CHANGE = \"viewChange\";\n    this.VIEW_CHANGING = \"viewChanging\";\n    this.STATE_NOT_FOUND = \"stateNotFound\";\n    this.APPLICATION_COMPLETE = \"applicationComplete\";\n    this.APPLICATION_RESIZE = \"applicationResize\";\n    this.SIZE_STATE_NAME = \"data-is-view-scaled\";\n    this.STATE_NAME = this.prefix + \"state\";\n\n    this.lastTrigger = null;\n    this.lastView = null;\n    this.lastState = null;\n    this.lastOverlay = null;\n    this.currentView = null;\n    this.currentState = null;\n    this.currentOverlay = null;\n    this.currentQuery = {\n        index: 0,\n        rule: null,\n        mediaText: null,\n        id: null\n    };\n    this.inclusionQuery = \"(min-width: 0px)\";\n    this.exclusionQuery = \"none and (min-width: 99999px)\";\n    this.LastModifiedDateLabelName = \"LastModifiedDateLabel\";\n    this.viewScaleSliderId = \"ViewScaleSliderInput\";\n    this.pageRefreshedName = \"showPageRefreshedNotification\";\n    this.applicationStylesheet = null;\n    this.mediaQueryDictionary = {};\n    this.viewsDictionary = {};\n    this.addedViews = [];\n    this.views = {};\n    this.viewIds = [];\n    this.viewQueries = {};\n    this.overlays = {};\n    this.overlayIds = [];\n    this.numberOfViews = 0;\n    this.verticalPadding = 0;\n    this.horizontalPadding = 0;\n    this.stateName = null;\n    this.viewScale = 1;\n    this.viewLeft = 0;\n    this.viewTop = 0;\n    this.horizontalScrollbarsNeeded = false;\n    this.verticalScrollbarsNeeded = false;\n\n    // view settings\n    this.showUpdateNotification = false;\n    this.showNavigationControls = false;\n    this.scaleViewsToFit = false;\n    this.scaleToFitOnDoubleClick = false;\n    this.actualSizeOnDoubleClick = false;\n    this.scaleViewsOnResize = false;\n    this.navigationOnKeypress = false;\n    this.showViewName = false;\n    this.enableDeepLinking = true;\n    this.refreshPageForChanges = false;\n    this.showRefreshNotifications = true;\n\n    // view controls\n    this.scaleViewSlider = null;\n    this.lastModifiedLabel = null;\n    this.supportsPopState = false; // window.history.pushState!=null;\n    this.initialized = false;\n\n    // refresh properties\n    this.refreshDuration = 250;\n    this.lastModifiedDate = null;\n    this.refreshRequest = null;\n    this.refreshInterval = null;\n    this.refreshContent = null;\n    this.refreshContentSize = null;\n    this.refreshCheckContent = false;\n    this.refreshCheckContentSize = false;\n\n    var self = this;\n\n    self.initialize = function (event) {\n        var view = self.getVisibleView();\n        var views = self.getVisibleViews();\n        if (view == null) view = self.getInitialView();\n        self.collectViews();\n        self.collectOverlays();\n        self.collectMediaQueries();\n\n        for (let index = 0; index < views.length; index++) {\n            var view = views[index];\n            self.setViewOptions(view);\n            self.setViewVariables(view);\n            self.centerView(view);\n        }\n\n        // sometimes the body size is 0 so we call this now and again later\n        if (self.initialized) {\n            window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);\n            window.addEventListener(\"keyup\", self.keypressHandler);\n            window.addEventListener(\"keypress\", self.keypressHandler);\n            window.addEventListener(\"resize\", self.resizeHandler);\n            window.document.addEventListener(\"dblclick\", self.doubleClickHandler);\n\n            if (self.supportsPopState) {\n                window.addEventListener('popstate', self.popStateHandler);\n            } else {\n                window.addEventListener('hashchange', self.hashChangeHandler);\n            }\n\n            // we are ready to go\n            window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));\n        }\n\n        if (self.initialized == false) {\n            if (self.enableDeepLinking) {\n                self.syncronizeViewToURL();\n            }\n\n            if (self.refreshPageForChanges) {\n                self.setupRefreshForChanges();\n            }\n\n            self.initialized = true;\n        }\n\n        if (self.scaleViewsToFit) {\n            self.viewScale = self.scaleViewToFit(view);\n\n            if (self.viewScale < 0) {\n                setTimeout(self.scaleViewToFit, 500, view);\n            }\n        } else if (view) {\n            self.viewScale = self.getViewScaleValue(view);\n            self.centerView(view);\n            self.updateSliderValue(self.viewScale);\n        } else {\n            // no view found\n        }\n\n        if (self.showUpdateNotification) {\n            self.showNotification();\n        }\n\n        console.log(\">\" + document.getElementById('modeler').innerHTML.trim() + \"<\");\n        if(document.getElementById('modeler').innerHTML.trim().length == '<span>modeler</span>'.length)\n        {\n            document.getElementById('modeler').innerHTML = \"\";\n            console.log('asdf');\n            this.modeler = new _node_modules_bpmn_js_dist_bpmn_modeler_development__WEBPACK_IMPORTED_MODULE_0__({\n                width: '100%',\n                height: '100%',\n                propertiesPanel: {\n                    parent: '#properties'\n                },\n                keyboard: {\n                    bindTo: document\n                }\n            });\n            this.modeler.importXML('<?xml version=\"1.0\" encoding=\"UTF-8\"?><bpmn:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" id=\"Definitions_12isity\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"bpmn-js (https://demo.bpmn.io)\" exporterVersion=\"3.4.0\"><bpmn:process id=\"Process_00e2sh0\" isExecutable=\"false\" /><bpmndi:BPMNDiagram id=\"BPMNDiagram_1\"><bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_00e2sh0\" /></bpmndi:BPMNDiagram></bpmn:definitions>z');\n            this.modeling = this.modeler.get('modeling');\n            this.elementRegistry = this.modeler.get('elementRegistry');\n            // let editorService = this;\n            this.modeler.get('eventBus').on('shape.remove', 999999, function (event) {\n                if (event.element.type != \"label\") {\n                    // editorService.deadlockStatus = Status.DiagramChanged;\n                    // editorService.deadlocks = [];\n                    // editorService.activeDeadlock = null;\n                }\n            });\n            this.modeler.get('eventBus').on('connection.remove', 999999, function (event) {\n                if (event.element.type != \"label\") {\n                    // editorService.deadlockStatus = Status.DiagramChanged;\n                    // editorService.deadlocks = [];\n                    // editorService.activeDeadlock = null;\n                }\n            });\n            this.modeler.get('eventBus').on('element.click', 999999, function (event) {\n                //   editorService.clickedElement = event.element.id;\n            });\n            this.modeler.attachTo('#modeler');\n        }\n\n        //\"addEventListener\" in window ? null : window.addEventListener = window.attachEvent;\n        //\"addEventListener\" in document ? null : document.addEventListener = document.attachEvent;\n    }\n\n\n    ///////////////////////////////////////\n    // AUTO REFRESH \n    ///////////////////////////////////////\n\n    self.setupRefreshForChanges = function () {\n        self.refreshRequest = new XMLHttpRequest();\n\n        if (!self.refreshRequest) {\n            return false;\n        }\n\n        // get document start values immediately\n        self.requestRefreshUpdate();\n    }\n\n    /**\n     * Attempt to check the last modified date by the headers \n     * or the last modified property from the byte array (experimental)\n     **/\n    self.requestRefreshUpdate = function () {\n        var url = document.location.href;\n        var protocol = window.location.protocol;\n        var method;\n\n        try {\n\n            if (self.refreshCheckContentSize) {\n                self.refreshRequest.open('HEAD', url, true);\n            } else if (self.refreshCheckContent) {\n                self.refreshContent = document.documentElement.outerHTML;\n                self.refreshRequest.open('GET', url, true);\n                self.refreshRequest.responseType = \"text\";\n            } else {\n\n                // get page last modified date for the first call to compare to later\n                if (self.lastModifiedDate == null) {\n\n                    // File system does not send headers in FF so get blob if possible\n                    if (protocol == \"file:\") {\n                        self.refreshRequest.open(\"GET\", url, true);\n                        self.refreshRequest.responseType = \"blob\";\n                    } else {\n                        self.refreshRequest.open(\"HEAD\", url, true);\n                        self.refreshRequest.responseType = \"blob\";\n                    }\n\n                    self.refreshRequest.onload = self.refreshOnLoadOnceHandler;\n\n                    // In some browsers (Chrome & Safari) this error occurs at send: \n                    // \n                    // Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null' \n                    // has been blocked by CORS policy: \n                    // Cross origin requests are only supported for protocol schemes: \n                    // http, data, chrome, chrome-extension, https.\n                    // \n                    // Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.\n                    // \n                    // Solution is to run a local server, set local permissions or test in another browser\n                    self.refreshRequest.send(null);\n\n                    // In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date: \n                    // \n                    // DOM7011: The code on this page disabled back and forward caching.\n\n                    // In Brave (Chrome) error when on the server\n                    // index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES\n                    // self.refreshRequest.send(null);\n\n                } else {\n                    self.refreshRequest = new XMLHttpRequest();\n                    self.refreshRequest.onreadystatechange = self.refreshHandler;\n                    self.refreshRequest.ontimeout = function () {\n                        self.log(\"Couldn't find page to check for updates\");\n                    }\n\n                    var method;\n                    if (protocol == \"file:\") {\n                        method = \"GET\";\n                    } else {\n                        method = \"HEAD\";\n                    }\n\n                    //refreshRequest.open('HEAD', url, true);\n                    self.refreshRequest.open(method, url, true);\n                    self.refreshRequest.responseType = \"blob\";\n                    self.refreshRequest.send(null);\n                }\n            }\n        } catch (error) {\n            self.log(\"Refresh failed for the following reason:\")\n            self.log(error);\n        }\n    }\n\n    self.refreshHandler = function () {\n        var contentSize;\n\n        try {\n\n            if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {\n\n                if (self.refreshRequest.status === 2 ||\n                    self.refreshRequest.status === 200) {\n                    var pageChanged = false;\n\n                    self.updateLastModifiedLabel();\n\n                    if (self.refreshCheckContentSize) {\n                        var lastModifiedHeader = self.refreshRequest.getResponseHeader(\"Last-Modified\");\n                        contentSize = self.refreshRequest.getResponseHeader(\"Content-Length\");\n                        //lastModifiedDate = refreshRequest.getResponseHeader(\"Last-Modified\");\n                        var headers = self.refreshRequest.getAllResponseHeaders();\n                        var hasContentHeader = headers.indexOf(\"Content-Length\") != -1;\n\n                        if (hasContentHeader) {\n                            contentSize = self.refreshRequest.getResponseHeader(\"Content-Length\");\n\n                            // size has not been set yet\n                            if (self.refreshContentSize == null) {\n                                self.refreshContentSize = contentSize;\n                                // exit and let interval call this method again\n                                return;\n                            }\n\n                            if (contentSize != self.refreshContentSize) {\n                                pageChanged = true;\n                            }\n                        }\n                    } else if (self.refreshCheckContent) {\n\n                        if (self.refreshRequest.responseText != self.refreshContent) {\n                            pageChanged = true;\n                        }\n                    } else {\n                        lastModifiedHeader = self.getLastModified(self.refreshRequest);\n\n                        if (self.lastModifiedDate != lastModifiedHeader) {\n                            self.log(\"lastModifiedDate:\" + self.lastModifiedDate + \",lastModifiedHeader:\" + lastModifiedHeader);\n                            pageChanged = true;\n                        }\n\n                    }\n\n\n                    if (pageChanged) {\n                        clearInterval(self.refreshInterval);\n                        self.refreshUpdatedPage();\n                        return;\n                    }\n\n                } else {\n                    self.log('There was a problem with the request.');\n                }\n\n            }\n        } catch (error) {\n            //console.log('Caught Exception: ' + error);\n        }\n    }\n\n    self.refreshOnLoadOnceHandler = function (event) {\n\n        // get the last modified date\n        if (self.refreshRequest.response) {\n            self.lastModifiedDate = self.getLastModified(self.refreshRequest);\n\n            if (self.lastModifiedDate != null) {\n\n                if (self.refreshInterval == null) {\n                    self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);\n                }\n            } else {\n                self.log(\"Could not get last modified date from the server\");\n            }\n        }\n    }\n\n    self.refreshUpdatedPage = function () {\n        if (self.showRefreshNotifications) {\n            var date = new Date().setTime((new Date().getTime() + 10000));\n            document.cookie = encodeURIComponent(self.pageRefreshedName) + \"=true\" + \"; max-age=6000;\" + \" path=/\";\n        }\n\n        document.location.reload(true);\n    }\n\n    self.showNotification = function (duration) {\n        var notificationID = self.pageRefreshedName + \"ID\";\n        var notification = document.getElementById(notificationID);\n        if (duration == null) duration = 4000;\n\n        if (notification != null) {\n            return;\n        }\n\n        notification = document.createElement(\"div\");\n        notification.id = notificationID;\n        notification.textContent = \"PAGE UPDATED\";\n        var styleRule = \"\"\n        styleRule = \"position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;\";\n        styleRule += \"top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;\";\n        styleRule += \"transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))\";\n        notification.setAttribute(\"style\", styleRule);\n\n        notification.className = \"PageRefreshedClass\";\n\n        document.body.appendChild(notification);\n\n        setTimeout(function () {\n            notification.style.opacity = \"0\";\n            notification.style.filter = \"drop-shadow( 0px 0px 0px rgba(0,0,0, .5))\";\n            setTimeout(function () {\n                notification.parentNode.removeChild(notification);\n            }, duration)\n        }, duration);\n\n        document.cookie = encodeURIComponent(self.pageRefreshedName) + \"=; max-age=1; path=/\";\n    }\n\n    /**\n     * Get the last modified date from the header \n     * or file object after request has been received\n     **/\n    self.getLastModified = function (request) {\n        var date;\n\n        // file protocol - FILE object with last modified property\n        if (request.response && request.response.lastModified) {\n            date = request.response.lastModified;\n        }\n\n        // http protocol - check headers\n        if (date == null) {\n            date = request.getResponseHeader(\"Last-Modified\");\n        }\n\n        return date;\n    }\n\n    self.updateLastModifiedLabel = function () {\n        var labelValue = \"\";\n\n        if (self.lastModifiedLabel == null) {\n            self.lastModifiedLabel = document.getElementById(\"LastModifiedLabel\");\n        }\n\n        if (self.lastModifiedLabel) {\n            var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + \"\");\n            var minutes = 0;\n            var hours = 0;\n\n            if (seconds < 60) {\n                seconds = Math.floor(seconds / 10) * 10;\n                labelValue = seconds + \" seconds\";\n            } else {\n                minutes = parseInt((seconds / 60) + \"\");\n\n                if (minutes > 60) {\n                    hours = parseInt((seconds / 60 / 60) + \"\");\n                    labelValue += hours == 1 ? \" hour\" : \" hours\";\n                } else {\n                    labelValue = minutes + \"\";\n                    labelValue += minutes == 1 ? \" minute\" : \" minutes\";\n                }\n            }\n\n            if (seconds < 10) {\n                labelValue = \"Updated now\";\n            } else {\n                labelValue = \"Updated \" + labelValue + \" ago\";\n            }\n\n            if (self.lastModifiedLabel.firstElementChild) {\n                self.lastModifiedLabel.firstElementChild.textContent = labelValue;\n\n            } else if (\"textContent\" in self.lastModifiedLabel) {\n                self.lastModifiedLabel.textContent = labelValue;\n            }\n        }\n    }\n\n    self.getShortString = function (string, length) {\n        if (length == null) length = 30;\n        string = string != null ? string.substr(0, length).replace(/\\n/g, \"\") : \"[String is null]\";\n        return string;\n    }\n\n    self.getShortNumber = function (value, places) {\n        if (places == null || places < 1) places = 4;\n        value = Math.round(value * Math.pow(10, places)) / Math.pow(10, places);\n        return value;\n    }\n\n    ///////////////////////////////////////\n    // NAVIGATION CONTROLS\n    ///////////////////////////////////////\n\n    self.updateViewLabel = function () {\n        var viewNavigationLabel = document.getElementById(\"ViewNavigationLabel\");\n        var view = self.getVisibleView();\n        var viewIndex = view ? self.getViewIndex(view) : -1;\n        var viewName = view ? self.getViewPreferenceValue(view, self.prefix + \"view-name\") : null;\n        var viewId = view ? view.id : null;\n\n        if (viewNavigationLabel && view) {\n            if (viewName && viewName.indexOf('\"') != -1) {\n                viewName = viewName.replace(/\"/g, \"\");\n            }\n\n            if (self.showViewName) {\n                viewNavigationLabel.textContent = viewName;\n                self.setTooltip(viewNavigationLabel, viewIndex + 1 + \" of \" + self.numberOfViews);\n            } else {\n                viewNavigationLabel.textContent = viewIndex + 1 + \" of \" + self.numberOfViews;\n                self.setTooltip(viewNavigationLabel, viewName);\n            }\n\n        }\n    }\n\n    self.updateURL = function (view) {\n        view = view == null ? self.getVisibleView() : view;\n        var viewId = view ? view.id : null\n        var viewFragment = view ? \"#\" + viewId : null;\n\n        if (viewId && self.viewIds.length > 1 && self.enableDeepLinking) {\n\n            if (self.supportsPopState == false) {\n                self.setFragment(viewId);\n            } else {\n                if (viewFragment != window.location.hash) {\n\n                    if (window.location.hash == null) {\n                        window.history.replaceState({\n                            name: viewId\n                        }, null, viewFragment);\n                    } else {\n                        window.history.pushState({\n                            name: viewId\n                        }, null, viewFragment);\n                    }\n                }\n            }\n        }\n    }\n\n    self.updateURLState = function (view, stateName) {\n        stateName = view && (stateName == \"\" || stateName == null) ? self.getStateNameByViewId(view.id) : stateName;\n\n        if (self.supportsPopState == false) {\n            self.setFragment(stateName);\n        } else {\n            if (stateName != window.location.hash) {\n\n                if (window.location.hash == null) {\n                    window.history.replaceState({\n                        name: view.viewId\n                    }, null, stateName);\n                } else {\n                    window.history.pushState({\n                        name: view.viewId\n                    }, null, stateName);\n                }\n            }\n        }\n    }\n\n    self.setFragment = function (value) {\n        window.location.hash = \"#\" + value;\n    }\n\n    self.setTooltip = function (element, value) {\n        // setting the tooltip in edge causes a page crash on hover\n        if (/Edge/.test(navigator.userAgent)) {\n            return;\n        }\n\n        if (\"title\" in element) {\n            element.title = value;\n        }\n    }\n\n    self.getStylesheetRules = function (styleSheet) {\n        try {\n            if (styleSheet) return styleSheet.cssRules || styleSheet.rules;\n\n            return document.styleSheets[0][\"cssRules\"] || document.styleSheets[0][\"rules\"];\n        } catch (error) {\n            // ERRORS:\n            // SecurityError: The operation is insecure.\n            // Errors happen when script loads before stylesheet or loading an external css locally\n\n            // InvalidAccessError: A parameter or an operation is not supported by the underlying object\n            // Place script after stylesheet\n\n            console.log(error);\n            if (error.toString().indexOf(\"The operation is insecure\") != -1) {\n                console.log(\"Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server\")\n            }\n            return [];\n        }\n    }\n\n    /**\n     * If single page application hide all of the views. \n     * @param {Number} selectedIndex if provided shows the view at index provided\n     **/\n    self.hideViews = function (selectedIndex, animation) {\n        var rules = self.getStylesheetRules();\n        var queryIndex = 0;\n        var numberOfRules = rules != null ? rules.length : 0;\n\n        // loop through rules and hide media queries except selected\n        for (var i = 0; i < numberOfRules; i++) {\n            var rule = rules[i];\n\n            if (rule.media != null) {\n\n                if (queryIndex == selectedIndex) {\n                    self.currentQuery.mediaText = rule.conditionText;\n                    self.currentQuery.index = selectedIndex;\n                    self.currentQuery.rule = rule;\n                    self.enableMediaQuery(rule);\n                } else {\n                    if (animation) {\n                        self.fadeOut(rule)\n                    } else {\n                        self.disableMediaQuery(rule);\n                    }\n                }\n\n                queryIndex++;\n            }\n        }\n\n        self.numberOfViews = queryIndex;\n        self.updateViewLabel();\n        self.updateURL();\n\n        self.dispatchViewChange();\n\n        var view = self.getVisibleView();\n        var viewIndex = view ? self.getViewIndex(view) : -1;\n\n        return viewIndex == selectedIndex ? view : null;\n    }\n\n    /**\n     * Hide view\n     * @param {Object} view element to hide\n     **/\n    self.hideView = function (view) {\n        var rule = view ? self.mediaQueryDictionary[view.id] : null;\n\n        if (rule) {\n            self.disableMediaQuery(rule);\n        }\n    }\n\n    /**\n     * Hide overlay\n     * @param {Object} overlay element to hide\n     **/\n    self.hideOverlay = function (overlay) {\n        var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;\n\n        if (rule) {\n            self.disableMediaQuery(rule);\n\n            //if (self.showByMediaQuery) {\n            overlay.style.display = \"none\";\n            //}\n        }\n    }\n\n    /**\n     * Show the view by media query. Does not hide current views\n     * Sets view options by default\n     * @param {Object} view element to show\n     * @param {Boolean} setViewOptions sets view options if null or true\n     */\n    self.showViewByMediaQuery = function (view, setViewOptions) {\n        var id = view ? view.id : null;\n        var query = id ? self.mediaQueryDictionary[id] : null;\n        var isOverlay = view ? self.isOverlay(view) : false;\n        setViewOptions = setViewOptions == null ? true : setViewOptions;\n\n        if (query) {\n            self.enableMediaQuery(query);\n\n            if (isOverlay && view && setViewOptions) {\n                self.setViewVariables(null, view);\n            } else {\n                if (view && setViewOptions) self.setViewOptions(view);\n                if (view && setViewOptions) self.setViewVariables(view);\n            }\n        }\n    }\n\n    /**\n     * Show the view. Does not hide current views\n     */\n    self.showView = function (view, setViewOptions) {\n        var id = view ? view.id : null;\n        var query = id ? self.mediaQueryDictionary[id] : null;\n        var display = null;\n        setViewOptions = setViewOptions == null ? true : setViewOptions;\n\n        if (query) {\n            self.enableMediaQuery(query);\n            if (view == null) view = self.getVisibleView();\n            if (view && setViewOptions) self.setViewOptions(view);\n        } else if (id) {\n            display = window.getComputedStyle(view).getPropertyValue(\"display\");\n            if (display == \"\" || display == \"none\") {\n                view.style.display = \"block\";\n            }\n        }\n\n        if (view) {\n            if (self.currentView != null) {\n                self.lastView = self.currentView;\n            }\n\n            self.currentView = view;\n        }\n    }\n\n    self.showViewById = function (id, setViewOptions) {\n        var view = id ? self.getViewById(id) : null;\n\n        if (view) {\n            self.showView(view);\n            return;\n        }\n\n        self.log(\"View not found '\" + id + \"'\");\n    }\n\n    self.getElementView = function (element) {\n        var view = element;\n        var viewFound = false;\n\n        while (viewFound == false || view == null) {\n            if (view && self.viewsDictionary[view.id]) {\n                return view;\n            }\n            view = view.parentNode;\n        }\n    }\n\n    /**\n     * Show overlay over view\n     * @param {Event | HTMLElement} event event or html element with styles applied\n     * @param {String} id id of view or view reference\n     * @param {Number} x x location\n     * @param {Number} y y location\n     */\n    self.showOverlay = function (event, id, x, y) {\n        var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;\n        var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;\n        var centerHorizontally = false;\n        var centerVertically = false;\n        var anchorLeft = false;\n        var anchorTop = false;\n        var anchorRight = false;\n        var anchorBottom = false;\n        var display = null;\n        var reparent = true;\n        var view = null;\n\n        if (overlay == null || overlay == false) {\n            self.log(\"Overlay not found, '\" + id + \"'\");\n            return;\n        }\n\n        // get enter animation - event target must have css variables declared\n        if (event) {\n            var button = event.currentTarget || event; // can be event or htmlelement\n            var buttonComputedStyles = getComputedStyle(button);\n            var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix + \"action-target\").trim();\n            var animation = buttonComputedStyles.getPropertyValue(self.prefix + \"animation\").trim();\n            var isAnimated = animation != \"\";\n            var targetType = buttonComputedStyles.getPropertyValue(self.prefix + \"action-type\").trim();\n            var actionTarget = self.application ? null : self.getElement(actionTargetValue);\n            var actionTargetStyles = actionTarget ? actionTarget.style : null;\n\n            if (actionTargetStyles) {\n                actionTargetStyles.setProperty(\"animation\", animation);\n            }\n\n            if (\"stopImmediatePropagation\" in event) {\n                event.stopImmediatePropagation();\n            }\n        }\n\n        if (self.application == false || targetType == \"page\") {\n            document.location.href = \"./\" + actionTargetValue;\n            return;\n        }\n\n        // remove any current overlays\n        if (self.currentOverlay) {\n\n            // act as switch if same button\n            if (self.currentOverlay == actionTarget || self.currentOverlay == null) {\n                if (self.lastTrigger == button) {\n                    self.removeOverlay(isAnimated);\n                    return;\n                }\n            } else {\n                self.removeOverlay(isAnimated);\n            }\n        }\n\n        if (reparent) {\n            view = self.getElementView(button);\n            if (view) {\n                view.appendChild(overlay);\n            }\n        }\n\n        if (query) {\n            //self.setElementAnimation(overlay, null);\n            //overlay.style.animation = animation;\n            self.enableMediaQuery(query);\n\n            var display = overlay && overlay.style.display;\n\n            if (overlay && display == \"\" || display == \"none\") {\n                overlay.style.display = \"block\";\n                //self.setViewOptions(overlay);\n            }\n\n            // add animation defined in event target style declaration\n            if (animation && self.supportAnimations) {\n                self.fadeIn(overlay, false, animation);\n            }\n        } else if (id) {\n\n            display = window.getComputedStyle(overlay).getPropertyValue(\"display\");\n\n            if (display == \"\" || display == \"none\") {\n                overlay.style.display = \"block\";\n            }\n\n            // add animation defined in event target style declaration\n            if (animation && self.supportAnimations) {\n                self.fadeIn(overlay, false, animation);\n            }\n        }\n\n        // do not set x or y position if centering\n        var horizontal = self.prefix + \"center-horizontally\";\n        var vertical = self.prefix + \"center-vertically\";\n        var style = overlay.style;\n        var transform = [];\n\n        centerHorizontally = self.getIsStyleDefined(id, horizontal) ? self.getViewPreferenceBoolean(overlay, horizontal) : false;\n        centerVertically = self.getIsStyleDefined(id, vertical) ? self.getViewPreferenceBoolean(overlay, vertical) : false;\n        anchorLeft = self.getIsStyleDefined(id, \"left\");\n        anchorRight = self.getIsStyleDefined(id, \"right\");\n        anchorTop = self.getIsStyleDefined(id, \"top\");\n        anchorBottom = self.getIsStyleDefined(id, \"bottom\");\n\n\n        if (self.viewsDictionary[overlay.id] && self.viewsDictionary[overlay.id].styleDeclaration) {\n            style = self.viewsDictionary[overlay.id].styleDeclaration.style;\n        }\n\n        if (centerHorizontally) {\n            style.left = \"50%\";\n            style.transformOrigin = \"0 0\";\n            transform.push(\"translateX(-50%)\");\n        } else if (anchorRight && anchorLeft) {\n            style.left = x + \"px\";\n        } else if (anchorRight) {\n            //style.right = x + \"px\";\n        } else {\n            style.left = x + \"px\";\n        }\n\n        if (centerVertically) {\n            style.top = \"50%\";\n            transform.push(\"translateY(-50%)\");\n            style.transformOrigin = \"0 0\";\n        } else if (anchorTop && anchorBottom) {\n            style.top = y + \"px\";\n        } else if (anchorBottom) {\n            //style.bottom = y + \"px\";\n        } else {\n            style.top = y + \"px\";\n        }\n\n        if (transform.length) {\n            style.transform = transform.join(\" \");\n        }\n\n        self.currentOverlay = overlay;\n        self.lastTrigger = button;\n    }\n\n    self.goBack = function () {\n        if (self.currentOverlay) {\n            self.removeOverlay();\n        } else if (self.lastView) {\n            self.goToView(self.lastView.id);\n        }\n    }\n\n    self.removeOverlay = function (animate) {\n        var overlay = self.currentOverlay;\n        animate = animate === false ? false : true;\n\n        if (overlay) {\n            var style = overlay.style;\n\n            if (style.animation && self.supportAnimations && animate) {\n                self.reverseAnimation(overlay, true);\n\n                var duration = self.getAnimationDuration(style.animation, true);\n\n                setTimeout(function () {\n                    self.setElementAnimation(overlay, null);\n                    self.hideOverlay(overlay);\n                    self.currentOverlay = null;\n                }, duration);\n            } else {\n                self.setElementAnimation(overlay, null);\n                self.hideOverlay(overlay);\n                self.currentOverlay = null;\n            }\n        }\n    }\n\n    /**\n     * Reverse the animation and hide after\n     * @param {Object} target element with animation\n     * @param {Boolean} hide hide after animation ends\n     */\n    self.reverseAnimation = function (target, hide) {\n        var lastAnimation = null;\n        var style = target.style;\n\n        style.animationPlayState = \"paused\";\n        lastAnimation = style.animation;\n        style.animation = null;\n        style.animationPlayState = \"paused\";\n\n        if (hide) {\n            //target.addEventListener(\"animationend\", self.animationEndHideHandler);\n\n            var duration = self.getAnimationDuration(lastAnimation, true);\n            var isOverlay = self.isOverlay(target);\n\n            setTimeout(function () {\n                self.setElementAnimation(target, null);\n\n                if (isOverlay) {\n                    self.hideOverlay(target);\n                } else {\n                    self.hideView(target);\n                }\n            }, duration);\n        }\n\n        setTimeout(function () {\n            style.animation = lastAnimation;\n            style.animationPlayState = \"paused\";\n            style.animationDirection = \"reverse\";\n            style.animationPlayState = \"running\";\n        }, 30);\n    }\n\n    self.animationEndHandler = function (event) {\n        var target = event.currentTarget;\n        self.dispatchEvent(new Event(event.type));\n    }\n\n    self.isOverlay = function (view) {\n        var result = view ? self.getViewPreferenceBoolean(view, self.prefix + \"is-overlay\") : false;\n\n        return result;\n    }\n\n    self.animationEndHideHandler = function (event) {\n        var target = event.currentTarget;\n        self.setViewVariables(null, target);\n        self.hideView(target);\n        target.removeEventListener(\"animationend\", self.animationEndHideHandler);\n    }\n\n    self.animationEndShowHandler = function (event) {\n        var target = event.currentTarget;\n        target.removeEventListener(\"animationend\", self.animationEndShowHandler);\n    }\n\n    self.setViewOptions = function (view) {\n\n        if (view) {\n            self.minimumScale = self.getViewPreferenceValue(view, self.prefix + \"minimum-scale\");\n            self.maximumScale = self.getViewPreferenceValue(view, self.prefix + \"maximum-scale\");\n            self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + \"scale-to-fit\");\n            self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + \"scale-to-fit-type\");\n            self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + \"scale-on-double-click\");\n            self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + \"actual-size-on-double-click\");\n            self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + \"scale-on-resize\");\n            self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + \"enable-scale-up\");\n            self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + \"center-horizontally\");\n            self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + \"center-vertically\");\n            self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + \"navigate-on-keypress\");\n            self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + \"show-view-name\");\n            self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + \"refresh-for-changes\");\n            self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + \"refresh-interval\");\n            self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + \"show-navigation-controls\");\n            self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + \"show-scale-controls\");\n            self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + \"enable-deep-linking\");\n            self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + \"application\");\n            self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + \"show-by-media-query\");\n            self.showUpdateNotification = document.cookie != \"\" ? document.cookie.indexOf(self.pageRefreshedName) != -1 : false;\n            self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + \"image-comparison-duration\");\n            self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + \"enable-animations\", true);\n\n            if (self.scaleViewsToFit) {\n                var newScaleValue = self.scaleViewToFit(view);\n\n                if (newScaleValue < 0) {\n                    setTimeout(self.scaleViewToFit, 500, view);\n                }\n            } else {\n                self.viewScale = self.getViewScaleValue(view);\n                self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)\n                self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);\n                self.updateSliderValue(self.viewScale);\n            }\n\n            if (self.imageComparisonDuration != null) {\n                // todo\n            }\n\n            if (self.refreshPageForChangesInterval != null) {\n                self.refreshDuration = Number(self.refreshPageForChangesInterval);\n            }\n        }\n    }\n\n    self.previousView = function (event) {\n        var rules = self.getStylesheetRules();\n        var view = self.getVisibleView()\n        var index = view ? self.getViewIndex(view) : -1;\n        var prevQueryIndex = index != -1 ? index - 1 : self.currentQuery.index - 1;\n        var queryIndex = 0;\n        var numberOfRules = rules != null ? rules.length : 0;\n\n        if (event) {\n            event.stopImmediatePropagation();\n        }\n\n        if (prevQueryIndex < 0) {\n            return;\n        }\n\n        // loop through rules and hide media queries except selected\n        for (var i = 0; i < numberOfRules; i++) {\n            var rule = rules[i];\n\n            if (rule.media != null) {\n\n                if (queryIndex == prevQueryIndex) {\n                    self.currentQuery.mediaText = rule.conditionText;\n                    self.currentQuery.index = prevQueryIndex;\n                    self.currentQuery.rule = rule;\n                    self.enableMediaQuery(rule);\n                    self.updateViewLabel();\n                    self.updateURL();\n                    self.dispatchViewChange();\n                } else {\n                    self.disableMediaQuery(rule);\n                }\n\n                queryIndex++;\n            }\n        }\n    }\n\n    self.nextView = function (event) {\n        var rules = self.getStylesheetRules();\n        var view = self.getVisibleView();\n        var index = view ? self.getViewIndex(view) : -1;\n        var nextQueryIndex = index != -1 ? index + 1 : self.currentQuery.index + 1;\n        var queryIndex = 0;\n        var numberOfRules = rules != null ? rules.length : 0;\n        var numberOfMediaQueries = self.getNumberOfMediaRules();\n\n        if (event) {\n            event.stopImmediatePropagation();\n        }\n\n        if (nextQueryIndex >= numberOfMediaQueries) {\n            return;\n        }\n\n        // loop through rules and hide media queries except selected\n        for (var i = 0; i < numberOfRules; i++) {\n            var rule = rules[i];\n\n            if (rule.media != null) {\n\n                if (queryIndex == nextQueryIndex) {\n                    self.currentQuery.mediaText = rule.conditionText;\n                    self.currentQuery.index = nextQueryIndex;\n                    self.currentQuery.rule = rule;\n                    self.enableMediaQuery(rule);\n                    self.updateViewLabel();\n                    self.updateURL();\n                    self.dispatchViewChange();\n                } else {\n                    self.disableMediaQuery(rule);\n                }\n\n                queryIndex++;\n            }\n        }\n    }\n\n    /**\n     * Enables a view via media query\n     */\n    self.enableMediaQuery = function (rule) {\n\n        try {\n            rule.media.mediaText = self.inclusionQuery;\n        } catch (error) {\n            //self.log(error);\n            rule.conditionText = self.inclusionQuery;\n        }\n    }\n\n    self.disableMediaQuery = function (rule) {\n\n        try {\n            rule.media.mediaText = self.exclusionQuery;\n        } catch (error) {\n            rule.conditionText = self.exclusionQuery;\n        }\n    }\n\n    self.dispatchViewChange = function () {\n        try {\n            var event = new Event(self.NAVIGATION_CHANGE);\n            window.dispatchEvent(event);\n        } catch (error) {\n            // In IE 11: Object doesn't support this action\n        }\n    }\n\n    self.getNumberOfMediaRules = function () {\n        var rules = self.getStylesheetRules();\n        var numberOfRules = rules ? rules.length : 0;\n        var numberOfQueries = 0;\n\n        for (var i = 0; i < numberOfRules; i++) {\n            if (rules[i].media != null) {\n                numberOfQueries++;\n            }\n        }\n\n        return numberOfQueries;\n    }\n\n    /////////////////////////////////////////\n    // VIEW SCALE \n    /////////////////////////////////////////\n\n    self.sliderChangeHandler = function (event) {\n        var value = self.getShortNumber(event.currentTarget.value / 100);\n        var view = self.getVisibleView();\n        self.setViewScaleValue(view, false, value, true);\n    }\n\n    self.updateSliderValue = function (scale) {\n        var slider = document.getElementById(self.viewScaleSliderId);\n        var tooltip = parseInt(scale * 100 + \"\") + \"%\";\n        var inputType;\n        var inputValue;\n\n        if (slider) {\n            inputValue = self.getShortNumber(scale * 100);\n            if (inputValue != slider[\"value\"]) {\n                slider[\"value\"] = inputValue;\n            }\n            inputType = slider.getAttributeNS(null, \"type\");\n\n            if (inputType != \"range\") {\n                // input range is not supported\n                slider.style.display = \"none\";\n            }\n\n            self.setTooltip(slider, tooltip);\n        }\n    }\n\n    self.viewChangeHandler = function (event) {\n        var view = self.getVisibleView();\n        var matrix = view ? getComputedStyle(view).transform : null;\n\n        if (matrix) {\n            self.viewScale = self.getViewScaleValue(view);\n\n            var scaleNeededToFit = self.getViewFitToViewportScale(view);\n            var isViewLargerThanViewport = scaleNeededToFit < 1;\n\n            // scale large view to fit if scale to fit is enabled\n            if (self.scaleViewsToFit) {\n                self.scaleViewToFit(view);\n            } else {\n                self.updateSliderValue(self.viewScale);\n            }\n        }\n    }\n\n    self.getViewScaleValue = function (view) {\n        var matrix = getComputedStyle(view).transform;\n\n        if (matrix) {\n            var matrixArray = matrix.replace(\"matrix(\", \"\").split(\",\");\n            var scaleX = parseFloat(matrixArray[0]);\n            var scaleY = parseFloat(matrixArray[3]);\n            var scale = Math.min(scaleX, scaleY);\n        }\n\n        return scale;\n    }\n\n    /**\n     * Scales view to scale. \n     * @param {Object} view view to scale. views are in views array\n     * @param {Boolean} scaleToFit set to true to scale to fit. set false to use desired scale value\n     * @param {Number} desiredScale scale to define. not used if scale to fit is false\n     * @param {Boolean} isSliderChange indicates if slider is callee\n     */\n    self.setViewScaleValue = function (view, scaleToFit, desiredScale, isSliderChange) {\n        var enableScaleUp = self.enableScaleUp;\n        var scaleToFitType = self.scaleToFitType;\n        var minimumScale = self.minimumScale;\n        var maximumScale = self.maximumScale;\n        var hasMinimumScale = !isNaN(minimumScale) && minimumScale != \"\";\n        var hasMaximumScale = !isNaN(maximumScale) && maximumScale != \"\";\n        var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);\n        var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);\n        var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);\n        var scaleToFitFull = self.getViewFitToViewportScale(view, true);\n        var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);\n        var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);\n        var scaleToWidth = scaleToFitType == \"width\";\n        var scaleToHeight = scaleToFitType == \"height\";\n        var shrunkToFit = false;\n        var topPosition = null;\n        var leftPosition = null;\n        var translateY = null;\n        var translateX = null;\n        var transformValue = \"\";\n        var canCenterVertically = true;\n        var canCenterHorizontally = true;\n        var style = view.style;\n\n        if (view && self.viewsDictionary[view.id] && self.viewsDictionary[view.id].styleDeclaration) {\n            style = self.viewsDictionary[view.id].styleDeclaration.style;\n        }\n\n        if (scaleToFit && isSliderChange != true) {\n            if (scaleToFitType == \"fit\" || scaleToFitType == \"\") {\n                desiredScale = scaleNeededToFit;\n            } else if (scaleToFitType == \"width\") {\n                desiredScale = scaleNeededToFitWidth;\n            } else if (scaleToFitType == \"height\") {\n                desiredScale = scaleNeededToFitHeight;\n            }\n        } else {\n            if (isNaN(desiredScale)) {\n                desiredScale = 1;\n            }\n        }\n\n        self.updateSliderValue(desiredScale);\n\n        // scale to fit width\n        if (scaleToWidth && scaleToHeight == false) {\n            canCenterVertically = scaleNeededToFitHeight >= scaleNeededToFitWidth;\n            canCenterHorizontally = scaleNeededToFitWidth >= 1 && enableScaleUp == false;\n\n            if (isSliderChange) {\n                canCenterHorizontally = desiredScale < scaleToFitFullWidth;\n            } else if (scaleToFit) {\n                desiredScale = scaleNeededToFitWidth;\n            }\n\n            if (hasMinimumScale) {\n                desiredScale = Math.max(desiredScale, Number(minimumScale));\n            }\n\n            if (hasMaximumScale) {\n                desiredScale = Math.min(desiredScale, Number(maximumScale));\n            }\n\n            desiredScale = self.getShortNumber(desiredScale);\n\n            canCenterHorizontally = self.canCenterHorizontally(view, \"width\", enableScaleUp, desiredScale, minimumScale, maximumScale);\n            canCenterVertically = self.canCenterVertically(view, \"width\", enableScaleUp, desiredScale, minimumScale, maximumScale);\n\n            if (desiredScale > 1 && (enableScaleUp || isSliderChange)) {\n                transformValue = \"scale(\" + desiredScale + \")\";\n            } else if (desiredScale >= 1 && enableScaleUp == false) {\n                transformValue = \"scale(\" + 1 + \")\";\n            } else {\n                transformValue = \"scale(\" + desiredScale + \")\";\n            }\n\n            if (self.centerVertically) {\n                if (canCenterVertically) {\n                    translateY = \"-50%\";\n                    topPosition = \"50%\";\n                } else {\n                    translateY = \"0\";\n                    topPosition = \"0\";\n                }\n\n                if (style.top != topPosition) {\n                    style.top = topPosition + \"\";\n                }\n\n                if (canCenterVertically) {\n                    transformValue += \" translateY(\" + translateY + \")\";\n                }\n            }\n\n            if (self.centerHorizontally) {\n                if (canCenterHorizontally) {\n                    translateX = \"-50%\";\n                    leftPosition = \"50%\";\n                } else {\n                    translateX = \"0\";\n                    leftPosition = \"0\";\n                }\n\n                if (style.left != leftPosition) {\n                    style.left = leftPosition + \"\";\n                }\n\n                if (canCenterHorizontally) {\n                    transformValue += \" translateX(\" + translateX + \")\";\n                }\n            }\n\n            style.transformOrigin = \"0 0\";\n            style.transform = transformValue;\n\n            self.viewScale = desiredScale;\n            self.viewToFitWidthScale = scaleNeededToFitWidth;\n            self.viewToFitHeightScale = scaleNeededToFitHeight;\n            self.viewLeft = leftPosition;\n            self.viewTop = topPosition;\n\n            return desiredScale;\n        }\n\n        // scale to fit height\n        if (scaleToHeight && scaleToWidth == false) {\n            //canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;\n            //canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;\n            canCenterVertically = scaleNeededToFitHeight >= scaleNeededToFitWidth;\n            canCenterHorizontally = scaleNeededToFitWidth >= 1 && enableScaleUp == false;\n\n            if (isSliderChange) {\n                canCenterHorizontally = desiredScale < scaleToFitFullHeight;\n            } else if (scaleToFit) {\n                desiredScale = scaleNeededToFitHeight;\n            }\n\n            if (hasMinimumScale) {\n                desiredScale = Math.max(desiredScale, Number(minimumScale));\n            }\n\n            if (hasMaximumScale) {\n                desiredScale = Math.min(desiredScale, Number(maximumScale));\n                //canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;\n            }\n\n            desiredScale = self.getShortNumber(desiredScale);\n\n            canCenterHorizontally = self.canCenterHorizontally(view, \"height\", enableScaleUp, desiredScale, minimumScale, maximumScale);\n            canCenterVertically = self.canCenterVertically(view, \"height\", enableScaleUp, desiredScale, minimumScale, maximumScale);\n\n            if (desiredScale > 1 && (enableScaleUp || isSliderChange)) {\n                transformValue = \"scale(\" + desiredScale + \")\";\n            } else if (desiredScale >= 1 && enableScaleUp == false) {\n                transformValue = \"scale(\" + 1 + \")\";\n            } else {\n                transformValue = \"scale(\" + desiredScale + \")\";\n            }\n\n            if (self.centerHorizontally) {\n                if (canCenterHorizontally) {\n                    translateX = \"-50%\";\n                    leftPosition = \"50%\";\n                } else {\n                    translateX = \"0\";\n                    leftPosition = \"0\";\n                }\n\n                if (style.left != leftPosition) {\n                    style.left = leftPosition + \"\";\n                }\n\n                if (canCenterHorizontally) {\n                    transformValue += \" translateX(\" + translateX + \")\";\n                }\n            }\n\n            if (self.centerVertically) {\n                if (canCenterVertically) {\n                    translateY = \"-50%\";\n                    topPosition = \"50%\";\n                } else {\n                    translateY = \"0\";\n                    topPosition = \"0\";\n                }\n\n                if (style.top != topPosition) {\n                    style.top = topPosition + \"\";\n                }\n\n                if (canCenterVertically) {\n                    transformValue += \" translateY(\" + translateY + \")\";\n                }\n            }\n\n            style.transformOrigin = \"0 0\";\n            style.transform = transformValue;\n\n            self.viewScale = desiredScale;\n            self.viewToFitWidthScale = scaleNeededToFitWidth;\n            self.viewToFitHeightScale = scaleNeededToFitHeight;\n            self.viewLeft = leftPosition;\n            self.viewTop = topPosition;\n\n            return scaleNeededToFitHeight;\n        }\n\n        if (scaleToFitType == \"fit\") {\n            //canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;\n            //canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;\n            canCenterVertically = scaleNeededToFitHeight >= scaleNeededToFit;\n            canCenterHorizontally = scaleNeededToFitWidth >= scaleNeededToFit;\n\n            if (hasMinimumScale) {\n                desiredScale = Math.max(desiredScale, Number(minimumScale));\n            }\n\n            desiredScale = self.getShortNumber(desiredScale);\n\n            if (isSliderChange || scaleToFit == false) {\n                canCenterVertically = scaleToFitFullHeight >= desiredScale;\n                canCenterHorizontally = desiredScale < scaleToFitFullWidth;\n            } else if (scaleToFit) {\n                desiredScale = scaleNeededToFit;\n            }\n\n            transformValue = \"scale(\" + desiredScale + \")\";\n\n            //canCenterHorizontally = self.canCenterHorizontally(view, \"fit\", false, desiredScale);\n            //canCenterVertically = self.canCenterVertically(view, \"fit\", false, desiredScale);\n\n            if (self.centerVertically) {\n                if (canCenterVertically) {\n                    translateY = \"-50%\";\n                    topPosition = \"50%\";\n                } else {\n                    translateY = \"0\";\n                    topPosition = \"0\";\n                }\n\n                if (style.top != topPosition) {\n                    style.top = topPosition + \"\";\n                }\n\n                if (canCenterVertically) {\n                    transformValue += \" translateY(\" + translateY + \")\";\n                }\n            }\n\n            if (self.centerHorizontally) {\n                if (canCenterHorizontally) {\n                    translateX = \"-50%\";\n                    leftPosition = \"50%\";\n                } else {\n                    translateX = \"0\";\n                    leftPosition = \"0\";\n                }\n\n                if (style.left != leftPosition) {\n                    style.left = leftPosition + \"\";\n                }\n\n                if (canCenterHorizontally) {\n                    transformValue += \" translateX(\" + translateX + \")\";\n                }\n            }\n\n            style.transformOrigin = \"0 0\";\n            style.transform = transformValue;\n\n            self.viewScale = desiredScale;\n            self.viewToFitWidthScale = scaleNeededToFitWidth;\n            self.viewToFitHeightScale = scaleNeededToFitHeight;\n            self.viewLeft = leftPosition;\n            self.viewTop = topPosition;\n\n            self.updateSliderValue(desiredScale);\n\n            return desiredScale;\n        }\n\n        if (scaleToFitType == \"default\" || scaleToFitType == \"\") {\n            desiredScale = 1;\n\n            if (hasMinimumScale) {\n                desiredScale = Math.max(desiredScale, Number(minimumScale));\n            }\n            if (hasMaximumScale) {\n                desiredScale = Math.min(desiredScale, Number(maximumScale));\n            }\n\n            canCenterHorizontally = self.canCenterHorizontally(view, \"none\", false, desiredScale, minimumScale, maximumScale);\n            canCenterVertically = self.canCenterVertically(view, \"none\", false, desiredScale, minimumScale, maximumScale);\n\n            if (self.centerVertically) {\n                if (canCenterVertically) {\n                    translateY = \"-50%\";\n                    topPosition = \"50%\";\n                } else {\n                    translateY = \"0\";\n                    topPosition = \"0\";\n                }\n\n                if (style.top != topPosition) {\n                    style.top = topPosition + \"\";\n                }\n\n                if (canCenterVertically) {\n                    transformValue += \" translateY(\" + translateY + \")\";\n                }\n            }\n\n            if (self.centerHorizontally) {\n                if (canCenterHorizontally) {\n                    translateX = \"-50%\";\n                    leftPosition = \"50%\";\n                } else {\n                    translateX = \"0\";\n                    leftPosition = \"0\";\n                }\n\n                if (style.left != leftPosition) {\n                    style.left = leftPosition + \"\";\n                }\n\n                if (canCenterHorizontally) {\n                    transformValue += \" translateX(\" + translateX + \")\";\n                } else {\n                    transformValue += \" translateX(\" + 0 + \")\";\n                }\n            }\n\n            style.transformOrigin = \"0 0\";\n            style.transform = transformValue;\n\n\n            self.viewScale = desiredScale;\n            self.viewToFitWidthScale = scaleNeededToFitWidth;\n            self.viewToFitHeightScale = scaleNeededToFitHeight;\n            self.viewLeft = leftPosition;\n            self.viewTop = topPosition;\n\n            self.updateSliderValue(desiredScale);\n\n            return desiredScale;\n        }\n    }\n\n    /**\n     * Returns true if view can be centered horizontally\n     * @param {HTMLElement} view view\n     * @param {String} type type of scaling - width, height, all, none\n     * @param {Boolean} scaleUp if scale up enabled \n     * @param {Number} scale target scale value \n     */\n    self.canCenterHorizontally = function (view, type, scaleUp, scale, minimumScale, maximumScale) {\n        var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);\n        var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);\n        var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);\n        var canCenter = false;\n        var minScale;\n\n        type = type == null ? \"none\" : type;\n        scale = scale == null ? scale : scaleNeededToFitWidth;\n        scaleUp = scaleUp == null ? false : scaleUp;\n\n        if (type == \"width\") {\n\n            if (scaleUp && maximumScale == null) {\n                canCenter = false;\n            } else if (scaleNeededToFitWidth >= 1) {\n                canCenter = true;\n            }\n        } else if (type == \"height\") {\n            minScale = Math.min(1, scaleNeededToFitHeight);\n            if (minimumScale != \"\" && maximumScale != \"\") {\n                minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));\n            } else {\n                if (minimumScale != \"\") {\n                    minScale = Math.max(minimumScale, scaleNeededToFitHeight);\n                }\n                if (maximumScale != \"\") {\n                    minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));\n                }\n            }\n\n            if (scaleUp && maximumScale == \"\") {\n                canCenter = false;\n            } else if (scaleNeededToFitWidth >= minScale) {\n                canCenter = true;\n            }\n        } else if (type == \"fit\") {\n            canCenter = scaleNeededToFitWidth >= scaleNeededToFit;\n        } else {\n            if (scaleUp) {\n                canCenter = false;\n            } else if (scaleNeededToFitWidth >= 1) {\n                canCenter = true;\n            }\n        }\n\n        self.horizontalScrollbarsNeeded = canCenter;\n\n        return canCenter;\n    }\n\n    /**\n     * Returns true if view can be centered horizontally\n     * @param {HTMLElement} view view to scale\n     * @param {String} type type of scaling\n     * @param {Boolean} scaleUp if scale up enabled \n     * @param {Number} scale target scale value \n     */\n    self.canCenterVertically = function (view, type, scaleUp, scale, minimumScale, maximumScale) {\n        var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);\n        var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);\n        var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);\n        var canCenter = false;\n        var minScale;\n\n        type = type == null ? \"none\" : type;\n        scale = scale == null ? 1 : scale;\n        scaleUp = scaleUp == null ? false : scaleUp;\n\n        if (type == \"width\") {\n            canCenter = scaleNeededToFitHeight >= scaleNeededToFitWidth;\n        } else if (type == \"height\") {\n            minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));\n            canCenter = scaleNeededToFitHeight >= minScale;\n        } else if (type == \"fit\") {\n            canCenter = scaleNeededToFitHeight >= scaleNeededToFit;\n        } else {\n            if (scaleUp) {\n                canCenter = false;\n            } else if (scaleNeededToFitHeight >= 1) {\n                canCenter = true;\n            }\n        }\n\n        self.verticalScrollbarsNeeded = canCenter;\n\n        return canCenter;\n    }\n\n    self.getViewFitToViewportScale = function (view, scaleUp) {\n        var enableScaleUp = scaleUp;\n        var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        var elementWidth = parseFloat(getComputedStyle(view, \"style\").width);\n        var elementHeight = parseFloat(getComputedStyle(view, \"style\").height);\n        var newScale = 1;\n\n        // if element is not added to the document computed values are NaN\n        if (isNaN(elementWidth) || isNaN(elementHeight)) {\n            return newScale;\n        }\n\n        availableWidth -= self.horizontalPadding;\n        availableHeight -= self.verticalPadding;\n\n        if (enableScaleUp) {\n            newScale = Math.min(availableHeight / elementHeight, availableWidth / elementWidth);\n        } else if (elementWidth > availableWidth || elementHeight > availableHeight) {\n            newScale = Math.min(availableHeight / elementHeight, availableWidth / elementWidth);\n        }\n\n        return newScale;\n    }\n\n    self.getViewFitToViewportWidthScale = function (view, scaleUp) {\n        // need to get browser viewport width when element\n        var isParentWindow = view && view.parentNode && view.parentNode === document.body;\n        var enableScaleUp = scaleUp;\n        var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var elementWidth = parseFloat(getComputedStyle(view, \"style\").width);\n        var newScale = 1;\n\n        // if element is not added to the document computed values are NaN\n        if (isNaN(elementWidth)) {\n            return newScale;\n        }\n\n        availableWidth -= self.horizontalPadding;\n\n        if (enableScaleUp) {\n            newScale = availableWidth / elementWidth;\n        } else if (elementWidth > availableWidth) {\n            newScale = availableWidth / elementWidth;\n        }\n\n        return newScale;\n    }\n\n    self.getViewFitToViewportHeightScale = function (view, scaleUp) {\n        var enableScaleUp = scaleUp;\n        var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        var elementHeight = parseFloat(getComputedStyle(view, \"style\").height);\n        var newScale = 1;\n\n        // if element is not added to the document computed values are NaN\n        if (isNaN(elementHeight)) {\n            return newScale;\n        }\n\n        availableHeight -= self.verticalPadding;\n\n        if (enableScaleUp) {\n            newScale = availableHeight / elementHeight;\n        } else if (elementHeight > availableHeight) {\n            newScale = availableHeight / elementHeight;\n        }\n\n        return newScale;\n    }\n\n    self.keypressHandler = function (event) {\n        var rightKey = 39;\n        var leftKey = 37;\n\n        // listen for both events \n        if (event.type == \"keypress\") {\n            window.removeEventListener(\"keyup\", self.keypressHandler);\n        } else {\n            window.removeEventListener(\"keypress\", self.keypressHandler);\n        }\n\n        if (self.showNavigationControls) {\n            if (self.navigationOnKeypress) {\n                if (event.keyCode == rightKey) {\n                    self.nextView();\n                }\n                if (event.keyCode == leftKey) {\n                    self.previousView();\n                }\n            }\n        } else if (self.navigationOnKeypress) {\n            if (event.keyCode == rightKey) {\n                self.nextView();\n            }\n            if (event.keyCode == leftKey) {\n                self.previousView();\n            }\n        }\n    }\n\n    ///////////////////////////////////\n    // GENERAL FUNCTIONS\n    ///////////////////////////////////\n\n    self.getViewById = function (id) {\n        id = id ? id.replace(\"#\", \"\") : \"\";\n        var view = self.viewIds.indexOf(id) != -1 && self.getElement(id);\n        return view;\n    }\n\n    self.getViewIds = function () {\n        var viewIds = self.getViewPreferenceValue(document.body, self.prefix + \"view-ids\");\n        var viewId = null;\n\n        viewIds = viewIds != null && viewIds != \"\" ? viewIds.split(\",\") : [];\n\n        if (viewIds.length == 0) {\n            viewId = self.getViewPreferenceValue(document.body, self.prefix + \"view-id\");\n            viewIds = viewId ? [viewId] : [];\n        }\n\n        return viewIds;\n    }\n\n    self.getInitialViewId = function () {\n        var viewId = self.getViewPreferenceValue(document.body, self.prefix + \"view-id\");\n        return viewId;\n    }\n\n    self.getApplicationStylesheet = function () {\n        var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + \"stylesheet-id\");\n        self.applicationStylesheet = document.getElementById(\"applicationStylesheet\");\n        return self.applicationStylesheet.sheet;\n    }\n\n    self.getVisibleView = function () {\n        var viewIds = self.getViewIds();\n\n        for (var i = 0; i < viewIds.length; i++) {\n            var viewId = viewIds[i].replace(/[\\#?\\.?](.*)/, \"$\" + \"1\");\n            var view = self.getElement(viewId);\n            var postName = \"_Class\";\n\n            if (view == null && viewId && viewId.lastIndexOf(postName) != -1) {\n                view = self.getElement(viewId.replace(postName, \"\"));\n            }\n\n            if (view) {\n                var display = getComputedStyle(view).display;\n\n                if (display == \"block\" || display == \"flex\") {\n                    return view;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    self.getVisibleViews = function () {\n        var viewIds = self.getViewIds();\n        var views = [];\n\n        for (var i = 0; i < viewIds.length; i++) {\n            var viewId = viewIds[i].replace(/[\\#?\\.?](.*)/, \"$\" + \"1\");\n            var view = self.getElement(viewId);\n            var postName = \"_Class\";\n\n            if (view == null && viewId && viewId.lastIndexOf(postName) != -1) {\n                view = self.getElement(viewId.replace(postName, \"\"));\n            }\n\n            if (view) {\n                var display = getComputedStyle(view).display;\n\n                if (display == \"none\") {\n                    continue;\n                }\n\n                if (display == \"block\" || display == \"flex\") {\n                    views.push(view);\n                }\n            }\n        }\n\n        return views;\n    }\n\n    self.getStateNameByViewId = function (id) {\n        var state = self.viewsDictionary[id];\n        return state && state.stateName;\n    }\n\n    self.getMatchingViews = function (ids) {\n        var views = self.addedViews.slice(0);\n        var matchingViews = [];\n\n        if (self.showByMediaQuery) {\n            for (let index = 0; index < views.length; index++) {\n                var viewId = views[index];\n                var state = self.viewsDictionary[viewId];\n                var rule = state && state.rule;\n                var matchResults = window.matchMedia(rule.conditionText);\n                var view = self.views[viewId];\n\n                if (matchResults.matches) {\n                    if (ids == true) {\n                        matchingViews.push(viewId);\n                    } else {\n                        matchingViews.push(view);\n                    }\n                }\n            }\n        }\n\n        return matchingViews;\n    }\n\n    self.ruleMatchesQuery = function (rule) {\n        var result = window.matchMedia(rule.conditionText);\n        return result.matches;\n    }\n\n    self.getViewsByStateName = function (stateName, matchQuery) {\n        var views = self.addedViews.slice(0);\n        var matchingViews = [];\n\n        if (self.showByMediaQuery) {\n\n            // find state name\n            for (let index = 0; index < views.length; index++) {\n                var viewId = views[index];\n                var state = self.viewsDictionary[viewId];\n                var rule = state.rule;\n                var mediaRule = state.mediaRule;\n                var view = self.views[viewId];\n                var viewStateName = self.getStyleRuleValue(mediaRule, self.STATE_NAME, state);\n                var stateFoundAtt = view.getAttribute(self.STATE_NAME) == state;\n                var matchesResults = false;\n\n                if (viewStateName == stateName) {\n                    if (matchQuery) {\n                        matchesResults = self.ruleMatchesQuery(rule);\n\n                        if (matchesResults) {\n                            matchingViews.push(view);\n                        }\n                    } else {\n                        matchingViews.push(view);\n                    }\n                }\n            }\n        }\n\n        return matchingViews;\n    }\n\n    self.getInitialView = function () {\n        var viewId = self.getInitialViewId();\n        viewId = viewId.replace(/[\\#?\\.?](.*)/, \"$\" + \"1\");\n        var view = self.getElement(viewId);\n        var postName = \"_Class\";\n\n        if (view == null && viewId && viewId.lastIndexOf(postName) != -1) {\n            view = self.getElement(viewId.replace(postName, \"\"));\n        }\n\n        return view;\n    }\n\n    self.getViewIndex = function (view) {\n        var viewIds = self.getViewIds();\n        var id = view ? view.id : null;\n        var index = id && viewIds ? viewIds.indexOf(id) : -1;\n\n        return index;\n    }\n\n    self.syncronizeViewToURL = function () {\n        var fragment = self.getHashFragment();\n\n        if (self.showByMediaQuery) {\n            var stateName = fragment;\n\n            if (stateName == null || stateName == \"\") {\n                var initialView = self.getInitialView();\n                stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;\n            }\n\n            self.showMediaQueryViewsByState(stateName);\n            return;\n        }\n\n        var view = self.getViewById(fragment);\n        var index = view ? self.getViewIndex(view) : 0;\n        if (index == -1) index = 0;\n        var currentView = self.hideViews(index);\n\n        if (self.supportsPopState && currentView) {\n\n            if (fragment == null) {\n                window.history.replaceState({\n                    name: currentView.id\n                }, null, \"#\" + currentView.id);\n            } else {\n                window.history.pushState({\n                    name: currentView.id\n                }, null, \"#\" + currentView.id);\n            }\n        }\n\n        self.setViewVariables(view);\n        return view;\n    }\n\n    /**\n     * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties\n     */\n    self.setViewVariables = function (view, overlay, parentView) {\n        if (view) {\n            if (self.currentView) {\n                self.lastView = self.currentView;\n            }\n            self.currentView = view;\n        }\n\n        if (overlay) {\n            if (self.currentOverlay) {\n                self.lastOverlay = self.currentOverlay;\n            }\n            self.currentOverlay = overlay;\n        }\n    }\n\n    self.getViewPreferenceBoolean = function (view, property, altValue) {\n        var computedStyle = window.getComputedStyle(view);\n        var value = computedStyle.getPropertyValue(property);\n        var type = typeof value;\n\n        if (value == \"true\" || (type == \"string\" && value.indexOf(\"true\") != -1)) {\n            return true;\n        } else if (value == \"\" && arguments.length == 3) {\n            return altValue;\n        }\n\n        return false;\n    }\n\n    self.getViewPreferenceValue = function (view, property, defaultValue) {\n        var value = window.getComputedStyle(view).getPropertyValue(property);\n\n        if (value === undefined) {\n            return defaultValue;\n        }\n\n        value = value.replace(/^[\\s\\\"]*/, \"\");\n        value = value.replace(/[\\s\\\"]*$/, \"\");\n        value = value.replace(/^[\\s\"]*(.*?)[\\s\"]*$/, function (match, capture) {\n            return capture;\n        });\n\n        return value;\n    }\n\n    self.getStyleRuleValue = function (cssRule, property) {\n        var value = cssRule ? cssRule.style.getPropertyValue(property) : null;\n\n        if (value === undefined) {\n            return null;\n        }\n\n        value = value.replace(/^[\\s\\\"]*/, \"\");\n        value = value.replace(/[\\s\\\"]*$/, \"\");\n        value = value.replace(/^[\\s\"]*(.*?)[\\s\"]*$/, function (match, capture) {\n            return capture;\n        });\n\n        return value;\n    }\n\n    /**\n     * Get the first defined value of property. Returns empty string if not defined\n     * @param {String} id id of element\n     * @param {String} property \n     */\n    self.getCSSPropertyValueForElement = function (id, property) {\n        var styleSheets = document.styleSheets;\n        var numOfStylesheets = styleSheets.length;\n        var values = [];\n        var selectorIDText = \"#\" + id;\n        var selectorClassText = \".\" + id + \"_Class\";\n        var value;\n\n        for (var i = 0; i < numOfStylesheets; i++) {\n            var styleSheet = styleSheets[i];\n            var cssRules = self.getStylesheetRules(styleSheet);\n            var numOfCSSRules = cssRules.length;\n            var cssRule;\n\n            for (var j = 0; j < numOfCSSRules; j++) {\n                cssRule = cssRules[j];\n\n                if (cssRule.media) {\n                    var mediaRules = cssRule.cssRules;\n                    var numOfMediaRules = mediaRules ? mediaRules.length : 0;\n\n                    for (var k = 0; k < numOfMediaRules; k++) {\n                        var mediaRule = mediaRules[k];\n\n                        if (mediaRule.selectorText == selectorIDText || mediaRule.selectorText == selectorClassText) {\n\n                            if (mediaRule.style && mediaRule.style.getPropertyValue(property) != \"\") {\n                                value = mediaRule.style.getPropertyValue(property);\n                                values.push(value);\n                            }\n                        }\n                    }\n                } else {\n\n                    if (cssRule.selectorText == selectorIDText || cssRule.selectorText == selectorClassText) {\n                        if (cssRule.style && cssRule.style.getPropertyValue(property) != \"\") {\n                            value = cssRule.style.getPropertyValue(property);\n                            values.push(value);\n                        }\n                    }\n                }\n            }\n        }\n\n        return values.pop();\n    }\n\n    self.getIsStyleDefined = function (id, property) {\n        var value = self.getCSSPropertyValueForElement(id, property);\n        return value !== undefined && value != \"\";\n    }\n\n    self.collectViews = function () {\n        var viewIds = self.getViewIds();\n\n        for (let index = 0; index < viewIds.length; index++) {\n            const id = viewIds[index];\n            const view = self.getElement(id);\n            self.views[id] = view;\n        }\n\n        self.viewIds = viewIds;\n    }\n\n    self.collectOverlays = function () {\n        var viewIds = self.getViewIds();\n        var ids = [];\n\n        for (let index = 0; index < viewIds.length; index++) {\n            const id = viewIds[index];\n            const view = self.getViewById(id);\n            const isOverlay = view && self.isOverlay(view);\n\n            if (isOverlay) {\n                ids.push(id);\n                self.overlays[id] = view;\n            }\n        }\n\n        self.overlayIds = ids;\n    }\n\n    self.collectMediaQueries = function () {\n        var viewIds = self.getViewIds();\n        var styleSheet = self.getApplicationStylesheet();\n        var cssRules = self.getStylesheetRules(styleSheet);\n        var numOfCSSRules = cssRules ? cssRules.length : 0;\n        var cssRule;\n        var id = viewIds.length ? viewIds[0] : \"\"; // single view\n        var selectorIDText = \"#\" + id;\n        var selectorClassText = \".\" + id + \"_Class\";\n        var viewsNotFound = viewIds.slice();\n        var viewsFound = [];\n        var selectorText = null;\n        var property = self.prefix + \"view-id\";\n        var stateName = self.prefix + \"state\";\n        var stateValue;\n\n        for (var j = 0; j < numOfCSSRules; j++) {\n            cssRule = cssRules[j];\n\n            if (cssRule.media) {\n                var mediaRules = cssRule.cssRules;\n                var numOfMediaRules = mediaRules ? mediaRules.length : 0;\n                var mediaViewInfoFound = false;\n                var mediaId = null;\n\n                for (var k = 0; k < numOfMediaRules; k++) {\n                    var mediaRule = mediaRules[k];\n\n                    selectorText = mediaRule.selectorText;\n\n                    if (selectorText == \".mediaViewInfo\" && mediaViewInfoFound == false) {\n\n                        mediaId = self.getStyleRuleValue(mediaRule, property);\n                        stateValue = self.getStyleRuleValue(mediaRule, stateName);\n\n                        selectorIDText = \"#\" + mediaId;\n                        selectorClassText = \".\" + mediaId + \"_Class\";\n\n                        // prevent duplicates from load and domcontentloaded events\n                        if (self.addedViews.indexOf(mediaId) == -1) {\n                            self.addView(mediaId, cssRule, mediaRule, stateValue);\n                        }\n\n                        viewsFound.push(mediaId);\n\n                        if (viewsNotFound.indexOf(mediaId) != -1) {\n                            viewsNotFound.splice(viewsNotFound.indexOf(mediaId));\n                        }\n\n                        mediaViewInfoFound = true;\n                    }\n\n                    if (selectorIDText == selectorText || selectorClassText == selectorText) {\n                        var styleObject = self.viewsDictionary[mediaId];\n                        if (styleObject) {\n                            styleObject.styleDeclaration = mediaRule;\n                        }\n                        break;\n                    }\n                }\n            } else {\n                selectorText = cssRule.selectorText.replace(/[#|\\s|*]?/g, \"\");\n\n                if (viewIds.indexOf(selectorText) != -1) {\n                    self.addView(selectorText, cssRule, null, stateValue);\n\n                    if (viewsNotFound.indexOf(selectorText) != -1) {\n                        viewsNotFound.splice(viewsNotFound.indexOf(selectorText));\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        if (viewsNotFound.length) {\n            console.log(\"Could not find the following views:\" + viewsNotFound.join(\",\") + \"\");\n            console.log(\"Views found:\" + viewsFound.join(\",\") + \"\");\n        }\n    }\n\n    /**\n     * Adds a view. A view object contains the id of the view and the style rule\n     * Use enableMediaQuery(rule) to enable\n     * An array of view names are in self.addedViews array\n     */\n    self.addView = function (viewId, cssRule, mediaRule, stateName) {\n        var state = {\n            name: viewId,\n            rule: cssRule,\n            id: viewId,\n            mediaRule: mediaRule,\n            stateName: stateName\n        };\n        self.addedViews.push(viewId);\n        self.viewsDictionary[viewId] = state;\n        self.mediaQueryDictionary[viewId] = cssRule;\n    }\n\n    self.hasView = function (name) {\n\n        if (self.addedViews.indexOf(name) != -1) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Go to view by id. Views are added in addView()\n     * @param {String} id id of view in current\n     * @param {Boolean} maintainPreviousState if true then do not hide other views\n     * @param {String} parent id of parent view\n     */\n    self.goToView = function (id, maintainPreviousState, parent) {\n        var state = self.viewsDictionary[id];\n\n        if (state) {\n            if (maintainPreviousState == false || maintainPreviousState == null) {\n                self.hideViews();\n            }\n            self.enableMediaQuery(state.rule);\n            self.updateViewLabel();\n            self.updateURL();\n        } else {\n            var event = new Event(self.STATE_NOT_FOUND);\n            self.stateName = id;\n            window.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * Go to the view in the event targets CSS variable\n     */\n    self.goToTargetView = function (event) {\n        var button = event.currentTarget;\n        var buttonComputedStyles = getComputedStyle(button);\n        var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix + \"action-target\").trim();\n        var animation = buttonComputedStyles.getPropertyValue(self.prefix + \"animation\").trim();\n        var targetType = buttonComputedStyles.getPropertyValue(self.prefix + \"action-type\").trim();\n        var targetView = self.application ? null : self.getElement(actionTargetValue);\n        var targetState = targetView ? self.getStateNameByViewId(targetView.id) : null;\n        var actionTargetStyles = targetView ? targetView.style : null;\n        var state = self.viewsDictionary[actionTargetValue];\n\n        // navigate to page\n        if (self.application == false || targetType == \"page\") {\n            document.location.href = \"./\" + actionTargetValue;\n            return;\n        }\n\n        // if view is found\n        if (targetView) {\n\n            if (self.currentOverlay) {\n                self.removeOverlay(false);\n            }\n\n            if (self.showByMediaQuery) {\n                var stateName = targetState;\n\n                if (stateName == null || stateName == \"\") {\n                    var initialView = self.getInitialView();\n                    stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;\n                }\n                self.showMediaQueryViewsByState(stateName, event);\n                return;\n            }\n\n            // add animation set in event target style declaration\n            if (animation && self.supportAnimations) {\n                self.crossFade(self.currentView, targetView, false, animation);\n            } else {\n                self.setViewVariables(self.currentView);\n                self.hideViews();\n                self.enableMediaQuery(state.rule);\n                self.scaleViewIfNeeded(targetView);\n                self.centerView(targetView);\n                self.updateViewLabel();\n                self.updateURL();\n            }\n        } else {\n            var stateEvent = new Event(self.STATE_NOT_FOUND);\n            self.stateName = name;\n            window.dispatchEvent(stateEvent);\n        }\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Cross fade between views\n     **/\n    self.crossFade = function (from, to, update, animation) {\n        var targetIndex = to.parentNode\n        var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);\n        var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);\n\n        if (from.parentNode == to.parentNode) {\n            var reverse = self.getReverseAnimation(animation);\n            var duration = self.getAnimationDuration(animation, true);\n\n            // if target view is above (higher index)\n            // then fade in target view \n            // and after fade in then hide previous view instantly\n            if (fromIndex < toIndex) {\n                self.setElementAnimation(from, null);\n                self.setElementAnimation(to, null);\n                self.showViewByMediaQuery(to);\n                self.fadeIn(to, update, animation);\n\n                setTimeout(function () {\n                    self.setElementAnimation(to, null);\n                    self.setElementAnimation(from, null);\n                    self.hideView(from);\n                    self.updateURL();\n                    self.setViewVariables(to);\n                    self.updateViewLabel();\n                }, duration)\n            }\n            // if target view is on bottom\n            // then show target view instantly \n            // and fade out current view\n            else if (fromIndex > toIndex) {\n                self.setElementAnimation(to, null);\n                self.setElementAnimation(from, null);\n                self.showViewByMediaQuery(to);\n                self.fadeOut(from, update, reverse);\n\n                setTimeout(function () {\n                    self.setElementAnimation(to, null);\n                    self.setElementAnimation(from, null);\n                    self.hideView(from);\n                    self.updateURL();\n                    self.setViewVariables(to);\n                }, duration)\n            }\n        }\n    }\n\n    self.fadeIn = function (element, update, animation) {\n        self.showViewByMediaQuery(element);\n\n        if (update) {\n            self.updateURL(element);\n\n            element.addEventListener(\"animationend\", function (event) {\n                element.style.animation = null;\n                self.setViewVariables(element);\n                self.updateViewLabel();\n                element.removeEventListener(\"animationend\", arguments.callee);\n            });\n        }\n\n        self.setElementAnimation(element, null);\n\n        element.style.animation = animation;\n    }\n\n    self.fadeOutCurrentView = function (animation, update) {\n        if (self.currentView) {\n            self.fadeOut(self.currentView, update, animation);\n        }\n        if (self.currentOverlay) {\n            self.fadeOut(self.currentOverlay, update, animation);\n        }\n    }\n\n    self.fadeOut = function (element, update, animation) {\n        if (update) {\n            element.addEventListener(\"animationend\", function (event) {\n                element.style.animation = null;\n                self.hideView(element);\n                element.removeEventListener(\"animationend\", arguments.callee);\n            });\n        }\n\n        element.style.animationPlayState = \"paused\";\n        element.style.animation = animation;\n        element.style.animationPlayState = \"running\";\n    }\n\n    self.getReverseAnimation = function (animation) {\n        if (animation && animation.indexOf(\"reverse\") == -1) {\n            animation += \" reverse\";\n        }\n\n        return animation;\n    }\n\n    /**\n     * Get duration in animation string\n     * @param {String} animation animation value\n     * @param {Boolean} inMilliseconds length in milliseconds if true\n     */\n    self.getAnimationDuration = function (animation, inMilliseconds) {\n        var duration = 0;\n        var expression = /.+(\\d\\.\\d)s.+/;\n\n        if (animation && animation.match(expression)) {\n            duration = parseFloat(animation.replace(expression, \"$\" + \"1\"));\n            if (duration && inMilliseconds) duration = duration * 1000;\n        }\n\n        return duration;\n    }\n\n    self.setElementAnimation = function (element, animation, priority) {\n        element.style.setProperty(\"animation\", animation, \"important\");\n    }\n\n    self.getElement = function (id) {\n        var elementId = id ? id.trim() : id;\n        var element = elementId ? document.getElementById(elementId) : null;\n\n        return element;\n    }\n\n    self.resizeHandler = function (event) {\n\n        if (self.showByMediaQuery) {\n            if (self.enableDeepLinking) {\n                var stateName = self.getHashFragment();\n\n                if (stateName == null || stateName == \"\") {\n                    var initialView = self.getInitialView();\n                    stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;\n                }\n                self.showMediaQueryViewsByState(stateName, event);\n            }\n        } else {\n            var visibleViews = self.getVisibleViews();\n\n            for (let index = 0; index < visibleViews.length; index++) {\n                var view = visibleViews[index];\n                self.scaleViewIfNeeded(view);\n            }\n        }\n\n        window.dispatchEvent(new Event(self.APPLICATION_RESIZE));\n    }\n\n    self.scaleViewIfNeeded = function (view) {\n\n        if (self.scaleViewsOnResize) {\n            if (view == null) {\n                view = self.getVisibleView();\n            }\n\n            var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME) == \"false\" ? false : true;\n\n            if (isViewScaled) {\n                self.scaleViewToFit(view, true);\n            } else {\n                self.scaleViewToActualSize(view);\n            }\n        } else if (view) {\n            self.centerView(view);\n        }\n    }\n\n    self.centerView = function (view) {\n\n        if (self.scaleViewsToFit) {\n            self.scaleViewToFit(view, true);\n        } else {\n            self.scaleViewToActualSize(view); // for centering support for now\n        }\n    }\n\n    self.preventDoubleClick = function (event) {\n        event.stopImmediatePropagation();\n    }\n\n    self.getHashFragment = function () {\n        var value = window.location.hash ? window.location.hash.replace(\"#\", \"\") : \"\";\n        return value;\n    }\n\n    self.showBlockElement = function (view) {\n        view.style.display = \"block\";\n    }\n\n    self.hideElement = function (view) {\n        view.style.display = \"none\";\n    }\n\n    self.showStateFunction = null;\n\n    self.showMediaQueryViewsByState = function (state, event) {\n        // browser will hide and show by media query (small, medium, large)\n        // but if multiple views exists at same size user may want specific view\n        // if showStateFunction is defined that is called with state fragment and user can show or hide each media matching view by returning true or false\n        // if showStateFunction is not defined and state is defined and view has a defined state that matches then show that and hide other matching views\n        // if no state is defined show view \n        // an viewChanging event is dispatched before views are shown or hidden that can be prevented \n\n        // get all matched queries\n        // if state name is specified then show that view and hide other views\n        // if no state name is defined then show\n        var matchedViews = self.getMatchingViews();\n        var matchMediaQuery = true;\n        var foundViews = self.getViewsByStateName(state, matchMediaQuery);\n        var showViews = [];\n        var hideViews = [];\n\n        // loop views that match media query \n        for (let index = 0; index < matchedViews.length; index++) {\n            var view = matchedViews[index];\n\n            // let user determine visible view\n            if (self.showStateFunction != null) {\n                if (self.showStateFunction(view, state)) {\n                    showViews.push(view);\n                } else {\n                    hideViews.push(view);\n                }\n            }\n            // state was defined so check if view matches state\n            else if (foundViews.length) {\n\n                if (foundViews.indexOf(view) != -1) {\n                    showViews.push(view);\n                } else {\n                    hideViews.push(view);\n                }\n            }\n            // if no state names are defined show view (define unused state name to exclude)\n            else if (state == null || state == \"\") {\n                showViews.push(view);\n            }\n        }\n\n        if (showViews.length) {\n            var viewChangingEvent = new Event(self.VIEW_CHANGING);\n            viewChangingEvent.showViews = showViews;\n            viewChangingEvent.hideViews = hideViews;\n            window.dispatchEvent(viewChangingEvent);\n\n            if (viewChangingEvent.defaultPrevented == false) {\n                for (var index = 0; index < hideViews.length; index++) {\n                    var view = hideViews[index];\n\n                    if (self.isOverlay(view)) {\n                        self.removeOverlay(view);\n                    } else {\n                        self.hideElement(view);\n                    }\n                }\n\n                for (var index = 0; index < showViews.length; index++) {\n                    var view = showViews[index];\n\n                    if (index == showViews.length - 1) {\n                        self.clearDisplay(view);\n                        self.setViewOptions(view);\n                        self.setViewVariables(view);\n                        self.centerView(view);\n                        self.updateURLState(view, state);\n                    }\n                }\n            }\n\n            var viewChangeEvent = new Event(self.VIEW_CHANGE);\n            viewChangeEvent.showViews = showViews;\n            viewChangeEvent.hideViews = hideViews;\n            window.dispatchEvent(viewChangeEvent);\n        }\n\n    }\n\n    self.clearDisplay = function (view) {\n        view.style.setProperty(\"display\", null);\n    }\n\n    self.hashChangeHandler = function (event) {\n        var fragment = self.getHashFragment();\n        var view = self.getViewById(fragment);\n\n        if (self.showByMediaQuery) {\n            var stateName = fragment;\n\n            if (stateName == null || stateName == \"\") {\n                var initialView = self.getInitialView();\n                stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;\n            }\n            self.showMediaQueryViewsByState(stateName);\n        } else {\n            if (view) {\n                self.hideViews();\n                self.showView(view);\n                self.setViewVariables(view);\n                self.updateViewLabel();\n\n                window.dispatchEvent(new Event(self.VIEW_CHANGE));\n            } else {\n                window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));\n            }\n        }\n    }\n\n    self.popStateHandler = function (event) {\n        var state = event.state;\n        var fragment = state ? state.name : window.location.hash;\n        var view = self.getViewById(fragment);\n\n        if (view) {\n            self.hideViews();\n            self.showView(view);\n            self.updateViewLabel();\n        } else {\n            window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));\n        }\n    }\n\n    self.doubleClickHandler = function (event) {\n        var view = self.getVisibleView();\n        var scaleValue = view ? self.getViewScaleValue(view) : 1;\n        var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;\n        var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;\n        var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;\n        var scaleToFitType = self.scaleToFitType;\n\n        // Three scenarios\n        // - scale to fit on double click\n        // - set scale to actual size on double click\n        // - switch between scale to fit and actual page size\n\n        if (scaleToFitType == \"width\") {\n            scaleNeededToFit = scaleNeededToFitWidth;\n        } else if (scaleToFitType == \"height\") {\n            scaleNeededToFit = scaleNeededToFitHeight;\n        }\n\n        // if scale and actual size enabled then switch between\n        if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {\n            var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);\n            var isScaled = false;\n\n            // if scale is not 1 then view needs scaling\n            if (scaleNeededToFit != 1) {\n\n                // if current scale is at 1 it is at actual size\n                // scale it to fit\n                if (scaleValue == 1) {\n                    self.scaleViewToFit(view);\n                    isScaled = true;\n                } else {\n                    // scale is not at 1 so switch to actual size\n                    self.scaleViewToActualSize(view);\n                    isScaled = false;\n                }\n            } else {\n                // view is smaller than viewport \n                // so scale to fit() is scale actual size\n                // actual size and scaled size are the same\n                // but call scale to fit to retain centering\n                self.scaleViewToFit(view);\n                isScaled = false;\n            }\n\n            view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled + \"\");\n            isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);\n        } else if (self.scaleToFitOnDoubleClick) {\n            self.scaleViewToFit(view);\n        } else if (self.actualSizeOnDoubleClick) {\n            self.scaleViewToActualSize(view);\n        }\n\n    }\n\n    self.scaleViewToFit = function (view) {\n        return self.setViewScaleValue(view, true);\n    }\n\n    self.scaleViewToActualSize = function (view) {\n        self.setViewScaleValue(view, false, 1);\n    }\n\n    self.onloadHandler = function (event) {\n        self.initialize();\n    }\n\n    self.setElementHTML = function (id, value) {\n        var element = self.getElement(id);\n        element.innerHTML = value;\n    }\n\n    self.getStackArray = function (error) {\n        var value = \"\";\n\n        if (error == null) {\n            try {\n                error = new Error(\"Stack\");\n            } catch (e) {\n\n            }\n        }\n\n        if (\"stack\" in error) {\n            value = error.stack;\n            var methods = value.split(/\\n/g);\n\n            var newArray = methods ? methods.map(function (value, index, array) {\n                value = value.replace(/\\@.*/, \"\");\n                return value;\n            }) : null;\n\n            if (newArray && newArray[0].includes(\"getStackTrace\")) {\n                newArray.shift();\n            }\n            if (newArray && newArray[0].includes(\"getStackArray\")) {\n                newArray.shift();\n            }\n            if (newArray && newArray[0] == \"\") {\n                newArray.shift();\n            }\n\n            return newArray;\n        }\n\n        return null;\n    }\n\n    self.log = function (value) {\n        console.log.apply(this, [value]);\n    }\n\n    // initialize on load\n    // sometimes the body size is 0 so we call this now and again later\n    window.addEventListener(\"load\", self.onloadHandler);\n    window.document.addEventListener(\"DOMContentLoaded\", self.onloadHandler);\n}\n\nwindow.application = new Application();\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });